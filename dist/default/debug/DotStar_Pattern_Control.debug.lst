

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Nov 13 22:15:31 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    83                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           	psect	idataCOMRAM
    86  001A3A                     __pidataCOMRAM:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _MaxBrightness
    90  001A3A  1F                 	db	31
    91                           
    92                           	psect	idataBANK0
    93  001A2E                     __pidataBANK0:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _PatternConfigs
    97  001A2E  00                 	db	0
    98  001A2F  FF                 	db	255
    99  001A30  1F                 	db	31
   100  001A31  00                 	db	0
   101  001A32  01                 	db	1
   102                           
   103                           	psect	idataBANK1
   104  00175C                     __pidataBANK1:
   105                           	opt stack 0
   106                           
   107                           ;initializer for _GenColors
   108  00175C  0000               	dw	0
   109  00175E  00FF               	dw	255
   110  001760  A500               	dw	42240
   111  001762  00FF               	dw	255
   112  001764  FF00               	dw	65280
   113  001766  00FF               	dw	255
   114  001768  8000               	dw	32768
   115  00176A  0080               	dw	128
   116  00176C  FF00               	dw	65280
   117  00176E  0000               	dw	0
   118  001770  8000               	dw	32768
   119  001772  0000               	dw	0
   120  001774  FFFF               	dw	65535
   121  001776  0000               	dw	0
   122  001778  8080               	dw	32896
   123  00177A  0000               	dw	0
   124  00177C  00FF               	dw	255
   125  00177E  0000               	dw	0
   126  001780  0080               	dw	128
   127  001782  0000               	dw	0
   128  001784  00FF               	dw	255
   129  001786  00FF               	dw	255
   130  001788  0080               	dw	128
   131  00178A  0080               	dw	128
   132  00178C  0000               	dw	0
   133  00178E  0080               	dw	128
   134                           
   135                           	psect	smallconst
   136  000300                     __psmallconst:
   137                           	opt stack 0
   138  000300  00                 	db	0
   139  000301                     _BitNum2SetMask:
   140                           	opt stack 0
   141  000301  0001               	dw	1
   142  000303  0002               	dw	2
   143  000305  0004               	dw	4
   144  000307  0008               	dw	8
   145  000309  0010               	dw	16
   146  00030B  0020               	dw	32
   147  00030D  0040               	dw	64
   148  00030F  0080               	dw	128
   149  000311  0100               	dw	256
   150  000313  0200               	dw	512
   151  000315  0400               	dw	1024
   152  000317  0800               	dw	2048
   153  000319  1000               	dw	4096
   154  00031B  2000               	dw	8192
   155  00031D  4000               	dw	16384
   156  00031F  8000               	dw	32768
   157  000321                     __end_of_BitNum2SetMask:
   158                           	opt stack 0
   159  000321                     _Timer2PostFunc:
   160                           	opt stack 0
   161  000321  7C                 	db	low _PostPatternControlService
   162  000322  19                 	db	high _PostPatternControlService
   163  000323  DC                 	db	low _PostSPI32ControlService
   164  000324  18                 	db	high _PostSPI32ControlService
   165  000325  92                 	db	low _PostToggleService
   166  000326  19                 	db	high _PostToggleService
   167  000327  00                 	db	0
   168  000328  00                 	db	0
   169  000329  00                 	db	0
   170  00032A  00                 	db	0
   171  00032B  00                 	db	0
   172  00032C  00                 	db	0
   173  00032D  00                 	db	0
   174  00032E  00                 	db	0
   175  00032F  00                 	db	0
   176  000330  00                 	db	0
   177  000331  00                 	db	0
   178  000332  00                 	db	0
   179  000333  00                 	db	0
   180  000334  00                 	db	0
   181  000335  00                 	db	0
   182  000336  00                 	db	0
   183  000337  00                 	db	0
   184  000338  00                 	db	0
   185  000339  00                 	db	0
   186  00033A  00                 	db	0
   187  00033B  00                 	db	0
   188  00033C  00                 	db	0
   189  00033D  00                 	db	0
   190  00033E  00                 	db	0
   191  00033F  00                 	db	0
   192  000340  00                 	db	0
   193  000341                     __end_of_Timer2PostFunc:
   194                           	opt stack 0
   195  000341                     _ServDescList:
   196                           	opt stack 0
   197  000341  74                 	db	low _InitPatternControlService
   198  000342  14                 	db	high _InitPatternControlService
   199  000343  9C                 	db	low _RunPatternControlService
   200  000344  0C                 	db	high _RunPatternControlService
   201  000345  EC                 	db	low _InitSPI32ControlService
   202  000346  16                 	db	high _InitSPI32ControlService
   203  000347  6A                 	db	low _RunSPI32ControlService
   204  000348  05                 	db	high _RunSPI32ControlService
   205  000349  EC                 	db	low _InitToggleService
   206  00034A  15                 	db	high _InitToggleService
   207  00034B  72                 	db	low _RunToggleService
   208  00034C  16                 	db	high _RunToggleService
   209  00034D  F6                 	db	low _InitCan_XmitService
   210  00034E  17                 	db	high _InitCan_XmitService
   211  00034F  26                 	db	low _RunCan_XmitService
   212  000350  18                 	db	high _RunCan_XmitService
   213  000351                     __end_of_ServDescList:
   214                           	opt stack 0
   215  000351                     _Nybble2MSBitNum:
   216                           	opt stack 0
   217  000351  00                 	db	0
   218  000352  01                 	db	1
   219  000353  01                 	db	1
   220  000354  02                 	db	2
   221  000355  02                 	db	2
   222  000356  02                 	db	2
   223  000357  02                 	db	2
   224  000358  03                 	db	3
   225  000359  03                 	db	3
   226  00035A  03                 	db	3
   227  00035B  03                 	db	3
   228  00035C  03                 	db	3
   229  00035D  03                 	db	3
   230  00035E  03                 	db	3
   231  00035F  03                 	db	3
   232  000360                     __end_of_Nybble2MSBitNum:
   233                           	opt stack 0
   234  000360                     _EventQueues:
   235                           	opt stack 0
   236  000360  A2                 	db	low _Queue0
   237  000361  00                 	db	high _Queue0
   238  000362  04                 	db	4
   239  000363  AE                 	db	low _Queue1
   240  000364  00                 	db	high _Queue1
   241  000365  04                 	db	4
   242  000366  3D                 	db	low _Queue2
   243  000367  00                 	db	high _Queue2
   244  000368  04                 	db	4
   245  000369  49                 	db	low _Queue3
   246  00036A  00                 	db	high _Queue3
   247  00036B  04                 	db	4
   248  00036C                     __end_of_EventQueues:
   249                           	opt stack 0
   250  00036C                     _ES_EventList:
   251                           	opt stack 0
   252  00036C  34                 	db	low _Check4Keystroke
   253  00036D  1A                 	db	high _Check4Keystroke
   254  00036E                     __end_of_ES_EventList:
   255                           	opt stack 0
   256  00036E                     _DistList00:
   257                           	opt stack 0
   258  00036E  7C                 	db	low _PostPatternControlService
   259  00036F  19                 	db	high _PostPatternControlService
   260  000370  DC                 	db	low _PostSPI32ControlService
   261  000371  18                 	db	high _PostSPI32ControlService
   262  000372                     __end_of_DistList00:
   263                           	opt stack 0
   264  0000                     _RXF0SIDH	set	3840
   265  0000                     _RXF0SIDL	set	3841
   266  0000                     _RXM0SIDH	set	3864
   267  0000                     _RXM0SIDL	set	3865
   268  0000                     _TXB0CONbits	set	3904
   269  0000                     _TXB0D0	set	3910
   270  0000                     _TXB0DLC	set	3909
   271  0000                     _TXB0SIDH	set	3905
   272  0000                     _TXB0SIDL	set	3906
   273  0000                     _ADCON1	set	4033
   274  0000                     _BRGCON1bits	set	3952
   275  0000                     _BRGCON2bits	set	3953
   276  0000                     _BRGCON3bits	set	3954
   277  0000                     _CANCON	set	3951
   278  0000                     _CANSTAT	set	3950
   279  0000                     _CANSTATbits	set	3950
   280  0000                     _CCP1CON	set	4029
   281  0000                     _CCPR1H	set	4031
   282  0000                     _CCPR1L	set	4030
   283  0000                     _ECANCON	set	3959
   284  0000                     _INTCON	set	4082
   285  0000                     _LATA	set	3977
   286  0000                     _LATB	set	3978
   287  0000                     _LATC	set	3979
   288  0000                     _PIE1	set	3997
   289  0000                     _PIE3	set	4003
   290  0000                     _PORTA	set	3968
   291  0000                     _PORTB	set	3969
   292  0000                     _PORTC	set	3970
   293  0000                     _RXB0CON	set	3936
   294  0000                     _RXB0CONbits	set	3936
   295  0000                     _SSPADD	set	4040
   296  0000                     _SSPBUF	set	4041
   297  0000                     _SSPCON1	set	4038
   298  0000                     _SSPSTAT	set	4039
   299  0000                     _T1CON	set	4045
   300  0000                     _TRISA	set	3986
   301  0000                     _TRISBbits	set	3987
   302  0000                     _TRISC	set	3988
   303  0000                     _CCP1IF	set	31986
   304  0000                     _GIE	set	32663
   305  0000                     _IRCF0	set	32412
   306  0000                     _IRCF1	set	32413
   307  0000                     _IRCF2	set	32414
   308  0000                     _LATA0	set	31816
   309  0000                     _LATA1	set	31817
   310  0000                     _RXB0IE	set	32024
   311  0000                     _RXB0IF	set	32032
   312  0000                     _SCS1	set	32409
   313  0000                     _SSPIE	set	31979
   314  0000                     _SSPIF	set	31987
   315  0000                     _TXB0IE	set	32026
   316  0000                     _TXB0IF	set	32034
   317  000372                     STR_1:
   318  000372  46                 	db	70	;'F'
   319  000373  61                 	db	97	;'a'
   320  000374  69                 	db	105	;'i'
   321  000375  6C                 	db	108	;'l'
   322  000376  65                 	db	101	;'e'
   323  000377  64                 	db	100	;'d'
   324  000378  20                 	db	32
   325  000379  6F                 	db	111	;'o'
   326  00037A  6E                 	db	110	;'n'
   327  00037B  20                 	db	32
   328  00037C  61                 	db	97	;'a'
   329  00037D  74                 	db	116	;'t'
   330  00037E  74                 	db	116	;'t'
   331  00037F  65                 	db	101	;'e'
   332  000380  6D                 	db	109	;'m'
   333  000381  70                 	db	112	;'p'
   334  000382  74                 	db	116	;'t'
   335  000383  20                 	db	32
   336  000384  74                 	db	116	;'t'
   337  000385  6F                 	db	111	;'o'
   338  000386  20                 	db	32
   339  000387  50                 	db	80	;'P'
   340  000388  6F                 	db	111	;'o'
   341  000389  73                 	db	115	;'s'
   342  00038A  74                 	db	116	;'t'
   343  00038B  0A                 	db	10
   344  00038C  00                 	db	0
   345  00038D                     STR_2:
   346  00038D  46                 	db	70	;'F'
   347  00038E  61                 	db	97	;'a'
   348  00038F  69                 	db	105	;'i'
   349  000390  6C                 	db	108	;'l'
   350  000391  65                 	db	101	;'e'
   351  000392  64                 	db	100	;'d'
   352  000393  20                 	db	32
   353  000394  6F                 	db	111	;'o'
   354  000395  6E                 	db	110	;'n'
   355  000396  20                 	db	32
   356  000397  4E                 	db	78	;'N'
   357  000398  55                 	db	85	;'U'
   358  000399  4C                 	db	76	;'L'
   359  00039A  4C                 	db	76	;'L'
   360  00039B  20                 	db	32
   361  00039C  70                 	db	112	;'p'
   362  00039D  6F                 	db	111	;'o'
   363  00039E  69                 	db	105	;'i'
   364  00039F  6E                 	db	110	;'n'
   365  0003A0  74                 	db	116	;'t'
   366  0003A1  65                 	db	101	;'e'
   367  0003A2  72                 	db	114	;'r'
   368  0003A3  0A                 	db	10
   369  0003A4  00                 	db	0
   370  0003A5                     STR_3:
   371  0003A5  46                 	db	70	;'F'
   372  0003A6  61                 	db	97	;'a'
   373  0003A7  69                 	db	105	;'i'
   374  0003A8  6C                 	db	108	;'l'
   375  0003A9  65                 	db	101	;'e'
   376  0003AA  64                 	db	100	;'d'
   377  0003AB  20                 	db	32
   378  0003AC  49                 	db	73	;'I'
   379  0003AD  6E                 	db	110	;'n'
   380  0003AE  69                 	db	105	;'i'
   381  0003AF  74                 	db	116	;'t'
   382  0003B0  69                 	db	105	;'i'
   383  0003B1  61                 	db	97	;'a'
   384  0003B2  6C                 	db	108	;'l'
   385  0003B3  69                 	db	105	;'i'
   386  0003B4  7A                 	db	122	;'z'
   387  0003B5  61                 	db	97	;'a'
   388  0003B6  74                 	db	116	;'t'
   389  0003B7  69                 	db	105	;'i'
   390  0003B8  6F                 	db	111	;'o'
   391  0003B9  6E                 	db	110	;'n'
   392  0003BA  0A                 	db	10
   393  0003BB  00                 	db	0
   394  0003BC                     STR_4:
   395  0003BC  4F                 	db	79	;'O'
   396  0003BD  74                 	db	116	;'t'
   397  0003BE  68                 	db	104	;'h'
   398  0003BF  65                 	db	101	;'e'
   399  0003C0  72                 	db	114	;'r'
   400  0003C1  20                 	db	32
   401  0003C2  46                 	db	70	;'F'
   402  0003C3  61                 	db	97	;'a'
   403  0003C4  69                 	db	105	;'i'
   404  0003C5  6C                 	db	108	;'l'
   405  0003C6  75                 	db	117	;'u'
   406  0003C7  72                 	db	114	;'r'
   407  0003C8  65                 	db	101	;'e'
   408  0003C9  0A                 	db	10
   409  0003CA  00                 	db	0
   410                           
   411                           ; #config settings
   412  0003CB  00                 	db	0	; dummy byte at the end
   413  0000                     
   414                           	psect	cinit
   415  0010AE                     __pcinit:
   416                           	opt stack 0
   417  0010AE                     start_initialization:
   418                           	opt stack 0
   419  0010AE                     __initialization:
   420                           	opt stack 0
   421                           
   422                           ; Initialize objects allocated to BANK1 (52 bytes)
   423                           ; load TBLPTR registers with __pidataBANK1
   424  0010AE  0E5C               	movlw	low __pidataBANK1
   425  0010B0  6EF6               	movwf	tblptrl,c
   426  0010B2  0E17               	movlw	high __pidataBANK1
   427  0010B4  6EF7               	movwf	tblptrh,c
   428  0010B6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   429  0010B8  6EF8               	movwf	tblptru,c
   430  0010BA  EE01  F080         	lfsr	0,__pdataBANK1
   431  0010BE  EE10 F034          	lfsr	1,52
   432  0010C2                     copy_data0:
   433  0010C2  0009               	tblrd		*+
   434  0010C4  CFF5 FFEE          	movff	tablat,postinc0
   435  0010C8  50E5               	movf	postdec1,w,c
   436  0010CA  50E1               	movf	fsr1l,w,c
   437  0010CC  E1FA               	bnz	copy_data0
   438                           
   439                           ; Initialize objects allocated to BANK0 (5 bytes)
   440                           ; load TBLPTR registers with __pidataBANK0
   441  0010CE  0E2E               	movlw	low __pidataBANK0
   442  0010D0  6EF6               	movwf	tblptrl,c
   443  0010D2  0E1A               	movlw	high __pidataBANK0
   444  0010D4  6EF7               	movwf	tblptrh,c
   445  0010D6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   446  0010D8  6EF8               	movwf	tblptru,c
   447  0010DA  EE00  F0F8         	lfsr	0,__pdataBANK0
   448  0010DE  EE10 F005          	lfsr	1,5
   449  0010E2                     copy_data1:
   450  0010E2  0009               	tblrd		*+
   451  0010E4  CFF5 FFEE          	movff	tablat,postinc0
   452  0010E8  50E5               	movf	postdec1,w,c
   453  0010EA  50E1               	movf	fsr1l,w,c
   454  0010EC  E1FA               	bnz	copy_data1
   455                           
   456                           ; Initialize objects allocated to COMRAM (1 bytes)
   457                           ; load TBLPTR registers with __pidataCOMRAM
   458  0010EE  0E3A               	movlw	low __pidataCOMRAM
   459  0010F0  6EF6               	movwf	tblptrl,c
   460  0010F2  0E1A               	movlw	high __pidataCOMRAM
   461  0010F4  6EF7               	movwf	tblptrh,c
   462  0010F6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   463  0010F8  6EF8               	movwf	tblptru,c
   464  0010FA  0009               	tblrd		*+	;fetch initializer
   465  0010FC  CFF5 F055          	movff	tablat,__pdataCOMRAM
   466                           
   467                           ; Clear objects allocated to BANK2 (248 bytes)
   468  001100  EE02  F000         	lfsr	0,__pbssBANK2
   469  001104  0EF8               	movlw	248
   470  001106                     clear_0:
   471  001106  6AEE               	clrf	postinc0,c
   472  001108  06E8               	decf	wreg,f,c
   473  00110A  E1FD               	bnz	clear_0
   474                           
   475                           ; Clear objects allocated to BANK1 (128 bytes)
   476  00110C  EE01  F000         	lfsr	0,__pbssBANK1
   477  001110  0E80               	movlw	128
   478  001112                     clear_1:
   479  001112  6AEE               	clrf	postinc0,c
   480  001114  06E8               	decf	wreg,f,c
   481  001116  E1FD               	bnz	clear_1
   482                           
   483                           ; Clear objects allocated to BANK0 (93 bytes)
   484  001118  EE00  F060         	lfsr	0,__pbssBANK0
   485  00111C  0E5D               	movlw	93
   486  00111E                     clear_2:
   487  00111E  6AEE               	clrf	postinc0,c
   488  001120  06E8               	decf	wreg,f,c
   489  001122  E1FD               	bnz	clear_2
   490                           
   491                           ; Clear objects allocated to COMRAM (33 bytes)
   492  001124  EE00  F034         	lfsr	0,__pbssCOMRAM
   493  001128  0E21               	movlw	33
   494  00112A                     clear_3:
   495  00112A  6AEE               	clrf	postinc0,c
   496  00112C  06E8               	decf	wreg,f,c
   497  00112E  E1FD               	bnz	clear_3
   498  001130                     end_of_initialization:
   499                           	opt stack 0
   500  001130                     __end_of__initialization:
   501                           	opt stack 0
   502  001130  9056               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   503  001132  9256               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   504  001134  0E00               	movlw	low (__Lmediumconst shr (0+16))
   505  001136  6EF8               	movwf	tblptru,c
   506  001138  0100               	movlb	0
   507  00113A  EF9F  F008         	goto	_main	;jump to C main() function
   508                           tblptru	equ	0xFF8
   509                           tblptrh	equ	0xFF7
   510                           tblptrl	equ	0xFF6
   511                           tablat	equ	0xFF5
   512                           postinc0	equ	0xFEE
   513                           wreg	equ	0xFE8
   514                           postdec1	equ	0xFE5
   515                           fsr1l	equ	0xFE1
   516                           
   517                           	psect	bssCOMRAM
   518  000034                     __pbssCOMRAM:
   519                           	opt stack 0
   520  000034                     ISR@LastTime:
   521                           	opt stack 0
   522  000034                     	ds	2
   523  000036                     ISR@NextTime:
   524                           	opt stack 0
   525  000036                     	ds	2
   526  000038                     _SysTickCounter:
   527                           	opt stack 0
   528  000038                     	ds	2
   529  00003A                     __PRIMASK_temp:
   530                           	opt stack 0
   531  00003A                     	ds	2
   532  00003C                     	ds	1
   533  00003D                     _Queue2:
   534                           	opt stack 0
   535  00003D                     	ds	12
   536  000049                     _Queue3:
   537                           	opt stack 0
   538  000049                     	ds	12
   539                           tblptru	equ	0xFF8
   540                           tblptrh	equ	0xFF7
   541                           tblptrl	equ	0xFF6
   542                           tablat	equ	0xFF5
   543                           postinc0	equ	0xFEE
   544                           wreg	equ	0xFE8
   545                           postdec1	equ	0xFE5
   546                           fsr1l	equ	0xFE1
   547                           
   548                           	psect	dataCOMRAM
   549  000055                     __pdataCOMRAM:
   550                           	opt stack 0
   551  000055                     	ds	1
   552                           tblptru	equ	0xFF8
   553                           tblptrh	equ	0xFF7
   554                           tblptrl	equ	0xFF6
   555                           tablat	equ	0xFF5
   556                           postinc0	equ	0xFEE
   557                           wreg	equ	0xFE8
   558                           postdec1	equ	0xFE5
   559                           fsr1l	equ	0xFE1
   560                           
   561                           	psect	bssBANK0
   562  000060                     __pbssBANK0:
   563                           	opt stack 0
   564  000060                     _TMR_TimerArray:
   565                           	opt stack 0
   566  000060                     	ds	32
   567  000080                     _CurrentFrame:
   568                           	opt stack 0
   569  000080                     	ds	4
   570  000084                     _TestColor:
   571                           	opt stack 0
   572  000084                     	ds	4
   573  000088                     ES_Timer_Tick_Resp@NewEvent:
   574                           	opt stack 0
   575  000088                     	ds	3
   576  00008B                     ES_Timer_Tick_Resp@NeedsProcessing:
   577                           	opt stack 0
   578  00008B                     	ds	2
   579  00008D                     Pattern_RGBPatterns@PatternConfigs:
   580                           	opt stack 0
   581  00008D                     	ds	2
   582  00008F                     _FramePointer:
   583                           	opt stack 0
   584  00008F                     	ds	2
   585  000091                     _Ready:
   586                           	opt stack 0
   587  000091                     	ds	2
   588  000093                     _TMR_ActiveFlags:
   589                           	opt stack 0
   590  000093                     	ds	2
   591  000095                     Can_XmitService@MyPriority:
   592                           	opt stack 0
   593  000095                     	ds	1
   594  000096                     ES_Timer_Tick_Resp@NextTimer2Process:
   595                           	opt stack 0
   596  000096                     	ds	1
   597  000097                     Pattern_RGBPatterns@Length:
   598                           	opt stack 0
   599  000097                     	ds	1
   600  000098                     SPI32_ControlService@CurrentState:
   601                           	opt stack 0
   602  000098                     	ds	1
   603  000099                     SPI32_ControlService@MyPriority:
   604                           	opt stack 0
   605  000099                     	ds	1
   606  00009A                     ToggleService@MyPriority:
   607                           	opt stack 0
   608  00009A                     	ds	1
   609  00009B                     _CurrentState:
   610                           	opt stack 0
   611  00009B                     	ds	1
   612  00009C                     _FrameIndex:
   613                           	opt stack 0
   614  00009C                     	ds	1
   615  00009D                     _Length:
   616                           	opt stack 0
   617  00009D                     	ds	1
   618  00009E                     _MyPriority:
   619                           	opt stack 0
   620  00009E                     	ds	1
   621  00009F                     _NumFrames:
   622                           	opt stack 0
   623  00009F                     	ds	1
   624  0000A0                     _PatternStepCounter:
   625                           	opt stack 0
   626  0000A0                     	ds	1
   627  0000A1                     _TickCount:
   628                           	opt stack 0
   629  0000A1                     	ds	1
   630  0000A2                     _Queue0:
   631                           	opt stack 0
   632  0000A2                     	ds	12
   633  0000AE                     _Queue1:
   634                           	opt stack 0
   635  0000AE                     	ds	12
   636  0000BA                     ES_Run@ThisEvent:
   637                           	opt stack 0
   638  0000BA                     	ds	3
   639                           tblptru	equ	0xFF8
   640                           tblptrh	equ	0xFF7
   641                           tblptrl	equ	0xFF6
   642                           tablat	equ	0xFF5
   643                           postinc0	equ	0xFEE
   644                           wreg	equ	0xFE8
   645                           postdec1	equ	0xFE5
   646                           fsr1l	equ	0xFE1
   647                           
   648                           	psect	dataBANK0
   649  0000F8                     __pdataBANK0:
   650                           	opt stack 0
   651  0000F8                     _PatternConfigs:
   652                           	opt stack 0
   653  0000F8                     	ds	5
   654                           tblptru	equ	0xFF8
   655                           tblptrh	equ	0xFF7
   656                           tblptrl	equ	0xFF6
   657                           tablat	equ	0xFF5
   658                           postinc0	equ	0xFEE
   659                           wreg	equ	0xFE8
   660                           postdec1	equ	0xFE5
   661                           fsr1l	equ	0xFE1
   662                           
   663                           	psect	bssBANK1
   664  000100                     __pbssBANK1:
   665                           	opt stack 0
   666  000100                     _PixelFrames:
   667                           	opt stack 0
   668  000100                     	ds	128
   669                           tblptru	equ	0xFF8
   670                           tblptrh	equ	0xFF7
   671                           tblptrl	equ	0xFF6
   672                           tablat	equ	0xFF5
   673                           postinc0	equ	0xFEE
   674                           wreg	equ	0xFE8
   675                           postdec1	equ	0xFE5
   676                           fsr1l	equ	0xFE1
   677                           
   678                           	psect	dataBANK1
   679  000180                     __pdataBANK1:
   680                           	opt stack 0
   681  000180                     _GenColors:
   682                           	opt stack 0
   683  000180                     	ds	52
   684                           tblptru	equ	0xFF8
   685                           tblptrh	equ	0xFF7
   686                           tblptrl	equ	0xFF6
   687                           tablat	equ	0xFF5
   688                           postinc0	equ	0xFEE
   689                           wreg	equ	0xFE8
   690                           postdec1	equ	0xFE5
   691                           fsr1l	equ	0xFE1
   692                           
   693                           	psect	bssBANK2
   694  000200                     __pbssBANK2:
   695                           	opt stack 0
   696  000200                     _OffFrames:
   697                           	opt stack 0
   698  000200                     	ds	128
   699  000280                     _PixelPattern:
   700                           	opt stack 0
   701  000280                     	ds	120
   702                           tblptru	equ	0xFF8
   703                           tblptrh	equ	0xFF7
   704                           tblptrl	equ	0xFF6
   705                           tablat	equ	0xFF5
   706                           postinc0	equ	0xFEE
   707                           wreg	equ	0xFE8
   708                           postdec1	equ	0xFE5
   709                           fsr1l	equ	0xFE1
   710                           
   711                           	psect	cstackBANK0
   712  0000BD                     __pcstackBANK0:
   713                           	opt stack 0
   714  0000BD                     ??_DotStar_Init:
   715  0000BD                     ??_ES_Timer_StopTimer:
   716  0000BD                     ?_printf:
   717                           	opt stack 0
   718  0000BD                     ?___awmod:
   719                           	opt stack 0
   720  0000BD                     ?_GetNextFrame:
   721                           	opt stack 0
   722  0000BD                     ?___llmod:
   723                           	opt stack 0
   724  0000BD                     ES_CheckUserEvents@i:
   725                           	opt stack 0
   726  0000BD                     SPI32_SendByte@newByte:
   727                           	opt stack 0
   728  0000BD                     XmitData@DataByte:
   729                           	opt stack 0
   730  0000BD                     ___lbmod@divisor:
   731                           	opt stack 0
   732  0000BD                     ES_GetMSBitSet@Val2Check:
   733                           	opt stack 0
   734  0000BD                     __HW_Timer_Init@Rate:
   735                           	opt stack 0
   736  0000BD                     ES_InitQueue@pBlock:
   737                           	opt stack 0
   738  0000BD                     ES_Timer_InitTimer@NewTime:
   739                           	opt stack 0
   740  0000BD                     SetupPattern@configs:
   741                           	opt stack 0
   742  0000BD                     printf@f:
   743                           	opt stack 0
   744  0000BD                     ___awmod@dividend:
   745                           	opt stack 0
   746  0000BD                     memcpy@d1:
   747                           	opt stack 0
   748  0000BD                     ___llmod@dividend:
   749                           	opt stack 0
   750                           
   751                           ; 4 bytes @ 0x0
   752  0000BD                     	ds	1
   753  0000BE                     ___lbmod@dividend:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x1
   757  0000BE                     	ds	1
   758  0000BF                     ??_ES_GetMSBitSet:
   759  0000BF                     ??_ES_Timer_InitTimer:
   760  0000BF                     ES_InitQueue@BlockSize:
   761                           	opt stack 0
   762  0000BF                     DotStar_Init@numPixels:
   763                           	opt stack 0
   764  0000BF                     SetupPattern@numPixels:
   765                           	opt stack 0
   766  0000BF                     ___lbmod@counter:
   767                           	opt stack 0
   768  0000BF                     ES_Timer_Init@Rate:
   769                           	opt stack 0
   770  0000BF                     printf@ap:
   771                           	opt stack 0
   772  0000BF                     ___awmod@divisor:
   773                           	opt stack 0
   774  0000BF                     memcpy@s1:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0x2
   778  0000BF                     	ds	1
   779  0000C0                     DotStar_Init@i:
   780                           	opt stack 0
   781  0000C0                     ___lbmod@rem:
   782                           	opt stack 0
   783  0000C0                     ES_InitQueue@pThisQueue:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x3
   787  0000C0                     	ds	1
   788  0000C1                     ES_Timer_StopTimer@Num:
   789                           	opt stack 0
   790  0000C1                     ES_Timer_InitTimer@Num:
   791                           	opt stack 0
   792  0000C1                     printf@c:
   793                           	opt stack 0
   794  0000C1                     ___awmod@counter:
   795                           	opt stack 0
   796  0000C1                     memcpy@n:
   797                           	opt stack 0
   798  0000C1                     ___llmod@divisor:
   799                           	opt stack 0
   800                           
   801                           ; 4 bytes @ 0x4
   802  0000C1                     	ds	1
   803  0000C2                     ___awmod@sign:
   804                           	opt stack 0
   805                           
   806                           ; 1 bytes @ 0x5
   807  0000C2                     	ds	1
   808  0000C3                     ?___wmul:
   809                           	opt stack 0
   810  0000C3                     ___wmul@multiplier:
   811                           	opt stack 0
   812  0000C3                     memcpy@d:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x6
   816  0000C3                     	ds	1
   817  0000C4                     ES_GetMSBitSet@ReturnVal:
   818                           	opt stack 0
   819                           
   820                           ; 1 bytes @ 0x7
   821  0000C4                     	ds	1
   822  0000C5                     ES_GetMSBitSet@Nybble2Test:
   823                           	opt stack 0
   824  0000C5                     ___llmod@counter:
   825                           	opt stack 0
   826  0000C5                     ___wmul@multiplicand:
   827                           	opt stack 0
   828  0000C5                     memcpy@s:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x8
   832  0000C5                     	ds	1
   833  0000C6                     ?_UpdatePattern:
   834                           	opt stack 0
   835  0000C6                     ES_GetMSBitSet@LoopCntr:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x9
   839  0000C6                     	ds	1
   840  0000C7                     ___wmul@product:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0xA
   844  0000C7                     	ds	1
   845  0000C8                     ??_UpdatePattern:
   846                           
   847                           ; 1 bytes @ 0xB
   848  0000C8                     	ds	1
   849  0000C9                     ES_EnQueueFIFO@pBlock:
   850                           	opt stack 0
   851  0000C9                     ES_DeQueue@pBlock:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0xC
   855  0000C9                     	ds	2
   856  0000CB                     ES_DeQueue@pReturnEvent:
   857                           	opt stack 0
   858  0000CB                     ES_EnQueueFIFO@Event2Add:
   859                           	opt stack 0
   860                           
   861                           ; 3 bytes @ 0xE
   862  0000CB                     	ds	1
   863  0000CC                     UpdatePattern@brightness:
   864                           	opt stack 0
   865                           
   866                           ; 1 bytes @ 0xF
   867  0000CC                     	ds	1
   868  0000CD                     ??_ES_DeQueue:
   869  0000CD                     _UpdatePattern$672:
   870                           	opt stack 0
   871                           
   872                           ; 4 bytes @ 0x10
   873  0000CD                     	ds	1
   874  0000CE                     ??_ES_EnQueueFIFO:
   875                           
   876                           ; 1 bytes @ 0x11
   877  0000CE                     	ds	1
   878  0000CF                     ES_DeQueue@SaveCrit:
   879                           	opt stack 0
   880                           
   881                           ; 1 bytes @ 0x12
   882  0000CF                     	ds	1
   883  0000D0                     ES_DeQueue@NumLeft:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x13
   887  0000D0                     	ds	1
   888  0000D1                     ES_EnQueueFIFO@SaveCrit:
   889                           	opt stack 0
   890  0000D1                     UpdatePattern@patternID:
   891                           	opt stack 0
   892  0000D1                     ES_DeQueue@pThisQueue:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x14
   896  0000D1                     	ds	1
   897  0000D2                     UpdatePattern@i:
   898                           	opt stack 0
   899  0000D2                     ES_EnQueueFIFO@pThisQueue:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x15
   903  0000D2                     	ds	2
   904  0000D4                     ES_PostToService@TheEvent:
   905                           	opt stack 0
   906                           
   907                           ; 3 bytes @ 0x17
   908  0000D4                     	ds	3
   909  0000D7                     ??_ES_PostToService:
   910                           
   911                           ; 1 bytes @ 0x1A
   912  0000D7                     	ds	2
   913  0000D9                     ES_PostToService@WhichService:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x1C
   917  0000D9                     	ds	1
   918  0000DA                     InitPatternControlService@ThisEvent:
   919                           	opt stack 0
   920  0000DA                     PostPatternControlService@ThisEvent:
   921                           	opt stack 0
   922  0000DA                     InitSPI32ControlService@ThisEvent:
   923                           	opt stack 0
   924  0000DA                     PostSPI32ControlService@ThisEvent:
   925                           	opt stack 0
   926  0000DA                     InitToggleService@ThisEvent:
   927                           	opt stack 0
   928  0000DA                     PostToggleService@ThisEvent:
   929                           	opt stack 0
   930  0000DA                     InitCan_XmitService@ThisEvent:
   931                           	opt stack 0
   932                           
   933                           ; 3 bytes @ 0x1D
   934  0000DA                     	ds	3
   935  0000DD                     ??_ES_Timer_Tick_Resp:
   936  0000DD                     InitPatternControlService@Priority:
   937                           	opt stack 0
   938  0000DD                     InitSPI32ControlService@Priority:
   939                           	opt stack 0
   940  0000DD                     InitToggleService@Priority:
   941                           	opt stack 0
   942  0000DD                     InitCan_XmitService@Priority:
   943                           	opt stack 0
   944  0000DD                     SPI32_TransmitFrames@framePointer:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0x20
   948  0000DD                     	ds	1
   949  0000DE                     ES_Initialize@NewRate:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x21
   953  0000DE                     	ds	1
   954  0000DF                     SPI32_TransmitFrames@numFrames:
   955                           	opt stack 0
   956                           
   957                           ; 1 bytes @ 0x22
   958  0000DF                     	ds	1
   959  0000E0                     ES_Initialize@i:
   960                           	opt stack 0
   961  0000E0                     SPI32_TransmitFrames@transmitEvent:
   962                           	opt stack 0
   963                           
   964                           ; 3 bytes @ 0x23
   965  0000E0                     	ds	1
   966  0000E1                     
   967                           ; 1 bytes @ 0x24
   968  0000E1                     	ds	2
   969  0000E3                     DotStar_Show@pixelPointer:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x26
   973  0000E3                     	ds	2
   974  0000E5                     ?_RunPatternControlService:
   975                           	opt stack 0
   976  0000E5                     ?_RunSPI32ControlService:
   977                           	opt stack 0
   978  0000E5                     ?_RunToggleService:
   979                           	opt stack 0
   980  0000E5                     ?_RunCan_XmitService:
   981                           	opt stack 0
   982  0000E5                     RunPatternControlService@ThisEvent:
   983                           	opt stack 0
   984  0000E5                     RunSPI32ControlService@ThisEvent:
   985                           	opt stack 0
   986  0000E5                     RunToggleService@ThisEvent:
   987                           	opt stack 0
   988  0000E5                     RunCan_XmitService@ThisEvent:
   989                           	opt stack 0
   990                           
   991                           ; 3 bytes @ 0x28
   992  0000E5                     	ds	3
   993  0000E8                     ??_RunSPI32ControlService:
   994  0000E8                     RunPatternControlService@ReturnEvent:
   995                           	opt stack 0
   996  0000E8                     RunToggleService@ReturnEvent:
   997                           	opt stack 0
   998  0000E8                     RunCan_XmitService@ReturnEvent:
   999                           	opt stack 0
  1000                           
  1001                           ; 3 bytes @ 0x2B
  1002  0000E8                     	ds	3
  1003  0000EB                     RunPatternControlService@testEvent:
  1004                           	opt stack 0
  1005                           
  1006                           ; 3 bytes @ 0x2E
  1007  0000EB                     	ds	4
  1008  0000EF                     RunSPI32ControlService@ReturnEvent:
  1009                           	opt stack 0
  1010                           
  1011                           ; 3 bytes @ 0x32
  1012  0000EF                     	ds	3
  1013  0000F2                     ??_ES_Run:
  1014                           
  1015                           ; 1 bytes @ 0x35
  1016  0000F2                     	ds	4
  1017  0000F6                     ES_Run@HighestPrior:
  1018                           	opt stack 0
  1019                           
  1020                           ; 1 bytes @ 0x39
  1021  0000F6                     	ds	1
  1022  0000F7                     main@ErrorType:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x3A
  1026  0000F7                     	ds	1
  1027                           tblptru	equ	0xFF8
  1028                           tblptrh	equ	0xFF7
  1029                           tblptrl	equ	0xFF6
  1030                           tablat	equ	0xFF5
  1031                           postinc0	equ	0xFEE
  1032                           wreg	equ	0xFE8
  1033                           postdec1	equ	0xFE5
  1034                           fsr1l	equ	0xFE1
  1035                           
  1036                           	psect	cstackCOMRAM
  1037  000001                     __pcstackCOMRAM:
  1038                           	opt stack 0
  1039  000001                     ?i2___awmod:
  1040                           	opt stack 0
  1041  000001                     i2ES_Timer_InitTimer@NewTime:
  1042                           	opt stack 0
  1043  000001                     i2___awmod@dividend:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x0
  1047  000001                     	ds	2
  1048  000003                     ??i2_ES_Timer_InitTimer:
  1049  000003                     i2___awmod@divisor:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0x2
  1053  000003                     	ds	2
  1054  000005                     i2ES_Timer_InitTimer@Num:
  1055                           	opt stack 0
  1056  000005                     i2___awmod@counter:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0x4
  1060  000005                     	ds	1
  1061  000006                     i2___awmod@sign:
  1062                           	opt stack 0
  1063                           
  1064                           ; 1 bytes @ 0x5
  1065  000006                     	ds	1
  1066  000007                     ?i2___wmul:
  1067                           	opt stack 0
  1068  000007                     i2___wmul@multiplier:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x6
  1072  000007                     	ds	2
  1073  000009                     i2___wmul@multiplicand:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x8
  1077  000009                     	ds	2
  1078  00000B                     i2___wmul@product:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0xA
  1082  00000B                     	ds	2
  1083  00000D                     i2ES_EnQueueFIFO@pBlock:
  1084                           	opt stack 0
  1085                           
  1086                           ; 2 bytes @ 0xC
  1087  00000D                     	ds	2
  1088  00000F                     i2ES_EnQueueFIFO@Event2Add:
  1089                           	opt stack 0
  1090                           
  1091                           ; 3 bytes @ 0xE
  1092  00000F                     	ds	3
  1093  000012                     ??i2_ES_EnQueueFIFO:
  1094                           
  1095                           ; 1 bytes @ 0x11
  1096  000012                     	ds	3
  1097  000015                     i2ES_EnQueueFIFO@SaveCrit:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x14
  1101  000015                     	ds	1
  1102  000016                     i2ES_EnQueueFIFO@pThisQueue:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x15
  1106  000016                     	ds	2
  1107  000018                     i2ES_PostToService@TheEvent:
  1108                           	opt stack 0
  1109                           
  1110                           ; 3 bytes @ 0x17
  1111  000018                     	ds	3
  1112  00001B                     ??i2_ES_PostToService:
  1113                           
  1114                           ; 1 bytes @ 0x1A
  1115  00001B                     	ds	2
  1116  00001D                     i2ES_PostToService@WhichService:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0x1C
  1120  00001D                     	ds	1
  1121  00001E                     i2PostSPI32ControlService@ThisEvent:
  1122                           	opt stack 0
  1123                           
  1124                           ; 3 bytes @ 0x1D
  1125  00001E                     	ds	3
  1126  000021                     SPI32_EOTResponse@EOTevent:
  1127                           	opt stack 0
  1128                           
  1129                           ; 3 bytes @ 0x20
  1130  000021                     	ds	3
  1131  000024                     ??_ISR:
  1132                           
  1133                           ; 1 bytes @ 0x23
  1134  000024                     	ds	16
  1135                           tblptru	equ	0xFF8
  1136                           tblptrh	equ	0xFF7
  1137                           tblptrl	equ	0xFF6
  1138                           tablat	equ	0xFF5
  1139                           postinc0	equ	0xFEE
  1140                           wreg	equ	0xFE8
  1141                           postdec1	equ	0xFE5
  1142                           fsr1l	equ	0xFE1
  1143                           
  1144 ;;
  1145 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1146 ;;
  1147 ;; *************** function _main *****************
  1148 ;; Defined at:
  1149 ;;		line 25 in file "main.c"
  1150 ;; Parameters:    Size  Location     Type
  1151 ;;		None
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;  ErrorType       1   58[BANK0 ] enum E15647
  1154 ;; Return value:  Size  Location     Type
  1155 ;;                  2  551[None  ] int 
  1156 ;; Registers used:
  1157 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1163 ;;      Params:         0       0       0       0
  1164 ;;      Locals:         0       1       0       0
  1165 ;;      Temps:          0       0       0       0
  1166 ;;      Totals:         0       1       0       0
  1167 ;;Total ram usage:        1 bytes
  1168 ;; Hardware stack levels required when called:   15
  1169 ;; This function calls:
  1170 ;;		_ES_Initialize
  1171 ;;		_ES_Run
  1172 ;;		_printf
  1173 ;; This function is called by:
  1174 ;;		Startup code after reset
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text0
  1179  00113E                     __ptext0:
  1180                           	opt stack 0
  1181  00113E                     _main:
  1182                           	opt stack 16
  1183                           
  1184                           ;main.c: 28: IRCF0 = 1;
  1185                           
  1186                           ;incstack = 0
  1187  00113E  88D3               	bsf	4051,4,c	;volatile
  1188                           
  1189                           ;main.c: 29: IRCF1 = 1;
  1190  001140  8AD3               	bsf	4051,5,c	;volatile
  1191                           
  1192                           ;main.c: 30: IRCF2 = 1;
  1193  001142  8CD3               	bsf	4051,6,c	;volatile
  1194                           
  1195                           ;main.c: 31: SCS1 = 1;
  1196  001144  82D3               	bsf	4051,1,c	;volatile
  1197                           
  1198                           ;main.c: 39: ES_Return_t ErrorType;
  1199                           ;main.c: 55: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
  1200  001146  0E9C               	movlw	156
  1201  001148  0100               	movlb	0	; () banked
  1202  00114A  6FDF               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
  1203  00114C  0E3F               	movlw	63
  1204  00114E  6FDE               	movwf	ES_Initialize@NewRate& (0+255),b
  1205  001150  EC67  F005         	call	_ES_Initialize	;wreg free
  1206  001154  0100               	movlb	0	; () banked
  1207  001156  6FF7               	movwf	main@ErrorType& (0+255),b
  1208                           
  1209                           ; BSR set to: 0
  1210                           ;main.c: 56: if ( ErrorType == Success ) {
  1211  001158  0100               	movlb	0	; () banked
  1212  00115A  51F7               	movf	main@ErrorType& (0+255),w,b
  1213  00115C  0100               	movlb	0	; () banked
  1214  00115E  A4D8               	btfss	status,2,c
  1215  001160  D029               	goto	l3284
  1216                           
  1217                           ; BSR set to: 0
  1218                           ;main.c: 58: ErrorType = ES_Run();
  1219  001162  EC75  F004         	call	_ES_Run	;wreg free
  1220  001166  0100               	movlb	0	; () banked
  1221  001168  6FF7               	movwf	main@ErrorType& (0+255),b
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;main.c: 60: }
  1225                           ;main.c: 62: switch (ErrorType){
  1226  00116A  D024               	goto	l3284
  1227  00116C                     l3274:
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;main.c: 64: printf("Failed on attempt to Post\n");
  1231  00116C  0E72               	movlw	low STR_1
  1232  00116E  0100               	movlb	0	; () banked
  1233  001170  6FBD               	movwf	printf@f& (0+255),b
  1234  001172  0E03               	movlw	high STR_1
  1235  001174  0100               	movlb	0	; () banked
  1236  001176  6FBE               	movwf	(printf@f+1)& (0+255),b
  1237  001178  ECC8  F00B         	call	_printf	;wreg free
  1238                           
  1239                           ;main.c: 65: break;
  1240  00117C  D027               	goto	l559
  1241  00117E                     l3276:
  1242                           
  1243                           ;main.c: 67: printf("Failed on NULL pointer\n");
  1244  00117E  0E8D               	movlw	low STR_2
  1245  001180  0100               	movlb	0	; () banked
  1246  001182  6FBD               	movwf	printf@f& (0+255),b
  1247  001184  0E03               	movlw	high STR_2
  1248  001186  0100               	movlb	0	; () banked
  1249  001188  6FBE               	movwf	(printf@f+1)& (0+255),b
  1250  00118A  ECC8  F00B         	call	_printf	;wreg free
  1251                           
  1252                           ;main.c: 68: break;
  1253  00118E  D01E               	goto	l559
  1254  001190                     l3278:
  1255                           
  1256                           ;main.c: 70: printf("Failed Initialization\n");
  1257  001190  0EA5               	movlw	low STR_3
  1258  001192  0100               	movlb	0	; () banked
  1259  001194  6FBD               	movwf	printf@f& (0+255),b
  1260  001196  0E03               	movlw	high STR_3
  1261  001198  0100               	movlb	0	; () banked
  1262  00119A  6FBE               	movwf	(printf@f+1)& (0+255),b
  1263  00119C  ECC8  F00B         	call	_printf	;wreg free
  1264                           
  1265                           ;main.c: 71: break;
  1266  0011A0  D015               	goto	l559
  1267  0011A2                     l3280:
  1268                           
  1269                           ;main.c: 73: printf("Other Failure\n");
  1270  0011A2  0EBC               	movlw	low STR_4
  1271  0011A4  0100               	movlb	0	; () banked
  1272  0011A6  6FBD               	movwf	printf@f& (0+255),b
  1273  0011A8  0E03               	movlw	high STR_4
  1274  0011AA  0100               	movlb	0	; () banked
  1275  0011AC  6FBE               	movwf	(printf@f+1)& (0+255),b
  1276  0011AE  ECC8  F00B         	call	_printf	;wreg free
  1277                           
  1278                           ;main.c: 75: }
  1279                           
  1280                           ;main.c: 74: break;
  1281  0011B2  D00C               	goto	l559
  1282  0011B4                     l3284:
  1283  0011B4  0100               	movlb	0	; () banked
  1284  0011B6  51F7               	movf	main@ErrorType& (0+255),w,b
  1285                           
  1286                           ; Switch size 1, requested type "space"
  1287                           ; Number of cases is 3, Range of values is 1 to 5
  1288                           ; switch strategies available:
  1289                           ; Name         Instructions Cycles
  1290                           ; simple_byte           10     6 (average)
  1291                           ;	Chosen strategy is simple_byte
  1292  0011B8  0A01               	xorlw	1	; case 1
  1293  0011BA  B4D8               	btfsc	status,2,c
  1294  0011BC  D7D7               	goto	l3274
  1295  0011BE  0A02               	xorlw	2	; case 3
  1296  0011C0  B4D8               	btfsc	status,2,c
  1297  0011C2  D7DD               	goto	l3276
  1298  0011C4  0A06               	xorlw	6	; case 5
  1299  0011C6  B4D8               	btfsc	status,2,c
  1300  0011C8  D7E3               	goto	l3278
  1301  0011CA  D7EB               	goto	l3280
  1302  0011CC                     l559:
  1303                           
  1304                           ;main.c: 77: ;
  1305  0011CC  D7FF               	goto	l559
  1306  0011CE                     __end_of_main:
  1307                           	opt stack 0
  1308                           tblptru	equ	0xFF8
  1309                           tblptrh	equ	0xFF7
  1310                           tblptrl	equ	0xFF6
  1311                           tablat	equ	0xFF5
  1312                           postinc0	equ	0xFEE
  1313                           wreg	equ	0xFE8
  1314                           postdec1	equ	0xFE5
  1315                           fsr1l	equ	0xFE1
  1316                           status	equ	0xFD8
  1317                           
  1318 ;; *************** function _printf *****************
  1319 ;; Defined at:
  1320 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
  1321 ;; Parameters:    Size  Location     Type
  1322 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  1323 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
  1324 ;; Auto vars:     Size  Location     Type
  1325 ;;  tmpval          4    0        struct .
  1326 ;;  cp              3    0        PTR const unsigned char 
  1327 ;;  ap              2    2[BANK0 ] PTR void [1]
  1328 ;;		 -> ?_printf(2), 
  1329 ;;  len             2    0        unsigned int 
  1330 ;;  val             2    0        unsigned int 
  1331 ;;  c               1    4[BANK0 ] char 
  1332 ;;  flag            1    0        unsigned char 
  1333 ;;  prec            1    0        char 
  1334 ;; Return value:  Size  Location     Type
  1335 ;;                  2    0[BANK0 ] int 
  1336 ;; Registers used:
  1337 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1338 ;; Tracked objects:
  1339 ;;		On entry : 0/0
  1340 ;;		On exit  : 0/0
  1341 ;;		Unchanged: 0/0
  1342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1343 ;;      Params:         0       2       0       0
  1344 ;;      Locals:         0       3       0       0
  1345 ;;      Temps:          0       0       0       0
  1346 ;;      Totals:         0       5       0       0
  1347 ;;Total ram usage:        5 bytes
  1348 ;; Hardware stack levels used:    1
  1349 ;; Hardware stack levels required when called:    7
  1350 ;; This function calls:
  1351 ;;		_putch
  1352 ;; This function is called by:
  1353 ;;		_main
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357                           	psect	text1
  1358  001790                     __ptext1:
  1359                           	opt stack 0
  1360  001790                     _printf:
  1361                           	opt stack 23
  1362                           
  1363                           ;doprnt.c: 466: va_list ap;
  1364                           ;doprnt.c: 499: signed char c;
  1365                           ;doprnt.c: 506: signed char prec;
  1366                           ;doprnt.c: 508: unsigned char flag;
  1367                           ;doprnt.c: 523: union {
  1368                           ;doprnt.c: 524: unsigned long vd;
  1369                           ;doprnt.c: 525: double integ;
  1370                           ;doprnt.c: 526: } tmpval;
  1371                           ;doprnt.c: 528: unsigned int val;
  1372                           ;doprnt.c: 529: unsigned len;
  1373                           ;doprnt.c: 530: const char * cp;
  1374                           ;doprnt.c: 533: *ap = __va_start();
  1375                           
  1376                           ;incstack = 0
  1377  001790  0EBF               	movlw	low (?_printf+2)
  1378  001792  0100               	movlb	0	; () banked
  1379  001794  6FBF               	movwf	printf@ap& (0+255),b
  1380  001796  0E00               	movlw	high (?_printf+2)
  1381  001798  0100               	movlb	0	; () banked
  1382  00179A  6FC0               	movwf	(printf@ap+1)& (0+255),b
  1383                           
  1384                           ;doprnt.c: 536: while(c = *f++) {
  1385  00179C  D004               	goto	l3108
  1386  00179E                     l3106:
  1387                           
  1388                           ; BSR set to: 0
  1389                           ;doprnt.c: 540: {
  1390                           ;doprnt.c: 541: (putch(c) );
  1391  00179E  0100               	movlb	0	; () banked
  1392  0017A0  51C1               	movf	printf@c& (0+255),w,b
  1393  0017A2  EC1C  F00D         	call	_putch
  1394  0017A6                     l3108:
  1395  0017A6  C0BD  FFF6         	movff	printf@f,tblptrl
  1396  0017AA  C0BE  FFF7         	movff	printf@f+1,tblptrh
  1397  0017AE  0100               	movlb	0	; () banked
  1398  0017B0  4BBD               	infsnz	printf@f& (0+255),f,b
  1399  0017B2  2BBE               	incf	(printf@f+1)& (0+255),f,b
  1400  0017B4                     	if	0	;tblptru may be non-zero
  1401  0017B4                     	endif
  1402  0017B4                     	if	0	;tblptru may be non-zero
  1403  0017B4                     	endif
  1404  0017B4  0008               	tblrd		*
  1405  0017B6  CFF5 F0C1          	movff	tablat,printf@c
  1406  0017BA  0100               	movlb	0	; () banked
  1407  0017BC  51C1               	movf	printf@c& (0+255),w,b
  1408  0017BE  B4D8               	btfsc	status,2,c
  1409  0017C0  0012               	return	
  1410  0017C2  D7ED               	goto	l3106
  1411  0017C4                     __end_of_printf:
  1412                           	opt stack 0
  1413                           tblptru	equ	0xFF8
  1414                           tblptrh	equ	0xFF7
  1415                           tblptrl	equ	0xFF6
  1416                           tablat	equ	0xFF5
  1417                           postinc0	equ	0xFEE
  1418                           wreg	equ	0xFE8
  1419                           postdec1	equ	0xFE5
  1420                           fsr1l	equ	0xFE1
  1421                           status	equ	0xFD8
  1422                           
  1423 ;; *************** function _putch *****************
  1424 ;; Defined at:
  1425 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
  1426 ;; Parameters:    Size  Location     Type
  1427 ;;  c               1    wreg     unsigned char 
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;  c               1    0[COMRAM] unsigned char 
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  1    wreg      void 
  1432 ;; Registers used:
  1433 ;;		wreg
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1439 ;;      Params:         0       0       0       0
  1440 ;;      Locals:         0       0       0       0
  1441 ;;      Temps:          0       0       0       0
  1442 ;;      Totals:         0       0       0       0
  1443 ;;Total ram usage:        0 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    6
  1446 ;; This function calls:
  1447 ;;		Nothing
  1448 ;; This function is called by:
  1449 ;;		_printf
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           	psect	text2
  1454  001A38                     __ptext2:
  1455                           	opt stack 0
  1456  001A38                     _putch:
  1457                           	opt stack 23
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;incstack = 0
  1461  001A38  0012               	return		;funcret
  1462  001A3A                     __end_of_putch:
  1463                           	opt stack 0
  1464                           tblptru	equ	0xFF8
  1465                           tblptrh	equ	0xFF7
  1466                           tblptrl	equ	0xFF6
  1467                           tablat	equ	0xFF5
  1468                           postinc0	equ	0xFEE
  1469                           wreg	equ	0xFE8
  1470                           postdec1	equ	0xFE5
  1471                           fsr1l	equ	0xFE1
  1472                           status	equ	0xFD8
  1473                           
  1474 ;; *************** function _ES_Run *****************
  1475 ;; Defined at:
  1476 ;;		line 277 in file "ES_Framework.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;		None
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;  HighestPrior    1   57[BANK0 ] unsigned char 
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  1    wreg      enum E15495
  1483 ;; Registers used:
  1484 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1490 ;;      Params:         0       0       0       0
  1491 ;;      Locals:         0       1       0       0
  1492 ;;      Temps:          0       4       0       0
  1493 ;;      Totals:         0       5       0       0
  1494 ;;Total ram usage:        5 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:   14
  1497 ;; This function calls:
  1498 ;;		_ES_CheckUserEvents
  1499 ;;		_ES_DeQueue
  1500 ;;		_ES_GetMSBitSet
  1501 ;;		_RunCan_XmitService
  1502 ;;		_RunPatternControlService
  1503 ;;		_RunSPI32ControlService
  1504 ;;		_RunToggleService
  1505 ;;		__HW_Process_Pending_Ints
  1506 ;; This function is called by:
  1507 ;;		_main
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511                           	psect	text3
  1512  0008EA                     __ptext3:
  1513                           	opt stack 0
  1514  0008EA                     _ES_Run:
  1515                           	opt stack 16
  1516                           
  1517                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
  1518                           
  1519                           ;incstack = 0
  1520                           ;ES_Framework.c: 279: uint8_t HighestPrior;
  1521                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
  1522                           ;ES_Framework.c: 282: while(1){
  1523  0008EA  D06B               	goto	l3082
  1524  0008EC                     l3070:
  1525                           
  1526                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
  1527  0008EC  C091  F0BD         	movff	_Ready,ES_GetMSBitSet@Val2Check
  1528  0008F0  C092  F0BE         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
  1529  0008F4  EC67  F007         	call	_ES_GetMSBitSet	;wreg free
  1530  0008F8  0100               	movlb	0	; () banked
  1531  0008FA  6FF6               	movwf	ES_Run@HighestPrior& (0+255),b
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
  1535  0008FC  0100               	movlb	0	; () banked
  1536  0008FE  51F6               	movf	ES_Run@HighestPrior& (0+255),w,b
  1537  000900  0D03               	mullw	3
  1538  000902  0E60               	movlw	low _EventQueues
  1539  000904  24F3               	addwf	prodl,w,c
  1540  000906  6EF6               	movwf	tblptrl,c
  1541  000908  0E03               	movlw	high _EventQueues
  1542  00090A  20F4               	addwfc	prodh,w,c
  1543  00090C  6EF7               	movwf	tblptrh,c
  1544  00090E                     	if	0	;There are less than 3 active tblptr bytes
  1545  00090E                     	endif
  1546  00090E  0009               	tblrd		*+
  1547  000910  CFF5 F0C9          	movff	tablat,ES_DeQueue@pBlock
  1548  000914  000A               	tblrd		*-
  1549  000916  CFF5 F0CA          	movff	tablat,ES_DeQueue@pBlock+1
  1550  00091A  0EBA               	movlw	low ES_Run@ThisEvent
  1551  00091C  0100               	movlb	0	; () banked
  1552  00091E  6FCB               	movwf	ES_DeQueue@pReturnEvent& (0+255),b
  1553  000920  0E00               	movlw	high ES_Run@ThisEvent
  1554  000922  0100               	movlb	0	; () banked
  1555  000924  6FCC               	movwf	(ES_DeQueue@pReturnEvent+1)& (0+255),b
  1556  000926  EC56  F003         	call	_ES_DeQueue	;wreg free
  1557  00092A  0900               	iorlw	0
  1558  00092C  A4D8               	btfss	status,2,c
  1559  00092E  D01F               	goto	l3076
  1560                           
  1561                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1562  000930  0100               	movlb	0	; () banked
  1563  000932  51F6               	movf	ES_Run@HighestPrior& (0+255),w,b
  1564  000934  0D02               	mullw	2
  1565  000936  0E01               	movlw	low _BitNum2SetMask
  1566  000938  24F3               	addwf	prodl,w,c
  1567  00093A  6EF6               	movwf	tblptrl,c
  1568  00093C  0E03               	movlw	high _BitNum2SetMask
  1569  00093E  20F4               	addwfc	prodh,w,c
  1570  000940  6EF7               	movwf	tblptrh,c
  1571  000942                     	if	0	;There are less than 3 active tblptr bytes
  1572  000942                     	endif
  1573  000942  0009               	tblrd		*+
  1574  000944  CFF5 F0F2          	movff	tablat,??_ES_Run
  1575  000948  0009               	tblrd		*+
  1576  00094A  CFF5 F0F3          	movff	tablat,??_ES_Run+1
  1577  00094E  0100               	movlb	0	; () banked
  1578  000950  1DF2               	comf	??_ES_Run& (0+255),w,b
  1579  000952  0100               	movlb	0	; () banked
  1580  000954  6FF4               	movwf	(??_ES_Run+2)& (0+255),b
  1581  000956  0100               	movlb	0	; () banked
  1582  000958  1DF3               	comf	(??_ES_Run+1)& (0+255),w,b
  1583  00095A  0100               	movlb	0	; () banked
  1584  00095C  6FF5               	movwf	(??_ES_Run+3)& (0+255),b
  1585  00095E  0100               	movlb	0	; () banked
  1586  000960  51F4               	movf	(??_ES_Run+2)& (0+255),w,b
  1587  000962  0100               	movlb	0	; () banked
  1588  000964  1791               	andwf	_Ready& (0+255),f,b
  1589  000966  0100               	movlb	0	; () banked
  1590  000968  51F5               	movf	(??_ES_Run+3)& (0+255),w,b
  1591  00096A  0100               	movlb	0	; () banked
  1592  00096C  1792               	andwf	(_Ready+1)& (0+255),f,b
  1593  00096E                     l3076:
  1594                           
  1595                           ;ES_Framework.c: 291: }
  1596                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1597  00096E  C0BA  F0E5         	movff	ES_Run@ThisEvent,RunCan_XmitService@ThisEvent
  1598  000972  C0BB  F0E6         	movff	ES_Run@ThisEvent+1,RunCan_XmitService@ThisEvent+1
  1599  000976  C0BC  F0E7         	movff	ES_Run@ThisEvent+2,RunCan_XmitService@ThisEvent+2
  1600  00097A  0100               	movlb	0	; () banked
  1601  00097C  51F6               	movf	ES_Run@HighestPrior& (0+255),w,b
  1602  00097E  0D04               	mullw	4
  1603  000980  0E02               	movlw	2
  1604  000982  26F3               	addwf	prodl,f,c
  1605  000984  0E00               	movlw	0
  1606  000986  22F4               	addwfc	prodh,f,c
  1607  000988  0E41               	movlw	low _ServDescList
  1608  00098A  24F3               	addwf	prodl,w,c
  1609  00098C  6EF6               	movwf	tblptrl,c
  1610  00098E  0E03               	movlw	high _ServDescList
  1611  000990  20F4               	addwfc	prodh,w,c
  1612  000992  6EF7               	movwf	tblptrh,c
  1613  000994                     	if	0	;There are less than 3 active tblptr bytes
  1614  000994                     	endif
  1615  000994  D801               	call	u1928
  1616  000996  D00C               	goto	u1929
  1617  000998                     u1928:
  1618  000998  0005               	push	
  1619  00099A  6EFA               	movwf	pclath,c
  1620  00099C  0009               	tblrd		*+
  1621  00099E  50F5               	movf	tablat,w,c
  1622  0009A0  6EFD               	movwf	tosl,c
  1623  0009A2  0009               	tblrd		*+
  1624  0009A4  50F5               	movf	tablat,w,c
  1625  0009A6  6EFE               	movwf	tosh,c
  1626  0009A8  50F8               	movf	tblptru,w,c
  1627  0009AA  6EFF               	movwf	tosu,c
  1628  0009AC  50FA               	movf	pclath,w,c
  1629  0009AE  0012               	return		;indir
  1630  0009B0                     u1929:
  1631  0009B0  0EE5               	movlw	low ?_RunCan_XmitService
  1632  0009B2  6ED9               	movwf	fsr2l,c
  1633  0009B4  0E00               	movlw	high ?_RunCan_XmitService
  1634  0009B6  6EDA               	movwf	fsr2h,c
  1635  0009B8  50DF               	movf	indf2,w,c
  1636  0009BA  B4D8               	btfsc	status,2,c
  1637  0009BC  D002               	goto	l3082
  1638                           
  1639                           ;ES_Framework.c: 293: return FailedRun;
  1640  0009BE  0E02               	movlw	2
  1641  0009C0  0012               	return	
  1642  0009C2                     l3082:
  1643  0009C2  ECB3  F00C         	call	__HW_Process_Pending_Ints	;wreg free
  1644  0009C6  0900               	iorlw	0
  1645  0009C8  B4D8               	btfsc	status,2,c
  1646  0009CA  D006               	goto	l3086
  1647  0009CC  0100               	movlb	0	; () banked
  1648  0009CE  5191               	movf	_Ready& (0+255),w,b
  1649  0009D0  0100               	movlb	0	; () banked
  1650  0009D2  1192               	iorwf	(_Ready+1)& (0+255),w,b
  1651  0009D4  A4D8               	btfss	status,2,c
  1652  0009D6  D78A               	goto	l3070
  1653  0009D8                     l3086:
  1654                           
  1655                           ;ES_Framework.c: 294: }
  1656                           ;ES_Framework.c: 295: }
  1657                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1658  0009D8  ECAF  F00A         	call	_ES_CheckUserEvents	;wreg free
  1659  0009DC  D7F2               	goto	l3082
  1660  0009DE                     __end_of_ES_Run:
  1661                           	opt stack 0
  1662                           tosu	equ	0xFFF
  1663                           tosh	equ	0xFFE
  1664                           tosl	equ	0xFFD
  1665                           pclath	equ	0xFFA
  1666                           tblptru	equ	0xFF8
  1667                           tblptrh	equ	0xFF7
  1668                           tblptrl	equ	0xFF6
  1669                           tablat	equ	0xFF5
  1670                           prodh	equ	0xFF4
  1671                           prodl	equ	0xFF3
  1672                           postinc0	equ	0xFEE
  1673                           wreg	equ	0xFE8
  1674                           postdec1	equ	0xFE5
  1675                           fsr1l	equ	0xFE1
  1676                           indf2	equ	0xFDF
  1677                           fsr2h	equ	0xFDA
  1678                           fsr2l	equ	0xFD9
  1679                           status	equ	0xFD8
  1680                           
  1681 ;; *************** function __HW_Process_Pending_Ints *****************
  1682 ;; Defined at:
  1683 ;;		line 218 in file "ES_Port.c"
  1684 ;; Parameters:    Size  Location     Type
  1685 ;;		None
  1686 ;; Auto vars:     Size  Location     Type
  1687 ;;		None
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  1    wreg      unsigned char 
  1690 ;; Registers used:
  1691 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1697 ;;      Params:         0       0       0       0
  1698 ;;      Locals:         0       0       0       0
  1699 ;;      Temps:          0       0       0       0
  1700 ;;      Totals:         0       0       0       0
  1701 ;;Total ram usage:        0 bytes
  1702 ;; Hardware stack levels used:    1
  1703 ;; Hardware stack levels required when called:   11
  1704 ;; This function calls:
  1705 ;;		_ES_Timer_Tick_Resp
  1706 ;; This function is called by:
  1707 ;;		_ES_Run
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711                           	psect	text4
  1712  001966                     __ptext4:
  1713                           	opt stack 0
  1714  001966                     __HW_Process_Pending_Ints:
  1715                           	opt stack 18
  1716                           
  1717                           ;ES_Port.c: 220: while (TickCount > 0)
  1718                           
  1719                           ;incstack = 0
  1720  001966  D004               	goto	l2804
  1721  001968                     l2800:
  1722                           
  1723                           ;ES_Port.c: 221: {
  1724                           ;ES_Port.c: 223: ES_Timer_Tick_Resp();
  1725  001968  ECEA  F003         	call	_ES_Timer_Tick_Resp	;wreg free
  1726                           
  1727                           ;ES_Port.c: 224: TickCount--;
  1728  00196C  0100               	movlb	0	; () banked
  1729  00196E  07A1               	decf	_TickCount& (0+255),f,b	;volatile
  1730  001970                     l2804:
  1731  001970  0100               	movlb	0	; () banked
  1732  001972  51A1               	movf	_TickCount& (0+255),w,b	;volatile
  1733  001974  A4D8               	btfss	status,2,c
  1734  001976  D7F8               	goto	l2800
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;ES_Port.c: 225: }
  1738                           ;ES_Port.c: 227: return 1;
  1739                           
  1740                           ; BSR set to: 0
  1741  001978  0E01               	movlw	1
  1742  00197A  0012               	return	
  1743  00197C                     __end_of__HW_Process_Pending_Ints:
  1744                           	opt stack 0
  1745                           tosu	equ	0xFFF
  1746                           tosh	equ	0xFFE
  1747                           tosl	equ	0xFFD
  1748                           pclath	equ	0xFFA
  1749                           tblptru	equ	0xFF8
  1750                           tblptrh	equ	0xFF7
  1751                           tblptrl	equ	0xFF6
  1752                           tablat	equ	0xFF5
  1753                           prodh	equ	0xFF4
  1754                           prodl	equ	0xFF3
  1755                           postinc0	equ	0xFEE
  1756                           wreg	equ	0xFE8
  1757                           postdec1	equ	0xFE5
  1758                           fsr1l	equ	0xFE1
  1759                           indf2	equ	0xFDF
  1760                           fsr2h	equ	0xFDA
  1761                           fsr2l	equ	0xFD9
  1762                           status	equ	0xFD8
  1763                           
  1764 ;; *************** function _ES_Timer_Tick_Resp *****************
  1765 ;; Defined at:
  1766 ;;		line 284 in file "ES_Timers.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;		None
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;		None
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  1    wreg      void 
  1773 ;; Registers used:
  1774 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1780 ;;      Params:         0       0       0       0
  1781 ;;      Locals:         0       0       0       0
  1782 ;;      Temps:          0       4       0       0
  1783 ;;      Totals:         0       4       0       0
  1784 ;;Total ram usage:        4 bytes
  1785 ;; Hardware stack levels used:    1
  1786 ;; Hardware stack levels required when called:   10
  1787 ;; This function calls:
  1788 ;;		Absolute function
  1789 ;;		_ES_GetMSBitSet
  1790 ;;		_PostPatternControlService
  1791 ;;		_PostSPI32ControlService
  1792 ;;		_PostToggleService
  1793 ;; This function is called by:
  1794 ;;		__HW_Process_Pending_Ints
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798                           	psect	text5
  1799  0007D4                     __ptext5:
  1800                           	opt stack 0
  1801  0007D4                     _ES_Timer_Tick_Resp:
  1802                           	opt stack 18
  1803                           
  1804                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1805                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1806                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1807                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;incstack = 0
  1811  0007D4  0100               	movlb	0	; () banked
  1812  0007D6  5193               	movf	_TMR_ActiveFlags& (0+255),w,b
  1813  0007D8  0100               	movlb	0	; () banked
  1814  0007DA  1194               	iorwf	(_TMR_ActiveFlags+1)& (0+255),w,b
  1815  0007DC  B4D8               	btfsc	status,2,c
  1816  0007DE  0012               	return	
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;ES_Timers.c: 291: {
  1820                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1821  0007E0  C093  F08B         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1822  0007E4  C094  F08C         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1823  0007E8                     l2598:
  1824                           
  1825                           ; BSR set to: 0
  1826                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1827  0007E8  C08B  F0BD         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1828  0007EC  C08C  F0BE         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1829  0007F0  EC67  F007         	call	_ES_GetMSBitSet	;wreg free
  1830  0007F4  0100               	movlb	0	; () banked
  1831  0007F6  6F96               	movwf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),b
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1835  0007F8  0100               	movlb	0	; () banked
  1836  0007FA  5196               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1837  0007FC  0D02               	mullw	2
  1838  0007FE  0E60               	movlw	low _TMR_TimerArray
  1839  000800  24F3               	addwf	prodl,w,c
  1840  000802  6ED9               	movwf	fsr2l,c
  1841  000804  0E00               	movlw	high _TMR_TimerArray
  1842  000806  20F4               	addwfc	prodh,w,c
  1843  000808  6EDA               	movwf	fsr2h,c
  1844  00080A  06DE               	decf	postinc2,f,c
  1845  00080C  0E00               	movlw	0
  1846  00080E  5ADD               	subwfb	postdec2,f,c
  1847  000810  50DE               	movf	postinc2,w,c
  1848  000812  10DE               	iorwf	postinc2,w,c
  1849  000814  A4D8               	btfss	status,2,c
  1850  000816  D043               	goto	l2610
  1851                           
  1852                           ; BSR set to: 0
  1853                           ;ES_Timers.c: 299: {
  1854                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1855  000818  0E03               	movlw	3
  1856  00081A  0100               	movlb	0	; () banked
  1857  00081C  6F88               	movwf	ES_Timer_Tick_Resp@NewEvent& (0+255),b
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1861  00081E  C096  F089         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1862  000822  0100               	movlb	0	; () banked
  1863  000824  6B8A               	clrf	(ES_Timer_Tick_Resp@NewEvent+2)& (0+255),b
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1867  000826  C088  F0DA         	movff	ES_Timer_Tick_Resp@NewEvent,PostToggleService@ThisEvent
  1868  00082A  C089  F0DB         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostToggleService@ThisEvent+1
  1869  00082E  C08A  F0DC         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostToggleService@ThisEvent+2
  1870  000832  0100               	movlb	0	; () banked
  1871  000834  5196               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1872  000836  0D02               	mullw	2
  1873  000838  0E21               	movlw	low _Timer2PostFunc
  1874  00083A  24F3               	addwf	prodl,w,c
  1875  00083C  6EF6               	movwf	tblptrl,c
  1876  00083E  0E03               	movlw	high _Timer2PostFunc
  1877  000840  20F4               	addwfc	prodh,w,c
  1878  000842  6EF7               	movwf	tblptrh,c
  1879  000844                     	if	0	;There are less than 3 active tblptr bytes
  1880  000844                     	endif
  1881  000844  D801               	call	u1458
  1882  000846  D00C               	goto	l2608
  1883  000848                     u1458:
  1884  000848  0005               	push	
  1885  00084A  6EFA               	movwf	pclath,c
  1886  00084C  0009               	tblrd		*+
  1887  00084E  50F5               	movf	tablat,w,c
  1888  000850  6EFD               	movwf	tosl,c
  1889  000852  0009               	tblrd		*+
  1890  000854  50F5               	movf	tablat,w,c
  1891  000856  6EFE               	movwf	tosh,c
  1892  000858  50F8               	movf	tblptru,w,c
  1893  00085A  6EFF               	movwf	tosu,c
  1894  00085C  50FA               	movf	pclath,w,c
  1895  00085E  0012               	return		;indir
  1896  000860                     l2608:
  1897                           
  1898                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1899  000860  0100               	movlb	0	; () banked
  1900  000862  5196               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1901  000864  0D02               	mullw	2
  1902  000866  0E01               	movlw	low _BitNum2SetMask
  1903  000868  24F3               	addwf	prodl,w,c
  1904  00086A  6EF6               	movwf	tblptrl,c
  1905  00086C  0E03               	movlw	high _BitNum2SetMask
  1906  00086E  20F4               	addwfc	prodh,w,c
  1907  000870  6EF7               	movwf	tblptrh,c
  1908  000872                     	if	0	;There are less than 3 active tblptr bytes
  1909  000872                     	endif
  1910  000872  0009               	tblrd		*+
  1911  000874  CFF5 F0DD          	movff	tablat,??_ES_Timer_Tick_Resp
  1912  000878  0009               	tblrd		*+
  1913  00087A  CFF5 F0DE          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1914  00087E  0100               	movlb	0	; () banked
  1915  000880  1DDD               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1916  000882  0100               	movlb	0	; () banked
  1917  000884  6FDF               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1918  000886  0100               	movlb	0	; () banked
  1919  000888  1DDE               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1920  00088A  0100               	movlb	0	; () banked
  1921  00088C  6FE0               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1922  00088E  0100               	movlb	0	; () banked
  1923  000890  51DF               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1924  000892  0100               	movlb	0	; () banked
  1925  000894  1793               	andwf	_TMR_ActiveFlags& (0+255),f,b
  1926  000896  0100               	movlb	0	; () banked
  1927  000898  51E0               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1928  00089A  0100               	movlb	0	; () banked
  1929  00089C  1794               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  1930  00089E                     l2610:
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;ES_Timers.c: 306: }
  1934                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1935  00089E  0100               	movlb	0	; () banked
  1936  0008A0  5196               	movf	ES_Timer_Tick_Resp@NextTimer2Process& (0+255),w,b
  1937  0008A2  0D02               	mullw	2
  1938  0008A4  0E01               	movlw	low _BitNum2SetMask
  1939  0008A6  24F3               	addwf	prodl,w,c
  1940  0008A8  6EF6               	movwf	tblptrl,c
  1941  0008AA  0E03               	movlw	high _BitNum2SetMask
  1942  0008AC  20F4               	addwfc	prodh,w,c
  1943  0008AE  6EF7               	movwf	tblptrh,c
  1944  0008B0                     	if	0	;There are less than 3 active tblptr bytes
  1945  0008B0                     	endif
  1946  0008B0  0009               	tblrd		*+
  1947  0008B2  CFF5 F0DD          	movff	tablat,??_ES_Timer_Tick_Resp
  1948  0008B6  0009               	tblrd		*+
  1949  0008B8  CFF5 F0DE          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1950  0008BC  0100               	movlb	0	; () banked
  1951  0008BE  1DDD               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1952  0008C0  0100               	movlb	0	; () banked
  1953  0008C2  6FDF               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1954  0008C4  0100               	movlb	0	; () banked
  1955  0008C6  1DDE               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1956  0008C8  0100               	movlb	0	; () banked
  1957  0008CA  6FE0               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1958  0008CC  0100               	movlb	0	; () banked
  1959  0008CE  51DF               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1960  0008D0  0100               	movlb	0	; () banked
  1961  0008D2  178B               	andwf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),f,b
  1962  0008D4  0100               	movlb	0	; () banked
  1963  0008D6  51E0               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1964  0008D8  0100               	movlb	0	; () banked
  1965  0008DA  178C               	andwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),f,b
  1966                           
  1967                           ; BSR set to: 0
  1968                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1969  0008DC  0100               	movlb	0	; () banked
  1970  0008DE  518B               	movf	ES_Timer_Tick_Resp@NeedsProcessing& (0+255),w,b
  1971  0008E0  0100               	movlb	0	; () banked
  1972  0008E2  118C               	iorwf	(ES_Timer_Tick_Resp@NeedsProcessing+1)& (0+255),w,b
  1973  0008E4  B4D8               	btfsc	status,2,c
  1974  0008E6  0012               	return	
  1975  0008E8  D77F               	goto	l2598
  1976  0008EA                     __end_of_ES_Timer_Tick_Resp:
  1977                           	opt stack 0
  1978                           tosu	equ	0xFFF
  1979                           tosh	equ	0xFFE
  1980                           tosl	equ	0xFFD
  1981                           pclath	equ	0xFFA
  1982                           tblptru	equ	0xFF8
  1983                           tblptrh	equ	0xFF7
  1984                           tblptrl	equ	0xFF6
  1985                           tablat	equ	0xFF5
  1986                           prodh	equ	0xFF4
  1987                           prodl	equ	0xFF3
  1988                           postinc0	equ	0xFEE
  1989                           wreg	equ	0xFE8
  1990                           postdec1	equ	0xFE5
  1991                           fsr1l	equ	0xFE1
  1992                           indf2	equ	0xFDF
  1993                           postinc2	equ	0xFDE
  1994                           postdec2	equ	0xFDD
  1995                           fsr2h	equ	0xFDA
  1996                           fsr2l	equ	0xFD9
  1997                           status	equ	0xFD8
  1998                           
  1999 ;; *************** function _PostSPI32ControlService *****************
  2000 ;; Defined at:
  2001 ;;		line 117 in file "SPI32_ControlService.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;		None
  2006 ;; Return value:  Size  Location     Type
  2007 ;;                  1    wreg      unsigned char 
  2008 ;; Registers used:
  2009 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2010 ;; Tracked objects:
  2011 ;;		On entry : 0/0
  2012 ;;		On exit  : 0/0
  2013 ;;		Unchanged: 0/0
  2014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2015 ;;      Params:         0       3       0       0
  2016 ;;      Locals:         0       0       0       0
  2017 ;;      Temps:          0       0       0       0
  2018 ;;      Totals:         0       3       0       0
  2019 ;;Total ram usage:        3 bytes
  2020 ;; Hardware stack levels used:    1
  2021 ;; Hardware stack levels required when called:    9
  2022 ;; This function calls:
  2023 ;;		_ES_PostToService
  2024 ;; This function is called by:
  2025 ;;		_SPI32_TransmitFrames
  2026 ;;		_ES_Timer_Tick_Resp
  2027 ;;		_PostToList
  2028 ;; This function uses a non-reentrant model
  2029 ;;
  2030                           
  2031                           	psect	text6
  2032  0018DC                     __ptext6:
  2033                           	opt stack 0
  2034  0018DC                     _PostSPI32ControlService:
  2035                           	opt stack 0
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;Skip over the trampoline to the duplicate function for level 2
  2039  0018DC  B256               	btfsc	btemp,1,c
  2040  0018DE  EFDF  F00C         	goto	i2_PostSPI32ControlService
  2041  0018E2                     _PostSPI32ControlService$intlevel0:
  2042                           	opt stack 18
  2043                           
  2044                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  2045                           
  2046                           ;incstack = 0
  2047  0018E2  C0DA  F0D4         	movff	PostSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  2048  0018E6  C0DB  F0D5         	movff	PostSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  2049  0018EA  C0DC  F0D6         	movff	PostSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  2050  0018EE  0100               	movlb	0	; () banked
  2051  0018F0  5199               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  2052  0018F2  EC27  F009         	call	_ES_PostToService
  2053  0018F6  0012               	return	
  2054  0018F8                     __end_of_PostSPI32ControlService:
  2055                           	opt stack 0
  2056                           tosu	equ	0xFFF
  2057                           tosh	equ	0xFFE
  2058                           tosl	equ	0xFFD
  2059                           pclath	equ	0xFFA
  2060                           tblptru	equ	0xFF8
  2061                           tblptrh	equ	0xFF7
  2062                           tblptrl	equ	0xFF6
  2063                           tablat	equ	0xFF5
  2064                           prodh	equ	0xFF4
  2065                           prodl	equ	0xFF3
  2066                           postinc0	equ	0xFEE
  2067                           wreg	equ	0xFE8
  2068                           postdec1	equ	0xFE5
  2069                           fsr1l	equ	0xFE1
  2070                           indf2	equ	0xFDF
  2071                           postinc2	equ	0xFDE
  2072                           postdec2	equ	0xFDD
  2073                           fsr2h	equ	0xFDA
  2074                           fsr2l	equ	0xFD9
  2075                           status	equ	0xFD8
  2076                           
  2077 ;; *************** function _PostPatternControlService *****************
  2078 ;; Defined at:
  2079 ;;		line 135 in file "Pattern_ControlService.c"
  2080 ;; Parameters:    Size  Location     Type
  2081 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  2082 ;; Auto vars:     Size  Location     Type
  2083 ;;		None
  2084 ;; Return value:  Size  Location     Type
  2085 ;;                  1    wreg      unsigned char 
  2086 ;; Registers used:
  2087 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2088 ;; Tracked objects:
  2089 ;;		On entry : 0/0
  2090 ;;		On exit  : 0/0
  2091 ;;		Unchanged: 0/0
  2092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2093 ;;      Params:         0       3       0       0
  2094 ;;      Locals:         0       0       0       0
  2095 ;;      Temps:          0       0       0       0
  2096 ;;      Totals:         0       3       0       0
  2097 ;;Total ram usage:        3 bytes
  2098 ;; Hardware stack levels used:    1
  2099 ;; Hardware stack levels required when called:    9
  2100 ;; This function calls:
  2101 ;;		_ES_PostToService
  2102 ;; This function is called by:
  2103 ;;		_RunPatternControlService
  2104 ;;		_ES_Timer_Tick_Resp
  2105 ;;		_PostToList
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109                           	psect	text7
  2110  00197C                     __ptext7:
  2111                           	opt stack 0
  2112  00197C                     _PostPatternControlService:
  2113                           	opt stack 18
  2114                           
  2115                           ;Pattern_ControlService.c: 137: return ES_PostToService( MyPriority, ThisEvent);
  2116                           
  2117                           ;incstack = 0
  2118  00197C  C0DA  F0D4         	movff	PostPatternControlService@ThisEvent,ES_PostToService@TheEvent
  2119  001980  C0DB  F0D5         	movff	PostPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  2120  001984  C0DC  F0D6         	movff	PostPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  2121  001988  0100               	movlb	0	; () banked
  2122  00198A  519E               	movf	_MyPriority& (0+255),w,b
  2123  00198C  EC27  F009         	call	_ES_PostToService
  2124  001990  0012               	return	
  2125  001992                     __end_of_PostPatternControlService:
  2126                           	opt stack 0
  2127                           tosu	equ	0xFFF
  2128                           tosh	equ	0xFFE
  2129                           tosl	equ	0xFFD
  2130                           pclath	equ	0xFFA
  2131                           tblptru	equ	0xFF8
  2132                           tblptrh	equ	0xFF7
  2133                           tblptrl	equ	0xFF6
  2134                           tablat	equ	0xFF5
  2135                           prodh	equ	0xFF4
  2136                           prodl	equ	0xFF3
  2137                           postinc0	equ	0xFEE
  2138                           wreg	equ	0xFE8
  2139                           postdec1	equ	0xFE5
  2140                           fsr1l	equ	0xFE1
  2141                           indf2	equ	0xFDF
  2142                           postinc2	equ	0xFDE
  2143                           postdec2	equ	0xFDD
  2144                           fsr2h	equ	0xFDA
  2145                           fsr2l	equ	0xFD9
  2146                           status	equ	0xFD8
  2147                           
  2148 ;; *************** function _PostToggleService *****************
  2149 ;; Defined at:
  2150 ;;		line 108 in file "ToggleService.c"
  2151 ;; Parameters:    Size  Location     Type
  2152 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  2153 ;; Auto vars:     Size  Location     Type
  2154 ;;		None
  2155 ;; Return value:  Size  Location     Type
  2156 ;;                  1    wreg      unsigned char 
  2157 ;; Registers used:
  2158 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2159 ;; Tracked objects:
  2160 ;;		On entry : 0/0
  2161 ;;		On exit  : 0/0
  2162 ;;		Unchanged: 0/0
  2163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2164 ;;      Params:         0       3       0       0
  2165 ;;      Locals:         0       0       0       0
  2166 ;;      Temps:          0       0       0       0
  2167 ;;      Totals:         0       3       0       0
  2168 ;;Total ram usage:        3 bytes
  2169 ;; Hardware stack levels used:    1
  2170 ;; Hardware stack levels required when called:    9
  2171 ;; This function calls:
  2172 ;;		_ES_PostToService
  2173 ;; This function is called by:
  2174 ;;		_ES_Timer_Tick_Resp
  2175 ;; This function uses a non-reentrant model
  2176 ;;
  2177                           
  2178                           	psect	text8
  2179  001992                     __ptext8:
  2180                           	opt stack 0
  2181  001992                     _PostToggleService:
  2182                           	opt stack 18
  2183                           
  2184                           ;ToggleService.c: 110: return ES_PostToService( MyPriority, ThisEvent);
  2185                           ;	Return value of _PostToggleService is never used
  2186                           
  2187                           ;incstack = 0
  2188  001992  C0DA  F0D4         	movff	PostToggleService@ThisEvent,ES_PostToService@TheEvent
  2189  001996  C0DB  F0D5         	movff	PostToggleService@ThisEvent+1,ES_PostToService@TheEvent+1
  2190  00199A  C0DC  F0D6         	movff	PostToggleService@ThisEvent+2,ES_PostToService@TheEvent+2
  2191  00199E  0100               	movlb	0	; () banked
  2192  0019A0  519A               	movf	ToggleService@MyPriority& (0+255),w,b
  2193  0019A2  EC27  F009         	call	_ES_PostToService
  2194  0019A6  0012               	return	
  2195  0019A8                     __end_of_PostToggleService:
  2196                           	opt stack 0
  2197                           tosu	equ	0xFFF
  2198                           tosh	equ	0xFFE
  2199                           tosl	equ	0xFFD
  2200                           pclath	equ	0xFFA
  2201                           tblptru	equ	0xFF8
  2202                           tblptrh	equ	0xFF7
  2203                           tblptrl	equ	0xFF6
  2204                           tablat	equ	0xFF5
  2205                           prodh	equ	0xFF4
  2206                           prodl	equ	0xFF3
  2207                           postinc0	equ	0xFEE
  2208                           wreg	equ	0xFE8
  2209                           postdec1	equ	0xFE5
  2210                           fsr1l	equ	0xFE1
  2211                           indf2	equ	0xFDF
  2212                           postinc2	equ	0xFDE
  2213                           postdec2	equ	0xFDD
  2214                           fsr2h	equ	0xFDA
  2215                           fsr2l	equ	0xFD9
  2216                           status	equ	0xFD8
  2217                           
  2218 ;; *************** function _ES_GetMSBitSet *****************
  2219 ;; Defined at:
  2220 ;;		line 79 in file "ES_LookupTables.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;  Val2Check       2    0[BANK0 ] unsigned int 
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;  LoopCntr        1    9[BANK0 ] char 
  2225 ;;  Nybble2Test     1    8[BANK0 ] unsigned char 
  2226 ;;  ReturnVal       1    7[BANK0 ] unsigned char 
  2227 ;; Return value:  Size  Location     Type
  2228 ;;                  1    wreg      unsigned char 
  2229 ;; Registers used:
  2230 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  2231 ;; Tracked objects:
  2232 ;;		On entry : 0/0
  2233 ;;		On exit  : 0/0
  2234 ;;		Unchanged: 0/0
  2235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2236 ;;      Params:         0       2       0       0
  2237 ;;      Locals:         0       3       0       0
  2238 ;;      Temps:          0       5       0       0
  2239 ;;      Totals:         0      10       0       0
  2240 ;;Total ram usage:       10 bytes
  2241 ;; Hardware stack levels used:    1
  2242 ;; Hardware stack levels required when called:    6
  2243 ;; This function calls:
  2244 ;;		Nothing
  2245 ;; This function is called by:
  2246 ;;		_ES_Run
  2247 ;;		_ES_Timer_Tick_Resp
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text9
  2252  000ECE                     __ptext9:
  2253                           	opt stack 0
  2254  000ECE                     _ES_GetMSBitSet:
  2255                           	opt stack 21
  2256                           
  2257                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  2258                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  2259                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  2260                           
  2261                           ;incstack = 0
  2262  000ECE  0E80               	movlw	128
  2263  000ED0  0100               	movlb	0	; () banked
  2264  000ED2  6FC4               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2265                           
  2266                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  2267  000ED4  0E03               	movlw	3
  2268  000ED6  0100               	movlb	0	; () banked
  2269  000ED8  6FC6               	movwf	ES_GetMSBitSet@LoopCntr& (0+255),b
  2270  000EDA                     l2480:
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  2274  000EDA  0100               	movlb	0	; () banked
  2275  000EDC  BFC6               	btfsc	ES_GetMSBitSet@LoopCntr& (0+255),7,b
  2276  000EDE  D046               	goto	l2494
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  2280                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  2281                           ;ES_LookupTables.c: 91: 0x0F);
  2282                           
  2283                           ; BSR set to: 0
  2284                           
  2285                           ; BSR set to: 0
  2286  000EE0  0100               	movlb	0	; () banked
  2287  000EE2  51C6               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2288  000EE4  0D04               	mullw	4
  2289  000EE6  CFF3 F0BF          	movff	prodl,??_ES_GetMSBitSet
  2290  000EEA  C0BD  F0C0         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  2291  000EEE  C0BE  F0C1         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  2292  000EF2  0100               	movlb	0	; () banked
  2293  000EF4  2BBF               	incf	??_ES_GetMSBitSet& (0+255),f,b
  2294  000EF6  D004               	goto	u1324
  2295  000EF8                     u1325:
  2296  000EF8  0100               	movlb	0	; () banked
  2297  000EFA  90D8               	bcf	status,0,c
  2298  000EFC  33C1               	rrcf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2299  000EFE  33C0               	rrcf	(??_ES_GetMSBitSet+1)& (0+255),f,b
  2300  000F00                     u1324:
  2301  000F00  0100               	movlb	0	; () banked
  2302  000F02  2FBF               	decfsz	??_ES_GetMSBitSet& (0+255),f,b
  2303  000F04  D7F9               	goto	u1325
  2304  000F06  0100               	movlb	0	; () banked
  2305  000F08  51C0               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2306  000F0A  0B0F               	andlw	15
  2307  000F0C  0100               	movlb	0	; () banked
  2308  000F0E  6FC5               	movwf	ES_GetMSBitSet@Nybble2Test& (0+255),b
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  2312  000F10  0100               	movlb	0	; () banked
  2313  000F12  51C5               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2314  000F14  0100               	movlb	0	; () banked
  2315  000F16  B4D8               	btfsc	status,2,c
  2316  000F18  D026               	goto	l2490
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  2320                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  2321  000F1A  0EFF               	movlw	255
  2322  000F1C  0100               	movlb	0	; () banked
  2323  000F1E  6FBF               	movwf	??_ES_GetMSBitSet& (0+255),b
  2324  000F20  0EFF               	movlw	255
  2325  000F22  0100               	movlb	0	; () banked
  2326  000F24  6FC0               	movwf	(??_ES_GetMSBitSet+1)& (0+255),b
  2327  000F26  0100               	movlb	0	; () banked
  2328  000F28  51C5               	movf	ES_GetMSBitSet@Nybble2Test& (0+255),w,b
  2329  000F2A  0100               	movlb	0	; () banked
  2330  000F2C  6FC1               	movwf	(??_ES_GetMSBitSet+2)& (0+255),b
  2331  000F2E  6BC2               	clrf	(??_ES_GetMSBitSet+3)& (0+255),b
  2332  000F30  0100               	movlb	0	; () banked
  2333  000F32  51BF               	movf	??_ES_GetMSBitSet& (0+255),w,b
  2334  000F34  0100               	movlb	0	; () banked
  2335  000F36  27C1               	addwf	(??_ES_GetMSBitSet+2)& (0+255),f,b
  2336  000F38  0100               	movlb	0	; () banked
  2337  000F3A  51C0               	movf	(??_ES_GetMSBitSet+1)& (0+255),w,b
  2338  000F3C  0100               	movlb	0	; () banked
  2339  000F3E  23C2               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),f,b
  2340  000F40  0E51               	movlw	low _Nybble2MSBitNum
  2341  000F42  0100               	movlb	0	; () banked
  2342  000F44  25C1               	addwf	(??_ES_GetMSBitSet+2)& (0+255),w,b
  2343  000F46  6EF6               	movwf	tblptrl,c
  2344  000F48  0E03               	movlw	high _Nybble2MSBitNum
  2345  000F4A  21C2               	addwfc	(??_ES_GetMSBitSet+3)& (0+255),w,b
  2346  000F4C  6EF7               	movwf	tblptrh,c
  2347  000F4E                     	if	0	;There are less than 3 active tblptr bytes
  2348  000F4E                     	endif
  2349  000F4E  0008               	tblrd		*
  2350  000F50  CFF5 F0C3          	movff	tablat,??_ES_GetMSBitSet+4
  2351  000F54  0100               	movlb	0	; () banked
  2352  000F56  51C6               	movf	ES_GetMSBitSet@LoopCntr& (0+255),w,b
  2353  000F58  0D04               	mullw	4
  2354  000F5A  50F3               	movf	prodl,w,c
  2355  000F5C  0100               	movlb	0	; () banked
  2356  000F5E  25C3               	addwf	(??_ES_GetMSBitSet+4)& (0+255),w,b
  2357  000F60  0100               	movlb	0	; () banked
  2358  000F62  6FC4               	movwf	ES_GetMSBitSet@ReturnVal& (0+255),b
  2359                           
  2360                           ;ES_LookupTables.c: 96: break;
  2361  000F64  D003               	goto	l2494
  2362  000F66                     l2490:
  2363                           
  2364                           ; BSR set to: 0
  2365  000F66  0100               	movlb	0	; () banked
  2366  000F68  07C6               	decf	ES_GetMSBitSet@LoopCntr& (0+255),f,b
  2367  000F6A  D7B7               	goto	l2480
  2368  000F6C                     l2494:
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;ES_LookupTables.c: 97: }
  2372                           ;ES_LookupTables.c: 98: }
  2373                           ;ES_LookupTables.c: 99: return ReturnVal;
  2374  000F6C  0100               	movlb	0	; () banked
  2375  000F6E  51C4               	movf	ES_GetMSBitSet@ReturnVal& (0+255),w,b
  2376  000F70  0012               	return	
  2377  000F72                     __end_of_ES_GetMSBitSet:
  2378                           	opt stack 0
  2379                           tosu	equ	0xFFF
  2380                           tosh	equ	0xFFE
  2381                           tosl	equ	0xFFD
  2382                           pclath	equ	0xFFA
  2383                           tblptru	equ	0xFF8
  2384                           tblptrh	equ	0xFF7
  2385                           tblptrl	equ	0xFF6
  2386                           tablat	equ	0xFF5
  2387                           prodh	equ	0xFF4
  2388                           prodl	equ	0xFF3
  2389                           postinc0	equ	0xFEE
  2390                           wreg	equ	0xFE8
  2391                           postdec1	equ	0xFE5
  2392                           fsr1l	equ	0xFE1
  2393                           indf2	equ	0xFDF
  2394                           postinc2	equ	0xFDE
  2395                           postdec2	equ	0xFDD
  2396                           fsr2h	equ	0xFDA
  2397                           fsr2l	equ	0xFD9
  2398                           status	equ	0xFD8
  2399                           
  2400 ;; *************** function _RunCan_XmitService *****************
  2401 ;; Defined at:
  2402 ;;		line 133 in file "Can_XmitService.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;  ThisEvent       3   40[BANK0 ] struct ES_Event_t
  2405 ;; Auto vars:     Size  Location     Type
  2406 ;;  ReturnEvent     3   43[BANK0 ] struct ES_Event_t
  2407 ;; Return value:  Size  Location     Type
  2408 ;;                  3   40[BANK0 ] struct ES_Event_t
  2409 ;; Registers used:
  2410 ;;		wreg, status,2, status,0, cstack
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2416 ;;      Params:         0       3       0       0
  2417 ;;      Locals:         0       3       0       0
  2418 ;;      Temps:          0       0       0       0
  2419 ;;      Totals:         0       6       0       0
  2420 ;;Total ram usage:        6 bytes
  2421 ;; Hardware stack levels used:    1
  2422 ;; Hardware stack levels required when called:    7
  2423 ;; This function calls:
  2424 ;;		_InitCanHardware
  2425 ;;		_XmitData
  2426 ;; This function is called by:
  2427 ;;		_ES_Run
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           	psect	text10
  2432  001826                     __ptext10:
  2433                           	opt stack 0
  2434  001826                     _RunCan_XmitService:
  2435                           	opt stack 22
  2436                           
  2437                           ;Can_XmitService.c: 135: ES_Event ReturnEvent;
  2438                           ;Can_XmitService.c: 137: if (ThisEvent.EventType == ES_INIT) {
  2439                           
  2440                           ; BSR set to: 0
  2441                           ;incstack = 0
  2442  001826  0E02               	movlw	2
  2443  001828  0100               	movlb	0	; () banked
  2444  00182A  19E5               	xorwf	RunCan_XmitService@ThisEvent& (0+255),w,b
  2445  00182C  A4D8               	btfss	status,2,c
  2446  00182E  D005               	goto	l3016
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;Can_XmitService.c: 138: InitCanHardware();
  2450  001830  EC06  F00A         	call	_InitCanHardware	;wreg free
  2451                           
  2452                           ;Can_XmitService.c: 139: XmitData(0xAA);
  2453  001834  0EAA               	movlw	170
  2454  001836  EC5E  F00C         	call	_XmitData
  2455  00183A                     l3016:
  2456                           
  2457                           ;Can_XmitService.c: 140: }
  2458                           ;Can_XmitService.c: 141: ReturnEvent.EventType = ES_NO_EVENT;
  2459  00183A  0E00               	movlw	0
  2460  00183C  0100               	movlb	0	; () banked
  2461  00183E  6FE8               	movwf	RunCan_XmitService@ReturnEvent& (0+255),b
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;Can_XmitService.c: 142: return ReturnEvent;
  2465  001840  C0E8  F0E5         	movff	RunCan_XmitService@ReturnEvent,?_RunCan_XmitService
  2466  001844  C0E9  F0E6         	movff	RunCan_XmitService@ReturnEvent+1,?_RunCan_XmitService+1
  2467  001848  C0EA  F0E7         	movff	RunCan_XmitService@ReturnEvent+2,?_RunCan_XmitService+2
  2468  00184C  0012               	return	
  2469  00184E                     __end_of_RunCan_XmitService:
  2470                           	opt stack 0
  2471                           tosu	equ	0xFFF
  2472                           tosh	equ	0xFFE
  2473                           tosl	equ	0xFFD
  2474                           pclath	equ	0xFFA
  2475                           tblptru	equ	0xFF8
  2476                           tblptrh	equ	0xFF7
  2477                           tblptrl	equ	0xFF6
  2478                           tablat	equ	0xFF5
  2479                           prodh	equ	0xFF4
  2480                           prodl	equ	0xFF3
  2481                           postinc0	equ	0xFEE
  2482                           wreg	equ	0xFE8
  2483                           postdec1	equ	0xFE5
  2484                           fsr1l	equ	0xFE1
  2485                           indf2	equ	0xFDF
  2486                           postinc2	equ	0xFDE
  2487                           postdec2	equ	0xFDD
  2488                           fsr2h	equ	0xFDA
  2489                           fsr2l	equ	0xFD9
  2490                           status	equ	0xFD8
  2491                           
  2492 ;; *************** function _RunSPI32ControlService *****************
  2493 ;; Defined at:
  2494 ;;		line 138 in file "SPI32_ControlService.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;  ThisEvent       3   40[BANK0 ] struct ES_Event_t
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;  ReturnEvent     3   50[BANK0 ] struct ES_Event_t
  2499 ;; Return value:  Size  Location     Type
  2500 ;;                  3   40[BANK0 ] struct ES_Event_t
  2501 ;; Registers used:
  2502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2503 ;; Tracked objects:
  2504 ;;		On entry : 0/0
  2505 ;;		On exit  : 0/0
  2506 ;;		Unchanged: 0/0
  2507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2508 ;;      Params:         0       3       0       0
  2509 ;;      Locals:         0       3       0       0
  2510 ;;      Temps:          0       7       0       0
  2511 ;;      Totals:         0      13       0       0
  2512 ;;Total ram usage:       13 bytes
  2513 ;; Hardware stack levels used:    1
  2514 ;; Hardware stack levels required when called:    7
  2515 ;; This function calls:
  2516 ;;		_GetNextFrame
  2517 ;;		_SPI32_SendByte
  2518 ;; This function is called by:
  2519 ;;		_ES_Run
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523                           	psect	text11
  2524  00056A                     __ptext11:
  2525                           	opt stack 0
  2526  00056A                     _RunSPI32ControlService:
  2527                           	opt stack 22
  2528                           
  2529                           ;SPI32_ControlService.c: 140: ES_Event ReturnEvent;
  2530                           ;SPI32_ControlService.c: 141: ReturnEvent.EventType = ES_NO_EVENT;
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;incstack = 0
  2534  00056A  0E00               	movlw	0
  2535  00056C  0100               	movlb	0	; () banked
  2536  00056E  6FEF               	movwf	RunSPI32ControlService@ReturnEvent& (0+255),b
  2537                           
  2538                           ;SPI32_ControlService.c: 143: switch ( CurrentState ) {
  2539  000570  D082               	goto	l2946
  2540  000572                     l2900:
  2541                           
  2542                           ; BSR set to: 0
  2543                           ;SPI32_ControlService.c: 148: if(ThisEvent.EventType == ES_INIT){
  2544  000572  0E02               	movlw	2
  2545  000574  0100               	movlb	0	; () banked
  2546  000576  19E5               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2547  000578  A4D8               	btfss	status,2,c
  2548  00057A  D091               	goto	l481
  2549  00057C  D078               	goto	l2942
  2550  00057E                     l2904:
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;SPI32_ControlService.c: 159: if(ThisEvent.EventType == SPI32_TRANSMIT){
  2554  00057E  0E09               	movlw	9
  2555  000580  0100               	movlb	0	; () banked
  2556  000582  19E5               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2557  000584  A4D8               	btfss	status,2,c
  2558  000586  D08B               	goto	l481
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;SPI32_ControlService.c: 161: CurrentFrame = GetNextFrame();
  2562  000588  ECA6  F00C         	call	_GetNextFrame	;wreg free
  2563  00058C  C0BD  F080         	movff	?_GetNextFrame,_CurrentFrame
  2564  000590  C0BE  F081         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2565  000594  C0BF  F082         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2566  000598  C0C0  F083         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2567                           
  2568                           ;SPI32_ControlService.c: 163: SPI32_SendByte(CurrentFrame>>24);
  2569  00059C  0100               	movlb	0	; () banked
  2570  00059E  5183               	movf	(_CurrentFrame+3)& (0+255),w,b
  2571  0005A0  EC03  F00D         	call	_SPI32_SendByte
  2572  0005A4                     l2910:
  2573                           
  2574                           ;SPI32_ControlService.c: 165: CurrentState = SPI32_SendingByte1;
  2575  0005A4  0E02               	movlw	2
  2576  0005A6  D064               	goto	L6
  2577  0005A8                     l2912:
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;SPI32_ControlService.c: 172: if(ThisEvent.EventType == ES_TIMEOUT){
  2581  0005A8  0E03               	movlw	3
  2582  0005AA  0100               	movlb	0	; () banked
  2583  0005AC  19E5               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2584  0005AE  A4D8               	btfss	status,2,c
  2585  0005B0  D076               	goto	l481
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;SPI32_ControlService.c: 174: SPI32_SendByte(CurrentFrame>>16);
  2589  0005B2  0100               	movlb	0	; () banked
  2590  0005B4  5182               	movf	(_CurrentFrame+2)& (0+255),w,b
  2591  0005B6  EC03  F00D         	call	_SPI32_SendByte
  2592                           
  2593                           ;SPI32_ControlService.c: 176: CurrentState = SPI32_SendingByte2;
  2594  0005BA  0E03               	movlw	3
  2595  0005BC  D059               	goto	L6
  2596  0005BE                     l2918:
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;SPI32_ControlService.c: 184: if(ThisEvent.EventType == ES_TIMEOUT){
  2600  0005BE  0E03               	movlw	3
  2601  0005C0  0100               	movlb	0	; () banked
  2602  0005C2  19E5               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2603  0005C4  A4D8               	btfss	status,2,c
  2604  0005C6  D06B               	goto	l481
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;SPI32_ControlService.c: 186: SPI32_SendByte(CurrentFrame>>8);
  2608  0005C8  0100               	movlb	0	; () banked
  2609  0005CA  5181               	movf	(_CurrentFrame+1)& (0+255),w,b
  2610  0005CC  EC03  F00D         	call	_SPI32_SendByte
  2611                           
  2612                           ;SPI32_ControlService.c: 188: CurrentState = SPI32_SendingByte3;
  2613  0005D0  0E04               	movlw	4
  2614  0005D2  D04E               	goto	L6
  2615  0005D4                     l2924:
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;SPI32_ControlService.c: 196: if(ThisEvent.EventType == ES_TIMEOUT){
  2619  0005D4  0E03               	movlw	3
  2620  0005D6  0100               	movlb	0	; () banked
  2621  0005D8  19E5               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2622  0005DA  A4D8               	btfss	status,2,c
  2623  0005DC  D060               	goto	l481
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;SPI32_ControlService.c: 198: SPI32_SendByte(CurrentFrame);
  2627  0005DE  0100               	movlb	0	; () banked
  2628  0005E0  5180               	movf	_CurrentFrame& (0+255),w,b
  2629  0005E2  EC03  F00D         	call	_SPI32_SendByte
  2630                           
  2631                           ;SPI32_ControlService.c: 200: CurrentState = SPI32_SendingByte4;
  2632  0005E6  0E05               	movlw	5
  2633  0005E8  D043               	goto	L6
  2634  0005EA                     l2930:
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;SPI32_ControlService.c: 207: if(ThisEvent.EventType == ES_TIMEOUT){
  2638  0005EA  0E03               	movlw	3
  2639  0005EC  0100               	movlb	0	; () banked
  2640  0005EE  19E5               	xorwf	RunSPI32ControlService@ThisEvent& (0+255),w,b
  2641  0005F0  A4D8               	btfss	status,2,c
  2642  0005F2  D055               	goto	l481
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;SPI32_ControlService.c: 209: if(FrameIndex++ < NumFrames-1){
  2646  0005F4  0EFF               	movlw	255
  2647  0005F6  0100               	movlb	0	; () banked
  2648  0005F8  6FE8               	movwf	??_RunSPI32ControlService& (0+255),b
  2649  0005FA  0EFF               	movlw	255
  2650  0005FC  0100               	movlb	0	; () banked
  2651  0005FE  6FE9               	movwf	(??_RunSPI32ControlService+1)& (0+255),b
  2652  000600  0100               	movlb	0	; () banked
  2653  000602  519F               	movf	_NumFrames& (0+255),w,b
  2654  000604  0100               	movlb	0	; () banked
  2655  000606  6FEA               	movwf	(??_RunSPI32ControlService+2)& (0+255),b
  2656  000608  6BEB               	clrf	(??_RunSPI32ControlService+3)& (0+255),b
  2657  00060A  0100               	movlb	0	; () banked
  2658  00060C  51E8               	movf	??_RunSPI32ControlService& (0+255),w,b
  2659  00060E  0100               	movlb	0	; () banked
  2660  000610  27EA               	addwf	(??_RunSPI32ControlService+2)& (0+255),f,b
  2661  000612  0100               	movlb	0	; () banked
  2662  000614  51E9               	movf	(??_RunSPI32ControlService+1)& (0+255),w,b
  2663  000616  0100               	movlb	0	; () banked
  2664  000618  23EB               	addwfc	(??_RunSPI32ControlService+3)& (0+255),f,b
  2665  00061A  0100               	movlb	0	; () banked
  2666  00061C  2B9C               	incf	_FrameIndex& (0+255),f,b
  2667  00061E  059C               	decf	_FrameIndex& (0+255),w,b
  2668  000620  0100               	movlb	0	; () banked
  2669  000622  6FEC               	movwf	(??_RunSPI32ControlService+4)& (0+255),b
  2670  000624  6BED               	clrf	(??_RunSPI32ControlService+5)& (0+255),b
  2671  000626  0100               	movlb	0	; () banked
  2672  000628  51EA               	movf	(??_RunSPI32ControlService+2)& (0+255),w,b
  2673  00062A  0100               	movlb	0	; () banked
  2674  00062C  5DEC               	subwf	(??_RunSPI32ControlService+4)& (0+255),w,b
  2675  00062E  0100               	movlb	0	; () banked
  2676  000630  51ED               	movf	(??_RunSPI32ControlService+5)& (0+255),w,b
  2677  000632  0A80               	xorlw	128
  2678  000634  0100               	movlb	0	; () banked
  2679  000636  6FEE               	movwf	(??_RunSPI32ControlService+6)& (0+255),b
  2680  000638  0100               	movlb	0	; () banked
  2681  00063A  51EB               	movf	(??_RunSPI32ControlService+3)& (0+255),w,b
  2682  00063C  0A80               	xorlw	128
  2683  00063E  0100               	movlb	0	; () banked
  2684  000640  59EE               	subwfb	(??_RunSPI32ControlService+6)& (0+255),w,b
  2685  000642  B0D8               	btfsc	status,0,c
  2686  000644  D014               	goto	l2942
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;SPI32_ControlService.c: 211: FramePointer++;
  2690  000646  0E04               	movlw	4
  2691  000648  0100               	movlb	0	; () banked
  2692  00064A  278F               	addwf	_FramePointer& (0+255),f,b
  2693  00064C  0E00               	movlw	0
  2694  00064E  2390               	addwfc	(_FramePointer+1)& (0+255),f,b
  2695                           
  2696                           ; BSR set to: 0
  2697                           ;SPI32_ControlService.c: 212: CurrentFrame = GetNextFrame();
  2698  000650  ECA6  F00C         	call	_GetNextFrame	;wreg free
  2699  000654  C0BD  F080         	movff	?_GetNextFrame,_CurrentFrame
  2700  000658  C0BE  F081         	movff	?_GetNextFrame+1,_CurrentFrame+1
  2701  00065C  C0BF  F082         	movff	?_GetNextFrame+2,_CurrentFrame+2
  2702  000660  C0C0  F083         	movff	?_GetNextFrame+3,_CurrentFrame+3
  2703                           
  2704                           ;SPI32_ControlService.c: 214: SPI32_SendByte(CurrentFrame>>24);
  2705  000664  0100               	movlb	0	; () banked
  2706  000666  5183               	movf	(_CurrentFrame+3)& (0+255),w,b
  2707  000668  EC03  F00D         	call	_SPI32_SendByte
  2708  00066C  D79B               	goto	l2910
  2709  00066E                     l2942:
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;SPI32_ControlService.c: 219: else{
  2713                           ;SPI32_ControlService.c: 221: CurrentState = SPI32_Waiting4Send;
  2714  00066E  0E01               	movlw	1
  2715  000670                     L6:
  2716  000670  0100               	movlb	0	; () banked
  2717  000672  6F98               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;SPI32_ControlService.c: 226: }
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;SPI32_ControlService.c: 222: }
  2724                           ;SPI32_ControlService.c: 223: }
  2725                           ;SPI32_ControlService.c: 224: break;
  2726                           
  2727                           ; BSR set to: 0
  2728  000674  D014               	goto	l481
  2729  000676                     l2946:
  2730                           
  2731                           ; BSR set to: 0
  2732  000676  0100               	movlb	0	; () banked
  2733  000678  5198               	movf	SPI32_ControlService@CurrentState& (0+255),w,b
  2734                           
  2735                           ; Switch size 1, requested type "space"
  2736                           ; Number of cases is 6, Range of values is 0 to 5
  2737                           ; switch strategies available:
  2738                           ; Name         Instructions Cycles
  2739                           ; simple_byte           19    10 (average)
  2740                           ;	Chosen strategy is simple_byte
  2741  00067A  0A00               	xorlw	0	; case 0
  2742  00067C  B4D8               	btfsc	status,2,c
  2743  00067E  D779               	goto	l2900
  2744  000680  0A01               	xorlw	1	; case 1
  2745  000682  B4D8               	btfsc	status,2,c
  2746  000684  D77C               	goto	l2904
  2747  000686  0A03               	xorlw	3	; case 2
  2748  000688  B4D8               	btfsc	status,2,c
  2749  00068A  D78E               	goto	l2912
  2750  00068C  0A01               	xorlw	1	; case 3
  2751  00068E  B4D8               	btfsc	status,2,c
  2752  000690  D796               	goto	l2918
  2753  000692  0A07               	xorlw	7	; case 4
  2754  000694  B4D8               	btfsc	status,2,c
  2755  000696  D79E               	goto	l2924
  2756  000698  0A01               	xorlw	1	; case 5
  2757  00069A  B4D8               	btfsc	status,2,c
  2758  00069C  D7A6               	goto	l2930
  2759  00069E                     l481:
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;SPI32_ControlService.c: 227: return ReturnEvent;
  2763  00069E  C0EF  F0E5         	movff	RunSPI32ControlService@ReturnEvent,?_RunSPI32ControlService
  2764  0006A2  C0F0  F0E6         	movff	RunSPI32ControlService@ReturnEvent+1,?_RunSPI32ControlService+1
  2765  0006A6  C0F1  F0E7         	movff	RunSPI32ControlService@ReturnEvent+2,?_RunSPI32ControlService+2
  2766                           
  2767                           ; BSR set to: 0
  2768  0006AA  0012               	return		;funcret
  2769  0006AC                     __end_of_RunSPI32ControlService:
  2770                           	opt stack 0
  2771                           tosu	equ	0xFFF
  2772                           tosh	equ	0xFFE
  2773                           tosl	equ	0xFFD
  2774                           pclath	equ	0xFFA
  2775                           tblptru	equ	0xFF8
  2776                           tblptrh	equ	0xFF7
  2777                           tblptrl	equ	0xFF6
  2778                           tablat	equ	0xFF5
  2779                           prodh	equ	0xFF4
  2780                           prodl	equ	0xFF3
  2781                           postinc0	equ	0xFEE
  2782                           wreg	equ	0xFE8
  2783                           postdec1	equ	0xFE5
  2784                           fsr1l	equ	0xFE1
  2785                           indf2	equ	0xFDF
  2786                           postinc2	equ	0xFDE
  2787                           postdec2	equ	0xFDD
  2788                           fsr2h	equ	0xFDA
  2789                           fsr2l	equ	0xFD9
  2790                           status	equ	0xFD8
  2791                           
  2792 ;; *************** function _RunPatternControlService *****************
  2793 ;; Defined at:
  2794 ;;		line 157 in file "Pattern_ControlService.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  ThisEvent       3   40[BANK0 ] struct ES_Event_t
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;  testEvent       3   46[BANK0 ] struct ES_Event_t
  2799 ;;  ReturnEvent     3   43[BANK0 ] struct ES_Event_t
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  3   40[BANK0 ] struct ES_Event_t
  2802 ;; Registers used:
  2803 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2809 ;;      Params:         0       3       0       0
  2810 ;;      Locals:         0       6       0       0
  2811 ;;      Temps:          0       0       0       0
  2812 ;;      Totals:         0       9       0       0
  2813 ;;Total ram usage:        9 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:   13
  2816 ;; This function calls:
  2817 ;;		_PausePattern
  2818 ;;		_PostPatternControlService
  2819 ;;		_ShowPattern
  2820 ;;		_StopPattern
  2821 ;; This function is called by:
  2822 ;;		_ES_Run
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text12
  2827  000C9C                     __ptext12:
  2828                           	opt stack 0
  2829  000C9C                     _RunPatternControlService:
  2830                           	opt stack 16
  2831                           
  2832                           ;Pattern_ControlService.c: 159: ES_Event ReturnEvent;
  2833                           ;Pattern_ControlService.c: 160: ReturnEvent.EventType = ES_NO_EVENT;
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;incstack = 0
  2837  000C9C  0E00               	movlw	0
  2838  000C9E  0100               	movlb	0	; () banked
  2839  000CA0  6FE8               	movwf	RunPatternControlService@ReturnEvent& (0+255),b
  2840                           
  2841                           ;Pattern_ControlService.c: 162: switch(CurrentState){
  2842  000CA2  D049               	goto	l2876
  2843  000CA4                     l2834:
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;Pattern_ControlService.c: 165: if(ThisEvent.EventType == ES_INIT){
  2847  000CA4  0E02               	movlw	2
  2848  000CA6  0100               	movlb	0	; () banked
  2849  000CA8  19E5               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2850  000CAA  A4D8               	btfss	status,2,c
  2851  000CAC  D052               	goto	l348
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;Pattern_ControlService.c: 169: CurrentState = Pattern_Off;
  2855  000CAE  0E01               	movlw	1
  2856  000CB0  0100               	movlb	0	; () banked
  2857  000CB2  6F9B               	movwf	_CurrentState& (0+255),b
  2858                           
  2859                           ;Pattern_ControlService.c: 172: ES_Event testEvent;
  2860                           ;Pattern_ControlService.c: 173: testEvent.EventType = PATTERN_START;
  2861  000CB4  0E05               	movlw	5
  2862  000CB6  0100               	movlb	0	; () banked
  2863  000CB8  6FEB               	movwf	RunPatternControlService@testEvent& (0+255),b
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;Pattern_ControlService.c: 174: PostPatternControlService(testEvent);
  2867  000CBA  C0EB  F0DA         	movff	RunPatternControlService@testEvent,PostPatternControlService@ThisEvent
  2868  000CBE  C0EC  F0DB         	movff	RunPatternControlService@testEvent+1,PostPatternControlService@ThisEvent+1
  2869  000CC2  C0ED  F0DC         	movff	RunPatternControlService@testEvent+2,PostPatternControlService@ThisEvent+2
  2870  000CC6  ECBE  F00C         	call	_PostPatternControlService	;wreg free
  2871                           
  2872                           ;Pattern_ControlService.c: 176: }
  2873                           ;Pattern_ControlService.c: 177: break;
  2874  000CCA  D043               	goto	l348
  2875  000CCC                     l2840:
  2876                           
  2877                           ;Pattern_ControlService.c: 181: if(ThisEvent.EventType == PATTERN_START){
  2878  000CCC  0E05               	movlw	5
  2879  000CCE  0100               	movlb	0	; () banked
  2880  000CD0  19E5               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2881  000CD2  A4D8               	btfss	status,2,c
  2882  000CD4  D03E               	goto	l348
  2883                           
  2884                           ; BSR set to: 0
  2885                           ;Pattern_ControlService.c: 183: ShowPattern();
  2886  000CD6  EC27  F00C         	call	_ShowPattern	;wreg free
  2887  000CDA                     l2844:
  2888                           
  2889                           ;Pattern_ControlService.c: 185: CurrentState = Pattern_Running;
  2890  000CDA  0E02               	movlw	2
  2891  000CDC  D029               	goto	L10
  2892  000CDE                     l2846:
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;Pattern_ControlService.c: 191: if(ThisEvent.EventType == ES_TIMEOUT){
  2896  000CDE  0E03               	movlw	3
  2897  000CE0  0100               	movlb	0	; () banked
  2898  000CE2  19E5               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2899  000CE4  A4D8               	btfss	status,2,c
  2900  000CE6  D003               	goto	l2850
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;Pattern_ControlService.c: 193: ShowPattern();
  2904  000CE8  EC27  F00C         	call	_ShowPattern	;wreg free
  2905                           
  2906                           ;Pattern_ControlService.c: 194: }
  2907  000CEC  D032               	goto	l348
  2908  000CEE                     l2850:
  2909                           
  2910                           ;Pattern_ControlService.c: 196: else if(ThisEvent.EventType == PATTERN_END){
  2911  000CEE  0E06               	movlw	6
  2912  000CF0  0100               	movlb	0	; () banked
  2913  000CF2  19E5               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2914  000CF4  A4D8               	btfss	status,2,c
  2915  000CF6  D003               	goto	l2856
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;Pattern_ControlService.c: 198: StopPattern();
  2919  000CF8  EC7C  F00C         	call	_StopPattern	;wreg free
  2920  000CFC  D018               	goto	L12
  2921  000CFE                     l2856:
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;Pattern_ControlService.c: 203: else if(ThisEvent.EventType == PATTERN_PAUSE){
  2925  000CFE  0E07               	movlw	7
  2926  000D00  0100               	movlb	0	; () banked
  2927  000D02  19E5               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2928  000D04  A4D8               	btfss	status,2,c
  2929  000D06  D025               	goto	l348
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;Pattern_ControlService.c: 205: PausePattern();
  2933  000D08  EC0C  F00D         	call	_PausePattern	;wreg free
  2934                           
  2935                           ;Pattern_ControlService.c: 207: CurrentState = Pattern_Paused;
  2936  000D0C  0E03               	movlw	3
  2937  000D0E  D010               	goto	L10
  2938  000D10                     l2862:
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;Pattern_ControlService.c: 213: if(ThisEvent.EventType == PATTERN_UNPAUSE){
  2942  000D10  0E08               	movlw	8
  2943  000D12  0100               	movlb	0	; () banked
  2944  000D14  19E5               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2945  000D16  A4D8               	btfss	status,2,c
  2946  000D18  D003               	goto	l2868
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;Pattern_ControlService.c: 215: ShowPattern();
  2950  000D1A  EC27  F00C         	call	_ShowPattern	;wreg free
  2951  000D1E  D7DD               	goto	l2844
  2952  000D20                     l2868:
  2953                           
  2954                           ; BSR set to: 0
  2955                           ;Pattern_ControlService.c: 220: else if(ThisEvent.EventType == PATTERN_END){
  2956  000D20  0E06               	movlw	6
  2957  000D22  0100               	movlb	0	; () banked
  2958  000D24  19E5               	xorwf	RunPatternControlService@ThisEvent& (0+255),w,b
  2959  000D26  A4D8               	btfss	status,2,c
  2960  000D28  D014               	goto	l348
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;Pattern_ControlService.c: 222: StopPattern();
  2964  000D2A  EC7C  F00C         	call	_StopPattern	;wreg free
  2965  000D2E                     L12:
  2966                           
  2967                           ;Pattern_ControlService.c: 224: CurrentState = Pattern_Off;
  2968  000D2E  0E01               	movlw	1
  2969  000D30                     L10:
  2970  000D30  0100               	movlb	0	; () banked
  2971  000D32  6F9B               	movwf	_CurrentState& (0+255),b
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;Pattern_ControlService.c: 227: }
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;Pattern_ControlService.c: 225: }
  2978                           ;Pattern_ControlService.c: 226: break;
  2979                           
  2980                           ; BSR set to: 0
  2981  000D34  D00E               	goto	l348
  2982  000D36                     l2876:
  2983                           
  2984                           ; BSR set to: 0
  2985  000D36  0100               	movlb	0	; () banked
  2986  000D38  519B               	movf	_CurrentState& (0+255),w,b
  2987                           
  2988                           ; Switch size 1, requested type "space"
  2989                           ; Number of cases is 4, Range of values is 0 to 3
  2990                           ; switch strategies available:
  2991                           ; Name         Instructions Cycles
  2992                           ; simple_byte           13     7 (average)
  2993                           ;	Chosen strategy is simple_byte
  2994  000D3A  0A00               	xorlw	0	; case 0
  2995  000D3C  B4D8               	btfsc	status,2,c
  2996  000D3E  D7B2               	goto	l2834
  2997  000D40  0A01               	xorlw	1	; case 1
  2998  000D42  B4D8               	btfsc	status,2,c
  2999  000D44  D7C3               	goto	l2840
  3000  000D46  0A03               	xorlw	3	; case 2
  3001  000D48  B4D8               	btfsc	status,2,c
  3002  000D4A  D7C9               	goto	l2846
  3003  000D4C  0A01               	xorlw	1	; case 3
  3004  000D4E  B4D8               	btfsc	status,2,c
  3005  000D50  D7DF               	goto	l2862
  3006  000D52                     l348:
  3007                           
  3008                           ;Pattern_ControlService.c: 228: return ReturnEvent;
  3009  000D52  C0E8  F0E5         	movff	RunPatternControlService@ReturnEvent,?_RunPatternControlService
  3010  000D56  C0E9  F0E6         	movff	RunPatternControlService@ReturnEvent+1,?_RunPatternControlService+1
  3011  000D5A  C0EA  F0E7         	movff	RunPatternControlService@ReturnEvent+2,?_RunPatternControlService+2
  3012  000D5E  0012               	return		;funcret
  3013  000D60                     __end_of_RunPatternControlService:
  3014                           	opt stack 0
  3015                           tosu	equ	0xFFF
  3016                           tosh	equ	0xFFE
  3017                           tosl	equ	0xFFD
  3018                           pclath	equ	0xFFA
  3019                           tblptru	equ	0xFF8
  3020                           tblptrh	equ	0xFF7
  3021                           tblptrl	equ	0xFF6
  3022                           tablat	equ	0xFF5
  3023                           prodh	equ	0xFF4
  3024                           prodl	equ	0xFF3
  3025                           postinc0	equ	0xFEE
  3026                           wreg	equ	0xFE8
  3027                           postdec1	equ	0xFE5
  3028                           fsr1l	equ	0xFE1
  3029                           indf2	equ	0xFDF
  3030                           postinc2	equ	0xFDE
  3031                           postdec2	equ	0xFDD
  3032                           fsr2h	equ	0xFDA
  3033                           fsr2l	equ	0xFD9
  3034                           status	equ	0xFD8
  3035                           
  3036 ;; *************** function _RunToggleService *****************
  3037 ;; Defined at:
  3038 ;;		line 130 in file "ToggleService.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  ThisEvent       3   40[BANK0 ] struct ES_Event_t
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  ReturnEvent     3   43[BANK0 ] struct ES_Event_t
  3043 ;; Return value:  Size  Location     Type
  3044 ;;                  3   40[BANK0 ] struct ES_Event_t
  3045 ;; Registers used:
  3046 ;;		wreg, status,2, status,0, cstack
  3047 ;; Tracked objects:
  3048 ;;		On entry : 0/0
  3049 ;;		On exit  : 0/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3052 ;;      Params:         0       3       0       0
  3053 ;;      Locals:         0       3       0       0
  3054 ;;      Temps:          0       0       0       0
  3055 ;;      Totals:         0       6       0       0
  3056 ;;Total ram usage:        6 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; Hardware stack levels required when called:    7
  3059 ;; This function calls:
  3060 ;;		_XmitData
  3061 ;; This function is called by:
  3062 ;;		_ES_Run
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           	psect	text13
  3067  001672                     __ptext13:
  3068                           	opt stack 0
  3069  001672                     _RunToggleService:
  3070                           	opt stack 22
  3071                           
  3072                           ;ToggleService.c: 132: ES_Event ReturnEvent;
  3073                           ;ToggleService.c: 133: ReturnEvent.EventType = ES_NO_EVENT;
  3074                           
  3075                           ;incstack = 0
  3076  001672  0E00               	movlw	0
  3077  001674  0100               	movlb	0	; () banked
  3078  001676  6FE8               	movwf	RunToggleService@ReturnEvent& (0+255),b
  3079                           
  3080                           ; BSR set to: 0
  3081                           ;ToggleService.c: 137: if (ThisEvent.EventType == ES_TIMEOUT) {
  3082  001678  0E03               	movlw	3
  3083  00167A  0100               	movlb	0	; () banked
  3084  00167C  19E5               	xorwf	RunToggleService@ThisEvent& (0+255),w,b
  3085  00167E  A4D8               	btfss	status,2,c
  3086  001680  D010               	goto	l2990
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;ToggleService.c: 138: if (ThisEvent.EventParam == 2) {
  3090  001682  0E02               	movlw	2
  3091  001684  0100               	movlb	0	; () banked
  3092  001686  19E6               	xorwf	(RunToggleService@ThisEvent+1)& (0+255),w,b
  3093  001688  0100               	movlb	0	; () banked
  3094  00168A  11E7               	iorwf	(RunToggleService@ThisEvent+2)& (0+255),w,b
  3095  00168C  A4D8               	btfss	status,2,c
  3096  00168E  D009               	goto	l2990
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;ToggleService.c: 139: if (LATA1 == 1) {
  3100  001690  A289               	btfss	3977,1,c	;volatile
  3101  001692  D002               	goto	l592
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;ToggleService.c: 140: LATA1 = 0;
  3105  001694  9289               	bcf	3977,1,c	;volatile
  3106                           
  3107                           ;ToggleService.c: 141: } else if (LATA1 == 0) {
  3108  001696  D002               	goto	l2988
  3109  001698                     l592:
  3110                           
  3111                           ; BSR set to: 0
  3112  001698  A289               	btfss	3977,1,c	;volatile
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;ToggleService.c: 142: LATA1 = 1;
  3116  00169A  8289               	bsf	3977,1,c	;volatile
  3117  00169C                     l2988:
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;ToggleService.c: 143: }
  3121                           ;ToggleService.c: 145: XmitData(0xAA);
  3122  00169C  0EAA               	movlw	170
  3123  00169E  EC5E  F00C         	call	_XmitData
  3124  0016A2                     l2990:
  3125                           
  3126                           ;ToggleService.c: 146: }
  3127                           ;ToggleService.c: 147: }
  3128                           ;ToggleService.c: 148: return ReturnEvent;
  3129  0016A2  C0E8  F0E5         	movff	RunToggleService@ReturnEvent,?_RunToggleService
  3130  0016A6  C0E9  F0E6         	movff	RunToggleService@ReturnEvent+1,?_RunToggleService+1
  3131  0016AA  C0EA  F0E7         	movff	RunToggleService@ReturnEvent+2,?_RunToggleService+2
  3132  0016AE  0012               	return	
  3133  0016B0                     __end_of_RunToggleService:
  3134                           	opt stack 0
  3135                           tosu	equ	0xFFF
  3136                           tosh	equ	0xFFE
  3137                           tosl	equ	0xFFD
  3138                           pclath	equ	0xFFA
  3139                           tblptru	equ	0xFF8
  3140                           tblptrh	equ	0xFF7
  3141                           tblptrl	equ	0xFF6
  3142                           tablat	equ	0xFF5
  3143                           prodh	equ	0xFF4
  3144                           prodl	equ	0xFF3
  3145                           postinc0	equ	0xFEE
  3146                           wreg	equ	0xFE8
  3147                           postdec1	equ	0xFE5
  3148                           fsr1l	equ	0xFE1
  3149                           indf2	equ	0xFDF
  3150                           postinc2	equ	0xFDE
  3151                           postdec2	equ	0xFDD
  3152                           fsr2h	equ	0xFDA
  3153                           fsr2l	equ	0xFD9
  3154                           status	equ	0xFD8
  3155                           
  3156 ;; *************** function _SPI32_SendByte *****************
  3157 ;; Defined at:
  3158 ;;		line 84 in file "SPI32_HW.c"
  3159 ;; Parameters:    Size  Location     Type
  3160 ;;  newByte         1    wreg     unsigned char 
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;  newByte         1    0[BANK0 ] unsigned char 
  3163 ;; Return value:  Size  Location     Type
  3164 ;;                  1    wreg      void 
  3165 ;; Registers used:
  3166 ;;		wreg
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 0/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3172 ;;      Params:         0       0       0       0
  3173 ;;      Locals:         0       1       0       0
  3174 ;;      Temps:          0       0       0       0
  3175 ;;      Totals:         0       1       0       0
  3176 ;;Total ram usage:        1 bytes
  3177 ;; Hardware stack levels used:    1
  3178 ;; Hardware stack levels required when called:    6
  3179 ;; This function calls:
  3180 ;;		Nothing
  3181 ;; This function is called by:
  3182 ;;		_RunSPI32ControlService
  3183 ;; This function uses a non-reentrant model
  3184 ;;
  3185                           
  3186                           	psect	text14
  3187  001A06                     __ptext14:
  3188                           	opt stack 0
  3189  001A06                     _SPI32_SendByte:
  3190                           	opt stack 22
  3191                           
  3192                           ;incstack = 0
  3193                           ;SPI32_SendByte@newByte stored from wreg
  3194  001A06  0100               	movlb	0	; () banked
  3195  001A08  6FBD               	movwf	SPI32_SendByte@newByte& (0+255),b
  3196                           
  3197                           ;SPI32_HW.c: 97: SSPBUF = newByte;
  3198  001A0A  C0BD  FFC9         	movff	SPI32_SendByte@newByte,4041	;volatile
  3199  001A0E  0012               	return		;funcret
  3200  001A10                     __end_of_SPI32_SendByte:
  3201                           	opt stack 0
  3202                           tosu	equ	0xFFF
  3203                           tosh	equ	0xFFE
  3204                           tosl	equ	0xFFD
  3205                           pclath	equ	0xFFA
  3206                           tblptru	equ	0xFF8
  3207                           tblptrh	equ	0xFF7
  3208                           tblptrl	equ	0xFF6
  3209                           tablat	equ	0xFF5
  3210                           prodh	equ	0xFF4
  3211                           prodl	equ	0xFF3
  3212                           postinc0	equ	0xFEE
  3213                           wreg	equ	0xFE8
  3214                           postdec1	equ	0xFE5
  3215                           fsr1l	equ	0xFE1
  3216                           indf2	equ	0xFDF
  3217                           postinc2	equ	0xFDE
  3218                           postdec2	equ	0xFDD
  3219                           fsr2h	equ	0xFDA
  3220                           fsr2l	equ	0xFD9
  3221                           status	equ	0xFD8
  3222                           
  3223 ;; *************** function _GetNextFrame *****************
  3224 ;; Defined at:
  3225 ;;		line 249 in file "SPI32_ControlService.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;		None
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;		None
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  4    0[BANK0 ] unsigned long 
  3232 ;; Registers used:
  3233 ;;		fsr2l, fsr2h
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3239 ;;      Params:         0       4       0       0
  3240 ;;      Locals:         0       0       0       0
  3241 ;;      Temps:          0       0       0       0
  3242 ;;      Totals:         0       4       0       0
  3243 ;;Total ram usage:        4 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:    6
  3246 ;; This function calls:
  3247 ;;		Nothing
  3248 ;; This function is called by:
  3249 ;;		_RunSPI32ControlService
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           	psect	text15
  3254  00194C                     __ptext15:
  3255                           	opt stack 0
  3256  00194C                     _GetNextFrame:
  3257                           	opt stack 22
  3258                           
  3259                           ;SPI32_ControlService.c: 250: return *(FramePointer);
  3260                           
  3261                           ;incstack = 0
  3262  00194C  C08F  FFD9         	movff	_FramePointer,fsr2l
  3263  001950  C090  FFDA         	movff	_FramePointer+1,fsr2h
  3264  001954  CFDE F0BD          	movff	postinc2,?_GetNextFrame
  3265  001958  CFDE F0BE          	movff	postinc2,?_GetNextFrame+1
  3266  00195C  CFDE F0BF          	movff	postinc2,?_GetNextFrame+2
  3267  001960  CFDE F0C0          	movff	postinc2,?_GetNextFrame+3
  3268  001964  0012               	return	
  3269  001966                     __end_of_GetNextFrame:
  3270                           	opt stack 0
  3271                           tosu	equ	0xFFF
  3272                           tosh	equ	0xFFE
  3273                           tosl	equ	0xFFD
  3274                           pclath	equ	0xFFA
  3275                           tblptru	equ	0xFF8
  3276                           tblptrh	equ	0xFF7
  3277                           tblptrl	equ	0xFF6
  3278                           tablat	equ	0xFF5
  3279                           prodh	equ	0xFF4
  3280                           prodl	equ	0xFF3
  3281                           postinc0	equ	0xFEE
  3282                           wreg	equ	0xFE8
  3283                           postdec1	equ	0xFE5
  3284                           fsr1l	equ	0xFE1
  3285                           indf2	equ	0xFDF
  3286                           postinc2	equ	0xFDE
  3287                           postdec2	equ	0xFDD
  3288                           fsr2h	equ	0xFDA
  3289                           fsr2l	equ	0xFD9
  3290                           status	equ	0xFD8
  3291                           
  3292 ;; *************** function _StopPattern *****************
  3293 ;; Defined at:
  3294 ;;		line 280 in file "Pattern_ControlService.c"
  3295 ;; Parameters:    Size  Location     Type
  3296 ;;		None
  3297 ;; Auto vars:     Size  Location     Type
  3298 ;;		None
  3299 ;; Return value:  Size  Location     Type
  3300 ;;                  1    wreg      void 
  3301 ;; Registers used:
  3302 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3303 ;; Tracked objects:
  3304 ;;		On entry : 0/0
  3305 ;;		On exit  : 0/0
  3306 ;;		Unchanged: 0/0
  3307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3308 ;;      Params:         0       0       0       0
  3309 ;;      Locals:         0       0       0       0
  3310 ;;      Temps:          0       0       0       0
  3311 ;;      Totals:         0       0       0       0
  3312 ;;Total ram usage:        0 bytes
  3313 ;; Hardware stack levels used:    1
  3314 ;; Hardware stack levels required when called:   12
  3315 ;; This function calls:
  3316 ;;		_DotStar_Off
  3317 ;;		_ES_Timer_StopTimer
  3318 ;;		_ResetPattern
  3319 ;; This function is called by:
  3320 ;;		_RunPatternControlService
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           	psect	text16
  3325  0018F8                     __ptext16:
  3326                           	opt stack 0
  3327  0018F8                     _StopPattern:
  3328                           	opt stack 16
  3329                           
  3330                           ;Pattern_ControlService.c: 281: PatternConfigs[0] = 0;
  3331                           
  3332                           ;incstack = 0
  3333  0018F8  0E00               	movlw	0
  3334  0018FA  0100               	movlb	0	; () banked
  3335  0018FC  6FF8               	movwf	_PatternConfigs& (0+255),b
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;Pattern_ControlService.c: 283: ES_Timer_StopTimer(0);
  3339  0018FE  0E00               	movlw	0
  3340  001900  EC63  F00A         	call	_ES_Timer_StopTimer
  3341                           
  3342                           ;Pattern_ControlService.c: 285: DotStar_Off();
  3343  001904  EC8A  F00C         	call	_DotStar_Off	;wreg free
  3344                           
  3345                           ;Pattern_ControlService.c: 287: ResetPattern();
  3346  001908  EC08  F00D         	call	_ResetPattern	;wreg free
  3347                           
  3348                           ;Pattern_ControlService.c: 289: PatternConfigs[0] = 0;
  3349  00190C  0E00               	movlw	0
  3350  00190E  0100               	movlb	0	; () banked
  3351  001910  6FF8               	movwf	_PatternConfigs& (0+255),b
  3352                           
  3353                           ; BSR set to: 0
  3354  001912  0012               	return		;funcret
  3355  001914                     __end_of_StopPattern:
  3356                           	opt stack 0
  3357                           tosu	equ	0xFFF
  3358                           tosh	equ	0xFFE
  3359                           tosl	equ	0xFFD
  3360                           pclath	equ	0xFFA
  3361                           tblptru	equ	0xFF8
  3362                           tblptrh	equ	0xFF7
  3363                           tblptrl	equ	0xFF6
  3364                           tablat	equ	0xFF5
  3365                           prodh	equ	0xFF4
  3366                           prodl	equ	0xFF3
  3367                           postinc0	equ	0xFEE
  3368                           wreg	equ	0xFE8
  3369                           postdec1	equ	0xFE5
  3370                           fsr1l	equ	0xFE1
  3371                           indf2	equ	0xFDF
  3372                           postinc2	equ	0xFDE
  3373                           postdec2	equ	0xFDD
  3374                           fsr2h	equ	0xFDA
  3375                           fsr2l	equ	0xFD9
  3376                           status	equ	0xFD8
  3377                           
  3378 ;; *************** function _ResetPattern *****************
  3379 ;; Defined at:
  3380 ;;		line 121 in file "Pattern_RGBPatterns.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;		None
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;		None
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  1    wreg      void 
  3387 ;; Registers used:
  3388 ;;		wreg, status,2
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3394 ;;      Params:         0       0       0       0
  3395 ;;      Locals:         0       0       0       0
  3396 ;;      Temps:          0       0       0       0
  3397 ;;      Totals:         0       0       0       0
  3398 ;;Total ram usage:        0 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; Hardware stack levels required when called:    6
  3401 ;; This function calls:
  3402 ;;		Nothing
  3403 ;; This function is called by:
  3404 ;;		_StopPattern
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           	psect	text17
  3409  001A10                     __ptext17:
  3410                           	opt stack 0
  3411  001A10                     _ResetPattern:
  3412                           	opt stack 21
  3413                           
  3414                           ;Pattern_RGBPatterns.c: 123: PatternStepCounter=0;
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;incstack = 0
  3418  001A10  0E00               	movlw	0
  3419  001A12  0100               	movlb	0	; () banked
  3420  001A14  6FA0               	movwf	_PatternStepCounter& (0+255),b
  3421                           
  3422                           ; BSR set to: 0
  3423  001A16  0012               	return		;funcret
  3424  001A18                     __end_of_ResetPattern:
  3425                           	opt stack 0
  3426                           tosu	equ	0xFFF
  3427                           tosh	equ	0xFFE
  3428                           tosl	equ	0xFFD
  3429                           pclath	equ	0xFFA
  3430                           tblptru	equ	0xFF8
  3431                           tblptrh	equ	0xFF7
  3432                           tblptrl	equ	0xFF6
  3433                           tablat	equ	0xFF5
  3434                           prodh	equ	0xFF4
  3435                           prodl	equ	0xFF3
  3436                           postinc0	equ	0xFEE
  3437                           wreg	equ	0xFE8
  3438                           postdec1	equ	0xFE5
  3439                           fsr1l	equ	0xFE1
  3440                           indf2	equ	0xFDF
  3441                           postinc2	equ	0xFDE
  3442                           postdec2	equ	0xFDD
  3443                           fsr2h	equ	0xFDA
  3444                           fsr2l	equ	0xFD9
  3445                           status	equ	0xFD8
  3446                           
  3447 ;; *************** function _DotStar_Off *****************
  3448 ;; Defined at:
  3449 ;;		line 73 in file "Pattern_DotStarLED.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;		None
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;		None
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  1    wreg      void 
  3456 ;; Registers used:
  3457 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 0/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3463 ;;      Params:         0       0       0       0
  3464 ;;      Locals:         0       0       0       0
  3465 ;;      Temps:          0       0       0       0
  3466 ;;      Totals:         0       0       0       0
  3467 ;;Total ram usage:        0 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; Hardware stack levels required when called:   11
  3470 ;; This function calls:
  3471 ;;		_SPI32_TransmitFrames
  3472 ;; This function is called by:
  3473 ;;		_StopPattern
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           	psect	text18
  3478  001914                     __ptext18:
  3479                           	opt stack 0
  3480  001914                     _DotStar_Off:
  3481                           	opt stack 16
  3482                           
  3483                           ;Pattern_DotStarLED.c: 75: SPI32_TransmitFrames(OffFrames,Length+2);
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;incstack = 0
  3487  001914  0E00               	movlw	low _OffFrames
  3488  001916  0100               	movlb	0	; () banked
  3489  001918  6FDD               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  3490  00191A  0E02               	movlw	high _OffFrames
  3491  00191C  0100               	movlb	0	; () banked
  3492  00191E  6FDE               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  3493  001920  0100               	movlb	0	; () banked
  3494  001922  519D               	movf	_Length& (0+255),w,b
  3495  001924  0F02               	addlw	2
  3496  001926  0100               	movlb	0	; () banked
  3497  001928  6FDF               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  3498  00192A  ECE2  F00B         	call	_SPI32_TransmitFrames	;wreg free
  3499  00192E  0012               	return		;funcret
  3500  001930                     __end_of_DotStar_Off:
  3501                           	opt stack 0
  3502                           tosu	equ	0xFFF
  3503                           tosh	equ	0xFFE
  3504                           tosl	equ	0xFFD
  3505                           pclath	equ	0xFFA
  3506                           tblptru	equ	0xFF8
  3507                           tblptrh	equ	0xFF7
  3508                           tblptrl	equ	0xFF6
  3509                           tablat	equ	0xFF5
  3510                           prodh	equ	0xFF4
  3511                           prodl	equ	0xFF3
  3512                           postinc0	equ	0xFEE
  3513                           wreg	equ	0xFE8
  3514                           postdec1	equ	0xFE5
  3515                           fsr1l	equ	0xFE1
  3516                           indf2	equ	0xFDF
  3517                           postinc2	equ	0xFDE
  3518                           postdec2	equ	0xFDD
  3519                           fsr2h	equ	0xFDA
  3520                           fsr2l	equ	0xFD9
  3521                           status	equ	0xFD8
  3522                           
  3523 ;; *************** function _ShowPattern *****************
  3524 ;; Defined at:
  3525 ;;		line 270 in file "Pattern_ControlService.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;		None
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;		None
  3530 ;; Return value:  Size  Location     Type
  3531 ;;                  1    wreg      void 
  3532 ;; Registers used:
  3533 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3534 ;; Tracked objects:
  3535 ;;		On entry : 0/0
  3536 ;;		On exit  : 0/0
  3537 ;;		Unchanged: 0/0
  3538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3539 ;;      Params:         0       0       0       0
  3540 ;;      Locals:         0       0       0       0
  3541 ;;      Temps:          0       0       0       0
  3542 ;;      Totals:         0       0       0       0
  3543 ;;Total ram usage:        0 bytes
  3544 ;; Hardware stack levels used:    1
  3545 ;; Hardware stack levels required when called:   12
  3546 ;; This function calls:
  3547 ;;		_DotStar_Show
  3548 ;;		_ES_Timer_InitTimer
  3549 ;;		_UpdatePattern
  3550 ;; This function is called by:
  3551 ;;		_RunPatternControlService
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           	psect	text19
  3556  00184E                     __ptext19:
  3557                           	opt stack 0
  3558  00184E                     _ShowPattern:
  3559                           	opt stack 16
  3560                           
  3561                           ;Pattern_ControlService.c: 272: ES_Timer_InitTimer(0,PatternConfigs[4]);
  3562                           
  3563                           ;incstack = 0
  3564  00184E  C0FC  F0BD         	movff	_PatternConfigs+4,ES_Timer_InitTimer@NewTime
  3565  001852  0100               	movlb	0	; () banked
  3566  001854  6BBE               	clrf	(ES_Timer_InitTimer@NewTime+1)& (0+255),b
  3567  001856  0E00               	movlw	0
  3568  001858  ECE7  F008         	call	_ES_Timer_InitTimer
  3569                           
  3570                           ;Pattern_ControlService.c: 274: DotStar_Show(UpdatePattern());
  3571  00185C  ECE6  F001         	call	_UpdatePattern	;wreg free
  3572  001860  C0C6  F0E3         	movff	?_UpdatePattern,DotStar_Show@pixelPointer
  3573  001864  C0C7  F0E4         	movff	?_UpdatePattern+1,DotStar_Show@pixelPointer+1
  3574  001868  EC18  F00B         	call	_DotStar_Show	;wreg free
  3575                           
  3576                           ;Pattern_ControlService.c: 276: PatternConfigs[0] = 1;
  3577  00186C  0E01               	movlw	1
  3578  00186E  0100               	movlb	0	; () banked
  3579  001870  6FF8               	movwf	_PatternConfigs& (0+255),b
  3580                           
  3581                           ; BSR set to: 0
  3582  001872  0012               	return		;funcret
  3583  001874                     __end_of_ShowPattern:
  3584                           	opt stack 0
  3585                           tosu	equ	0xFFF
  3586                           tosh	equ	0xFFE
  3587                           tosl	equ	0xFFD
  3588                           pclath	equ	0xFFA
  3589                           tblptru	equ	0xFF8
  3590                           tblptrh	equ	0xFF7
  3591                           tblptrl	equ	0xFF6
  3592                           tablat	equ	0xFF5
  3593                           prodh	equ	0xFF4
  3594                           prodl	equ	0xFF3
  3595                           postinc0	equ	0xFEE
  3596                           wreg	equ	0xFE8
  3597                           postdec1	equ	0xFE5
  3598                           fsr1l	equ	0xFE1
  3599                           indf2	equ	0xFDF
  3600                           postinc2	equ	0xFDE
  3601                           postdec2	equ	0xFDD
  3602                           fsr2h	equ	0xFDA
  3603                           fsr2l	equ	0xFD9
  3604                           status	equ	0xFD8
  3605                           
  3606 ;; *************** function _UpdatePattern *****************
  3607 ;; Defined at:
  3608 ;;		line 76 in file "Pattern_RGBPatterns.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;		None
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;  i               1   21[BANK0 ] unsigned char 
  3613 ;;  patternID       1   20[BANK0 ] unsigned char 
  3614 ;;  brightness      1   15[BANK0 ] unsigned char 
  3615 ;; Return value:  Size  Location     Type
  3616 ;;                  2    9[BANK0 ] PTR unsigned long 
  3617 ;; Registers used:
  3618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3619 ;; Tracked objects:
  3620 ;;		On entry : 0/0
  3621 ;;		On exit  : 0/0
  3622 ;;		Unchanged: 0/0
  3623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3624 ;;      Params:         0       2       0       0
  3625 ;;      Locals:         0       7       0       0
  3626 ;;      Temps:          0       4       0       0
  3627 ;;      Totals:         0      13       0       0
  3628 ;;Total ram usage:       13 bytes
  3629 ;; Hardware stack levels used:    1
  3630 ;; Hardware stack levels required when called:    7
  3631 ;; This function calls:
  3632 ;;		___awmod
  3633 ;;		___llmod
  3634 ;; This function is called by:
  3635 ;;		_ShowPattern
  3636 ;; This function uses a non-reentrant model
  3637 ;;
  3638                           
  3639                           	psect	text20
  3640  0003CC                     __ptext20:
  3641                           	opt stack 0
  3642  0003CC                     _UpdatePattern:
  3643                           	opt stack 20
  3644                           
  3645                           ;Pattern_RGBPatterns.c: 78: uint8_t patternID = PatternConfigs[1];
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;incstack = 0
  3649  0003CC  0100               	movlb	0	; () banked
  3650  0003CE  EE20 F001          	lfsr	2,1
  3651  0003D2  518D               	movf	Pattern_RGBPatterns@PatternConfigs& (0+255),w,b
  3652  0003D4  26D9               	addwf	fsr2l,f,c
  3653  0003D6  518E               	movf	(Pattern_RGBPatterns@PatternConfigs+1)& (0+255),w,b
  3654  0003D8  22DA               	addwfc	fsr2h,f,c
  3655  0003DA  50DF               	movf	indf2,w,c
  3656  0003DC  0100               	movlb	0	; () banked
  3657  0003DE  6FD1               	movwf	UpdatePattern@patternID& (0+255),b
  3658                           
  3659                           ;Pattern_RGBPatterns.c: 79: uint8_t brightness = PatternConfigs[2];
  3660  0003E0  0100               	movlb	0	; () banked
  3661  0003E2  EE20 F002          	lfsr	2,2
  3662  0003E6  518D               	movf	Pattern_RGBPatterns@PatternConfigs& (0+255),w,b
  3663  0003E8  26D9               	addwf	fsr2l,f,c
  3664  0003EA  518E               	movf	(Pattern_RGBPatterns@PatternConfigs+1)& (0+255),w,b
  3665  0003EC  22DA               	addwfc	fsr2h,f,c
  3666  0003EE  50DF               	movf	indf2,w,c
  3667  0003F0  0100               	movlb	0	; () banked
  3668  0003F2  6FCC               	movwf	UpdatePattern@brightness& (0+255),b
  3669                           
  3670                           ;Pattern_RGBPatterns.c: 82: switch(patternID){
  3671  0003F4  D09F               	goto	l2546
  3672  0003F6                     l2524:
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;Pattern_RGBPatterns.c: 107: for(uint8_t i=0;i<Length;i++){
  3676  0003F6  0E00               	movlw	0
  3677  0003F8  0100               	movlb	0	; () banked
  3678  0003FA  6FD2               	movwf	UpdatePattern@i& (0+255),b
  3679  0003FC  D055               	goto	l2536
  3680  0003FE                     l2526:
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;Pattern_RGBPatterns.c: 108: PixelPattern[i] = (0xFF000000 | (uint32_t)(i == PatternStep
      +                          Counter ? GenColors[TestColor] : 0x0));
  3684  0003FE  0100               	movlb	0	; () banked
  3685  000400  51A0               	movf	_PatternStepCounter& (0+255),w,b
  3686  000402  0100               	movlb	0	; () banked
  3687  000404  19D2               	xorwf	UpdatePattern@i& (0+255),w,b
  3688  000406  B4D8               	btfsc	status,2,c
  3689  000408  D00A               	goto	l2530
  3690                           
  3691                           ; BSR set to: 0
  3692  00040A  0E00               	movlw	0
  3693  00040C  0100               	movlb	0	; () banked
  3694  00040E  6FCD               	movwf	_UpdatePattern$672& (0+255),b
  3695  000410  0E00               	movlw	0
  3696  000412  6FCE               	movwf	(_UpdatePattern$672+1)& (0+255),b
  3697  000414  0E00               	movlw	0
  3698  000416  6FCF               	movwf	(_UpdatePattern$672+2)& (0+255),b
  3699  000418  0E00               	movlw	0
  3700  00041A  6FD0               	movwf	(_UpdatePattern$672+3)& (0+255),b
  3701  00041C  D01E               	goto	l2532
  3702  00041E                     l2530:
  3703                           
  3704                           ; BSR set to: 0
  3705  00041E  0E80               	movlw	low _GenColors
  3706  000420  0100               	movlb	0	; () banked
  3707  000422  6FC8               	movwf	??_UpdatePattern& (0+255),b
  3708  000424  0E01               	movlw	high _GenColors
  3709  000426  0100               	movlb	0	; () banked
  3710  000428  6FC9               	movwf	(??_UpdatePattern+1)& (0+255),b
  3711  00042A  90D8               	bcf	status,0,c
  3712  00042C  0100               	movlb	0	; () banked
  3713  00042E  3584               	rlcf	_TestColor& (0+255),w,b
  3714  000430  6ED9               	movwf	fsr2l,c
  3715  000432  0100               	movlb	0	; () banked
  3716  000434  3585               	rlcf	(_TestColor+1)& (0+255),w,b
  3717  000436  6EDA               	movwf	fsr2h,c
  3718  000438  90D8               	bcf	status,0,c
  3719  00043A  36D9               	rlcf	fsr2l,f,c
  3720  00043C  36DA               	rlcf	fsr2h,f,c
  3721  00043E  0100               	movlb	0	; () banked
  3722  000440  51C8               	movf	??_UpdatePattern& (0+255),w,b
  3723  000442  26D9               	addwf	fsr2l,f,c
  3724  000444  0100               	movlb	0	; () banked
  3725  000446  51C9               	movf	(??_UpdatePattern+1)& (0+255),w,b
  3726  000448  22DA               	addwfc	fsr2h,f,c
  3727  00044A  CFDE F0CD          	movff	postinc2,_UpdatePattern$672
  3728  00044E  CFDE F0CE          	movff	postinc2,_UpdatePattern$672+1
  3729  000452  CFDE F0CF          	movff	postinc2,_UpdatePattern$672+2
  3730  000456  CFDE F0D0          	movff	postinc2,_UpdatePattern$672+3
  3731  00045A                     l2532:
  3732                           
  3733                           ; BSR set to: 0
  3734  00045A  0E00               	movlw	0
  3735  00045C  0100               	movlb	0	; () banked
  3736  00045E  11CD               	iorwf	_UpdatePattern$672& (0+255),w,b
  3737  000460  0100               	movlb	0	; () banked
  3738  000462  6FC8               	movwf	??_UpdatePattern& (0+255),b
  3739  000464  0E00               	movlw	0
  3740  000466  0100               	movlb	0	; () banked
  3741  000468  11CE               	iorwf	(_UpdatePattern$672+1)& (0+255),w,b
  3742  00046A  0100               	movlb	0	; () banked
  3743  00046C  6FC9               	movwf	(??_UpdatePattern+1)& (0+255),b
  3744  00046E  0E00               	movlw	0
  3745  000470  0100               	movlb	0	; () banked
  3746  000472  11CF               	iorwf	(_UpdatePattern$672+2)& (0+255),w,b
  3747  000474  0100               	movlb	0	; () banked
  3748  000476  6FCA               	movwf	(??_UpdatePattern+2)& (0+255),b
  3749  000478  0EFF               	movlw	255
  3750  00047A  0100               	movlb	0	; () banked
  3751  00047C  11D0               	iorwf	(_UpdatePattern$672+3)& (0+255),w,b
  3752  00047E  0100               	movlb	0	; () banked
  3753  000480  6FCB               	movwf	(??_UpdatePattern+3)& (0+255),b
  3754  000482  0100               	movlb	0	; () banked
  3755  000484  51D2               	movf	UpdatePattern@i& (0+255),w,b
  3756  000486  0D04               	mullw	4
  3757  000488  0E80               	movlw	low _PixelPattern
  3758  00048A  24F3               	addwf	prodl,w,c
  3759  00048C  6ED9               	movwf	fsr2l,c
  3760  00048E  0E02               	movlw	high _PixelPattern
  3761  000490  20F4               	addwfc	prodh,w,c
  3762  000492  6EDA               	movwf	fsr2h,c
  3763  000494  C0C8  FFDE         	movff	??_UpdatePattern,postinc2
  3764  000498  C0C9  FFDE         	movff	??_UpdatePattern+1,postinc2
  3765  00049C  C0CA  FFDE         	movff	??_UpdatePattern+2,postinc2
  3766  0004A0  C0CB  FFDE         	movff	??_UpdatePattern+3,postinc2
  3767                           
  3768                           ; BSR set to: 0
  3769  0004A4  0100               	movlb	0	; () banked
  3770  0004A6  2BD2               	incf	UpdatePattern@i& (0+255),f,b
  3771  0004A8                     l2536:
  3772                           
  3773                           ; BSR set to: 0
  3774  0004A8  0100               	movlb	0	; () banked
  3775  0004AA  5197               	movf	Pattern_RGBPatterns@Length& (0+255),w,b
  3776  0004AC  0100               	movlb	0	; () banked
  3777  0004AE  5DD2               	subwf	UpdatePattern@i& (0+255),w,b
  3778  0004B0  A0D8               	btfss	status,0,c
  3779  0004B2  D7A5               	goto	l2526
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;Pattern_RGBPatterns.c: 109: }
  3783                           ;Pattern_RGBPatterns.c: 110: PatternStepCounter = (PatternStepCounter+1)%Length;
  3784                           
  3785                           ; BSR set to: 0
  3786  0004B4  0E01               	movlw	1
  3787  0004B6  0100               	movlb	0	; () banked
  3788  0004B8  25A0               	addwf	_PatternStepCounter& (0+255),w,b
  3789  0004BA  0100               	movlb	0	; () banked
  3790  0004BC  6FBD               	movwf	___awmod@dividend& (0+255),b
  3791  0004BE  0100               	movlb	0	; () banked
  3792  0004C0  6BBE               	clrf	(___awmod@dividend+1)& (0+255),b
  3793  0004C2  0E00               	movlw	0
  3794  0004C4  23BE               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3795  0004C6  C097  F0BF         	movff	Pattern_RGBPatterns@Length,___awmod@divisor
  3796  0004CA  0100               	movlb	0	; () banked
  3797  0004CC  6BC0               	clrf	(___awmod@divisor+1)& (0+255),b
  3798  0004CE  ECB9  F007         	call	___awmod	;wreg free
  3799  0004D2  0100               	movlb	0	; () banked
  3800  0004D4  51BD               	movf	?___awmod& (0+255),w,b
  3801  0004D6  0100               	movlb	0	; () banked
  3802  0004D8  6FA0               	movwf	_PatternStepCounter& (0+255),b
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;Pattern_RGBPatterns.c: 111: if(PatternStepCounter == 0){
  3806  0004DA  0100               	movlb	0	; () banked
  3807  0004DC  51A0               	movf	_PatternStepCounter& (0+255),w,b
  3808  0004DE  0100               	movlb	0	; () banked
  3809  0004E0  A4D8               	btfss	status,2,c
  3810  0004E2  D03C               	goto	l2548
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;Pattern_RGBPatterns.c: 112: TestColor = (TestColor+1)%13;
  3814  0004E4  0E01               	movlw	1
  3815  0004E6  0100               	movlb	0	; () banked
  3816  0004E8  2584               	addwf	_TestColor& (0+255),w,b
  3817  0004EA  0100               	movlb	0	; () banked
  3818  0004EC  6FBD               	movwf	___llmod@dividend& (0+255),b
  3819  0004EE  0E00               	movlw	0
  3820  0004F0  0100               	movlb	0	; () banked
  3821  0004F2  2185               	addwfc	(_TestColor+1)& (0+255),w,b
  3822  0004F4  0100               	movlb	0	; () banked
  3823  0004F6  6FBE               	movwf	(___llmod@dividend+1)& (0+255),b
  3824  0004F8  0E00               	movlw	0
  3825  0004FA  0100               	movlb	0	; () banked
  3826  0004FC  2186               	addwfc	(_TestColor+2)& (0+255),w,b
  3827  0004FE  0100               	movlb	0	; () banked
  3828  000500  6FBF               	movwf	(___llmod@dividend+2)& (0+255),b
  3829  000502  0E00               	movlw	0
  3830  000504  0100               	movlb	0	; () banked
  3831  000506  2187               	addwfc	(_TestColor+3)& (0+255),w,b
  3832  000508  0100               	movlb	0	; () banked
  3833  00050A  6FC0               	movwf	(___llmod@dividend+3)& (0+255),b
  3834  00050C  0E0D               	movlw	13
  3835  00050E  0100               	movlb	0	; () banked
  3836  000510  6FC1               	movwf	___llmod@divisor& (0+255),b
  3837  000512  0E00               	movlw	0
  3838  000514  6FC2               	movwf	(___llmod@divisor+1)& (0+255),b
  3839  000516  0E00               	movlw	0
  3840  000518  6FC3               	movwf	(___llmod@divisor+2)& (0+255),b
  3841  00051A  0E00               	movlw	0
  3842  00051C  6FC4               	movwf	(___llmod@divisor+3)& (0+255),b
  3843  00051E  EC0A  F008         	call	___llmod	;wreg free
  3844  000522  C0BD  F084         	movff	?___llmod,_TestColor
  3845  000526  C0BE  F085         	movff	?___llmod+1,_TestColor+1
  3846  00052A  C0BF  F086         	movff	?___llmod+2,_TestColor+2
  3847  00052E  C0C0  F087         	movff	?___llmod+3,_TestColor+3
  3848                           
  3849                           ;Pattern_RGBPatterns.c: 116: }
  3850                           
  3851                           ;Pattern_RGBPatterns.c: 113: }
  3852                           ;Pattern_RGBPatterns.c: 114: break;
  3853  000532  D014               	goto	l2548
  3854  000534                     l2546:
  3855  000534  0100               	movlb	0	; () banked
  3856  000536  51D1               	movf	UpdatePattern@patternID& (0+255),w,b
  3857                           
  3858                           ; Switch size 1, requested type "space"
  3859                           ; Number of cases is 6, Range of values is 0 to 255
  3860                           ; switch strategies available:
  3861                           ; Name         Instructions Cycles
  3862                           ; simple_byte           19    10 (average)
  3863                           ;	Chosen strategy is simple_byte
  3864  000538  0A00               	xorlw	0	; case 0
  3865  00053A  B4D8               	btfsc	status,2,c
  3866  00053C  D00F               	goto	l2548
  3867  00053E  0A01               	xorlw	1	; case 1
  3868  000540  B4D8               	btfsc	status,2,c
  3869  000542  D00C               	goto	l2548
  3870  000544  0A03               	xorlw	3	; case 2
  3871  000546  B4D8               	btfsc	status,2,c
  3872  000548  D009               	goto	l2548
  3873  00054A  0A01               	xorlw	1	; case 3
  3874  00054C  B4D8               	btfsc	status,2,c
  3875  00054E  D006               	goto	l2548
  3876  000550  0A07               	xorlw	7	; case 4
  3877  000552  B4D8               	btfsc	status,2,c
  3878  000554  D003               	goto	l2548
  3879  000556  0AFB               	xorlw	251	; case 255
  3880  000558  B4D8               	btfsc	status,2,c
  3881  00055A  D74D               	goto	l2524
  3882  00055C                     l2548:
  3883                           
  3884                           ;Pattern_RGBPatterns.c: 118: return PixelPattern;
  3885  00055C  0E80               	movlw	low _PixelPattern
  3886  00055E  0100               	movlb	0	; () banked
  3887  000560  6FC6               	movwf	?_UpdatePattern& (0+255),b
  3888  000562  0E02               	movlw	high _PixelPattern
  3889  000564  0100               	movlb	0	; () banked
  3890  000566  6FC7               	movwf	(?_UpdatePattern+1)& (0+255),b
  3891  000568  0012               	return	
  3892  00056A                     __end_of_UpdatePattern:
  3893                           	opt stack 0
  3894                           tosu	equ	0xFFF
  3895                           tosh	equ	0xFFE
  3896                           tosl	equ	0xFFD
  3897                           pclath	equ	0xFFA
  3898                           tblptru	equ	0xFF8
  3899                           tblptrh	equ	0xFF7
  3900                           tblptrl	equ	0xFF6
  3901                           tablat	equ	0xFF5
  3902                           prodh	equ	0xFF4
  3903                           prodl	equ	0xFF3
  3904                           postinc0	equ	0xFEE
  3905                           wreg	equ	0xFE8
  3906                           postdec1	equ	0xFE5
  3907                           fsr1l	equ	0xFE1
  3908                           indf2	equ	0xFDF
  3909                           postinc2	equ	0xFDE
  3910                           postdec2	equ	0xFDD
  3911                           fsr2h	equ	0xFDA
  3912                           fsr2l	equ	0xFD9
  3913                           status	equ	0xFD8
  3914                           
  3915 ;; *************** function ___llmod *****************
  3916 ;; Defined at:
  3917 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/llmod.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  dividend        4    0[BANK0 ] unsigned long 
  3920 ;;  divisor         4    4[BANK0 ] unsigned long 
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;  counter         1    8[BANK0 ] unsigned char 
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  4    0[BANK0 ] unsigned long 
  3925 ;; Registers used:
  3926 ;;		wreg, status,2, status,0
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3932 ;;      Params:         0       8       0       0
  3933 ;;      Locals:         0       1       0       0
  3934 ;;      Temps:          0       0       0       0
  3935 ;;      Totals:         0       9       0       0
  3936 ;;Total ram usage:        9 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; Hardware stack levels required when called:    6
  3939 ;; This function calls:
  3940 ;;		Nothing
  3941 ;; This function is called by:
  3942 ;;		_UpdatePattern
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           	psect	text21
  3947  001014                     __ptext21:
  3948                           	opt stack 0
  3949  001014                     ___llmod:
  3950                           	opt stack 20
  3951                           
  3952                           ; BSR set to: 0
  3953                           ;incstack = 0
  3954  001014  0100               	movlb	0	; () banked
  3955  001016  51C1               	movf	___llmod@divisor& (0+255),w,b
  3956  001018  0100               	movlb	0	; () banked
  3957  00101A  11C2               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  3958  00101C  0100               	movlb	0	; () banked
  3959  00101E  11C3               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  3960  001020  0100               	movlb	0	; () banked
  3961  001022  11C4               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  3962  001024  B4D8               	btfsc	status,2,c
  3963  001026  D03A               	goto	l1057
  3964                           
  3965                           ; BSR set to: 0
  3966  001028  0E01               	movlw	1
  3967  00102A  0100               	movlb	0	; () banked
  3968  00102C  6FC5               	movwf	___llmod@counter& (0+255),b
  3969  00102E  D008               	goto	l2426
  3970  001030                     l2424:
  3971                           
  3972                           ; BSR set to: 0
  3973  001030  0100               	movlb	0	; () banked
  3974  001032  90D8               	bcf	status,0,c
  3975  001034  37C1               	rlcf	___llmod@divisor& (0+255),f,b
  3976  001036  37C2               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  3977  001038  37C3               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  3978  00103A  37C4               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  3979  00103C  0100               	movlb	0	; () banked
  3980  00103E  2BC5               	incf	___llmod@counter& (0+255),f,b
  3981  001040                     l2426:
  3982                           
  3983                           ; BSR set to: 0
  3984  001040  0100               	movlb	0	; () banked
  3985  001042  AFC4               	btfss	(___llmod@divisor+3)& (0+255),7,b
  3986  001044  D7F5               	goto	l2424
  3987  001046                     l2428:
  3988                           
  3989                           ; BSR set to: 0
  3990  001046  0100               	movlb	0	; () banked
  3991  001048  51C1               	movf	___llmod@divisor& (0+255),w,b
  3992  00104A  0100               	movlb	0	; () banked
  3993  00104C  5DBD               	subwf	___llmod@dividend& (0+255),w,b
  3994  00104E  0100               	movlb	0	; () banked
  3995  001050  51C2               	movf	(___llmod@divisor+1)& (0+255),w,b
  3996  001052  0100               	movlb	0	; () banked
  3997  001054  59BE               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  3998  001056  0100               	movlb	0	; () banked
  3999  001058  51C3               	movf	(___llmod@divisor+2)& (0+255),w,b
  4000  00105A  0100               	movlb	0	; () banked
  4001  00105C  59BF               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  4002  00105E  0100               	movlb	0	; () banked
  4003  001060  51C4               	movf	(___llmod@divisor+3)& (0+255),w,b
  4004  001062  0100               	movlb	0	; () banked
  4005  001064  59C0               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  4006  001066  A0D8               	btfss	status,0,c
  4007  001068  D010               	goto	l2432
  4008                           
  4009                           ; BSR set to: 0
  4010  00106A  0100               	movlb	0	; () banked
  4011  00106C  51C1               	movf	___llmod@divisor& (0+255),w,b
  4012  00106E  0100               	movlb	0	; () banked
  4013  001070  5FBD               	subwf	___llmod@dividend& (0+255),f,b
  4014  001072  0100               	movlb	0	; () banked
  4015  001074  51C2               	movf	(___llmod@divisor+1)& (0+255),w,b
  4016  001076  0100               	movlb	0	; () banked
  4017  001078  5BBE               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  4018  00107A  0100               	movlb	0	; () banked
  4019  00107C  51C3               	movf	(___llmod@divisor+2)& (0+255),w,b
  4020  00107E  0100               	movlb	0	; () banked
  4021  001080  5BBF               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  4022  001082  0100               	movlb	0	; () banked
  4023  001084  51C4               	movf	(___llmod@divisor+3)& (0+255),w,b
  4024  001086  0100               	movlb	0	; () banked
  4025  001088  5BC0               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  4026  00108A                     l2432:
  4027                           
  4028                           ; BSR set to: 0
  4029  00108A  0100               	movlb	0	; () banked
  4030  00108C  90D8               	bcf	status,0,c
  4031  00108E  33C4               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  4032  001090  33C3               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  4033  001092  33C2               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  4034  001094  33C1               	rrcf	___llmod@divisor& (0+255),f,b
  4035                           
  4036                           ; BSR set to: 0
  4037  001096  0100               	movlb	0	; () banked
  4038  001098  2FC5               	decfsz	___llmod@counter& (0+255),f,b
  4039  00109A  D7D5               	goto	l2428
  4040  00109C                     l1057:
  4041                           
  4042                           ; BSR set to: 0
  4043  00109C  C0BD  F0BD         	movff	___llmod@dividend,?___llmod
  4044  0010A0  C0BE  F0BE         	movff	___llmod@dividend+1,?___llmod+1
  4045  0010A4  C0BF  F0BF         	movff	___llmod@dividend+2,?___llmod+2
  4046  0010A8  C0C0  F0C0         	movff	___llmod@dividend+3,?___llmod+3
  4047                           
  4048                           ; BSR set to: 0
  4049  0010AC  0012               	return		;funcret
  4050  0010AE                     __end_of___llmod:
  4051                           	opt stack 0
  4052                           tosu	equ	0xFFF
  4053                           tosh	equ	0xFFE
  4054                           tosl	equ	0xFFD
  4055                           pclath	equ	0xFFA
  4056                           tblptru	equ	0xFF8
  4057                           tblptrh	equ	0xFF7
  4058                           tblptrl	equ	0xFF6
  4059                           tablat	equ	0xFF5
  4060                           prodh	equ	0xFF4
  4061                           prodl	equ	0xFF3
  4062                           postinc0	equ	0xFEE
  4063                           wreg	equ	0xFE8
  4064                           postdec1	equ	0xFE5
  4065                           fsr1l	equ	0xFE1
  4066                           indf2	equ	0xFDF
  4067                           postinc2	equ	0xFDE
  4068                           postdec2	equ	0xFDD
  4069                           fsr2h	equ	0xFDA
  4070                           fsr2l	equ	0xFD9
  4071                           status	equ	0xFD8
  4072                           
  4073 ;; *************** function _ES_Timer_InitTimer *****************
  4074 ;; Defined at:
  4075 ;;		line 229 in file "ES_Timers.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  Num             1    wreg     unsigned char 
  4078 ;;  NewTime         2    0[BANK0 ] unsigned int 
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;  Num             1    4[BANK0 ] unsigned char 
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  1    wreg      enum E15473
  4083 ;; Registers used:
  4084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4090 ;;      Params:         0       2       0       0
  4091 ;;      Locals:         0       1       0       0
  4092 ;;      Temps:          0       2       0       0
  4093 ;;      Totals:         0       5       0       0
  4094 ;;Total ram usage:        5 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; Hardware stack levels required when called:    6
  4097 ;; This function calls:
  4098 ;;		Nothing
  4099 ;; This function is called by:
  4100 ;;		_ShowPattern
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           	psect	text22
  4105  0011CE                     __ptext22:
  4106                           	opt stack 0
  4107  0011CE                     _ES_Timer_InitTimer:
  4108                           	opt stack 21
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;incstack = 0
  4112                           ;ES_Timer_InitTimer@Num stored from wreg
  4113  0011CE  0100               	movlb	0	; () banked
  4114  0011D0  6FC1               	movwf	ES_Timer_InitTimer@Num& (0+255),b
  4115                           
  4116                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  4117                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  4118                           ;ES_Timers.c: 236: (NewTime == 0) )
  4119  0011D2  0E10               	movlw	16
  4120  0011D4  0100               	movlb	0	; () banked
  4121  0011D6  61C1               	cpfslt	ES_Timer_InitTimer@Num& (0+255),b
  4122  0011D8  0012               	return	
  4123                           
  4124                           ; BSR set to: 0
  4125  0011DA  0100               	movlb	0	; () banked
  4126  0011DC  51C1               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4127  0011DE  0D02               	mullw	2
  4128  0011E0  0E21               	movlw	low _Timer2PostFunc
  4129  0011E2  24F3               	addwf	prodl,w,c
  4130  0011E4  6EF6               	movwf	tblptrl,c
  4131  0011E6  0E03               	movlw	high _Timer2PostFunc
  4132  0011E8  20F4               	addwfc	prodh,w,c
  4133  0011EA  6EF7               	movwf	tblptrh,c
  4134  0011EC                     	if	0	;There are less than 3 active tblptr bytes
  4135  0011EC                     	endif
  4136  0011EC  0009               	tblrd		*+
  4137  0011EE  50F5               	movf	tablat,w,c
  4138  0011F0  0009               	tblrd		*+
  4139  0011F2  10F5               	iorwf	tablat,w,c
  4140  0011F4  B4D8               	btfsc	status,2,c
  4141  0011F6  0012               	return	
  4142                           
  4143                           ; BSR set to: 0
  4144  0011F8  0100               	movlb	0	; () banked
  4145  0011FA  51BD               	movf	ES_Timer_InitTimer@NewTime& (0+255),w,b
  4146  0011FC  0100               	movlb	0	; () banked
  4147  0011FE  11BE               	iorwf	(ES_Timer_InitTimer@NewTime+1)& (0+255),w,b
  4148  001200  B4D8               	btfsc	status,2,c
  4149  001202  0012               	return	
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  4153                           
  4154                           ; BSR set to: 0
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  4158                           ;	Return value of _ES_Timer_InitTimer is never used
  4159  001204  0100               	movlb	0	; () banked
  4160  001206  51C1               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4161  001208  0D02               	mullw	2
  4162  00120A  0E60               	movlw	low _TMR_TimerArray
  4163  00120C  24F3               	addwf	prodl,w,c
  4164  00120E  6ED9               	movwf	fsr2l,c
  4165  001210  0E00               	movlw	high _TMR_TimerArray
  4166  001212  20F4               	addwfc	prodh,w,c
  4167  001214  6EDA               	movwf	fsr2h,c
  4168  001216  C0BD  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  4169  00121A  C0BE  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  4173  00121E  0100               	movlb	0	; () banked
  4174  001220  51C1               	movf	ES_Timer_InitTimer@Num& (0+255),w,b
  4175  001222  0D02               	mullw	2
  4176  001224  0E01               	movlw	low _BitNum2SetMask
  4177  001226  24F3               	addwf	prodl,w,c
  4178  001228  6EF6               	movwf	tblptrl,c
  4179  00122A  0E03               	movlw	high _BitNum2SetMask
  4180  00122C  20F4               	addwfc	prodh,w,c
  4181  00122E  6EF7               	movwf	tblptrh,c
  4182  001230                     	if	0	;There are less than 3 active tblptr bytes
  4183  001230                     	endif
  4184  001230  0009               	tblrd		*+
  4185  001232  CFF5 F0BF          	movff	tablat,??_ES_Timer_InitTimer
  4186  001236  0009               	tblrd		*+
  4187  001238  CFF5 F0C0          	movff	tablat,??_ES_Timer_InitTimer+1
  4188  00123C  0100               	movlb	0	; () banked
  4189  00123E  51BF               	movf	??_ES_Timer_InitTimer& (0+255),w,b
  4190  001240  0100               	movlb	0	; () banked
  4191  001242  1393               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  4192  001244  0100               	movlb	0	; () banked
  4193  001246  51C0               	movf	(??_ES_Timer_InitTimer+1)& (0+255),w,b
  4194  001248  0100               	movlb	0	; () banked
  4195  00124A  1394               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  4196  00124C  0012               	return	
  4197  00124E                     __end_of_ES_Timer_InitTimer:
  4198                           	opt stack 0
  4199                           tosu	equ	0xFFF
  4200                           tosh	equ	0xFFE
  4201                           tosl	equ	0xFFD
  4202                           pclath	equ	0xFFA
  4203                           tblptru	equ	0xFF8
  4204                           tblptrh	equ	0xFF7
  4205                           tblptrl	equ	0xFF6
  4206                           tablat	equ	0xFF5
  4207                           prodh	equ	0xFF4
  4208                           prodl	equ	0xFF3
  4209                           postinc0	equ	0xFEE
  4210                           wreg	equ	0xFE8
  4211                           postdec1	equ	0xFE5
  4212                           fsr1l	equ	0xFE1
  4213                           indf2	equ	0xFDF
  4214                           postinc2	equ	0xFDE
  4215                           postdec2	equ	0xFDD
  4216                           fsr2h	equ	0xFDA
  4217                           fsr2l	equ	0xFD9
  4218                           status	equ	0xFD8
  4219                           
  4220 ;; *************** function _DotStar_Show *****************
  4221 ;; Defined at:
  4222 ;;		line 66 in file "Pattern_DotStarLED.c"
  4223 ;; Parameters:    Size  Location     Type
  4224 ;;  pixelPointer    2   38[BANK0 ] PTR unsigned long 
  4225 ;;		 -> PixelPattern(120), 
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;		None
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  1    wreg      void 
  4230 ;; Registers used:
  4231 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4237 ;;      Params:         0       2       0       0
  4238 ;;      Locals:         0       0       0       0
  4239 ;;      Temps:          0       0       0       0
  4240 ;;      Totals:         0       2       0       0
  4241 ;;Total ram usage:        2 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:   11
  4244 ;; This function calls:
  4245 ;;		_SPI32_TransmitFrames
  4246 ;;		_memcpy
  4247 ;; This function is called by:
  4248 ;;		_ShowPattern
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           	psect	text23
  4253  001630                     __ptext23:
  4254                           	opt stack 0
  4255  001630                     _DotStar_Show:
  4256                           	opt stack 16
  4257                           
  4258                           ;Pattern_DotStarLED.c: 68: memcpy(PixelFrames+1, pixelPointer, sizeof(uint32_t)*Length);
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;incstack = 0
  4262  001630  0E04               	movlw	low (_PixelFrames+4)
  4263  001632  0100               	movlb	0	; () banked
  4264  001634  6FBD               	movwf	memcpy@d1& (0+255),b
  4265  001636  0E01               	movlw	high (_PixelFrames+4)
  4266  001638  0100               	movlb	0	; () banked
  4267  00163A  6FBE               	movwf	(memcpy@d1+1)& (0+255),b
  4268  00163C  C0E3  F0BF         	movff	DotStar_Show@pixelPointer,memcpy@s1
  4269  001640  C0E4  F0C0         	movff	DotStar_Show@pixelPointer+1,memcpy@s1+1
  4270  001644  0100               	movlb	0	; () banked
  4271  001646  519D               	movf	_Length& (0+255),w,b
  4272  001648  0D04               	mullw	4
  4273  00164A  CFF3 F0C1          	movff	prodl,memcpy@n
  4274  00164E  CFF4 F0C2          	movff	prodh,memcpy@n+1
  4275  001652  EC8A  F00A         	call	_memcpy	;wreg free
  4276                           
  4277                           ;Pattern_DotStarLED.c: 70: SPI32_TransmitFrames(PixelFrames,Length+2);
  4278  001656  0E00               	movlw	low _PixelFrames
  4279  001658  0100               	movlb	0	; () banked
  4280  00165A  6FDD               	movwf	SPI32_TransmitFrames@framePointer& (0+255),b
  4281  00165C  0E01               	movlw	high _PixelFrames
  4282  00165E  0100               	movlb	0	; () banked
  4283  001660  6FDE               	movwf	(SPI32_TransmitFrames@framePointer+1)& (0+255),b
  4284  001662  0100               	movlb	0	; () banked
  4285  001664  519D               	movf	_Length& (0+255),w,b
  4286  001666  0F02               	addlw	2
  4287  001668  0100               	movlb	0	; () banked
  4288  00166A  6FDF               	movwf	SPI32_TransmitFrames@numFrames& (0+255),b
  4289  00166C  ECE2  F00B         	call	_SPI32_TransmitFrames	;wreg free
  4290  001670  0012               	return		;funcret
  4291  001672                     __end_of_DotStar_Show:
  4292                           	opt stack 0
  4293                           tosu	equ	0xFFF
  4294                           tosh	equ	0xFFE
  4295                           tosl	equ	0xFFD
  4296                           pclath	equ	0xFFA
  4297                           tblptru	equ	0xFF8
  4298                           tblptrh	equ	0xFF7
  4299                           tblptrl	equ	0xFF6
  4300                           tablat	equ	0xFF5
  4301                           prodh	equ	0xFF4
  4302                           prodl	equ	0xFF3
  4303                           postinc0	equ	0xFEE
  4304                           wreg	equ	0xFE8
  4305                           postdec1	equ	0xFE5
  4306                           fsr1l	equ	0xFE1
  4307                           indf2	equ	0xFDF
  4308                           postinc2	equ	0xFDE
  4309                           postdec2	equ	0xFDD
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           status	equ	0xFD8
  4313                           
  4314 ;; *************** function _memcpy *****************
  4315 ;; Defined at:
  4316 ;;		line 11 in file "/Applications/microchip/xc8/v1.38/sources/common/memcpy.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;  d1              2    0[BANK0 ] PTR void 
  4319 ;;		 -> PixelFrames(128), 
  4320 ;;  s1              2    2[BANK0 ] PTR const void 
  4321 ;;		 -> PixelPattern(120), 
  4322 ;;  n               2    4[BANK0 ] unsigned int 
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  4325 ;;		 -> PixelPattern(120), 
  4326 ;;  d               2    6[BANK0 ] PTR unsigned char 
  4327 ;;		 -> PixelFrames(128), 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  2    0[BANK0 ] PTR void 
  4330 ;; Registers used:
  4331 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4337 ;;      Params:         0       6       0       0
  4338 ;;      Locals:         0       4       0       0
  4339 ;;      Temps:          0       0       0       0
  4340 ;;      Totals:         0      10       0       0
  4341 ;;Total ram usage:       10 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    6
  4344 ;; This function calls:
  4345 ;;		Nothing
  4346 ;; This function is called by:
  4347 ;;		_DotStar_Show
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           	psect	text24
  4352  001514                     __ptext24:
  4353                           	opt stack 0
  4354  001514                     _memcpy:
  4355                           	opt stack 20
  4356                           
  4357                           ;incstack = 0
  4358  001514  C0BF  F0C5         	movff	memcpy@s1,memcpy@s
  4359  001518  C0C0  F0C6         	movff	memcpy@s1+1,memcpy@s+1
  4360  00151C  C0BD  F0C3         	movff	memcpy@d1,memcpy@d
  4361  001520  C0BE  F0C4         	movff	memcpy@d1+1,memcpy@d+1
  4362  001524  D010               	goto	l2406
  4363  001526                     l2400:
  4364  001526  C0C5  FFD9         	movff	memcpy@s,fsr2l
  4365  00152A  C0C6  FFDA         	movff	memcpy@s+1,fsr2h
  4366  00152E  C0C3  FFE1         	movff	memcpy@d,fsr1l
  4367  001532  C0C4  FFE2         	movff	memcpy@d+1,fsr1h
  4368  001536  CFDF FFE7          	movff	indf2,indf1
  4369  00153A  0100               	movlb	0	; () banked
  4370  00153C  4BC5               	infsnz	memcpy@s& (0+255),f,b
  4371  00153E  2BC6               	incf	(memcpy@s+1)& (0+255),f,b
  4372                           
  4373                           ; BSR set to: 0
  4374  001540  0100               	movlb	0	; () banked
  4375  001542  4BC3               	infsnz	memcpy@d& (0+255),f,b
  4376  001544  2BC4               	incf	(memcpy@d+1)& (0+255),f,b
  4377  001546                     l2406:
  4378  001546  0100               	movlb	0	; () banked
  4379  001548  07C1               	decf	memcpy@n& (0+255),f,b
  4380  00154A  A0D8               	btfss	status,0,c
  4381  00154C  07C2               	decf	(memcpy@n+1)& (0+255),f,b
  4382  00154E  0100               	movlb	0	; () banked
  4383  001550  29C1               	incf	memcpy@n& (0+255),w,b
  4384  001552  E1E9               	bnz	l2400
  4385  001554  0100               	movlb	0	; () banked
  4386  001556  29C2               	incf	(memcpy@n+1)& (0+255),w,b
  4387  001558  B4D8               	btfsc	status,2,c
  4388  00155A  0012               	return	
  4389  00155C  D7E4               	goto	l2400
  4390  00155E                     __end_of_memcpy:
  4391                           	opt stack 0
  4392                           tosu	equ	0xFFF
  4393                           tosh	equ	0xFFE
  4394                           tosl	equ	0xFFD
  4395                           pclath	equ	0xFFA
  4396                           tblptru	equ	0xFF8
  4397                           tblptrh	equ	0xFF7
  4398                           tblptrl	equ	0xFF6
  4399                           tablat	equ	0xFF5
  4400                           prodh	equ	0xFF4
  4401                           prodl	equ	0xFF3
  4402                           postinc0	equ	0xFEE
  4403                           wreg	equ	0xFE8
  4404                           indf1	equ	0xFE7
  4405                           postdec1	equ	0xFE5
  4406                           fsr1h	equ	0xFE2
  4407                           fsr1l	equ	0xFE1
  4408                           indf2	equ	0xFDF
  4409                           postinc2	equ	0xFDE
  4410                           postdec2	equ	0xFDD
  4411                           fsr2h	equ	0xFDA
  4412                           fsr2l	equ	0xFD9
  4413                           status	equ	0xFD8
  4414                           
  4415 ;; *************** function _SPI32_TransmitFrames *****************
  4416 ;; Defined at:
  4417 ;;		line 230 in file "SPI32_ControlService.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;  framePointer    2   32[BANK0 ] PTR unsigned long 
  4420 ;;		 -> OffFrames(128), PixelFrames(128), 
  4421 ;;  numFrames       1   34[BANK0 ] unsigned char 
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;  transmitEven    3   35[BANK0 ] struct ES_Event_t
  4424 ;; Return value:  Size  Location     Type
  4425 ;;                  1    wreg      void 
  4426 ;; Registers used:
  4427 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4428 ;; Tracked objects:
  4429 ;;		On entry : 0/0
  4430 ;;		On exit  : 0/0
  4431 ;;		Unchanged: 0/0
  4432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4433 ;;      Params:         0       3       0       0
  4434 ;;      Locals:         0       3       0       0
  4435 ;;      Temps:          0       0       0       0
  4436 ;;      Totals:         0       6       0       0
  4437 ;;Total ram usage:        6 bytes
  4438 ;; Hardware stack levels used:    1
  4439 ;; Hardware stack levels required when called:   10
  4440 ;; This function calls:
  4441 ;;		_PostSPI32ControlService
  4442 ;; This function is called by:
  4443 ;;		_DotStar_Show
  4444 ;;		_DotStar_Off
  4445 ;; This function uses a non-reentrant model
  4446 ;;
  4447                           
  4448                           	psect	text25
  4449  0017C4                     __ptext25:
  4450                           	opt stack 0
  4451  0017C4                     _SPI32_TransmitFrames:
  4452                           	opt stack 16
  4453                           
  4454                           ;SPI32_ControlService.c: 232: if(CurrentState == SPI32_Waiting4Send){
  4455                           
  4456                           ; BSR set to: 0
  4457                           ;incstack = 0
  4458  0017C4  0100               	movlb	0	; () banked
  4459  0017C6  0598               	decf	SPI32_ControlService@CurrentState& (0+255),w,b
  4460  0017C8  A4D8               	btfss	status,2,c
  4461  0017CA  0012               	return	
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;SPI32_ControlService.c: 234: FrameIndex = 0;
  4465  0017CC  0E00               	movlw	0
  4466  0017CE  0100               	movlb	0	; () banked
  4467  0017D0  6F9C               	movwf	_FrameIndex& (0+255),b
  4468                           
  4469                           ; BSR set to: 0
  4470                           ;SPI32_ControlService.c: 236: FramePointer = framePointer;
  4471  0017D2  C0DD  F08F         	movff	SPI32_TransmitFrames@framePointer,_FramePointer
  4472  0017D6  C0DE  F090         	movff	SPI32_TransmitFrames@framePointer+1,_FramePointer+1
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;SPI32_ControlService.c: 238: NumFrames = numFrames;
  4476  0017DA  C0DF  F09F         	movff	SPI32_TransmitFrames@numFrames,_NumFrames
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;SPI32_ControlService.c: 239: ES_Event transmitEvent;
  4480                           ;SPI32_ControlService.c: 240: transmitEvent.EventType = SPI32_TRANSMIT;
  4481  0017DE  0E09               	movlw	9
  4482  0017E0  0100               	movlb	0	; () banked
  4483  0017E2  6FE0               	movwf	SPI32_TransmitFrames@transmitEvent& (0+255),b
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;SPI32_ControlService.c: 241: PostSPI32ControlService(transmitEvent);
  4487  0017E4  C0E0  F0DA         	movff	SPI32_TransmitFrames@transmitEvent,PostSPI32ControlService@ThisEvent
  4488  0017E8  C0E1  F0DB         	movff	SPI32_TransmitFrames@transmitEvent+1,PostSPI32ControlService@ThisEvent+1
  4489  0017EC  C0E2  F0DC         	movff	SPI32_TransmitFrames@transmitEvent+2,PostSPI32ControlService@ThisEvent+2
  4490  0017F0  EC6E  F00C         	call	_PostSPI32ControlService	;wreg free
  4491  0017F4  0012               	return	
  4492  0017F6                     __end_of_SPI32_TransmitFrames:
  4493                           	opt stack 0
  4494                           tosu	equ	0xFFF
  4495                           tosh	equ	0xFFE
  4496                           tosl	equ	0xFFD
  4497                           pclath	equ	0xFFA
  4498                           tblptru	equ	0xFF8
  4499                           tblptrh	equ	0xFF7
  4500                           tblptrl	equ	0xFF6
  4501                           tablat	equ	0xFF5
  4502                           prodh	equ	0xFF4
  4503                           prodl	equ	0xFF3
  4504                           postinc0	equ	0xFEE
  4505                           wreg	equ	0xFE8
  4506                           indf1	equ	0xFE7
  4507                           postdec1	equ	0xFE5
  4508                           fsr1h	equ	0xFE2
  4509                           fsr1l	equ	0xFE1
  4510                           indf2	equ	0xFDF
  4511                           postinc2	equ	0xFDE
  4512                           postdec2	equ	0xFDD
  4513                           fsr2h	equ	0xFDA
  4514                           fsr2l	equ	0xFD9
  4515                           status	equ	0xFD8
  4516                           
  4517 ;; *************** function _PausePattern *****************
  4518 ;; Defined at:
  4519 ;;		line 293 in file "Pattern_ControlService.c"
  4520 ;; Parameters:    Size  Location     Type
  4521 ;;		None
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;		None
  4524 ;; Return value:  Size  Location     Type
  4525 ;;                  1    wreg      void 
  4526 ;; Registers used:
  4527 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4528 ;; Tracked objects:
  4529 ;;		On entry : 0/0
  4530 ;;		On exit  : 0/0
  4531 ;;		Unchanged: 0/0
  4532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4533 ;;      Params:         0       0       0       0
  4534 ;;      Locals:         0       0       0       0
  4535 ;;      Temps:          0       0       0       0
  4536 ;;      Totals:         0       0       0       0
  4537 ;;Total ram usage:        0 bytes
  4538 ;; Hardware stack levels used:    1
  4539 ;; Hardware stack levels required when called:    7
  4540 ;; This function calls:
  4541 ;;		_ES_Timer_StopTimer
  4542 ;; This function is called by:
  4543 ;;		_RunPatternControlService
  4544 ;; This function uses a non-reentrant model
  4545 ;;
  4546                           
  4547                           	psect	text26
  4548  001A18                     __ptext26:
  4549                           	opt stack 0
  4550  001A18                     _PausePattern:
  4551                           	opt stack 21
  4552                           
  4553                           ;Pattern_ControlService.c: 295: ES_Timer_StopTimer(0);
  4554                           
  4555                           ;incstack = 0
  4556  001A18  0E00               	movlw	0
  4557  001A1A  EC63  F00A         	call	_ES_Timer_StopTimer
  4558  001A1E  0012               	return		;funcret
  4559  001A20                     __end_of_PausePattern:
  4560                           	opt stack 0
  4561                           tosu	equ	0xFFF
  4562                           tosh	equ	0xFFE
  4563                           tosl	equ	0xFFD
  4564                           pclath	equ	0xFFA
  4565                           tblptru	equ	0xFF8
  4566                           tblptrh	equ	0xFF7
  4567                           tblptrl	equ	0xFF6
  4568                           tablat	equ	0xFF5
  4569                           prodh	equ	0xFF4
  4570                           prodl	equ	0xFF3
  4571                           postinc0	equ	0xFEE
  4572                           wreg	equ	0xFE8
  4573                           indf1	equ	0xFE7
  4574                           postdec1	equ	0xFE5
  4575                           fsr1h	equ	0xFE2
  4576                           fsr1l	equ	0xFE1
  4577                           indf2	equ	0xFDF
  4578                           postinc2	equ	0xFDE
  4579                           postdec2	equ	0xFDD
  4580                           fsr2h	equ	0xFDA
  4581                           fsr2l	equ	0xFD9
  4582                           status	equ	0xFD8
  4583                           
  4584 ;; *************** function _ES_Timer_StopTimer *****************
  4585 ;; Defined at:
  4586 ;;		line 205 in file "ES_Timers.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;  Num             1    wreg     unsigned char 
  4589 ;; Auto vars:     Size  Location     Type
  4590 ;;  Num             1    4[BANK0 ] unsigned char 
  4591 ;; Return value:  Size  Location     Type
  4592 ;;                  1    wreg      enum E15473
  4593 ;; Registers used:
  4594 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4595 ;; Tracked objects:
  4596 ;;		On entry : 0/0
  4597 ;;		On exit  : 0/0
  4598 ;;		Unchanged: 0/0
  4599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4600 ;;      Params:         0       0       0       0
  4601 ;;      Locals:         0       1       0       0
  4602 ;;      Temps:          0       4       0       0
  4603 ;;      Totals:         0       5       0       0
  4604 ;;Total ram usage:        5 bytes
  4605 ;; Hardware stack levels used:    1
  4606 ;; Hardware stack levels required when called:    6
  4607 ;; This function calls:
  4608 ;;		Nothing
  4609 ;; This function is called by:
  4610 ;;		_StopPattern
  4611 ;;		_PausePattern
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           	psect	text27
  4616  0014C6                     __ptext27:
  4617                           	opt stack 0
  4618  0014C6                     _ES_Timer_StopTimer:
  4619                           	opt stack 21
  4620                           
  4621                           ;incstack = 0
  4622                           ;ES_Timer_StopTimer@Num stored from wreg
  4623  0014C6  0100               	movlb	0	; () banked
  4624  0014C8  6FC1               	movwf	ES_Timer_StopTimer@Num& (0+255),b
  4625                           
  4626                           ;ES_Timers.c: 207: if( Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0])) )
  4627  0014CA  0E0F               	movlw	15
  4628  0014CC  0100               	movlb	0	; () banked
  4629  0014CE  65C1               	cpfsgt	ES_Timer_StopTimer@Num& (0+255),b
  4630  0014D0  D001               	goto	l2502
  4631  0014D2  0012               	return	
  4632  0014D4                     l2502:
  4633                           
  4634                           ; BSR set to: 0
  4635                           ;ES_Timers.c: 209: TMR_ActiveFlags &= ~BitNum2SetMask[Num];
  4636  0014D4  0100               	movlb	0	; () banked
  4637  0014D6  51C1               	movf	ES_Timer_StopTimer@Num& (0+255),w,b
  4638  0014D8  0D02               	mullw	2
  4639  0014DA  0E01               	movlw	low _BitNum2SetMask
  4640  0014DC  24F3               	addwf	prodl,w,c
  4641  0014DE  6EF6               	movwf	tblptrl,c
  4642  0014E0  0E03               	movlw	high _BitNum2SetMask
  4643  0014E2  20F4               	addwfc	prodh,w,c
  4644  0014E4  6EF7               	movwf	tblptrh,c
  4645  0014E6                     	if	0	;There are less than 3 active tblptr bytes
  4646  0014E6                     	endif
  4647  0014E6  0009               	tblrd		*+
  4648  0014E8  CFF5 F0BD          	movff	tablat,??_ES_Timer_StopTimer
  4649  0014EC  0009               	tblrd		*+
  4650  0014EE  CFF5 F0BE          	movff	tablat,??_ES_Timer_StopTimer+1
  4651  0014F2  0100               	movlb	0	; () banked
  4652  0014F4  1DBD               	comf	??_ES_Timer_StopTimer& (0+255),w,b
  4653  0014F6  0100               	movlb	0	; () banked
  4654  0014F8  6FBF               	movwf	(??_ES_Timer_StopTimer+2)& (0+255),b
  4655  0014FA  0100               	movlb	0	; () banked
  4656  0014FC  1DBE               	comf	(??_ES_Timer_StopTimer+1)& (0+255),w,b
  4657  0014FE  0100               	movlb	0	; () banked
  4658  001500  6FC0               	movwf	(??_ES_Timer_StopTimer+3)& (0+255),b
  4659  001502  0100               	movlb	0	; () banked
  4660  001504  51BF               	movf	(??_ES_Timer_StopTimer+2)& (0+255),w,b
  4661  001506  0100               	movlb	0	; () banked
  4662  001508  1793               	andwf	_TMR_ActiveFlags& (0+255),f,b
  4663  00150A  0100               	movlb	0	; () banked
  4664  00150C  51C0               	movf	(??_ES_Timer_StopTimer+3)& (0+255),w,b
  4665  00150E  0100               	movlb	0	; () banked
  4666  001510  1794               	andwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  4667  001512  0012               	return	
  4668  001514                     __end_of_ES_Timer_StopTimer:
  4669                           	opt stack 0
  4670                           tosu	equ	0xFFF
  4671                           tosh	equ	0xFFE
  4672                           tosl	equ	0xFFD
  4673                           pclath	equ	0xFFA
  4674                           tblptru	equ	0xFF8
  4675                           tblptrh	equ	0xFF7
  4676                           tblptrl	equ	0xFF6
  4677                           tablat	equ	0xFF5
  4678                           prodh	equ	0xFF4
  4679                           prodl	equ	0xFF3
  4680                           postinc0	equ	0xFEE
  4681                           wreg	equ	0xFE8
  4682                           indf1	equ	0xFE7
  4683                           postdec1	equ	0xFE5
  4684                           fsr1h	equ	0xFE2
  4685                           fsr1l	equ	0xFE1
  4686                           indf2	equ	0xFDF
  4687                           postinc2	equ	0xFDE
  4688                           postdec2	equ	0xFDD
  4689                           fsr2h	equ	0xFDA
  4690                           fsr2l	equ	0xFD9
  4691                           status	equ	0xFD8
  4692                           
  4693 ;; *************** function _XmitData *****************
  4694 ;; Defined at:
  4695 ;;		line 145 in file "Can_XmitService.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;  DataByte        1    wreg     unsigned char 
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;  DataByte        1    0[BANK0 ] unsigned char 
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  1    wreg      void 
  4702 ;; Registers used:
  4703 ;;		wreg, status,2
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4709 ;;      Params:         0       0       0       0
  4710 ;;      Locals:         0       1       0       0
  4711 ;;      Temps:          0       0       0       0
  4712 ;;      Totals:         0       1       0       0
  4713 ;;Total ram usage:        1 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:    6
  4716 ;; This function calls:
  4717 ;;		Nothing
  4718 ;; This function is called by:
  4719 ;;		_RunToggleService
  4720 ;;		_RunCan_XmitService
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724                           	psect	text28
  4725  0018BC                     __ptext28:
  4726                           	opt stack 0
  4727  0018BC                     _XmitData:
  4728                           	opt stack 22
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;incstack = 0
  4732                           ;XmitData@DataByte stored from wreg
  4733  0018BC  0100               	movlb	0	; () banked
  4734  0018BE  6FBD               	movwf	XmitData@DataByte& (0+255),b
  4735                           
  4736                           ;Can_XmitService.c: 147: TXB0D0 = DataByte;
  4737  0018C0  C0BD  FF46         	movff	XmitData@DataByte,3910	;volatile
  4738                           
  4739                           ;Can_XmitService.c: 149: TXB0SIDL = 0b01100000;
  4740  0018C4  0E60               	movlw	96
  4741  0018C6  010F               	movlb	15	; () banked
  4742  0018C8  6F42               	movwf	66,b	;volatile
  4743                           
  4744                           ; BSR set to: 15
  4745                           ;Can_XmitService.c: 150: TXB0SIDH = 0b00100100;
  4746  0018CA  0E24               	movlw	36
  4747  0018CC  010F               	movlb	15	; () banked
  4748  0018CE  6F41               	movwf	65,b	;volatile
  4749                           
  4750                           ; BSR set to: 15
  4751                           ;Can_XmitService.c: 152: TXB0DLC = 0b00000001;
  4752  0018D0  0E01               	movlw	1
  4753  0018D2  010F               	movlb	15	; () banked
  4754  0018D4  6F45               	movwf	69,b	;volatile
  4755                           
  4756                           ; BSR set to: 15
  4757                           ;Can_XmitService.c: 154: TXB0CONbits.TXREQ = 1;
  4758  0018D6  010F               	movlb	15	; () banked
  4759  0018D8  8740               	bsf	64,3,b	;volatile
  4760                           
  4761                           ; BSR set to: 15
  4762  0018DA  0012               	return		;funcret
  4763  0018DC                     __end_of_XmitData:
  4764                           	opt stack 0
  4765                           tosu	equ	0xFFF
  4766                           tosh	equ	0xFFE
  4767                           tosl	equ	0xFFD
  4768                           pclath	equ	0xFFA
  4769                           tblptru	equ	0xFF8
  4770                           tblptrh	equ	0xFF7
  4771                           tblptrl	equ	0xFF6
  4772                           tablat	equ	0xFF5
  4773                           prodh	equ	0xFF4
  4774                           prodl	equ	0xFF3
  4775                           postinc0	equ	0xFEE
  4776                           wreg	equ	0xFE8
  4777                           indf1	equ	0xFE7
  4778                           postdec1	equ	0xFE5
  4779                           fsr1h	equ	0xFE2
  4780                           fsr1l	equ	0xFE1
  4781                           indf2	equ	0xFDF
  4782                           postinc2	equ	0xFDE
  4783                           postdec2	equ	0xFDD
  4784                           fsr2h	equ	0xFDA
  4785                           fsr2l	equ	0xFD9
  4786                           status	equ	0xFD8
  4787                           
  4788 ;; *************** function _InitCanHardware *****************
  4789 ;; Defined at:
  4790 ;;		line 173 in file "Can_XmitService.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;		None
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;		None
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  1    wreg      void 
  4797 ;; Registers used:
  4798 ;;		wreg, status,2, status,0
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4804 ;;      Params:         0       0       0       0
  4805 ;;      Locals:         0       0       0       0
  4806 ;;      Temps:          0       0       0       0
  4807 ;;      Totals:         0       0       0       0
  4808 ;;Total ram usage:        0 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:    6
  4811 ;; This function calls:
  4812 ;;		Nothing
  4813 ;; This function is called by:
  4814 ;;		_RunCan_XmitService
  4815 ;; This function uses a non-reentrant model
  4816 ;;
  4817                           
  4818                           	psect	text29
  4819  00140C                     __ptext29:
  4820                           	opt stack 0
  4821  00140C                     _InitCanHardware:
  4822                           	opt stack 22
  4823                           
  4824                           ;Can_XmitService.c: 176: PORTB = 0x00;
  4825                           
  4826                           ; BSR set to: 15
  4827                           ;incstack = 0
  4828  00140C  0E00               	movlw	0
  4829  00140E  6E81               	movwf	3969,c	;volatile
  4830                           
  4831                           ;Can_XmitService.c: 177: LATB = 0x00;
  4832  001410  0E00               	movlw	0
  4833  001412  6E8A               	movwf	3978,c	;volatile
  4834                           
  4835                           ;Can_XmitService.c: 178: TRISBbits.TRISB2 = 0;
  4836  001414  9493               	bcf	3987,2,c	;volatile
  4837                           
  4838                           ;Can_XmitService.c: 179: TRISBbits.TRISB3 = 1;
  4839  001416  8693               	bsf	3987,3,c	;volatile
  4840                           
  4841                           ;Can_XmitService.c: 182: CANCON = 0x80;
  4842  001418  0E80               	movlw	128
  4843  00141A  6E6F               	movwf	3951,c	;volatile
  4844                           
  4845                           ;Can_XmitService.c: 184: CANSTAT = 0x80;
  4846  00141C  0E80               	movlw	128
  4847  00141E  6E6E               	movwf	3950,c	;volatile
  4848  001420                     l684:
  4849  001420  AE6E               	btfss	3950,7,c	;volatile
  4850  001422  D7FE               	goto	l684
  4851                           
  4852                           ;Can_XmitService.c: 188: BRGCON1bits.SJW0 = 1;
  4853  001424  8C70               	bsf	3952,6,c	;volatile
  4854                           
  4855                           ;Can_XmitService.c: 189: BRGCON2bits.SAM = 1;
  4856  001426  8C71               	bsf	3953,6,c	;volatile
  4857                           
  4858                           ;Can_XmitService.c: 190: BRGCON2bits.SEG2PHTS = 1;
  4859  001428  8E71               	bsf	3953,7,c	;volatile
  4860                           
  4861                           ;Can_XmitService.c: 191: BRGCON2bits.PRSEG1 = 1;
  4862  00142A  8271               	bsf	3953,1,c	;volatile
  4863                           
  4864                           ;Can_XmitService.c: 192: BRGCON2bits.SEG1PH0 = 1;
  4865  00142C  8671               	bsf	3953,3,c	;volatile
  4866                           
  4867                           ;Can_XmitService.c: 193: BRGCON2bits.SEG1PH1 = 1;
  4868  00142E  8871               	bsf	3953,4,c	;volatile
  4869                           
  4870                           ;Can_XmitService.c: 194: BRGCON2bits.SEG1PH2 = 1;
  4871  001430  8A71               	bsf	3953,5,c	;volatile
  4872                           
  4873                           ;Can_XmitService.c: 195: BRGCON3bits.SEG2PH0 = 1;
  4874  001432  8072               	bsf	3954,0,c	;volatile
  4875                           
  4876                           ;Can_XmitService.c: 196: BRGCON3bits.SEG2PH1 = 1;
  4877  001434  8272               	bsf	3954,1,c	;volatile
  4878                           
  4879                           ;Can_XmitService.c: 197: BRGCON1bits.BRP0 = 1;
  4880  001436  8070               	bsf	3952,0,c	;volatile
  4881                           
  4882                           ;Can_XmitService.c: 198: BRGCON1bits.BRP1 = 1;
  4883  001438  8270               	bsf	3952,1,c	;volatile
  4884                           
  4885                           ;Can_XmitService.c: 202: RXB0CON |= 0b01100000;
  4886  00143A  0E60               	movlw	96
  4887  00143C  1260               	iorwf	3936,f,c	;volatile
  4888                           
  4889                           ;Can_XmitService.c: 204: RXF0SIDH = 0x20;
  4890  00143E  0E20               	movlw	32
  4891  001440  010F               	movlb	15	; () banked
  4892  001442  6F00               	movwf	0,b	;volatile
  4893                           
  4894                           ; BSR set to: 15
  4895                           ;Can_XmitService.c: 205: RXF0SIDL = 0x60;
  4896  001444  0E60               	movlw	96
  4897  001446  010F               	movlb	15	; () banked
  4898  001448  6F01               	movwf	1,b	;volatile
  4899                           
  4900                           ; BSR set to: 15
  4901                           ;Can_XmitService.c: 206: RXM0SIDH = 0x00;
  4902  00144A  0E00               	movlw	0
  4903  00144C  010F               	movlb	15	; () banked
  4904  00144E  6F18               	movwf	24,b	;volatile
  4905                           
  4906                           ; BSR set to: 15
  4907                           ;Can_XmitService.c: 207: RXM0SIDL = 0x00;
  4908  001450  0E00               	movlw	0
  4909  001452  010F               	movlb	15	; () banked
  4910  001454  6F19               	movwf	25,b	;volatile
  4911                           
  4912                           ; BSR set to: 15
  4913                           ;Can_XmitService.c: 211: ECANCON = 0x00;
  4914  001456  0E00               	movlw	0
  4915  001458  6E77               	movwf	3959,c	;volatile
  4916                           
  4917                           ; BSR set to: 15
  4918                           ;Can_XmitService.c: 212: CANCON = 0x00;
  4919  00145A  0E00               	movlw	0
  4920  00145C  6E6F               	movwf	3951,c	;volatile
  4921                           
  4922                           ; BSR set to: 15
  4923                           ;Can_XmitService.c: 213: CANSTAT = 0x40;
  4924  00145E  0E40               	movlw	64
  4925  001460  6E6E               	movwf	3950,c	;volatile
  4926                           
  4927                           ; BSR set to: 15
  4928                           ;Can_XmitService.c: 218: TXB0CONbits.TXREQ = 0;
  4929  001462  010F               	movlb	15	; () banked
  4930  001464  9740               	bcf	64,3,b	;volatile
  4931                           
  4932                           ; BSR set to: 15
  4933                           ;Can_XmitService.c: 219: TXB0IF = 0;
  4934  001466  94A4               	bcf	4004,2,c	;volatile
  4935                           
  4936                           ; BSR set to: 15
  4937                           ;Can_XmitService.c: 220: RXB0IF = 0;
  4938  001468  90A4               	bcf	4004,0,c	;volatile
  4939                           
  4940                           ; BSR set to: 15
  4941                           ;Can_XmitService.c: 221: RXB0CONbits.RXFUL = 0;
  4942  00146A  9E60               	bcf	3936,7,c	;volatile
  4943                           
  4944                           ; BSR set to: 15
  4945                           ;Can_XmitService.c: 223: TXB0IE = 1;
  4946  00146C  84A3               	bsf	4003,2,c	;volatile
  4947                           
  4948                           ; BSR set to: 15
  4949                           ;Can_XmitService.c: 224: RXB0IE = 1;
  4950  00146E  80A3               	bsf	4003,0,c	;volatile
  4951                           
  4952                           ; BSR set to: 15
  4953                           ;Can_XmitService.c: 225: PIE3 = 0xff;
  4954  001470  68A3               	setf	4003,c	;volatile
  4955                           
  4956                           ; BSR set to: 15
  4957  001472  0012               	return		;funcret
  4958  001474                     __end_of_InitCanHardware:
  4959                           	opt stack 0
  4960                           tosu	equ	0xFFF
  4961                           tosh	equ	0xFFE
  4962                           tosl	equ	0xFFD
  4963                           pclath	equ	0xFFA
  4964                           tblptru	equ	0xFF8
  4965                           tblptrh	equ	0xFF7
  4966                           tblptrl	equ	0xFF6
  4967                           tablat	equ	0xFF5
  4968                           prodh	equ	0xFF4
  4969                           prodl	equ	0xFF3
  4970                           postinc0	equ	0xFEE
  4971                           wreg	equ	0xFE8
  4972                           indf1	equ	0xFE7
  4973                           postdec1	equ	0xFE5
  4974                           fsr1h	equ	0xFE2
  4975                           fsr1l	equ	0xFE1
  4976                           indf2	equ	0xFDF
  4977                           postinc2	equ	0xFDE
  4978                           postdec2	equ	0xFDD
  4979                           fsr2h	equ	0xFDA
  4980                           fsr2l	equ	0xFD9
  4981                           status	equ	0xFD8
  4982                           
  4983 ;; *************** function _ES_DeQueue *****************
  4984 ;; Defined at:
  4985 ;;		line 164 in file "ES_Queue.c"
  4986 ;; Parameters:    Size  Location     Type
  4987 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  4988 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  4989 ;;  pReturnEvent    2   14[BANK0 ] PTR struct ES_Event_t
  4990 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  4991 ;; Auto vars:     Size  Location     Type
  4992 ;;  pThisQueue      2   20[BANK0 ] PTR struct .
  4993 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  4994 ;;  NumLeft         1   19[BANK0 ] unsigned char 
  4995 ;;  SaveCrit        1   18[BANK0 ] unsigned char 
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  1    wreg      unsigned char 
  4998 ;; Registers used:
  4999 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5005 ;;      Params:         0       4       0       0
  5006 ;;      Locals:         0       4       0       0
  5007 ;;      Temps:          0       2       0       0
  5008 ;;      Totals:         0      10       0       0
  5009 ;;Total ram usage:       10 bytes
  5010 ;; Hardware stack levels used:    1
  5011 ;; Hardware stack levels required when called:    7
  5012 ;; This function calls:
  5013 ;;		___lbmod
  5014 ;;		___wmul
  5015 ;; This function is called by:
  5016 ;;		_ES_Run
  5017 ;;		_ES_RecallEvents
  5018 ;; This function uses a non-reentrant model
  5019 ;;
  5020                           
  5021                           	psect	text30
  5022  0006AC                     __ptext30:
  5023                           	opt stack 0
  5024  0006AC                     _ES_DeQueue:
  5025                           	opt stack 22
  5026                           
  5027                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  5028                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  5029                           ;ES_Queue.c: 168: uint8_t NumLeft;
  5030                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  5031                           
  5032                           ; BSR set to: 15
  5033                           ;incstack = 0
  5034  0006AC  C0C9  F0D1         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  5035  0006B0  C0CA  F0D2         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  5036                           
  5037                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  5038  0006B4  0100               	movlb	0	; () banked
  5039  0006B6  EE20 F002          	lfsr	2,2
  5040  0006BA  51D1               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  5041  0006BC  26D9               	addwf	fsr2l,f,c
  5042  0006BE  51D2               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  5043  0006C0  22DA               	addwfc	fsr2h,f,c
  5044  0006C2  50DF               	movf	indf2,w,c
  5045  0006C4  B4D8               	btfsc	status,2,c
  5046  0006C6  D06F               	goto	l2776
  5047                           
  5048                           ; BSR set to: 0
  5049                           
  5050                           ;ES_Queue.c: 172: {
  5051                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  5052  0006C8  CFF2 F0CF          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  5053  0006CC  9EF2               	bcf	intcon,7,c	;volatile
  5054                           
  5055                           ; BSR set to: 0
  5056                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  5057                           
  5058                           ; BSR set to: 0
  5059  0006CE  0100               	movlb	0	; () banked
  5060  0006D0  EE20 F001          	lfsr	2,1
  5061  0006D4  51D1               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  5062  0006D6  26D9               	addwf	fsr2l,f,c
  5063  0006D8  51D2               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  5064  0006DA  22DA               	addwfc	fsr2h,f,c
  5065  0006DC  50DF               	movf	indf2,w,c
  5066  0006DE  0100               	movlb	0	; () banked
  5067  0006E0  6FCD               	movwf	??_ES_DeQueue& (0+255),b
  5068  0006E2  0E01               	movlw	1
  5069  0006E4  0100               	movlb	0	; () banked
  5070  0006E6  25CD               	addwf	??_ES_DeQueue& (0+255),w,b
  5071  0006E8  0100               	movlb	0	; () banked
  5072  0006EA  6FC3               	movwf	___wmul@multiplier& (0+255),b
  5073  0006EC  0100               	movlb	0	; () banked
  5074  0006EE  6BC4               	clrf	(___wmul@multiplier+1)& (0+255),b
  5075  0006F0  0E00               	movlw	0
  5076  0006F2  23C4               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
  5077  0006F4  0E00               	movlw	0
  5078  0006F6  0100               	movlb	0	; () banked
  5079  0006F8  6FC6               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5080  0006FA  0E03               	movlw	3
  5081  0006FC  6FC5               	movwf	___wmul@multiplicand& (0+255),b
  5082  0006FE  EC93  F00B         	call	___wmul	;wreg free
  5083  000702  0100               	movlb	0	; () banked
  5084  000704  51C3               	movf	?___wmul& (0+255),w,b
  5085  000706  0100               	movlb	0	; () banked
  5086  000708  25C9               	addwf	ES_DeQueue@pBlock& (0+255),w,b
  5087  00070A  6ED9               	movwf	fsr2l,c
  5088  00070C  0100               	movlb	0	; () banked
  5089  00070E  51C4               	movf	(?___wmul+1)& (0+255),w,b
  5090  000710  0100               	movlb	0	; () banked
  5091  000712  21CA               	addwfc	(ES_DeQueue@pBlock+1)& (0+255),w,b
  5092  000714  6EDA               	movwf	fsr2h,c
  5093  000716  C0CB  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  5094  00071A  C0CC  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  5095  00071E  CFDE FFE6          	movff	postinc2,postinc1
  5096  000722  CFDE FFE6          	movff	postinc2,postinc1
  5097  000726  CFDE FFE6          	movff	postinc2,postinc1
  5098                           
  5099                           ; BSR set to: 0
  5100                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  5101  00072A  0100               	movlb	0	; () banked
  5102  00072C  EE20 F001          	lfsr	2,1
  5103  000730  51D1               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  5104  000732  26D9               	addwf	fsr2l,f,c
  5105  000734  51D2               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  5106  000736  22DA               	addwfc	fsr2h,f,c
  5107  000738  2ADF               	incf	indf2,f,c
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  5111  00073A  C0D1  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  5112  00073E  C0D2  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  5113  000742  0100               	movlb	0	; () banked
  5114  000744  EE10 F001          	lfsr	1,1
  5115  000748  51D1               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  5116  00074A  26E1               	addwf	fsr1l,f,c
  5117  00074C  51D2               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  5118  00074E  22E2               	addwfc	fsr1h,f,c
  5119  000750  50DE               	movf	postinc2,w,c
  5120  000752  5CE6               	subwf	postinc1,w,c
  5121  000754  A0D8               	btfss	status,0,c
  5122  000756  D019               	goto	l2772
  5123                           
  5124                           ; BSR set to: 0
  5125                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  5126  000758  0100               	movlb	0	; () banked
  5127  00075A  EE20 F001          	lfsr	2,1
  5128  00075E  51D1               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  5129  000760  26D9               	addwf	fsr2l,f,c
  5130  000762  51D2               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  5131  000764  22DA               	addwfc	fsr2h,f,c
  5132  000766  C0D1  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  5133  00076A  C0D2  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  5134  00076E  50E7               	movf	indf1,w,c
  5135  000770  0100               	movlb	0	; () banked
  5136  000772  6FBD               	movwf	___lbmod@divisor& (0+255),b
  5137  000774  0100               	movlb	0	; () banked
  5138  000776  EE10 F001          	lfsr	1,1
  5139  00077A  51D1               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  5140  00077C  26E1               	addwf	fsr1l,f,c
  5141  00077E  51D2               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  5142  000780  22E2               	addwfc	fsr1h,f,c
  5143  000782  50E7               	movf	indf1,w,c
  5144  000784  ECD4  F00A         	call	___lbmod
  5145  000788  6EDF               	movwf	indf2,c
  5146  00078A                     l2772:
  5147                           
  5148                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  5149  00078A  0100               	movlb	0	; () banked
  5150  00078C  EE20 F002          	lfsr	2,2
  5151  000790  51D1               	movf	ES_DeQueue@pThisQueue& (0+255),w,b
  5152  000792  26D9               	addwf	fsr2l,f,c
  5153  000794  51D2               	movf	(ES_DeQueue@pThisQueue+1)& (0+255),w,b
  5154  000796  22DA               	addwfc	fsr2h,f,c
  5155  000798  06DF               	decf	indf2,f,c
  5156  00079A  50DF               	movf	indf2,w,c
  5157  00079C  0100               	movlb	0	; () banked
  5158  00079E  6FD0               	movwf	ES_DeQueue@NumLeft& (0+255),b
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  5162  0007A0  C0CF  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  5163                           
  5164                           ;ES_Queue.c: 183: }else {
  5165  0007A4  D014               	goto	l2782
  5166  0007A6                     l2776:
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  5170  0007A6  C0CB  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  5171  0007AA  C0CC  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  5172  0007AE  0E00               	movlw	0
  5173  0007B0  6EDF               	movwf	indf2,c
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  5177  0007B2  0100               	movlb	0	; () banked
  5178  0007B4  EE20 F001          	lfsr	2,1
  5179  0007B8  51CB               	movf	ES_DeQueue@pReturnEvent& (0+255),w,b
  5180  0007BA  26D9               	addwf	fsr2l,f,c
  5181  0007BC  51CC               	movf	(ES_DeQueue@pReturnEvent+1)& (0+255),w,b
  5182  0007BE  22DA               	addwfc	fsr2h,f,c
  5183  0007C0  0E00               	movlw	0
  5184  0007C2  6EDE               	movwf	postinc2,c
  5185  0007C4  0E00               	movlw	0
  5186  0007C6  6EDD               	movwf	postdec2,c
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;ES_Queue.c: 186: NumLeft = 0;
  5190  0007C8  0E00               	movlw	0
  5191  0007CA  0100               	movlb	0	; () banked
  5192  0007CC  6FD0               	movwf	ES_DeQueue@NumLeft& (0+255),b
  5193  0007CE                     l2782:
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;ES_Queue.c: 187: }
  5197                           ;ES_Queue.c: 188: return NumLeft;
  5198  0007CE  0100               	movlb	0	; () banked
  5199  0007D0  51D0               	movf	ES_DeQueue@NumLeft& (0+255),w,b
  5200  0007D2  0012               	return	
  5201  0007D4                     __end_of_ES_DeQueue:
  5202                           	opt stack 0
  5203                           tosu	equ	0xFFF
  5204                           tosh	equ	0xFFE
  5205                           tosl	equ	0xFFD
  5206                           pclath	equ	0xFFA
  5207                           tblptru	equ	0xFF8
  5208                           tblptrh	equ	0xFF7
  5209                           tblptrl	equ	0xFF6
  5210                           tablat	equ	0xFF5
  5211                           prodh	equ	0xFF4
  5212                           prodl	equ	0xFF3
  5213                           intcon	equ	0xFF2
  5214                           postinc0	equ	0xFEE
  5215                           wreg	equ	0xFE8
  5216                           indf1	equ	0xFE7
  5217                           postinc1	equ	0xFE6
  5218                           postdec1	equ	0xFE5
  5219                           fsr1h	equ	0xFE2
  5220                           fsr1l	equ	0xFE1
  5221                           indf2	equ	0xFDF
  5222                           postinc2	equ	0xFDE
  5223                           postdec2	equ	0xFDD
  5224                           fsr2h	equ	0xFDA
  5225                           fsr2l	equ	0xFD9
  5226                           status	equ	0xFD8
  5227                           
  5228 ;; *************** function ___lbmod *****************
  5229 ;; Defined at:
  5230 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;  dividend        1    wreg     unsigned char 
  5233 ;;  divisor         1    0[BANK0 ] unsigned char 
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;  dividend        1    1[BANK0 ] unsigned char 
  5236 ;;  rem             1    3[BANK0 ] unsigned char 
  5237 ;;  counter         1    2[BANK0 ] unsigned char 
  5238 ;; Return value:  Size  Location     Type
  5239 ;;                  1    wreg      unsigned char 
  5240 ;; Registers used:
  5241 ;;		wreg, status,2, status,0
  5242 ;; Tracked objects:
  5243 ;;		On entry : 0/0
  5244 ;;		On exit  : 0/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5247 ;;      Params:         0       1       0       0
  5248 ;;      Locals:         0       3       0       0
  5249 ;;      Temps:          0       0       0       0
  5250 ;;      Totals:         0       4       0       0
  5251 ;;Total ram usage:        4 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:    6
  5254 ;; This function calls:
  5255 ;;		Nothing
  5256 ;; This function is called by:
  5257 ;;		_ES_DeQueue
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           	psect	text31
  5262  0015A8                     __ptext31:
  5263                           	opt stack 0
  5264  0015A8                     ___lbmod:
  5265                           	opt stack 22
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;incstack = 0
  5269                           ;___lbmod@dividend stored from wreg
  5270  0015A8  0100               	movlb	0	; () banked
  5271  0015AA  6FBE               	movwf	___lbmod@dividend& (0+255),b
  5272  0015AC  0E08               	movlw	8
  5273  0015AE  0100               	movlb	0	; () banked
  5274  0015B0  6FBF               	movwf	___lbmod@counter& (0+255),b
  5275  0015B2  0E00               	movlw	0
  5276  0015B4  0100               	movlb	0	; () banked
  5277  0015B6  6FC0               	movwf	___lbmod@rem& (0+255),b
  5278  0015B8                     l2712:
  5279                           
  5280                           ; BSR set to: 0
  5281  0015B8  90D8               	bcf	status,0,c
  5282  0015BA  0100               	movlb	0	; () banked
  5283  0015BC  35BE               	rlcf	___lbmod@dividend& (0+255),w,b
  5284  0015BE  0100               	movlb	0	; () banked
  5285  0015C0  35C0               	rlcf	___lbmod@rem& (0+255),w,b
  5286  0015C2  0100               	movlb	0	; () banked
  5287  0015C4  6FC0               	movwf	___lbmod@rem& (0+255),b
  5288                           
  5289                           ; BSR set to: 0
  5290  0015C6  0100               	movlb	0	; () banked
  5291  0015C8  90D8               	bcf	status,0,c
  5292  0015CA  37BE               	rlcf	___lbmod@dividend& (0+255),f,b
  5293                           
  5294                           ; BSR set to: 0
  5295  0015CC  0100               	movlb	0	; () banked
  5296  0015CE  51BD               	movf	___lbmod@divisor& (0+255),w,b
  5297  0015D0  0100               	movlb	0	; () banked
  5298  0015D2  5DC0               	subwf	___lbmod@rem& (0+255),w,b
  5299  0015D4  A0D8               	btfss	status,0,c
  5300  0015D6  D004               	goto	l2720
  5301                           
  5302                           ; BSR set to: 0
  5303  0015D8  0100               	movlb	0	; () banked
  5304  0015DA  51BD               	movf	___lbmod@divisor& (0+255),w,b
  5305  0015DC  0100               	movlb	0	; () banked
  5306  0015DE  5FC0               	subwf	___lbmod@rem& (0+255),f,b
  5307  0015E0                     l2720:
  5308                           
  5309                           ; BSR set to: 0
  5310  0015E0  0100               	movlb	0	; () banked
  5311  0015E2  2FBF               	decfsz	___lbmod@counter& (0+255),f,b
  5312  0015E4  D7E9               	goto	l2712
  5313                           
  5314                           ; BSR set to: 0
  5315                           
  5316                           ; BSR set to: 0
  5317  0015E6  0100               	movlb	0	; () banked
  5318  0015E8  51C0               	movf	___lbmod@rem& (0+255),w,b
  5319  0015EA  0012               	return	
  5320  0015EC                     __end_of___lbmod:
  5321                           	opt stack 0
  5322                           tosu	equ	0xFFF
  5323                           tosh	equ	0xFFE
  5324                           tosl	equ	0xFFD
  5325                           pclath	equ	0xFFA
  5326                           tblptru	equ	0xFF8
  5327                           tblptrh	equ	0xFF7
  5328                           tblptrl	equ	0xFF6
  5329                           tablat	equ	0xFF5
  5330                           prodh	equ	0xFF4
  5331                           prodl	equ	0xFF3
  5332                           intcon	equ	0xFF2
  5333                           postinc0	equ	0xFEE
  5334                           wreg	equ	0xFE8
  5335                           indf1	equ	0xFE7
  5336                           postinc1	equ	0xFE6
  5337                           postdec1	equ	0xFE5
  5338                           fsr1h	equ	0xFE2
  5339                           fsr1l	equ	0xFE1
  5340                           indf2	equ	0xFDF
  5341                           postinc2	equ	0xFDE
  5342                           postdec2	equ	0xFDD
  5343                           fsr2h	equ	0xFDA
  5344                           fsr2l	equ	0xFD9
  5345                           status	equ	0xFD8
  5346                           
  5347 ;; *************** function _ES_CheckUserEvents *****************
  5348 ;; Defined at:
  5349 ;;		line 46 in file "ES_CheckEvents.c"
  5350 ;; Parameters:    Size  Location     Type
  5351 ;;		None
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;  i               1    0[BANK0 ] unsigned char 
  5354 ;; Return value:  Size  Location     Type
  5355 ;;                  1    wreg      unsigned char 
  5356 ;; Registers used:
  5357 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5358 ;; Tracked objects:
  5359 ;;		On entry : 0/0
  5360 ;;		On exit  : 0/0
  5361 ;;		Unchanged: 0/0
  5362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5363 ;;      Params:         0       0       0       0
  5364 ;;      Locals:         0       1       0       0
  5365 ;;      Temps:          0       0       0       0
  5366 ;;      Totals:         0       1       0       0
  5367 ;;Total ram usage:        1 bytes
  5368 ;; Hardware stack levels used:    1
  5369 ;; Hardware stack levels required when called:    7
  5370 ;; This function calls:
  5371 ;;		_Check4Keystroke
  5372 ;; This function is called by:
  5373 ;;		_ES_Run
  5374 ;; This function uses a non-reentrant model
  5375 ;;
  5376                           
  5377                           	psect	text32
  5378  00155E                     __ptext32:
  5379                           	opt stack 0
  5380  00155E                     _ES_CheckUserEvents:
  5381                           	opt stack 22
  5382                           
  5383                           ;ES_CheckEvents.c: 48: uint8_t i;
  5384                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  5385                           
  5386                           ; BSR set to: 0
  5387                           ;incstack = 0
  5388  00155E  0E00               	movlw	0
  5389  001560  0100               	movlb	0	; () banked
  5390  001562  6FBD               	movwf	ES_CheckUserEvents@i& (0+255),b
  5391  001564  0100               	movlb	0	; () banked
  5392  001566  51BD               	movf	ES_CheckUserEvents@i& (0+255),w,b
  5393  001568  0100               	movlb	0	; () banked
  5394  00156A  A4D8               	btfss	status,2,c
  5395  00156C  0012               	return	
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  5399                           
  5400                           ; BSR set to: 0
  5401                           
  5402                           ; BSR set to: 0
  5403  00156E  0100               	movlb	0	; () banked
  5404  001570  51BD               	movf	ES_CheckUserEvents@i& (0+255),w,b
  5405  001572  0D02               	mullw	2
  5406  001574  0E6C               	movlw	low _ES_EventList
  5407  001576  24F3               	addwf	prodl,w,c
  5408  001578  6EF6               	movwf	tblptrl,c
  5409  00157A  0E03               	movlw	high _ES_EventList
  5410  00157C  20F4               	addwfc	prodh,w,c
  5411  00157E  6EF7               	movwf	tblptrh,c
  5412  001580                     	if	0	;There are less than 3 active tblptr bytes
  5413  001580                     	endif
  5414  001580  D801               	call	u1538
  5415  001582  D00C               	goto	u1539
  5416  001584                     u1538:
  5417  001584  0005               	push	
  5418  001586  6EFA               	movwf	pclath,c
  5419  001588  0009               	tblrd		*+
  5420  00158A  50F5               	movf	tablat,w,c
  5421  00158C  6EFD               	movwf	tosl,c
  5422  00158E  0009               	tblrd		*+
  5423  001590  50F5               	movf	tablat,w,c
  5424  001592  6EFE               	movwf	tosh,c
  5425  001594  50F8               	movf	tblptru,w,c
  5426  001596  6EFF               	movwf	tosu,c
  5427  001598  50FA               	movf	pclath,w,c
  5428  00159A  0012               	return		;indir
  5429  00159C                     u1539:
  5430  00159C  06E8               	decf	wreg,f,c
  5431  00159E  B4D8               	btfsc	status,2,c
  5432  0015A0  0012               	return	
  5433                           
  5434                           ;ES_CheckEvents.c: 52: break;
  5435  0015A2  0100               	movlb	0	; () banked
  5436  0015A4  2BBD               	incf	ES_CheckUserEvents@i& (0+255),f,b
  5437  0015A6  D7DE               	goto	L11
  5438  0015A8                     __end_of_ES_CheckUserEvents:
  5439                           	opt stack 0
  5440                           tosu	equ	0xFFF
  5441                           tosh	equ	0xFFE
  5442                           tosl	equ	0xFFD
  5443                           pclath	equ	0xFFA
  5444                           tblptru	equ	0xFF8
  5445                           tblptrh	equ	0xFF7
  5446                           tblptrl	equ	0xFF6
  5447                           tablat	equ	0xFF5
  5448                           prodh	equ	0xFF4
  5449                           prodl	equ	0xFF3
  5450                           intcon	equ	0xFF2
  5451                           postinc0	equ	0xFEE
  5452                           wreg	equ	0xFE8
  5453                           indf1	equ	0xFE7
  5454                           postinc1	equ	0xFE6
  5455                           postdec1	equ	0xFE5
  5456                           fsr1h	equ	0xFE2
  5457                           fsr1l	equ	0xFE1
  5458                           indf2	equ	0xFDF
  5459                           postinc2	equ	0xFDE
  5460                           postdec2	equ	0xFDD
  5461                           fsr2h	equ	0xFDA
  5462                           fsr2l	equ	0xFD9
  5463                           status	equ	0xFD8
  5464                           
  5465 ;; *************** function _Check4Keystroke *****************
  5466 ;; Defined at:
  5467 ;;		line 62 in file "EventCheckers.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;		None
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;		None
  5472 ;; Return value:  Size  Location     Type
  5473 ;;                  1    wreg      unsigned char 
  5474 ;; Registers used:
  5475 ;;		wreg
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5481 ;;      Params:         0       0       0       0
  5482 ;;      Locals:         0       0       0       0
  5483 ;;      Temps:          0       0       0       0
  5484 ;;      Totals:         0       0       0       0
  5485 ;;Total ram usage:        0 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; Hardware stack levels required when called:    6
  5488 ;; This function calls:
  5489 ;;		Nothing
  5490 ;; This function is called by:
  5491 ;;		_ES_CheckUserEvents
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           	psect	text33
  5496  001A34                     __ptext33:
  5497                           	opt stack 0
  5498  001A34                     _Check4Keystroke:
  5499                           	opt stack 22
  5500                           
  5501                           ;EventCheckers.c: 78: return 0;
  5502                           
  5503                           ;incstack = 0
  5504  001A34  0E00               	movlw	0
  5505  001A36  0012               	return	
  5506  001A38                     __end_of_Check4Keystroke:
  5507                           	opt stack 0
  5508                           tosu	equ	0xFFF
  5509                           tosh	equ	0xFFE
  5510                           tosl	equ	0xFFD
  5511                           pclath	equ	0xFFA
  5512                           tblptru	equ	0xFF8
  5513                           tblptrh	equ	0xFF7
  5514                           tblptrl	equ	0xFF6
  5515                           tablat	equ	0xFF5
  5516                           prodh	equ	0xFF4
  5517                           prodl	equ	0xFF3
  5518                           intcon	equ	0xFF2
  5519                           postinc0	equ	0xFEE
  5520                           wreg	equ	0xFE8
  5521                           indf1	equ	0xFE7
  5522                           postinc1	equ	0xFE6
  5523                           postdec1	equ	0xFE5
  5524                           fsr1h	equ	0xFE2
  5525                           fsr1l	equ	0xFE1
  5526                           indf2	equ	0xFDF
  5527                           postinc2	equ	0xFDE
  5528                           postdec2	equ	0xFDD
  5529                           fsr2h	equ	0xFDA
  5530                           fsr2l	equ	0xFD9
  5531                           status	equ	0xFD8
  5532                           
  5533 ;; *************** function _ES_Initialize *****************
  5534 ;; Defined at:
  5535 ;;		line 242 in file "ES_Framework.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;  NewRate         2   33[BANK0 ] enum E15424
  5538 ;; Auto vars:     Size  Location     Type
  5539 ;;  i               1   35[BANK0 ] unsigned char 
  5540 ;; Return value:  Size  Location     Type
  5541 ;;                  1    wreg      enum E15495
  5542 ;; Registers used:
  5543 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5544 ;; Tracked objects:
  5545 ;;		On entry : 0/0
  5546 ;;		On exit  : 0/0
  5547 ;;		Unchanged: 0/0
  5548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5549 ;;      Params:         0       2       0       0
  5550 ;;      Locals:         0       1       0       0
  5551 ;;      Temps:          0       0       0       0
  5552 ;;      Totals:         0       3       0       0
  5553 ;;Total ram usage:        3 bytes
  5554 ;; Hardware stack levels used:    1
  5555 ;; Hardware stack levels required when called:   10
  5556 ;; This function calls:
  5557 ;;		_ES_InitQueue
  5558 ;;		_ES_Timer_Init
  5559 ;;		_InitCan_XmitService
  5560 ;;		_InitPatternControlService
  5561 ;;		_InitSPI32ControlService
  5562 ;;		_InitToggleService
  5563 ;; This function is called by:
  5564 ;;		_main
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           	psect	text34
  5569  000ACE                     __ptext34:
  5570                           	opt stack 0
  5571  000ACE                     _ES_Initialize:
  5572                           	opt stack 20
  5573                           
  5574                           ;ES_Framework.c: 243: uint8_t i;
  5575                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  5576                           
  5577                           ;incstack = 0
  5578  000ACE  C0DE  F0BF         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  5579  000AD2  C0DF  F0C0         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  5580  000AD6  ECFC  F00C         	call	_ES_Timer_Init	;wreg free
  5581                           
  5582                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  5583  000ADA  0E00               	movlw	0
  5584  000ADC  0100               	movlb	0	; () banked
  5585  000ADE  6FE0               	movwf	ES_Initialize@i& (0+255),b
  5586  000AE0                     l3042:
  5587                           
  5588                           ; BSR set to: 0
  5589  000AE0  0E03               	movlw	3
  5590  000AE2  0100               	movlb	0	; () banked
  5591  000AE4  65E0               	cpfsgt	ES_Initialize@i& (0+255),b
  5592  000AE6  D001               	goto	l3046
  5593  000AE8  D066               	goto	l3066
  5594  000AEA                     l3046:
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  5598                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  5599  000AEA  0100               	movlb	0	; () banked
  5600  000AEC  51E0               	movf	ES_Initialize@i& (0+255),w,b
  5601  000AEE  0D04               	mullw	4
  5602  000AF0  0E41               	movlw	low _ServDescList
  5603  000AF2  24F3               	addwf	prodl,w,c
  5604  000AF4  6EF6               	movwf	tblptrl,c
  5605  000AF6  0E03               	movlw	high _ServDescList
  5606  000AF8  20F4               	addwfc	prodh,w,c
  5607  000AFA  6EF7               	movwf	tblptrh,c
  5608  000AFC                     	if	0	;There are less than 3 active tblptr bytes
  5609  000AFC                     	endif
  5610  000AFC  0009               	tblrd		*+
  5611  000AFE  50F5               	movf	tablat,w,c
  5612  000B00  0009               	tblrd		*+
  5613  000B02  10F5               	iorwf	tablat,w,c
  5614  000B04  B4D8               	btfsc	status,2,c
  5615  000B06  D013               	goto	l3050
  5616                           
  5617                           ; BSR set to: 0
  5618  000B08  0100               	movlb	0	; () banked
  5619  000B0A  51E0               	movf	ES_Initialize@i& (0+255),w,b
  5620  000B0C  0D04               	mullw	4
  5621  000B0E  0E02               	movlw	2
  5622  000B10  26F3               	addwf	prodl,f,c
  5623  000B12  0E00               	movlw	0
  5624  000B14  22F4               	addwfc	prodh,f,c
  5625  000B16  0E41               	movlw	low _ServDescList
  5626  000B18  24F3               	addwf	prodl,w,c
  5627  000B1A  6EF6               	movwf	tblptrl,c
  5628  000B1C  0E03               	movlw	high _ServDescList
  5629  000B1E  20F4               	addwfc	prodh,w,c
  5630  000B20  6EF7               	movwf	tblptrh,c
  5631  000B22                     	if	0	;There are less than 3 active tblptr bytes
  5632  000B22                     	endif
  5633  000B22  0009               	tblrd		*+
  5634  000B24  50F5               	movf	tablat,w,c
  5635  000B26  0009               	tblrd		*+
  5636  000B28  10F5               	iorwf	tablat,w,c
  5637  000B2A  A4D8               	btfss	status,2,c
  5638  000B2C  D002               	goto	l3054
  5639  000B2E                     l3050:
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;ES_Framework.c: 249: return FailedPointer;
  5643  000B2E  0E03               	movlw	3
  5644                           
  5645                           ; BSR set to: 0
  5646  000B30  0012               	return	
  5647  000B32                     l3054:
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  5651  000B32  0100               	movlb	0	; () banked
  5652  000B34  51E0               	movf	ES_Initialize@i& (0+255),w,b
  5653  000B36  0D03               	mullw	3
  5654  000B38  0E60               	movlw	low _EventQueues
  5655  000B3A  24F3               	addwf	prodl,w,c
  5656  000B3C  6EF6               	movwf	tblptrl,c
  5657  000B3E  0E03               	movlw	high _EventQueues
  5658  000B40  20F4               	addwfc	prodh,w,c
  5659  000B42  6EF7               	movwf	tblptrh,c
  5660  000B44                     	if	0	;There are less than 3 active tblptr bytes
  5661  000B44                     	endif
  5662  000B44  0009               	tblrd		*+
  5663  000B46  CFF5 F0BD          	movff	tablat,ES_InitQueue@pBlock
  5664  000B4A  000A               	tblrd		*-
  5665  000B4C  CFF5 F0BE          	movff	tablat,ES_InitQueue@pBlock+1
  5666  000B50  0100               	movlb	0	; () banked
  5667  000B52  51E0               	movf	ES_Initialize@i& (0+255),w,b
  5668  000B54  0D03               	mullw	3
  5669  000B56  0E02               	movlw	2
  5670  000B58  26F3               	addwf	prodl,f,c
  5671  000B5A  0E00               	movlw	0
  5672  000B5C  22F4               	addwfc	prodh,f,c
  5673  000B5E  0E60               	movlw	low _EventQueues
  5674  000B60  24F3               	addwf	prodl,w,c
  5675  000B62  6EF6               	movwf	tblptrl,c
  5676  000B64  0E03               	movlw	high _EventQueues
  5677  000B66  20F4               	addwfc	prodh,w,c
  5678  000B68  6EF7               	movwf	tblptrh,c
  5679  000B6A                     	if	0	;There are less than 3 active tblptr bytes
  5680  000B6A                     	endif
  5681  000B6A  0008               	tblrd		*
  5682  000B6C  CFF5 F0BF          	movff	tablat,ES_InitQueue@BlockSize
  5683  000B70  EC58  F00B         	call	_ES_InitQueue	;wreg free
  5684                           
  5685                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  5686  000B74  0100               	movlb	0	; () banked
  5687  000B76  51E0               	movf	ES_Initialize@i& (0+255),w,b
  5688  000B78  0D04               	mullw	4
  5689  000B7A  0E41               	movlw	low _ServDescList
  5690  000B7C  24F3               	addwf	prodl,w,c
  5691  000B7E  6EF6               	movwf	tblptrl,c
  5692  000B80  0E03               	movlw	high _ServDescList
  5693  000B82  20F4               	addwfc	prodh,w,c
  5694  000B84  6EF7               	movwf	tblptrh,c
  5695  000B86                     	if	0	;There are less than 3 active tblptr bytes
  5696  000B86                     	endif
  5697  000B86  D801               	call	u1888
  5698  000B88  D00E               	goto	u1889
  5699  000B8A                     u1888:
  5700  000B8A  0005               	push	
  5701  000B8C  6EFA               	movwf	pclath,c
  5702  000B8E  0009               	tblrd		*+
  5703  000B90  50F5               	movf	tablat,w,c
  5704  000B92  6EFD               	movwf	tosl,c
  5705  000B94  0009               	tblrd		*+
  5706  000B96  50F5               	movf	tablat,w,c
  5707  000B98  6EFE               	movwf	tosh,c
  5708  000B9A  50F8               	movf	tblptru,w,c
  5709  000B9C  6EFF               	movwf	tosu,c
  5710  000B9E  50FA               	movf	pclath,w,c
  5711  000BA0  0100               	movlb	0	; () banked
  5712  000BA2  51E0               	movf	ES_Initialize@i& (0+255),w,b
  5713  000BA4  0012               	return		;indir
  5714  000BA6                     u1889:
  5715  000BA6  06E8               	decf	wreg,f,c
  5716  000BA8  B4D8               	btfsc	status,2,c
  5717  000BAA  D002               	goto	l3062
  5718                           
  5719                           ;ES_Framework.c: 254: return FailedInit;
  5720  000BAC  0E05               	movlw	5
  5721  000BAE  0012               	return	
  5722  000BB0                     l3062:
  5723  000BB0  0100               	movlb	0	; () banked
  5724  000BB2  2BE0               	incf	ES_Initialize@i& (0+255),f,b
  5725  000BB4  D795               	goto	l3042
  5726  000BB6                     l3066:
  5727                           
  5728                           ; BSR set to: 0
  5729                           ;ES_Framework.c: 255: }
  5730                           ;ES_Framework.c: 256: return Success;
  5731  000BB6  0E00               	movlw	0
  5732  000BB8  0012               	return	
  5733  000BBA                     __end_of_ES_Initialize:
  5734                           	opt stack 0
  5735                           tosu	equ	0xFFF
  5736                           tosh	equ	0xFFE
  5737                           tosl	equ	0xFFD
  5738                           pclath	equ	0xFFA
  5739                           tblptru	equ	0xFF8
  5740                           tblptrh	equ	0xFF7
  5741                           tblptrl	equ	0xFF6
  5742                           tablat	equ	0xFF5
  5743                           prodh	equ	0xFF4
  5744                           prodl	equ	0xFF3
  5745                           intcon	equ	0xFF2
  5746                           postinc0	equ	0xFEE
  5747                           wreg	equ	0xFE8
  5748                           indf1	equ	0xFE7
  5749                           postinc1	equ	0xFE6
  5750                           postdec1	equ	0xFE5
  5751                           fsr1h	equ	0xFE2
  5752                           fsr1l	equ	0xFE1
  5753                           indf2	equ	0xFDF
  5754                           postinc2	equ	0xFDE
  5755                           postdec2	equ	0xFDD
  5756                           fsr2h	equ	0xFDA
  5757                           fsr2l	equ	0xFD9
  5758                           status	equ	0xFD8
  5759                           
  5760 ;; *************** function _InitCan_XmitService *****************
  5761 ;; Defined at:
  5762 ;;		line 76 in file "Can_XmitService.c"
  5763 ;; Parameters:    Size  Location     Type
  5764 ;;  Priority        1    wreg     unsigned char 
  5765 ;; Auto vars:     Size  Location     Type
  5766 ;;  Priority        1   32[BANK0 ] unsigned char 
  5767 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  1    wreg      unsigned char 
  5770 ;; Registers used:
  5771 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5777 ;;      Params:         0       0       0       0
  5778 ;;      Locals:         0       4       0       0
  5779 ;;      Temps:          0       0       0       0
  5780 ;;      Totals:         0       4       0       0
  5781 ;;Total ram usage:        4 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    9
  5784 ;; This function calls:
  5785 ;;		_ES_PostToService
  5786 ;; This function is called by:
  5787 ;;		_ES_Initialize
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           	psect	text35
  5792  0017F6                     __ptext35:
  5793                           	opt stack 0
  5794  0017F6                     _InitCan_XmitService:
  5795                           	opt stack 20
  5796                           
  5797                           ;incstack = 0
  5798                           ;InitCan_XmitService@Priority stored from wreg
  5799  0017F6  0100               	movlb	0	; () banked
  5800  0017F8  6FDD               	movwf	InitCan_XmitService@Priority& (0+255),b
  5801                           
  5802                           ;Can_XmitService.c: 78: ES_Event ThisEvent;
  5803                           ;Can_XmitService.c: 80: MyPriority = Priority;
  5804  0017FA  C0DD  F095         	movff	InitCan_XmitService@Priority,Can_XmitService@MyPriority
  5805                           
  5806                           ;Can_XmitService.c: 83: ThisEvent.EventType = ES_INIT;
  5807  0017FE  0E02               	movlw	2
  5808  001800  0100               	movlb	0	; () banked
  5809  001802  6FDA               	movwf	InitCan_XmitService@ThisEvent& (0+255),b
  5810                           
  5811                           ; BSR set to: 0
  5812                           ;Can_XmitService.c: 84: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  5813  001804  C0DA  F0D4         	movff	InitCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  5814  001808  C0DB  F0D5         	movff	InitCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  5815  00180C  C0DC  F0D6         	movff	InitCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  5816  001810  0100               	movlb	0	; () banked
  5817  001812  5195               	movf	Can_XmitService@MyPriority& (0+255),w,b
  5818  001814  EC27  F009         	call	_ES_PostToService
  5819  001818  06E8               	decf	wreg,f,c
  5820  00181A  A4D8               	btfss	status,2,c
  5821  00181C  D002               	goto	l3006
  5822                           
  5823                           ;Can_XmitService.c: 85: {
  5824                           ;Can_XmitService.c: 86: return 1;
  5825  00181E  0E01               	movlw	1
  5826                           
  5827                           ;Can_XmitService.c: 87: }else
  5828  001820  0012               	return	
  5829  001822                     l3006:
  5830                           
  5831                           ;Can_XmitService.c: 88: {
  5832                           ;Can_XmitService.c: 89: return 0;
  5833  001822  0E00               	movlw	0
  5834  001824  0012               	return	
  5835  001826                     __end_of_InitCan_XmitService:
  5836                           	opt stack 0
  5837                           tosu	equ	0xFFF
  5838                           tosh	equ	0xFFE
  5839                           tosl	equ	0xFFD
  5840                           pclath	equ	0xFFA
  5841                           tblptru	equ	0xFF8
  5842                           tblptrh	equ	0xFF7
  5843                           tblptrl	equ	0xFF6
  5844                           tablat	equ	0xFF5
  5845                           prodh	equ	0xFF4
  5846                           prodl	equ	0xFF3
  5847                           intcon	equ	0xFF2
  5848                           postinc0	equ	0xFEE
  5849                           wreg	equ	0xFE8
  5850                           indf1	equ	0xFE7
  5851                           postinc1	equ	0xFE6
  5852                           postdec1	equ	0xFE5
  5853                           fsr1h	equ	0xFE2
  5854                           fsr1l	equ	0xFE1
  5855                           indf2	equ	0xFDF
  5856                           postinc2	equ	0xFDE
  5857                           postdec2	equ	0xFDD
  5858                           fsr2h	equ	0xFDA
  5859                           fsr2l	equ	0xFD9
  5860                           status	equ	0xFD8
  5861                           
  5862 ;; *************** function _InitSPI32ControlService *****************
  5863 ;; Defined at:
  5864 ;;		line 80 in file "SPI32_ControlService.c"
  5865 ;; Parameters:    Size  Location     Type
  5866 ;;  Priority        1    wreg     unsigned char 
  5867 ;; Auto vars:     Size  Location     Type
  5868 ;;  Priority        1   32[BANK0 ] unsigned char 
  5869 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  5870 ;; Return value:  Size  Location     Type
  5871 ;;                  1    wreg      unsigned char 
  5872 ;; Registers used:
  5873 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5874 ;; Tracked objects:
  5875 ;;		On entry : 0/0
  5876 ;;		On exit  : 0/0
  5877 ;;		Unchanged: 0/0
  5878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5879 ;;      Params:         0       0       0       0
  5880 ;;      Locals:         0       4       0       0
  5881 ;;      Temps:          0       0       0       0
  5882 ;;      Totals:         0       4       0       0
  5883 ;;Total ram usage:        4 bytes
  5884 ;; Hardware stack levels used:    1
  5885 ;; Hardware stack levels required when called:    9
  5886 ;; This function calls:
  5887 ;;		_ES_PostToService
  5888 ;;		_SPI32_Init
  5889 ;; This function is called by:
  5890 ;;		_ES_Initialize
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           	psect	text36
  5895  0016EC                     __ptext36:
  5896                           	opt stack 0
  5897  0016EC                     _InitSPI32ControlService:
  5898                           	opt stack 20
  5899                           
  5900                           ;incstack = 0
  5901                           ;InitSPI32ControlService@Priority stored from wreg
  5902  0016EC  0100               	movlb	0	; () banked
  5903  0016EE  6FDD               	movwf	InitSPI32ControlService@Priority& (0+255),b
  5904                           
  5905                           ;SPI32_ControlService.c: 82: ES_Event ThisEvent;
  5906                           ;SPI32_ControlService.c: 84: MyPriority = Priority;
  5907  0016F0  C0DD  F099         	movff	InitSPI32ControlService@Priority,SPI32_ControlService@MyPriority
  5908                           
  5909                           ;SPI32_ControlService.c: 86: SPI32_Init();
  5910  0016F4  EC14  F00D         	call	_SPI32_Init	;wreg free
  5911                           
  5912                           ;SPI32_ControlService.c: 88: CurrentState = SPI32_Startup;
  5913  0016F8  0E00               	movlw	0
  5914  0016FA  0100               	movlb	0	; () banked
  5915  0016FC  6F98               	movwf	SPI32_ControlService@CurrentState& (0+255),b
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;SPI32_ControlService.c: 90: ThisEvent.EventType = ES_INIT;
  5919  0016FE  0E02               	movlw	2
  5920  001700  0100               	movlb	0	; () banked
  5921  001702  6FDA               	movwf	InitSPI32ControlService@ThisEvent& (0+255),b
  5922                           
  5923                           ; BSR set to: 0
  5924                           ;SPI32_ControlService.c: 91: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  5925  001704  C0DA  F0D4         	movff	InitSPI32ControlService@ThisEvent,ES_PostToService@TheEvent
  5926  001708  C0DB  F0D5         	movff	InitSPI32ControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  5927  00170C  C0DC  F0D6         	movff	InitSPI32ControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  5928  001710  0100               	movlb	0	; () banked
  5929  001712  5199               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  5930  001714  EC27  F009         	call	_ES_PostToService
  5931  001718  06E8               	decf	wreg,f,c
  5932  00171A  A4D8               	btfss	status,2,c
  5933  00171C  D002               	goto	l2894
  5934                           
  5935                           ;SPI32_ControlService.c: 92: {
  5936                           ;SPI32_ControlService.c: 93: return 1;
  5937  00171E  0E01               	movlw	1
  5938                           
  5939                           ;SPI32_ControlService.c: 94: }else
  5940  001720  0012               	return	
  5941  001722                     l2894:
  5942                           
  5943                           ;SPI32_ControlService.c: 95: {
  5944                           ;SPI32_ControlService.c: 96: return 0;
  5945  001722  0E00               	movlw	0
  5946  001724  0012               	return	
  5947  001726                     __end_of_InitSPI32ControlService:
  5948                           	opt stack 0
  5949                           tosu	equ	0xFFF
  5950                           tosh	equ	0xFFE
  5951                           tosl	equ	0xFFD
  5952                           pclath	equ	0xFFA
  5953                           tblptru	equ	0xFF8
  5954                           tblptrh	equ	0xFF7
  5955                           tblptrl	equ	0xFF6
  5956                           tablat	equ	0xFF5
  5957                           prodh	equ	0xFF4
  5958                           prodl	equ	0xFF3
  5959                           intcon	equ	0xFF2
  5960                           postinc0	equ	0xFEE
  5961                           wreg	equ	0xFE8
  5962                           indf1	equ	0xFE7
  5963                           postinc1	equ	0xFE6
  5964                           postdec1	equ	0xFE5
  5965                           fsr1h	equ	0xFE2
  5966                           fsr1l	equ	0xFE1
  5967                           indf2	equ	0xFDF
  5968                           postinc2	equ	0xFDE
  5969                           postdec2	equ	0xFDD
  5970                           fsr2h	equ	0xFDA
  5971                           fsr2l	equ	0xFD9
  5972                           status	equ	0xFD8
  5973                           
  5974 ;; *************** function _InitPatternControlService *****************
  5975 ;; Defined at:
  5976 ;;		line 97 in file "Pattern_ControlService.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;  Priority        1    wreg     unsigned char 
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;  Priority        1   32[BANK0 ] unsigned char 
  5981 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  5982 ;; Return value:  Size  Location     Type
  5983 ;;                  1    wreg      unsigned char 
  5984 ;; Registers used:
  5985 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5986 ;; Tracked objects:
  5987 ;;		On entry : 0/0
  5988 ;;		On exit  : 0/0
  5989 ;;		Unchanged: 0/0
  5990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5991 ;;      Params:         0       0       0       0
  5992 ;;      Locals:         0       4       0       0
  5993 ;;      Temps:          0       0       0       0
  5994 ;;      Totals:         0       4       0       0
  5995 ;;Total ram usage:        4 bytes
  5996 ;; Hardware stack levels used:    1
  5997 ;; Hardware stack levels required when called:    9
  5998 ;; This function calls:
  5999 ;;		_DotStar_Init
  6000 ;;		_ES_PostToService
  6001 ;;		_SetupPattern
  6002 ;; This function is called by:
  6003 ;;		_ES_Initialize
  6004 ;; This function uses a non-reentrant model
  6005 ;;
  6006                           
  6007                           	psect	text37
  6008  001474                     __ptext37:
  6009                           	opt stack 0
  6010  001474                     _InitPatternControlService:
  6011                           	opt stack 20
  6012                           
  6013                           ;incstack = 0
  6014                           ;InitPatternControlService@Priority stored from wreg
  6015  001474  0100               	movlb	0	; () banked
  6016  001476  6FDD               	movwf	InitPatternControlService@Priority& (0+255),b
  6017                           
  6018                           ;Pattern_ControlService.c: 99: ES_Event ThisEvent;
  6019                           ;Pattern_ControlService.c: 101: MyPriority = Priority;
  6020  001478  C0DD  F09E         	movff	InitPatternControlService@Priority,_MyPriority
  6021                           
  6022                           ;Pattern_ControlService.c: 103: DotStar_Init(10);
  6023  00147C  0E0A               	movlw	10
  6024  00147E  ECEF  F004         	call	_DotStar_Init
  6025                           
  6026                           ;Pattern_ControlService.c: 104: SetupPattern(PatternConfigs, 10);
  6027  001482  0EF8               	movlw	low _PatternConfigs
  6028  001484  0100               	movlb	0	; () banked
  6029  001486  6FBD               	movwf	SetupPattern@configs& (0+255),b
  6030  001488  0E00               	movlw	high _PatternConfigs
  6031  00148A  0100               	movlb	0	; () banked
  6032  00148C  6FBE               	movwf	(SetupPattern@configs+1)& (0+255),b
  6033  00148E  0E0A               	movlw	10
  6034  001490  0100               	movlb	0	; () banked
  6035  001492  6FBF               	movwf	SetupPattern@numPixels& (0+255),b
  6036  001494  ECF5  F00C         	call	_SetupPattern	;wreg free
  6037                           
  6038                           ;Pattern_ControlService.c: 106: CurrentState = Pattern_Startup;
  6039  001498  0E00               	movlw	0
  6040  00149A  0100               	movlb	0	; () banked
  6041  00149C  6F9B               	movwf	_CurrentState& (0+255),b
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;Pattern_ControlService.c: 108: ThisEvent.EventType = ES_INIT;
  6045  00149E  0E02               	movlw	2
  6046  0014A0  0100               	movlb	0	; () banked
  6047  0014A2  6FDA               	movwf	InitPatternControlService@ThisEvent& (0+255),b
  6048                           
  6049                           ; BSR set to: 0
  6050                           ;Pattern_ControlService.c: 109: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  6051  0014A4  C0DA  F0D4         	movff	InitPatternControlService@ThisEvent,ES_PostToService@TheEvent
  6052  0014A8  C0DB  F0D5         	movff	InitPatternControlService@ThisEvent+1,ES_PostToService@TheEvent+1
  6053  0014AC  C0DC  F0D6         	movff	InitPatternControlService@ThisEvent+2,ES_PostToService@TheEvent+2
  6054  0014B0  0100               	movlb	0	; () banked
  6055  0014B2  519E               	movf	_MyPriority& (0+255),w,b
  6056  0014B4  EC27  F009         	call	_ES_PostToService
  6057  0014B8  06E8               	decf	wreg,f,c
  6058  0014BA  A4D8               	btfss	status,2,c
  6059  0014BC  D002               	goto	l2828
  6060                           
  6061                           ;Pattern_ControlService.c: 110: {
  6062                           ;Pattern_ControlService.c: 111: return 1;
  6063  0014BE  0E01               	movlw	1
  6064                           
  6065                           ;Pattern_ControlService.c: 112: }else
  6066  0014C0  0012               	return	
  6067  0014C2                     l2828:
  6068                           
  6069                           ;Pattern_ControlService.c: 113: {
  6070                           ;Pattern_ControlService.c: 114: return 0;
  6071  0014C2  0E00               	movlw	0
  6072  0014C4  0012               	return	
  6073  0014C6                     __end_of_InitPatternControlService:
  6074                           	opt stack 0
  6075                           tosu	equ	0xFFF
  6076                           tosh	equ	0xFFE
  6077                           tosl	equ	0xFFD
  6078                           pclath	equ	0xFFA
  6079                           tblptru	equ	0xFF8
  6080                           tblptrh	equ	0xFF7
  6081                           tblptrl	equ	0xFF6
  6082                           tablat	equ	0xFF5
  6083                           prodh	equ	0xFF4
  6084                           prodl	equ	0xFF3
  6085                           intcon	equ	0xFF2
  6086                           postinc0	equ	0xFEE
  6087                           wreg	equ	0xFE8
  6088                           indf1	equ	0xFE7
  6089                           postinc1	equ	0xFE6
  6090                           postdec1	equ	0xFE5
  6091                           fsr1h	equ	0xFE2
  6092                           fsr1l	equ	0xFE1
  6093                           indf2	equ	0xFDF
  6094                           postinc2	equ	0xFDE
  6095                           postdec2	equ	0xFDD
  6096                           fsr2h	equ	0xFDA
  6097                           fsr2l	equ	0xFD9
  6098                           status	equ	0xFD8
  6099                           
  6100 ;; *************** function _InitToggleService *****************
  6101 ;; Defined at:
  6102 ;;		line 63 in file "ToggleService.c"
  6103 ;; Parameters:    Size  Location     Type
  6104 ;;  Priority        1    wreg     unsigned char 
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;  Priority        1   32[BANK0 ] unsigned char 
  6107 ;;  ThisEvent       3   29[BANK0 ] struct ES_Event_t
  6108 ;; Return value:  Size  Location     Type
  6109 ;;                  1    wreg      unsigned char 
  6110 ;; Registers used:
  6111 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6112 ;; Tracked objects:
  6113 ;;		On entry : 0/0
  6114 ;;		On exit  : 0/0
  6115 ;;		Unchanged: 0/0
  6116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6117 ;;      Params:         0       0       0       0
  6118 ;;      Locals:         0       4       0       0
  6119 ;;      Temps:          0       0       0       0
  6120 ;;      Totals:         0       4       0       0
  6121 ;;Total ram usage:        4 bytes
  6122 ;; Hardware stack levels used:    1
  6123 ;; Hardware stack levels required when called:    9
  6124 ;; This function calls:
  6125 ;;		_ES_PostToService
  6126 ;; This function is called by:
  6127 ;;		_ES_Initialize
  6128 ;; This function uses a non-reentrant model
  6129 ;;
  6130                           
  6131                           	psect	text38
  6132  0015EC                     __ptext38:
  6133                           	opt stack 0
  6134  0015EC                     _InitToggleService:
  6135                           	opt stack 20
  6136                           
  6137                           ;incstack = 0
  6138                           ;InitToggleService@Priority stored from wreg
  6139  0015EC  0100               	movlb	0	; () banked
  6140  0015EE  6FDD               	movwf	InitToggleService@Priority& (0+255),b
  6141                           
  6142                           ;ToggleService.c: 65: ES_Event ThisEvent;
  6143                           ;ToggleService.c: 67: MyPriority = Priority;
  6144  0015F0  C0DD  F09A         	movff	InitToggleService@Priority,ToggleService@MyPriority
  6145                           
  6146                           ;ToggleService.c: 71: PORTA = 0x00;
  6147  0015F4  0E00               	movlw	0
  6148  0015F6  6E80               	movwf	3968,c	;volatile
  6149                           
  6150                           ;ToggleService.c: 72: LATA = 0x00;
  6151  0015F8  0E00               	movlw	0
  6152  0015FA  6E89               	movwf	3977,c	;volatile
  6153                           
  6154                           ;ToggleService.c: 74: ADCON1 = 0x0F;
  6155  0015FC  0E0F               	movlw	15
  6156  0015FE  6EC1               	movwf	4033,c	;volatile
  6157                           
  6158                           ;ToggleService.c: 75: TRISA = 0b11111100;
  6159  001600  0EFC               	movlw	252
  6160  001602  6E92               	movwf	3986,c	;volatile
  6161                           
  6162                           ;ToggleService.c: 76: LATA1 = 0;
  6163  001604  9289               	bcf	3977,1,c	;volatile
  6164                           
  6165                           ;ToggleService.c: 77: LATA0 = 1;
  6166  001606  8089               	bsf	3977,0,c	;volatile
  6167                           
  6168                           ;ToggleService.c: 81: ThisEvent.EventType = ES_INIT;
  6169  001608  0E02               	movlw	2
  6170  00160A  0100               	movlb	0	; () banked
  6171  00160C  6FDA               	movwf	InitToggleService@ThisEvent& (0+255),b
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;ToggleService.c: 82: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  6175  00160E  C0DA  F0D4         	movff	InitToggleService@ThisEvent,ES_PostToService@TheEvent
  6176  001612  C0DB  F0D5         	movff	InitToggleService@ThisEvent+1,ES_PostToService@TheEvent+1
  6177  001616  C0DC  F0D6         	movff	InitToggleService@ThisEvent+2,ES_PostToService@TheEvent+2
  6178  00161A  0100               	movlb	0	; () banked
  6179  00161C  519A               	movf	ToggleService@MyPriority& (0+255),w,b
  6180  00161E  EC27  F009         	call	_ES_PostToService
  6181  001622  06E8               	decf	wreg,f,c
  6182  001624  A4D8               	btfss	status,2,c
  6183  001626  D002               	goto	l2972
  6184                           
  6185                           ;ToggleService.c: 83: {
  6186                           ;ToggleService.c: 84: return 1;
  6187  001628  0E01               	movlw	1
  6188                           
  6189                           ;ToggleService.c: 85: }else
  6190  00162A  0012               	return	
  6191  00162C                     l2972:
  6192                           
  6193                           ;ToggleService.c: 86: {
  6194                           ;ToggleService.c: 87: return 0;
  6195  00162C  0E00               	movlw	0
  6196  00162E  0012               	return	
  6197  001630                     __end_of_InitToggleService:
  6198                           	opt stack 0
  6199                           tosu	equ	0xFFF
  6200                           tosh	equ	0xFFE
  6201                           tosl	equ	0xFFD
  6202                           pclath	equ	0xFFA
  6203                           tblptru	equ	0xFF8
  6204                           tblptrh	equ	0xFF7
  6205                           tblptrl	equ	0xFF6
  6206                           tablat	equ	0xFF5
  6207                           prodh	equ	0xFF4
  6208                           prodl	equ	0xFF3
  6209                           intcon	equ	0xFF2
  6210                           postinc0	equ	0xFEE
  6211                           wreg	equ	0xFE8
  6212                           indf1	equ	0xFE7
  6213                           postinc1	equ	0xFE6
  6214                           postdec1	equ	0xFE5
  6215                           fsr1h	equ	0xFE2
  6216                           fsr1l	equ	0xFE1
  6217                           indf2	equ	0xFDF
  6218                           postinc2	equ	0xFDE
  6219                           postdec2	equ	0xFDD
  6220                           fsr2h	equ	0xFDA
  6221                           fsr2l	equ	0xFD9
  6222                           status	equ	0xFD8
  6223                           
  6224 ;; *************** function _SPI32_Init *****************
  6225 ;; Defined at:
  6226 ;;		line 64 in file "SPI32_HW.c"
  6227 ;; Parameters:    Size  Location     Type
  6228 ;;		None
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;		None
  6231 ;; Return value:  Size  Location     Type
  6232 ;;                  1    wreg      void 
  6233 ;; Registers used:
  6234 ;;		wreg, status,2, cstack
  6235 ;; Tracked objects:
  6236 ;;		On entry : 0/0
  6237 ;;		On exit  : 0/0
  6238 ;;		Unchanged: 0/0
  6239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6240 ;;      Params:         0       0       0       0
  6241 ;;      Locals:         0       0       0       0
  6242 ;;      Temps:          0       0       0       0
  6243 ;;      Totals:         0       0       0       0
  6244 ;;Total ram usage:        0 bytes
  6245 ;; Hardware stack levels used:    1
  6246 ;; Hardware stack levels required when called:    7
  6247 ;; This function calls:
  6248 ;;		_HW_Init
  6249 ;; This function is called by:
  6250 ;;		_InitSPI32ControlService
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           	psect	text39
  6255  001A28                     __ptext39:
  6256                           	opt stack 0
  6257  001A28                     _SPI32_Init:
  6258                           	opt stack 21
  6259                           
  6260                           ;SPI32_HW.c: 66: HW_Init();
  6261                           
  6262                           ;incstack = 0
  6263  001A28  EC4D  F00C         	call	_HW_Init	;wreg free
  6264  001A2C  0012               	return		;funcret
  6265  001A2E                     __end_of_SPI32_Init:
  6266                           	opt stack 0
  6267                           tosu	equ	0xFFF
  6268                           tosh	equ	0xFFE
  6269                           tosl	equ	0xFFD
  6270                           pclath	equ	0xFFA
  6271                           tblptru	equ	0xFF8
  6272                           tblptrh	equ	0xFF7
  6273                           tblptrl	equ	0xFF6
  6274                           tablat	equ	0xFF5
  6275                           prodh	equ	0xFF4
  6276                           prodl	equ	0xFF3
  6277                           intcon	equ	0xFF2
  6278                           postinc0	equ	0xFEE
  6279                           wreg	equ	0xFE8
  6280                           indf1	equ	0xFE7
  6281                           postinc1	equ	0xFE6
  6282                           postdec1	equ	0xFE5
  6283                           fsr1h	equ	0xFE2
  6284                           fsr1l	equ	0xFE1
  6285                           indf2	equ	0xFDF
  6286                           postinc2	equ	0xFDE
  6287                           postdec2	equ	0xFDD
  6288                           fsr2h	equ	0xFDA
  6289                           fsr2l	equ	0xFD9
  6290                           status	equ	0xFD8
  6291                           
  6292 ;; *************** function _HW_Init *****************
  6293 ;; Defined at:
  6294 ;;		line 117 in file "SPI32_HW.c"
  6295 ;; Parameters:    Size  Location     Type
  6296 ;;		None
  6297 ;; Auto vars:     Size  Location     Type
  6298 ;;		None
  6299 ;; Return value:  Size  Location     Type
  6300 ;;                  1    wreg      void 
  6301 ;; Registers used:
  6302 ;;		wreg, status,2
  6303 ;; Tracked objects:
  6304 ;;		On entry : 0/0
  6305 ;;		On exit  : 0/0
  6306 ;;		Unchanged: 0/0
  6307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6308 ;;      Params:         0       0       0       0
  6309 ;;      Locals:         0       0       0       0
  6310 ;;      Temps:          0       0       0       0
  6311 ;;      Totals:         0       0       0       0
  6312 ;;Total ram usage:        0 bytes
  6313 ;; Hardware stack levels used:    1
  6314 ;; Hardware stack levels required when called:    6
  6315 ;; This function calls:
  6316 ;;		Nothing
  6317 ;; This function is called by:
  6318 ;;		_SPI32_Init
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           	psect	text40
  6323  00189A                     __ptext40:
  6324                           	opt stack 0
  6325  00189A                     _HW_Init:
  6326                           	opt stack 21
  6327                           
  6328                           ;SPI32_HW.c: 123: PORTC = 0x00;
  6329                           
  6330                           ;incstack = 0
  6331  00189A  0E00               	movlw	0
  6332  00189C  6E82               	movwf	3970,c	;volatile
  6333                           
  6334                           ;SPI32_HW.c: 124: LATC = 0x00;
  6335  00189E  0E00               	movlw	0
  6336  0018A0  6E8B               	movwf	3979,c	;volatile
  6337                           
  6338                           ;SPI32_HW.c: 125: ADCON1 = 0x0F;
  6339  0018A2  0E0F               	movlw	15
  6340  0018A4  6EC1               	movwf	4033,c	;volatile
  6341                           
  6342                           ;SPI32_HW.c: 126: TRISC = 0x00;
  6343  0018A6  0E00               	movlw	0
  6344  0018A8  6E94               	movwf	3988,c	;volatile
  6345                           
  6346                           ;SPI32_HW.c: 128: SSPIE = 1;
  6347  0018AA  869D               	bsf	3997,3,c	;volatile
  6348                           
  6349                           ;SPI32_HW.c: 132: SSPCON1 = 0x00;
  6350  0018AC  0E00               	movlw	0
  6351  0018AE  6EC6               	movwf	4038,c	;volatile
  6352                           
  6353                           ;SPI32_HW.c: 133: SSPSTAT = 0b01000000;
  6354  0018B0  0E40               	movlw	64
  6355  0018B2  6EC7               	movwf	4039,c	;volatile
  6356                           
  6357                           ;SPI32_HW.c: 134: SSPADD = 0xFF;
  6358  0018B4  68C8               	setf	4040,c	;volatile
  6359                           
  6360                           ;SPI32_HW.c: 135: SSPCON1 = 0b00110000;
  6361  0018B6  0E30               	movlw	48
  6362  0018B8  6EC6               	movwf	4038,c	;volatile
  6363  0018BA  0012               	return		;funcret
  6364  0018BC                     __end_of_HW_Init:
  6365                           	opt stack 0
  6366                           tosu	equ	0xFFF
  6367                           tosh	equ	0xFFE
  6368                           tosl	equ	0xFFD
  6369                           pclath	equ	0xFFA
  6370                           tblptru	equ	0xFF8
  6371                           tblptrh	equ	0xFF7
  6372                           tblptrl	equ	0xFF6
  6373                           tablat	equ	0xFF5
  6374                           prodh	equ	0xFF4
  6375                           prodl	equ	0xFF3
  6376                           intcon	equ	0xFF2
  6377                           postinc0	equ	0xFEE
  6378                           wreg	equ	0xFE8
  6379                           indf1	equ	0xFE7
  6380                           postinc1	equ	0xFE6
  6381                           postdec1	equ	0xFE5
  6382                           fsr1h	equ	0xFE2
  6383                           fsr1l	equ	0xFE1
  6384                           indf2	equ	0xFDF
  6385                           postinc2	equ	0xFDE
  6386                           postdec2	equ	0xFDD
  6387                           fsr2h	equ	0xFDA
  6388                           fsr2l	equ	0xFD9
  6389                           status	equ	0xFD8
  6390                           
  6391 ;; *************** function _SetupPattern *****************
  6392 ;; Defined at:
  6393 ;;		line 69 in file "Pattern_RGBPatterns.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;  configs         2    0[BANK0 ] PTR unsigned char 
  6396 ;;		 -> PatternConfigs(5), 
  6397 ;;  numPixels       1    2[BANK0 ] unsigned char 
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;		None
  6400 ;; Return value:  Size  Location     Type
  6401 ;;                  1    wreg      void 
  6402 ;; Registers used:
  6403 ;;		wreg, status,2, status,0
  6404 ;; Tracked objects:
  6405 ;;		On entry : 0/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6409 ;;      Params:         0       3       0       0
  6410 ;;      Locals:         0       0       0       0
  6411 ;;      Temps:          0       0       0       0
  6412 ;;      Totals:         0       3       0       0
  6413 ;;Total ram usage:        3 bytes
  6414 ;; Hardware stack levels used:    1
  6415 ;; Hardware stack levels required when called:    6
  6416 ;; This function calls:
  6417 ;;		Nothing
  6418 ;; This function is called by:
  6419 ;;		_InitPatternControlService
  6420 ;; This function uses a non-reentrant model
  6421 ;;
  6422                           
  6423                           	psect	text41
  6424  0019EA                     __ptext41:
  6425                           	opt stack 0
  6426  0019EA                     _SetupPattern:
  6427                           	opt stack 22
  6428                           
  6429                           ;Pattern_RGBPatterns.c: 71: PatternConfigs = configs;
  6430                           
  6431                           ;incstack = 0
  6432  0019EA  C0BD  F08D         	movff	SetupPattern@configs,Pattern_RGBPatterns@PatternConfigs
  6433  0019EE  C0BE  F08E         	movff	SetupPattern@configs+1,Pattern_RGBPatterns@PatternConfigs+1
  6434                           
  6435                           ;Pattern_RGBPatterns.c: 73: Length = numPixels;
  6436  0019F2  C0BF  F097         	movff	SetupPattern@numPixels,Pattern_RGBPatterns@Length
  6437  0019F6  0012               	return		;funcret
  6438  0019F8                     __end_of_SetupPattern:
  6439                           	opt stack 0
  6440                           tosu	equ	0xFFF
  6441                           tosh	equ	0xFFE
  6442                           tosl	equ	0xFFD
  6443                           pclath	equ	0xFFA
  6444                           tblptru	equ	0xFF8
  6445                           tblptrh	equ	0xFF7
  6446                           tblptrl	equ	0xFF6
  6447                           tablat	equ	0xFF5
  6448                           prodh	equ	0xFF4
  6449                           prodl	equ	0xFF3
  6450                           intcon	equ	0xFF2
  6451                           postinc0	equ	0xFEE
  6452                           wreg	equ	0xFE8
  6453                           indf1	equ	0xFE7
  6454                           postinc1	equ	0xFE6
  6455                           postdec1	equ	0xFE5
  6456                           fsr1h	equ	0xFE2
  6457                           fsr1l	equ	0xFE1
  6458                           indf2	equ	0xFDF
  6459                           postinc2	equ	0xFDE
  6460                           postdec2	equ	0xFDD
  6461                           fsr2h	equ	0xFDA
  6462                           fsr2l	equ	0xFD9
  6463                           status	equ	0xFD8
  6464                           
  6465 ;; *************** function _DotStar_Init *****************
  6466 ;; Defined at:
  6467 ;;		line 41 in file "Pattern_DotStarLED.c"
  6468 ;; Parameters:    Size  Location     Type
  6469 ;;  numPixels       1    wreg     unsigned char 
  6470 ;; Auto vars:     Size  Location     Type
  6471 ;;  numPixels       1    2[BANK0 ] unsigned char 
  6472 ;;  i               1    3[BANK0 ] unsigned char 
  6473 ;; Return value:  Size  Location     Type
  6474 ;;                  1    wreg      void 
  6475 ;; Registers used:
  6476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6477 ;; Tracked objects:
  6478 ;;		On entry : 0/0
  6479 ;;		On exit  : 0/0
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6482 ;;      Params:         0       0       0       0
  6483 ;;      Locals:         0       2       0       0
  6484 ;;      Temps:          0       2       0       0
  6485 ;;      Totals:         0       4       0       0
  6486 ;;Total ram usage:        4 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; Hardware stack levels required when called:    6
  6489 ;; This function calls:
  6490 ;;		Nothing
  6491 ;; This function is called by:
  6492 ;;		_InitPatternControlService
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           	psect	text42
  6497  0009DE                     __ptext42:
  6498                           	opt stack 0
  6499  0009DE                     _DotStar_Init:
  6500                           	opt stack 22
  6501                           
  6502                           ;incstack = 0
  6503                           ;DotStar_Init@numPixels stored from wreg
  6504  0009DE  0100               	movlb	0	; () banked
  6505  0009E0  6FBF               	movwf	DotStar_Init@numPixels& (0+255),b
  6506                           
  6507                           ;Pattern_DotStarLED.c: 50: Length = numPixels;
  6508  0009E2  C0BF  F09D         	movff	DotStar_Init@numPixels,_Length
  6509                           
  6510                           ;Pattern_DotStarLED.c: 52: PixelFrames[0] = 0x0;
  6511  0009E6  0E00               	movlw	0
  6512  0009E8  0101               	movlb	1	; () banked
  6513  0009EA  6F00               	movwf	_PixelFrames& (0+255),b
  6514  0009EC  0E00               	movlw	0
  6515  0009EE  6F01               	movwf	(_PixelFrames+1)& (0+255),b
  6516  0009F0  0E00               	movlw	0
  6517  0009F2  6F02               	movwf	(_PixelFrames+2)& (0+255),b
  6518  0009F4  0E00               	movlw	0
  6519  0009F6  6F03               	movwf	(_PixelFrames+3)& (0+255),b
  6520                           
  6521                           ; BSR set to: 1
  6522                           ;Pattern_DotStarLED.c: 53: PixelFrames[Length+1] = 0xffffffff;
  6523  0009F8  0100               	movlb	0	; () banked
  6524  0009FA  519D               	movf	_Length& (0+255),w,b
  6525  0009FC  0100               	movlb	0	; () banked
  6526  0009FE  6FBD               	movwf	??_DotStar_Init& (0+255),b
  6527  000A00  6BBE               	clrf	(??_DotStar_Init+1)& (0+255),b
  6528  000A02  0100               	movlb	0	; () banked
  6529  000A04  90D8               	bcf	status,0,c
  6530  000A06  37BD               	rlcf	??_DotStar_Init& (0+255),f,b
  6531  000A08  37BE               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6532  000A0A  0100               	movlb	0	; () banked
  6533  000A0C  90D8               	bcf	status,0,c
  6534  000A0E  37BD               	rlcf	??_DotStar_Init& (0+255),f,b
  6535  000A10  37BE               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6536  000A12  0E04               	movlw	4
  6537  000A14  0100               	movlb	0	; () banked
  6538  000A16  27BD               	addwf	??_DotStar_Init& (0+255),f,b
  6539  000A18  0E00               	movlw	0
  6540  000A1A  23BE               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  6541  000A1C  0E00               	movlw	low _PixelFrames
  6542  000A1E  0100               	movlb	0	; () banked
  6543  000A20  25BD               	addwf	??_DotStar_Init& (0+255),w,b
  6544  000A22  6ED9               	movwf	fsr2l,c
  6545  000A24  0E01               	movlw	high _PixelFrames
  6546  000A26  0100               	movlb	0	; () banked
  6547  000A28  21BE               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  6548  000A2A  6EDA               	movwf	fsr2h,c
  6549  000A2C  0EFF               	movlw	255
  6550  000A2E  6EDE               	movwf	postinc2,c
  6551  000A30  0EFF               	movlw	255
  6552  000A32  6EDE               	movwf	postinc2,c
  6553  000A34  0EFF               	movlw	255
  6554  000A36  6EDE               	movwf	postinc2,c
  6555  000A38  0EFF               	movlw	255
  6556  000A3A  6EDD               	movwf	postdec2,c
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;Pattern_DotStarLED.c: 55: OffFrames[0] = 0x0;
  6560  000A3C  0E00               	movlw	0
  6561  000A3E  0102               	movlb	2	; () banked
  6562  000A40  6F00               	movwf	_OffFrames& (0+255),b
  6563  000A42  0E00               	movlw	0
  6564  000A44  6F01               	movwf	(_OffFrames+1)& (0+255),b
  6565  000A46  0E00               	movlw	0
  6566  000A48  6F02               	movwf	(_OffFrames+2)& (0+255),b
  6567  000A4A  0E00               	movlw	0
  6568  000A4C  6F03               	movwf	(_OffFrames+3)& (0+255),b
  6569                           
  6570                           ;Pattern_DotStarLED.c: 56: OffFrames[Length+1] = 0xffffffff;
  6571  000A4E  0100               	movlb	0	; () banked
  6572  000A50  519D               	movf	_Length& (0+255),w,b
  6573  000A52  0100               	movlb	0	; () banked
  6574  000A54  6FBD               	movwf	??_DotStar_Init& (0+255),b
  6575  000A56  6BBE               	clrf	(??_DotStar_Init+1)& (0+255),b
  6576  000A58  0100               	movlb	0	; () banked
  6577  000A5A  90D8               	bcf	status,0,c
  6578  000A5C  37BD               	rlcf	??_DotStar_Init& (0+255),f,b
  6579  000A5E  37BE               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6580  000A60  0100               	movlb	0	; () banked
  6581  000A62  90D8               	bcf	status,0,c
  6582  000A64  37BD               	rlcf	??_DotStar_Init& (0+255),f,b
  6583  000A66  37BE               	rlcf	(??_DotStar_Init+1)& (0+255),f,b
  6584  000A68  0E04               	movlw	4
  6585  000A6A  0100               	movlb	0	; () banked
  6586  000A6C  27BD               	addwf	??_DotStar_Init& (0+255),f,b
  6587  000A6E  0E00               	movlw	0
  6588  000A70  23BE               	addwfc	(??_DotStar_Init+1)& (0+255),f,b
  6589  000A72  0E00               	movlw	low _OffFrames
  6590  000A74  0100               	movlb	0	; () banked
  6591  000A76  25BD               	addwf	??_DotStar_Init& (0+255),w,b
  6592  000A78  6ED9               	movwf	fsr2l,c
  6593  000A7A  0E02               	movlw	high _OffFrames
  6594  000A7C  0100               	movlb	0	; () banked
  6595  000A7E  21BE               	addwfc	(??_DotStar_Init+1)& (0+255),w,b
  6596  000A80  6EDA               	movwf	fsr2h,c
  6597  000A82  0EFF               	movlw	255
  6598  000A84  6EDE               	movwf	postinc2,c
  6599  000A86  0EFF               	movlw	255
  6600  000A88  6EDE               	movwf	postinc2,c
  6601  000A8A  0EFF               	movlw	255
  6602  000A8C  6EDE               	movwf	postinc2,c
  6603  000A8E  0EFF               	movlw	255
  6604  000A90  6EDD               	movwf	postdec2,c
  6605                           
  6606                           ; BSR set to: 0
  6607                           ;Pattern_DotStarLED.c: 57: for(uint8_t i=1;i<=Length;i++){
  6608  000A92  0E01               	movlw	1
  6609  000A94  0100               	movlb	0	; () banked
  6610  000A96  6FC0               	movwf	DotStar_Init@i& (0+255),b
  6611  000A98  D013               	goto	l2632
  6612  000A9A                     l2628:
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;Pattern_DotStarLED.c: 58: OffFrames[i] = 0xe0000000;
  6616  000A9A  0100               	movlb	0	; () banked
  6617  000A9C  51C0               	movf	DotStar_Init@i& (0+255),w,b
  6618  000A9E  0D04               	mullw	4
  6619  000AA0  0E00               	movlw	low _OffFrames
  6620  000AA2  24F3               	addwf	prodl,w,c
  6621  000AA4  6ED9               	movwf	fsr2l,c
  6622  000AA6  0E02               	movlw	high _OffFrames
  6623  000AA8  20F4               	addwfc	prodh,w,c
  6624  000AAA  6EDA               	movwf	fsr2h,c
  6625  000AAC  0E00               	movlw	0
  6626  000AAE  6EDE               	movwf	postinc2,c
  6627  000AB0  0E00               	movlw	0
  6628  000AB2  6EDE               	movwf	postinc2,c
  6629  000AB4  0E00               	movlw	0
  6630  000AB6  6EDE               	movwf	postinc2,c
  6631  000AB8  0EE0               	movlw	224
  6632  000ABA  6EDD               	movwf	postdec2,c
  6633                           
  6634                           ; BSR set to: 0
  6635  000ABC  0100               	movlb	0	; () banked
  6636  000ABE  2BC0               	incf	DotStar_Init@i& (0+255),f,b
  6637  000AC0                     l2632:
  6638                           
  6639                           ; BSR set to: 0
  6640  000AC0  0100               	movlb	0	; () banked
  6641  000AC2  51C0               	movf	DotStar_Init@i& (0+255),w,b
  6642  000AC4  0100               	movlb	0	; () banked
  6643  000AC6  5D9D               	subwf	_Length& (0+255),w,b
  6644  000AC8  A0D8               	btfss	status,0,c
  6645  000ACA  0012               	return	
  6646  000ACC  D7E6               	goto	l2628
  6647  000ACE                     __end_of_DotStar_Init:
  6648                           	opt stack 0
  6649                           tosu	equ	0xFFF
  6650                           tosh	equ	0xFFE
  6651                           tosl	equ	0xFFD
  6652                           pclath	equ	0xFFA
  6653                           tblptru	equ	0xFF8
  6654                           tblptrh	equ	0xFF7
  6655                           tblptrl	equ	0xFF6
  6656                           tablat	equ	0xFF5
  6657                           prodh	equ	0xFF4
  6658                           prodl	equ	0xFF3
  6659                           intcon	equ	0xFF2
  6660                           postinc0	equ	0xFEE
  6661                           wreg	equ	0xFE8
  6662                           indf1	equ	0xFE7
  6663                           postinc1	equ	0xFE6
  6664                           postdec1	equ	0xFE5
  6665                           fsr1h	equ	0xFE2
  6666                           fsr1l	equ	0xFE1
  6667                           indf2	equ	0xFDF
  6668                           postinc2	equ	0xFDE
  6669                           postdec2	equ	0xFDD
  6670                           fsr2h	equ	0xFDA
  6671                           fsr2l	equ	0xFD9
  6672                           status	equ	0xFD8
  6673                           
  6674 ;; *************** function _ES_PostToService *****************
  6675 ;; Defined at:
  6676 ;;		line 351 in file "ES_Framework.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;  WhichService    1    wreg     unsigned char 
  6679 ;;  TheEvent        3   23[BANK0 ] struct ES_Event_t
  6680 ;; Auto vars:     Size  Location     Type
  6681 ;;  WhichService    1   28[BANK0 ] unsigned char 
  6682 ;; Return value:  Size  Location     Type
  6683 ;;                  1    wreg      unsigned char 
  6684 ;; Registers used:
  6685 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6686 ;; Tracked objects:
  6687 ;;		On entry : 0/0
  6688 ;;		On exit  : 0/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6691 ;;      Params:         0       3       0       0
  6692 ;;      Locals:         0       1       0       0
  6693 ;;      Temps:          0       2       0       0
  6694 ;;      Totals:         0       6       0       0
  6695 ;;Total ram usage:        6 bytes
  6696 ;; Hardware stack levels used:    1
  6697 ;; Hardware stack levels required when called:    8
  6698 ;; This function calls:
  6699 ;;		_ES_EnQueueFIFO
  6700 ;; This function is called by:
  6701 ;;		_InitPatternControlService
  6702 ;;		_PostPatternControlService
  6703 ;;		_InitSPI32ControlService
  6704 ;;		_PostSPI32ControlService
  6705 ;;		_InitToggleService
  6706 ;;		_PostToggleService
  6707 ;;		_InitCan_XmitService
  6708 ;;		_PostCan_TransmitService
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           	psect	text43
  6713  00124E                     __ptext43:
  6714                           	opt stack 0
  6715  00124E                     _ES_PostToService:
  6716                           	opt stack 18
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;incstack = 0
  6720                           ;ES_PostToService@WhichService stored from wreg
  6721  00124E  0100               	movlb	0	; () banked
  6722  001250  6FD9               	movwf	ES_PostToService@WhichService& (0+255),b
  6723                           
  6724                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  6725                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  6726                           ;ES_Framework.c: 354: 1 )){
  6727  001252  0E04               	movlw	4
  6728  001254  0100               	movlb	0	; () banked
  6729  001256  61D9               	cpfslt	ES_PostToService@WhichService& (0+255),b
  6730  001258  D033               	goto	l2390
  6731                           
  6732                           ; BSR set to: 0
  6733  00125A  0100               	movlb	0	; () banked
  6734  00125C  51D9               	movf	ES_PostToService@WhichService& (0+255),w,b
  6735  00125E  0D03               	mullw	3
  6736  001260  0E60               	movlw	low _EventQueues
  6737  001262  24F3               	addwf	prodl,w,c
  6738  001264  6EF6               	movwf	tblptrl,c
  6739  001266  0E03               	movlw	high _EventQueues
  6740  001268  20F4               	addwfc	prodh,w,c
  6741  00126A  6EF7               	movwf	tblptrh,c
  6742  00126C                     	if	0	;There are less than 3 active tblptr bytes
  6743  00126C                     	endif
  6744  00126C  0009               	tblrd		*+
  6745  00126E  CFF5 F0C9          	movff	tablat,ES_EnQueueFIFO@pBlock
  6746  001272  000A               	tblrd		*-
  6747  001274  CFF5 F0CA          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  6748  001278  C0D4  F0CB         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  6749  00127C  C0D5  F0CC         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  6750  001280  C0D6  F0CD         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  6751  001284  ECDD  F005         	call	_ES_EnQueueFIFO	;wreg free
  6752  001288  06E8               	decf	wreg,f,c
  6753  00128A  A4D8               	btfss	status,2,c
  6754  00128C  D019               	goto	l2390
  6755                           
  6756                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  6757  00128E  0100               	movlb	0	; () banked
  6758  001290  51D9               	movf	ES_PostToService@WhichService& (0+255),w,b
  6759  001292  0D02               	mullw	2
  6760  001294  0E01               	movlw	low _BitNum2SetMask
  6761  001296  24F3               	addwf	prodl,w,c
  6762  001298  6EF6               	movwf	tblptrl,c
  6763  00129A  0E03               	movlw	high _BitNum2SetMask
  6764  00129C  20F4               	addwfc	prodh,w,c
  6765  00129E  6EF7               	movwf	tblptrh,c
  6766  0012A0                     	if	0	;There are less than 3 active tblptr bytes
  6767  0012A0                     	endif
  6768  0012A0  0009               	tblrd		*+
  6769  0012A2  CFF5 F0D7          	movff	tablat,??_ES_PostToService
  6770  0012A6  0009               	tblrd		*+
  6771  0012A8  CFF5 F0D8          	movff	tablat,??_ES_PostToService+1
  6772  0012AC  0100               	movlb	0	; () banked
  6773  0012AE  51D7               	movf	??_ES_PostToService& (0+255),w,b
  6774  0012B0  0100               	movlb	0	; () banked
  6775  0012B2  1391               	iorwf	_Ready& (0+255),f,b
  6776  0012B4  0100               	movlb	0	; () banked
  6777  0012B6  51D8               	movf	(??_ES_PostToService+1)& (0+255),w,b
  6778  0012B8  0100               	movlb	0	; () banked
  6779  0012BA  1392               	iorwf	(_Ready+1)& (0+255),f,b
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;ES_Framework.c: 356: return 1;
  6783  0012BC  0E01               	movlw	1
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;ES_Framework.c: 357: } else
  6787                           
  6788                           ; BSR set to: 0
  6789  0012BE  0012               	return	
  6790  0012C0                     l2390:
  6791                           
  6792                           ;ES_Framework.c: 358: return 0;
  6793  0012C0  0E00               	movlw	0
  6794  0012C2  0012               	return	
  6795  0012C4                     __end_of_ES_PostToService:
  6796                           	opt stack 0
  6797                           tosu	equ	0xFFF
  6798                           tosh	equ	0xFFE
  6799                           tosl	equ	0xFFD
  6800                           pclath	equ	0xFFA
  6801                           tblptru	equ	0xFF8
  6802                           tblptrh	equ	0xFF7
  6803                           tblptrl	equ	0xFF6
  6804                           tablat	equ	0xFF5
  6805                           prodh	equ	0xFF4
  6806                           prodl	equ	0xFF3
  6807                           intcon	equ	0xFF2
  6808                           postinc0	equ	0xFEE
  6809                           wreg	equ	0xFE8
  6810                           indf1	equ	0xFE7
  6811                           postinc1	equ	0xFE6
  6812                           postdec1	equ	0xFE5
  6813                           fsr1h	equ	0xFE2
  6814                           fsr1l	equ	0xFE1
  6815                           indf2	equ	0xFDF
  6816                           postinc2	equ	0xFDE
  6817                           postdec2	equ	0xFDD
  6818                           fsr2h	equ	0xFDA
  6819                           fsr2l	equ	0xFD9
  6820                           status	equ	0xFD8
  6821                           
  6822 ;; *************** function _ES_EnQueueFIFO *****************
  6823 ;; Defined at:
  6824 ;;		line 85 in file "ES_Queue.c"
  6825 ;; Parameters:    Size  Location     Type
  6826 ;;  pBlock          2   12[BANK0 ] PTR struct ES_Event_t
  6827 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  6828 ;;  Event2Add       3   14[BANK0 ] struct ES_Event_t
  6829 ;; Auto vars:     Size  Location     Type
  6830 ;;  pThisQueue      2   21[BANK0 ] PTR struct .
  6831 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  6832 ;;  SaveCrit        1   20[BANK0 ] unsigned char 
  6833 ;; Return value:  Size  Location     Type
  6834 ;;                  1    wreg      unsigned char 
  6835 ;; Registers used:
  6836 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6837 ;; Tracked objects:
  6838 ;;		On entry : 0/0
  6839 ;;		On exit  : 0/0
  6840 ;;		Unchanged: 0/0
  6841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6842 ;;      Params:         0       5       0       0
  6843 ;;      Locals:         0       3       0       0
  6844 ;;      Temps:          0       3       0       0
  6845 ;;      Totals:         0      11       0       0
  6846 ;;Total ram usage:       11 bytes
  6847 ;; Hardware stack levels used:    1
  6848 ;; Hardware stack levels required when called:    7
  6849 ;; This function calls:
  6850 ;;		___awmod
  6851 ;;		___wmul
  6852 ;; This function is called by:
  6853 ;;		_ES_PostToService
  6854 ;;		_ES_PostAll
  6855 ;; This function uses a non-reentrant model
  6856 ;;
  6857                           
  6858                           	psect	text44
  6859  000BBA                     __ptext44:
  6860                           	opt stack 0
  6861  000BBA                     _ES_EnQueueFIFO:
  6862                           	opt stack 18
  6863                           
  6864                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  6865                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  6866                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  6867                           
  6868                           ;incstack = 0
  6869  000BBA  C0C9  F0D2         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  6870  000BBE  C0CA  F0D3         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  6871                           
  6872                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  6873  000BC2  C0D2  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  6874  000BC6  C0D3  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  6875  000BCA  0100               	movlb	0	; () banked
  6876  000BCC  EE10 F002          	lfsr	1,2
  6877  000BD0  51D2               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  6878  000BD2  26E1               	addwf	fsr1l,f,c
  6879  000BD4  51D3               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  6880  000BD6  22E2               	addwfc	fsr1h,f,c
  6881  000BD8  50DE               	movf	postinc2,w,c
  6882  000BDA  5CE6               	subwf	postinc1,w,c
  6883  000BDC  B0D8               	btfsc	status,0,c
  6884  000BDE  D05C               	goto	l2374
  6885                           
  6886                           ; BSR set to: 0
  6887                           
  6888                           ;ES_Queue.c: 92: {
  6889                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  6890  000BE0  CFF2 F0D1          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  6891  000BE4  9EF2               	bcf	intcon,7,c	;volatile
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  6895                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  6896                           
  6897                           ; BSR set to: 0
  6898  000BE6  C0D2  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  6899  000BEA  C0D3  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  6900  000BEE  50DF               	movf	indf2,w,c
  6901  000BF0  0100               	movlb	0	; () banked
  6902  000BF2  6FCE               	movwf	??_ES_EnQueueFIFO& (0+255),b
  6903  000BF4  0100               	movlb	0	; () banked
  6904  000BF6  51CE               	movf	??_ES_EnQueueFIFO& (0+255),w,b
  6905  000BF8  0100               	movlb	0	; () banked
  6906  000BFA  6FBF               	movwf	___awmod@divisor& (0+255),b
  6907  000BFC  6BC0               	clrf	(___awmod@divisor+1)& (0+255),b
  6908  000BFE  0100               	movlb	0	; () banked
  6909  000C00  EE20 F002          	lfsr	2,2
  6910  000C04  51D2               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  6911  000C06  26D9               	addwf	fsr2l,f,c
  6912  000C08  51D3               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  6913  000C0A  22DA               	addwfc	fsr2h,f,c
  6914  000C0C  50DF               	movf	indf2,w,c
  6915  000C0E  0100               	movlb	0	; () banked
  6916  000C10  6FCF               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),b
  6917  000C12  0100               	movlb	0	; () banked
  6918  000C14  EE20 F001          	lfsr	2,1
  6919  000C18  51D2               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  6920  000C1A  26D9               	addwf	fsr2l,f,c
  6921  000C1C  51D3               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  6922  000C1E  22DA               	addwfc	fsr2h,f,c
  6923  000C20  50DF               	movf	indf2,w,c
  6924  000C22  0100               	movlb	0	; () banked
  6925  000C24  6FD0               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),b
  6926  000C26  0100               	movlb	0	; () banked
  6927  000C28  51D0               	movf	(??_ES_EnQueueFIFO+2)& (0+255),w,b
  6928  000C2A  0100               	movlb	0	; () banked
  6929  000C2C  25CF               	addwf	(??_ES_EnQueueFIFO+1)& (0+255),w,b
  6930  000C2E  0100               	movlb	0	; () banked
  6931  000C30  6FBD               	movwf	___awmod@dividend& (0+255),b
  6932  000C32  0100               	movlb	0	; () banked
  6933  000C34  6BBE               	clrf	(___awmod@dividend+1)& (0+255),b
  6934  000C36  0100               	movlb	0	; () banked
  6935  000C38  37BE               	rlcf	(___awmod@dividend+1)& (0+255),f,b
  6936  000C3A  ECB9  F007         	call	___awmod	;wreg free
  6937  000C3E  0E01               	movlw	1
  6938  000C40  0100               	movlb	0	; () banked
  6939  000C42  25BD               	addwf	?___awmod& (0+255),w,b
  6940  000C44  0100               	movlb	0	; () banked
  6941  000C46  6FC3               	movwf	___wmul@multiplier& (0+255),b
  6942  000C48  0E00               	movlw	0
  6943  000C4A  0100               	movlb	0	; () banked
  6944  000C4C  21BE               	addwfc	(?___awmod+1)& (0+255),w,b
  6945  000C4E  0100               	movlb	0	; () banked
  6946  000C50  6FC4               	movwf	(___wmul@multiplier+1)& (0+255),b
  6947  000C52  0E00               	movlw	0
  6948  000C54  0100               	movlb	0	; () banked
  6949  000C56  6FC6               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6950  000C58  0E03               	movlw	3
  6951  000C5A  6FC5               	movwf	___wmul@multiplicand& (0+255),b
  6952  000C5C  EC93  F00B         	call	___wmul	;wreg free
  6953  000C60  0100               	movlb	0	; () banked
  6954  000C62  51C3               	movf	?___wmul& (0+255),w,b
  6955  000C64  0100               	movlb	0	; () banked
  6956  000C66  25C9               	addwf	ES_EnQueueFIFO@pBlock& (0+255),w,b
  6957  000C68  6ED9               	movwf	fsr2l,c
  6958  000C6A  0100               	movlb	0	; () banked
  6959  000C6C  51C4               	movf	(?___wmul+1)& (0+255),w,b
  6960  000C6E  0100               	movlb	0	; () banked
  6961  000C70  21CA               	addwfc	(ES_EnQueueFIFO@pBlock+1)& (0+255),w,b
  6962  000C72  6EDA               	movwf	fsr2h,c
  6963  000C74  C0CB  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  6964  000C78  C0CC  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  6965  000C7C  C0CD  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  6969  000C80  0100               	movlb	0	; () banked
  6970  000C82  EE20 F002          	lfsr	2,2
  6971  000C86  51D2               	movf	ES_EnQueueFIFO@pThisQueue& (0+255),w,b
  6972  000C88  26D9               	addwf	fsr2l,f,c
  6973  000C8A  51D3               	movf	(ES_EnQueueFIFO@pThisQueue+1)& (0+255),w,b
  6974  000C8C  22DA               	addwfc	fsr2h,f,c
  6975  000C8E  2ADF               	incf	indf2,f,c
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  6979  000C90  C0D1  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  6980                           
  6981                           ; BSR set to: 0
  6982                           ;ES_Queue.c: 101: return(1);
  6983  000C94  0E01               	movlw	1
  6984                           
  6985                           ; BSR set to: 0
  6986                           ;ES_Queue.c: 102: }else
  6987                           
  6988                           ; BSR set to: 0
  6989  000C96  0012               	return	
  6990  000C98                     l2374:
  6991                           
  6992                           ; BSR set to: 0
  6993                           ;ES_Queue.c: 103: return(0);
  6994  000C98  0E00               	movlw	0
  6995                           
  6996                           ; BSR set to: 0
  6997  000C9A  0012               	return	
  6998  000C9C                     __end_of_ES_EnQueueFIFO:
  6999                           	opt stack 0
  7000                           tosu	equ	0xFFF
  7001                           tosh	equ	0xFFE
  7002                           tosl	equ	0xFFD
  7003                           pclath	equ	0xFFA
  7004                           tblptru	equ	0xFF8
  7005                           tblptrh	equ	0xFF7
  7006                           tblptrl	equ	0xFF6
  7007                           tablat	equ	0xFF5
  7008                           prodh	equ	0xFF4
  7009                           prodl	equ	0xFF3
  7010                           intcon	equ	0xFF2
  7011                           postinc0	equ	0xFEE
  7012                           wreg	equ	0xFE8
  7013                           indf1	equ	0xFE7
  7014                           postinc1	equ	0xFE6
  7015                           postdec1	equ	0xFE5
  7016                           fsr1h	equ	0xFE2
  7017                           fsr1l	equ	0xFE1
  7018                           indf2	equ	0xFDF
  7019                           postinc2	equ	0xFDE
  7020                           postdec2	equ	0xFDD
  7021                           fsr2h	equ	0xFDA
  7022                           fsr2l	equ	0xFD9
  7023                           status	equ	0xFD8
  7024                           
  7025 ;; *************** function ___wmul *****************
  7026 ;; Defined at:
  7027 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  7028 ;; Parameters:    Size  Location     Type
  7029 ;;  multiplier      2    6[BANK0 ] unsigned int 
  7030 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  7031 ;; Auto vars:     Size  Location     Type
  7032 ;;  product         2   10[BANK0 ] unsigned int 
  7033 ;; Return value:  Size  Location     Type
  7034 ;;                  2    6[BANK0 ] unsigned int 
  7035 ;; Registers used:
  7036 ;;		wreg, status,2, status,0, prodl, prodh
  7037 ;; Tracked objects:
  7038 ;;		On entry : 0/0
  7039 ;;		On exit  : 0/0
  7040 ;;		Unchanged: 0/0
  7041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7042 ;;      Params:         0       4       0       0
  7043 ;;      Locals:         0       2       0       0
  7044 ;;      Temps:          0       0       0       0
  7045 ;;      Totals:         0       6       0       0
  7046 ;;Total ram usage:        6 bytes
  7047 ;; Hardware stack levels used:    1
  7048 ;; Hardware stack levels required when called:    6
  7049 ;; This function calls:
  7050 ;;		Nothing
  7051 ;; This function is called by:
  7052 ;;		_ES_EnQueueFIFO
  7053 ;;		_ES_DeQueue
  7054 ;;		_ES_EnQueueLIFO
  7055 ;; This function uses a non-reentrant model
  7056 ;;
  7057                           
  7058                           	psect	text45
  7059  001726                     __ptext45:
  7060                           	opt stack 0
  7061  001726                     ___wmul:
  7062                           	opt stack 18
  7063                           
  7064                           ; BSR set to: 0
  7065                           ;incstack = 0
  7066  001726  0100               	movlb	0	; () banked
  7067  001728  51C3               	movf	___wmul@multiplier& (0+255),w,b
  7068  00172A  0100               	movlb	0	; () banked
  7069  00172C  03C5               	mulwf	___wmul@multiplicand& (0+255),b
  7070  00172E  CFF3 F0C7          	movff	prodl,___wmul@product
  7071  001732  CFF4 F0C8          	movff	prodh,___wmul@product+1
  7072  001736  0100               	movlb	0	; () banked
  7073  001738  51C3               	movf	___wmul@multiplier& (0+255),w,b
  7074  00173A  0100               	movlb	0	; () banked
  7075  00173C  03C6               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7076  00173E  50F3               	movf	prodl,w,c
  7077  001740  0100               	movlb	0	; () banked
  7078  001742  27C8               	addwf	(___wmul@product+1)& (0+255),f,b
  7079  001744  0100               	movlb	0	; () banked
  7080  001746  51C4               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7081  001748  0100               	movlb	0	; () banked
  7082  00174A  03C5               	mulwf	___wmul@multiplicand& (0+255),b
  7083  00174C  50F3               	movf	prodl,w,c
  7084  00174E  0100               	movlb	0	; () banked
  7085  001750  27C8               	addwf	(___wmul@product+1)& (0+255),f,b
  7086                           
  7087                           ; BSR set to: 0
  7088  001752  C0C7  F0C3         	movff	___wmul@product,?___wmul
  7089  001756  C0C8  F0C4         	movff	___wmul@product+1,?___wmul+1
  7090  00175A  0012               	return	
  7091  00175C                     __end_of___wmul:
  7092                           	opt stack 0
  7093                           tosu	equ	0xFFF
  7094                           tosh	equ	0xFFE
  7095                           tosl	equ	0xFFD
  7096                           pclath	equ	0xFFA
  7097                           tblptru	equ	0xFF8
  7098                           tblptrh	equ	0xFF7
  7099                           tblptrl	equ	0xFF6
  7100                           tablat	equ	0xFF5
  7101                           prodh	equ	0xFF4
  7102                           prodl	equ	0xFF3
  7103                           intcon	equ	0xFF2
  7104                           postinc0	equ	0xFEE
  7105                           wreg	equ	0xFE8
  7106                           indf1	equ	0xFE7
  7107                           postinc1	equ	0xFE6
  7108                           postdec1	equ	0xFE5
  7109                           fsr1h	equ	0xFE2
  7110                           fsr1l	equ	0xFE1
  7111                           indf2	equ	0xFDF
  7112                           postinc2	equ	0xFDE
  7113                           postdec2	equ	0xFDD
  7114                           fsr2h	equ	0xFDA
  7115                           fsr2l	equ	0xFD9
  7116                           status	equ	0xFD8
  7117                           
  7118 ;; *************** function ___awmod *****************
  7119 ;; Defined at:
  7120 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;  dividend        2    0[BANK0 ] int 
  7123 ;;  divisor         2    2[BANK0 ] int 
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;  sign            1    5[BANK0 ] unsigned char 
  7126 ;;  counter         1    4[BANK0 ] unsigned char 
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  2    0[BANK0 ] int 
  7129 ;; Registers used:
  7130 ;;		wreg, status,2, status,0
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7136 ;;      Params:         0       4       0       0
  7137 ;;      Locals:         0       2       0       0
  7138 ;;      Temps:          0       0       0       0
  7139 ;;      Totals:         0       6       0       0
  7140 ;;Total ram usage:        6 bytes
  7141 ;; Hardware stack levels used:    1
  7142 ;; Hardware stack levels required when called:    6
  7143 ;; This function calls:
  7144 ;;		Nothing
  7145 ;; This function is called by:
  7146 ;;		_ES_EnQueueFIFO
  7147 ;;		_UpdatePattern
  7148 ;;		i2_ES_EnQueueFIFO
  7149 ;; This function uses a non-reentrant model
  7150 ;;
  7151                           
  7152                           	psect	text46
  7153  000F72                     __ptext46:
  7154                           	opt stack 0
  7155  000F72                     ___awmod:
  7156                           	opt stack 18
  7157                           
  7158                           ; BSR set to: 0
  7159                           ;incstack = 0
  7160  000F72  0E00               	movlw	0
  7161  000F74  0100               	movlb	0	; () banked
  7162  000F76  6FC2               	movwf	___awmod@sign& (0+255),b
  7163                           
  7164                           ; BSR set to: 0
  7165  000F78  0100               	movlb	0	; () banked
  7166  000F7A  AFBE               	btfss	(___awmod@dividend+1)& (0+255),7,b
  7167  000F7C  D008               	goto	l2330
  7168                           
  7169                           ; BSR set to: 0
  7170  000F7E  0100               	movlb	0	; () banked
  7171  000F80  6DBD               	negf	___awmod@dividend& (0+255),b
  7172  000F82  1FBE               	comf	(___awmod@dividend+1)& (0+255),f,b
  7173  000F84  B0D8               	btfsc	status,0,c
  7174  000F86  2BBE               	incf	(___awmod@dividend+1)& (0+255),f,b
  7175                           
  7176                           ; BSR set to: 0
  7177  000F88  0E01               	movlw	1
  7178  000F8A  0100               	movlb	0	; () banked
  7179  000F8C  6FC2               	movwf	___awmod@sign& (0+255),b
  7180  000F8E                     l2330:
  7181                           
  7182                           ; BSR set to: 0
  7183  000F8E  0100               	movlb	0	; () banked
  7184  000F90  AFC0               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7185  000F92  D005               	goto	l2334
  7186                           
  7187                           ; BSR set to: 0
  7188  000F94  0100               	movlb	0	; () banked
  7189  000F96  6DBF               	negf	___awmod@divisor& (0+255),b
  7190  000F98  1FC0               	comf	(___awmod@divisor+1)& (0+255),f,b
  7191  000F9A  B0D8               	btfsc	status,0,c
  7192  000F9C  2BC0               	incf	(___awmod@divisor+1)& (0+255),f,b
  7193  000F9E                     l2334:
  7194                           
  7195                           ; BSR set to: 0
  7196  000F9E  0100               	movlb	0	; () banked
  7197  000FA0  51BF               	movf	___awmod@divisor& (0+255),w,b
  7198  000FA2  0100               	movlb	0	; () banked
  7199  000FA4  11C0               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  7200  000FA6  B4D8               	btfsc	status,2,c
  7201  000FA8  D026               	goto	l2350
  7202                           
  7203                           ; BSR set to: 0
  7204  000FAA  0E01               	movlw	1
  7205  000FAC  0100               	movlb	0	; () banked
  7206  000FAE  6FC1               	movwf	___awmod@counter& (0+255),b
  7207  000FB0  D006               	goto	l2340
  7208  000FB2                     l2338:
  7209                           
  7210                           ; BSR set to: 0
  7211  000FB2  0100               	movlb	0	; () banked
  7212  000FB4  90D8               	bcf	status,0,c
  7213  000FB6  37BF               	rlcf	___awmod@divisor& (0+255),f,b
  7214  000FB8  37C0               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  7215  000FBA  0100               	movlb	0	; () banked
  7216  000FBC  2BC1               	incf	___awmod@counter& (0+255),f,b
  7217  000FBE                     l2340:
  7218                           
  7219                           ; BSR set to: 0
  7220  000FBE  0100               	movlb	0	; () banked
  7221  000FC0  AFC0               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7222  000FC2  D7F7               	goto	l2338
  7223  000FC4                     l2342:
  7224                           
  7225                           ; BSR set to: 0
  7226  000FC4  0100               	movlb	0	; () banked
  7227  000FC6  51BF               	movf	___awmod@divisor& (0+255),w,b
  7228  000FC8  0100               	movlb	0	; () banked
  7229  000FCA  5DBD               	subwf	___awmod@dividend& (0+255),w,b
  7230  000FCC  0100               	movlb	0	; () banked
  7231  000FCE  51C0               	movf	(___awmod@divisor+1)& (0+255),w,b
  7232  000FD0  0100               	movlb	0	; () banked
  7233  000FD2  59BE               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  7234  000FD4  A0D8               	btfss	status,0,c
  7235  000FD6  D008               	goto	l2346
  7236                           
  7237                           ; BSR set to: 0
  7238  000FD8  0100               	movlb	0	; () banked
  7239  000FDA  51BF               	movf	___awmod@divisor& (0+255),w,b
  7240  000FDC  0100               	movlb	0	; () banked
  7241  000FDE  5FBD               	subwf	___awmod@dividend& (0+255),f,b
  7242  000FE0  0100               	movlb	0	; () banked
  7243  000FE2  51C0               	movf	(___awmod@divisor+1)& (0+255),w,b
  7244  000FE4  0100               	movlb	0	; () banked
  7245  000FE6  5BBE               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  7246  000FE8                     l2346:
  7247                           
  7248                           ; BSR set to: 0
  7249  000FE8  0100               	movlb	0	; () banked
  7250  000FEA  90D8               	bcf	status,0,c
  7251  000FEC  33C0               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  7252  000FEE  33BF               	rrcf	___awmod@divisor& (0+255),f,b
  7253                           
  7254                           ; BSR set to: 0
  7255  000FF0  0100               	movlb	0	; () banked
  7256  000FF2  2FC1               	decfsz	___awmod@counter& (0+255),f,b
  7257  000FF4  D7E7               	goto	l2342
  7258  000FF6                     l2350:
  7259                           
  7260                           ; BSR set to: 0
  7261  000FF6  0100               	movlb	0	; () banked
  7262  000FF8  51C2               	movf	___awmod@sign& (0+255),w,b
  7263  000FFA  0100               	movlb	0	; () banked
  7264  000FFC  B4D8               	btfsc	status,2,c
  7265  000FFE  D005               	goto	l2354
  7266                           
  7267                           ; BSR set to: 0
  7268  001000  0100               	movlb	0	; () banked
  7269  001002  6DBD               	negf	___awmod@dividend& (0+255),b
  7270  001004  1FBE               	comf	(___awmod@dividend+1)& (0+255),f,b
  7271  001006  B0D8               	btfsc	status,0,c
  7272  001008  2BBE               	incf	(___awmod@dividend+1)& (0+255),f,b
  7273  00100A                     l2354:
  7274                           
  7275                           ; BSR set to: 0
  7276  00100A  C0BD  F0BD         	movff	___awmod@dividend,?___awmod
  7277  00100E  C0BE  F0BE         	movff	___awmod@dividend+1,?___awmod+1
  7278  001012  0012               	return	
  7279  001014                     __end_of___awmod:
  7280                           	opt stack 0
  7281                           tosu	equ	0xFFF
  7282                           tosh	equ	0xFFE
  7283                           tosl	equ	0xFFD
  7284                           pclath	equ	0xFFA
  7285                           tblptru	equ	0xFF8
  7286                           tblptrh	equ	0xFF7
  7287                           tblptrl	equ	0xFF6
  7288                           tablat	equ	0xFF5
  7289                           prodh	equ	0xFF4
  7290                           prodl	equ	0xFF3
  7291                           intcon	equ	0xFF2
  7292                           postinc0	equ	0xFEE
  7293                           wreg	equ	0xFE8
  7294                           indf1	equ	0xFE7
  7295                           postinc1	equ	0xFE6
  7296                           postdec1	equ	0xFE5
  7297                           fsr1h	equ	0xFE2
  7298                           fsr1l	equ	0xFE1
  7299                           indf2	equ	0xFDF
  7300                           postinc2	equ	0xFDE
  7301                           postdec2	equ	0xFDD
  7302                           fsr2h	equ	0xFDA
  7303                           fsr2l	equ	0xFD9
  7304                           status	equ	0xFD8
  7305                           
  7306 ;; *************** function _ES_Timer_Init *****************
  7307 ;; Defined at:
  7308 ;;		line 130 in file "ES_Timers.c"
  7309 ;; Parameters:    Size  Location     Type
  7310 ;;  Rate            2    2[BANK0 ] enum E15424
  7311 ;; Auto vars:     Size  Location     Type
  7312 ;;		None
  7313 ;; Return value:  Size  Location     Type
  7314 ;;                  1    wreg      void 
  7315 ;; Registers used:
  7316 ;;		wreg, status,2, cstack
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7322 ;;      Params:         0       2       0       0
  7323 ;;      Locals:         0       0       0       0
  7324 ;;      Temps:          0       0       0       0
  7325 ;;      Totals:         0       2       0       0
  7326 ;;Total ram usage:        2 bytes
  7327 ;; Hardware stack levels used:    1
  7328 ;; Hardware stack levels required when called:    7
  7329 ;; This function calls:
  7330 ;;		__HW_Timer_Init
  7331 ;; This function is called by:
  7332 ;;		_ES_Initialize
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           	psect	text47
  7337  0019F8                     __ptext47:
  7338                           	opt stack 0
  7339  0019F8                     _ES_Timer_Init:
  7340                           	opt stack 22
  7341                           
  7342                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  7343                           
  7344                           ; BSR set to: 0
  7345                           ;incstack = 0
  7346  0019F8  C0BF  F0BD         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  7347  0019FC  C0C0  F0BE         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  7348  001A00  EC98  F00C         	call	__HW_Timer_Init	;wreg free
  7349  001A04  0012               	return		;funcret
  7350  001A06                     __end_of_ES_Timer_Init:
  7351                           	opt stack 0
  7352                           tosu	equ	0xFFF
  7353                           tosh	equ	0xFFE
  7354                           tosl	equ	0xFFD
  7355                           pclath	equ	0xFFA
  7356                           tblptru	equ	0xFF8
  7357                           tblptrh	equ	0xFF7
  7358                           tblptrl	equ	0xFF6
  7359                           tablat	equ	0xFF5
  7360                           prodh	equ	0xFF4
  7361                           prodl	equ	0xFF3
  7362                           intcon	equ	0xFF2
  7363                           postinc0	equ	0xFEE
  7364                           wreg	equ	0xFE8
  7365                           indf1	equ	0xFE7
  7366                           postinc1	equ	0xFE6
  7367                           postdec1	equ	0xFE5
  7368                           fsr1h	equ	0xFE2
  7369                           fsr1l	equ	0xFE1
  7370                           indf2	equ	0xFDF
  7371                           postinc2	equ	0xFDE
  7372                           postdec2	equ	0xFDD
  7373                           fsr2h	equ	0xFDA
  7374                           fsr2l	equ	0xFD9
  7375                           status	equ	0xFD8
  7376                           
  7377 ;; *************** function __HW_Timer_Init *****************
  7378 ;; Defined at:
  7379 ;;		line 72 in file "ES_Port.c"
  7380 ;; Parameters:    Size  Location     Type
  7381 ;;  Rate            2    0[BANK0 ] enum E15412
  7382 ;; Auto vars:     Size  Location     Type
  7383 ;;		None
  7384 ;; Return value:  Size  Location     Type
  7385 ;;                  1    wreg      void 
  7386 ;; Registers used:
  7387 ;;		wreg, status,2
  7388 ;; Tracked objects:
  7389 ;;		On entry : 0/0
  7390 ;;		On exit  : 0/0
  7391 ;;		Unchanged: 0/0
  7392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7393 ;;      Params:         0       2       0       0
  7394 ;;      Locals:         0       0       0       0
  7395 ;;      Temps:          0       0       0       0
  7396 ;;      Totals:         0       2       0       0
  7397 ;;Total ram usage:        2 bytes
  7398 ;; Hardware stack levels used:    1
  7399 ;; Hardware stack levels required when called:    6
  7400 ;; This function calls:
  7401 ;;		Nothing
  7402 ;; This function is called by:
  7403 ;;		_ES_Timer_Init
  7404 ;; This function uses a non-reentrant model
  7405 ;;
  7406                           
  7407                           	psect	text48
  7408  001930                     __ptext48:
  7409                           	opt stack 0
  7410  001930                     __HW_Timer_Init:
  7411                           	opt stack 22
  7412                           
  7413                           ;ES_Port.c: 80: PIE1 = 0b00000100;
  7414                           
  7415                           ;incstack = 0
  7416  001930  0E04               	movlw	4
  7417  001932  6E9D               	movwf	3997,c	;volatile
  7418                           
  7419                           ;ES_Port.c: 85: INTCON = 0b01000000;
  7420  001934  0E40               	movlw	64
  7421  001936  6EF2               	movwf	intcon,c	;volatile
  7422                           
  7423                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
  7424  001938  0E0A               	movlw	10
  7425  00193A  6EBD               	movwf	4029,c	;volatile
  7426                           
  7427                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
  7428  00193C  0E01               	movlw	1
  7429  00193E  6EBE               	movwf	4030,c	;volatile
  7430                           
  7431                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
  7432  001940  0E00               	movlw	0
  7433  001942  6EBF               	movwf	4031,c	;volatile
  7434                           
  7435                           ;ES_Port.c: 107: T1CON = 0b00100001;
  7436  001944  0E21               	movlw	33
  7437  001946  6ECD               	movwf	4045,c	;volatile
  7438                           
  7439                           ;ES_Port.c: 109: {GIE = 1;};
  7440  001948  8EF2               	bsf	intcon,7,c	;volatile
  7441  00194A  0012               	return		;funcret
  7442  00194C                     __end_of__HW_Timer_Init:
  7443                           	opt stack 0
  7444                           tosu	equ	0xFFF
  7445                           tosh	equ	0xFFE
  7446                           tosl	equ	0xFFD
  7447                           pclath	equ	0xFFA
  7448                           tblptru	equ	0xFF8
  7449                           tblptrh	equ	0xFF7
  7450                           tblptrl	equ	0xFF6
  7451                           tablat	equ	0xFF5
  7452                           prodh	equ	0xFF4
  7453                           prodl	equ	0xFF3
  7454                           intcon	equ	0xFF2
  7455                           postinc0	equ	0xFEE
  7456                           wreg	equ	0xFE8
  7457                           indf1	equ	0xFE7
  7458                           postinc1	equ	0xFE6
  7459                           postdec1	equ	0xFE5
  7460                           fsr1h	equ	0xFE2
  7461                           fsr1l	equ	0xFE1
  7462                           indf2	equ	0xFDF
  7463                           postinc2	equ	0xFDE
  7464                           postdec2	equ	0xFDD
  7465                           fsr2h	equ	0xFDA
  7466                           fsr2l	equ	0xFD9
  7467                           status	equ	0xFD8
  7468                           
  7469 ;; *************** function _ES_InitQueue *****************
  7470 ;; Defined at:
  7471 ;;		line 58 in file "ES_Queue.c"
  7472 ;; Parameters:    Size  Location     Type
  7473 ;;  pBlock          2    0[BANK0 ] PTR struct ES_Event_t
  7474 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  7475 ;;  BlockSize       1    2[BANK0 ] unsigned char 
  7476 ;; Auto vars:     Size  Location     Type
  7477 ;;  pThisQueue      2    3[BANK0 ] PTR struct .
  7478 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  7479 ;; Return value:  Size  Location     Type
  7480 ;;                  1    wreg      unsigned char 
  7481 ;; Registers used:
  7482 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7483 ;; Tracked objects:
  7484 ;;		On entry : 0/0
  7485 ;;		On exit  : 0/0
  7486 ;;		Unchanged: 0/0
  7487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7488 ;;      Params:         0       3       0       0
  7489 ;;      Locals:         0       2       0       0
  7490 ;;      Temps:          0       0       0       0
  7491 ;;      Totals:         0       5       0       0
  7492 ;;Total ram usage:        5 bytes
  7493 ;; Hardware stack levels used:    1
  7494 ;; Hardware stack levels required when called:    6
  7495 ;; This function calls:
  7496 ;;		Nothing
  7497 ;; This function is called by:
  7498 ;;		_ES_Initialize
  7499 ;; This function uses a non-reentrant model
  7500 ;;
  7501                           
  7502                           	psect	text49
  7503  0016B0                     __ptext49:
  7504                           	opt stack 0
  7505  0016B0                     _ES_InitQueue:
  7506                           	opt stack 23
  7507                           
  7508                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  7509                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  7510                           
  7511                           ;incstack = 0
  7512  0016B0  C0BD  F0C0         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  7513  0016B4  C0BE  F0C1         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  7514                           
  7515                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  7516  0016B8  0100               	movlb	0	; () banked
  7517  0016BA  05BF               	decf	ES_InitQueue@BlockSize& (0+255),w,b
  7518  0016BC  C0C0  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  7519  0016C0  C0C1  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  7520  0016C4  6EDF               	movwf	indf2,c
  7521                           
  7522                           ; BSR set to: 0
  7523                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  7524  0016C6  0100               	movlb	0	; () banked
  7525  0016C8  EE20 F001          	lfsr	2,1
  7526  0016CC  51C0               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  7527  0016CE  26D9               	addwf	fsr2l,f,c
  7528  0016D0  51C1               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  7529  0016D2  22DA               	addwfc	fsr2h,f,c
  7530  0016D4  0E00               	movlw	0
  7531  0016D6  6EDF               	movwf	indf2,c
  7532                           
  7533                           ; BSR set to: 0
  7534                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  7535  0016D8  0100               	movlb	0	; () banked
  7536  0016DA  EE20 F002          	lfsr	2,2
  7537  0016DE  51C0               	movf	ES_InitQueue@pThisQueue& (0+255),w,b
  7538  0016E0  26D9               	addwf	fsr2l,f,c
  7539  0016E2  51C1               	movf	(ES_InitQueue@pThisQueue+1)& (0+255),w,b
  7540  0016E4  22DA               	addwfc	fsr2h,f,c
  7541  0016E6  0E00               	movlw	0
  7542  0016E8  6EDF               	movwf	indf2,c
  7543  0016EA  0012               	return	
  7544  0016EC                     __end_of_ES_InitQueue:
  7545                           	opt stack 0
  7546                           tosu	equ	0xFFF
  7547                           tosh	equ	0xFFE
  7548                           tosl	equ	0xFFD
  7549                           pclath	equ	0xFFA
  7550                           tblptru	equ	0xFF8
  7551                           tblptrh	equ	0xFF7
  7552                           tblptrl	equ	0xFF6
  7553                           tablat	equ	0xFF5
  7554                           prodh	equ	0xFF4
  7555                           prodl	equ	0xFF3
  7556                           intcon	equ	0xFF2
  7557                           postinc0	equ	0xFEE
  7558                           wreg	equ	0xFE8
  7559                           indf1	equ	0xFE7
  7560                           postinc1	equ	0xFE6
  7561                           postdec1	equ	0xFE5
  7562                           fsr1h	equ	0xFE2
  7563                           fsr1l	equ	0xFE1
  7564                           indf2	equ	0xFDF
  7565                           postinc2	equ	0xFDE
  7566                           postdec2	equ	0xFDD
  7567                           fsr2h	equ	0xFDA
  7568                           fsr2l	equ	0xFD9
  7569                           status	equ	0xFD8
  7570                           
  7571 ;; *************** function _ISR *****************
  7572 ;; Defined at:
  7573 ;;		line 112 in file "ES_Port.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;		None
  7576 ;; Auto vars:     Size  Location     Type
  7577 ;;		None
  7578 ;; Return value:  Size  Location     Type
  7579 ;;                  1    wreg      void 
  7580 ;; Registers used:
  7581 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7582 ;; Tracked objects:
  7583 ;;		On entry : 0/0
  7584 ;;		On exit  : 0/0
  7585 ;;		Unchanged: 0/0
  7586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7587 ;;      Params:         0       0       0       0
  7588 ;;      Locals:         0       0       0       0
  7589 ;;      Temps:         16       0       0       0
  7590 ;;      Totals:        16       0       0       0
  7591 ;;Total ram usage:       16 bytes
  7592 ;; Hardware stack levels used:    1
  7593 ;; Hardware stack levels required when called:    5
  7594 ;; This function calls:
  7595 ;;		_CanRCVResponse
  7596 ;;		_CanXmitResponse
  7597 ;;		_SPI32_EOTResponse
  7598 ;; This function is called by:
  7599 ;;		Interrupt level 2
  7600 ;; This function uses a non-reentrant model
  7601 ;;
  7602                           
  7603                           	psect	intcode
  7604  000008                     __pintcode:
  7605                           	opt stack 0
  7606  000008                     _ISR:
  7607                           	opt stack 16
  7608                           
  7609                           ; BSR set to: 0
  7610                           ;incstack = 0
  7611  000008  8256               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7612  00000A  CFFA F026          	movff	pclath,??_ISR+2
  7613  00000E  CFFB F027          	movff	pclatu,??_ISR+3
  7614  000012  EDB0  F006         	call	int_func,f	;refresh shadow registers
  7615                           tosu	equ	0xFFF
  7616                           tosh	equ	0xFFE
  7617                           tosl	equ	0xFFD
  7618                           pclatu	equ	0xFFB
  7619                           pclath	equ	0xFFA
  7620                           tblptru	equ	0xFF8
  7621                           tblptrh	equ	0xFF7
  7622                           tblptrl	equ	0xFF6
  7623                           tablat	equ	0xFF5
  7624                           prodh	equ	0xFF4
  7625                           prodl	equ	0xFF3
  7626                           intcon	equ	0xFF2
  7627                           postinc0	equ	0xFEE
  7628                           wreg	equ	0xFE8
  7629                           indf1	equ	0xFE7
  7630                           postinc1	equ	0xFE6
  7631                           postdec1	equ	0xFE5
  7632                           fsr1h	equ	0xFE2
  7633                           fsr1l	equ	0xFE1
  7634                           indf2	equ	0xFDF
  7635                           postinc2	equ	0xFDE
  7636                           postdec2	equ	0xFDD
  7637                           fsr2h	equ	0xFDA
  7638                           fsr2l	equ	0xFD9
  7639                           status	equ	0xFD8
  7640                           
  7641                           	psect	intcode_body
  7642  000D60                     __pintcode_body:
  7643                           	opt stack 16
  7644  000D60                     int_func:
  7645                           	opt stack 16
  7646  000D60  0006               	pop		; remove dummy address from shadow register refresh
  7647  000D62  CFE9 F028          	movff	fsr0l,??_ISR+4
  7648  000D66  CFEA F029          	movff	fsr0h,??_ISR+5
  7649  000D6A  CFE1 F02A          	movff	fsr1l,??_ISR+6
  7650  000D6E  CFE2 F02B          	movff	fsr1h,??_ISR+7
  7651  000D72  CFD9 F02C          	movff	fsr2l,??_ISR+8
  7652  000D76  CFDA F02D          	movff	fsr2h,??_ISR+9
  7653  000D7A  CFF3 F02E          	movff	prodl,??_ISR+10
  7654  000D7E  CFF4 F02F          	movff	prodh,??_ISR+11
  7655  000D82  CFF6 F030          	movff	tblptrl,??_ISR+12
  7656  000D86  CFF7 F031          	movff	tblptrh,??_ISR+13
  7657  000D8A  CFF8 F032          	movff	tblptru,??_ISR+14
  7658  000D8E  CFF5 F033          	movff	tablat,??_ISR+15
  7659                           
  7660                           ;ES_Port.c: 115: static unsigned int LastTime;
  7661                           ;ES_Port.c: 116: static unsigned int NextTime;
  7662                           ;ES_Port.c: 118: if (CCP1IF == 1)
  7663  000D92  A49E               	btfss	3998,2,c	;volatile
  7664  000D94  D015               	goto	i2l3196
  7665                           
  7666                           ;ES_Port.c: 119: {
  7667                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  7668  000D96  50BF               	movf	4031,w,c	;volatile
  7669  000D98  6E24               	movwf	??_ISR& (0+255),c
  7670  000D9A  50BE               	movf	4030,w,c	;volatile
  7671  000D9C  6E34               	movwf	ISR@LastTime,c
  7672  000D9E  C024  F035         	movff	??_ISR,ISR@LastTime+1
  7673                           
  7674                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
  7675  000DA2  0E20               	movlw	32
  7676  000DA4  2434               	addwf	ISR@LastTime,w,c
  7677  000DA6  6E36               	movwf	ISR@NextTime,c
  7678  000DA8  0E4E               	movlw	78
  7679  000DAA  2035               	addwfc	ISR@LastTime+1,w,c
  7680  000DAC  6E37               	movwf	ISR@NextTime+1,c
  7681                           
  7682                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
  7683  000DAE  5037               	movf	ISR@NextTime+1,w,c
  7684  000DB0  6EBF               	movwf	4031,c	;volatile
  7685                           
  7686                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
  7687  000DB2  C036  FFBE         	movff	ISR@NextTime,4030	;volatile
  7688                           
  7689                           ;ES_Port.c: 124: CCP1IF = 0;
  7690  000DB6  949E               	bcf	3998,2,c	;volatile
  7691                           
  7692                           ;ES_Port.c: 125: TickCount++;
  7693  000DB8  0100               	movlb	0	; () banked
  7694  000DBA  2BA1               	incf	_TickCount& (0+255),f,b	;volatile
  7695                           
  7696                           ; BSR set to: 0
  7697                           ;ES_Port.c: 126: SysTickCounter++;
  7698  000DBC  4A38               	infsnz	_SysTickCounter,f,c	;volatile
  7699  000DBE  2A39               	incf	_SysTickCounter+1,f,c	;volatile
  7700  000DC0                     i2l3196:
  7701                           
  7702                           ;ES_Port.c: 127: }
  7703                           ;ES_Port.c: 128: if (SSPIF == 1)
  7704  000DC0  A69E               	btfss	3998,3,c	;volatile
  7705  000DC2  D003               	goto	i2l3202
  7706                           
  7707                           ;ES_Port.c: 129: {
  7708                           ;ES_Port.c: 130: SSPIF = 0;
  7709  000DC4  969E               	bcf	3998,3,c	;volatile
  7710                           
  7711                           ;ES_Port.c: 131: SPI32_EOTResponse();
  7712  000DC6  ECD4  F00C         	call	_SPI32_EOTResponse	;wreg free
  7713  000DCA                     i2l3202:
  7714                           
  7715                           ;ES_Port.c: 132: }
  7716                           ;ES_Port.c: 133: if (TXB0IF == 1)
  7717  000DCA  A4A4               	btfss	4004,2,c	;volatile
  7718  000DCC  D003               	goto	i2l3208
  7719                           
  7720                           ;ES_Port.c: 134: {
  7721                           ;ES_Port.c: 135: TXB0IF = 0;
  7722  000DCE  94A4               	bcf	4004,2,c	;volatile
  7723                           
  7724                           ;ES_Port.c: 136: CanXmitResponse();
  7725  000DD0  ECEA  F00C         	call	_CanXmitResponse	;wreg free
  7726  000DD4                     i2l3208:
  7727                           
  7728                           ;ES_Port.c: 137: }
  7729                           ;ES_Port.c: 138: if (RXB0IF == 1) {
  7730  000DD4  A0A4               	btfss	4004,0,c	;volatile
  7731  000DD6  D003               	goto	i2l171
  7732                           
  7733                           ;ES_Port.c: 139: RXB0IF = 0;
  7734  000DD8  90A4               	bcf	4004,0,c	;volatile
  7735                           
  7736                           ;ES_Port.c: 140: CanRCVResponse();
  7737  000DDA  EC10  F00D         	call	_CanRCVResponse	;wreg free
  7738  000DDE                     i2l171:
  7739  000DDE  C033  FFF5         	movff	??_ISR+15,tablat
  7740  000DE2  C032  FFF8         	movff	??_ISR+14,tblptru
  7741  000DE6  C031  FFF7         	movff	??_ISR+13,tblptrh
  7742  000DEA  C030  FFF6         	movff	??_ISR+12,tblptrl
  7743  000DEE  C02F  FFF4         	movff	??_ISR+11,prodh
  7744  000DF2  C02E  FFF3         	movff	??_ISR+10,prodl
  7745  000DF6  C02D  FFDA         	movff	??_ISR+9,fsr2h
  7746  000DFA  C02C  FFD9         	movff	??_ISR+8,fsr2l
  7747  000DFE  C02B  FFE2         	movff	??_ISR+7,fsr1h
  7748  000E02  C02A  FFE1         	movff	??_ISR+6,fsr1l
  7749  000E06  C029  FFEA         	movff	??_ISR+5,fsr0h
  7750  000E0A  C028  FFE9         	movff	??_ISR+4,fsr0l
  7751  000E0E  C027  FFFB         	movff	??_ISR+3,pclatu
  7752  000E12  C026  FFFA         	movff	??_ISR+2,pclath
  7753  000E16  9256               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7754  000E18  0011               	retfie		f
  7755  000E1A                     __end_of_ISR:
  7756                           	opt stack 0
  7757                           tosu	equ	0xFFF
  7758                           tosh	equ	0xFFE
  7759                           tosl	equ	0xFFD
  7760                           pclatu	equ	0xFFB
  7761                           pclath	equ	0xFFA
  7762                           tblptru	equ	0xFF8
  7763                           tblptrh	equ	0xFF7
  7764                           tblptrl	equ	0xFF6
  7765                           tablat	equ	0xFF5
  7766                           prodh	equ	0xFF4
  7767                           prodl	equ	0xFF3
  7768                           intcon	equ	0xFF2
  7769                           postinc0	equ	0xFEE
  7770                           fsr0h	equ	0xFEA
  7771                           fsr0l	equ	0xFE9
  7772                           wreg	equ	0xFE8
  7773                           indf1	equ	0xFE7
  7774                           postinc1	equ	0xFE6
  7775                           postdec1	equ	0xFE5
  7776                           fsr1h	equ	0xFE2
  7777                           fsr1l	equ	0xFE1
  7778                           indf2	equ	0xFDF
  7779                           postinc2	equ	0xFDE
  7780                           postdec2	equ	0xFDD
  7781                           fsr2h	equ	0xFDA
  7782                           fsr2l	equ	0xFD9
  7783                           status	equ	0xFD8
  7784                           
  7785 ;; *************** function _SPI32_EOTResponse *****************
  7786 ;; Defined at:
  7787 ;;		line 156 in file "SPI32_HW.c"
  7788 ;; Parameters:    Size  Location     Type
  7789 ;;		None
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;  EOTevent        3   32[COMRAM] struct ES_Event_t
  7792 ;; Return value:  Size  Location     Type
  7793 ;;                  1    wreg      void 
  7794 ;; Registers used:
  7795 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7801 ;;      Params:         0       0       0       0
  7802 ;;      Locals:         3       0       0       0
  7803 ;;      Temps:          0       0       0       0
  7804 ;;      Totals:         3       0       0       0
  7805 ;;Total ram usage:        3 bytes
  7806 ;; Hardware stack levels used:    1
  7807 ;; Hardware stack levels required when called:    4
  7808 ;; This function calls:
  7809 ;;		i2_PostSPI32ControlService
  7810 ;; This function is called by:
  7811 ;;		_ISR
  7812 ;; This function uses a non-reentrant model
  7813 ;;
  7814                           
  7815                           	psect	text51
  7816  0019A8                     __ptext51:
  7817                           	opt stack 0
  7818  0019A8                     _SPI32_EOTResponse:
  7819                           	opt stack 16
  7820                           
  7821                           ;SPI32_HW.c: 159: ES_Event EOTevent;
  7822                           ;SPI32_HW.c: 160: EOTevent.EventType = ES_TIMEOUT;
  7823                           
  7824                           ;incstack = 0
  7825  0019A8  0E03               	movlw	3
  7826  0019AA  6E21               	movwf	SPI32_EOTResponse@EOTevent,c
  7827                           
  7828                           ;SPI32_HW.c: 161: PostSPI32ControlService(EOTevent);
  7829  0019AC  C021  F01E         	movff	SPI32_EOTResponse@EOTevent,i2PostSPI32ControlService@ThisEvent
  7830  0019B0  C022  F01F         	movff	SPI32_EOTResponse@EOTevent+1,i2PostSPI32ControlService@ThisEvent+1
  7831  0019B4  C023  F020         	movff	SPI32_EOTResponse@EOTevent+2,i2PostSPI32ControlService@ThisEvent+2
  7832  0019B8  ECDF  F00C         	call	i2_PostSPI32ControlService	;wreg free
  7833  0019BC  0012               	return		;funcret
  7834  0019BE                     __end_of_SPI32_EOTResponse:
  7835                           	opt stack 0
  7836                           tosu	equ	0xFFF
  7837                           tosh	equ	0xFFE
  7838                           tosl	equ	0xFFD
  7839                           pclatu	equ	0xFFB
  7840                           pclath	equ	0xFFA
  7841                           tblptru	equ	0xFF8
  7842                           tblptrh	equ	0xFF7
  7843                           tblptrl	equ	0xFF6
  7844                           tablat	equ	0xFF5
  7845                           prodh	equ	0xFF4
  7846                           prodl	equ	0xFF3
  7847                           intcon	equ	0xFF2
  7848                           postinc0	equ	0xFEE
  7849                           fsr0h	equ	0xFEA
  7850                           fsr0l	equ	0xFE9
  7851                           wreg	equ	0xFE8
  7852                           indf1	equ	0xFE7
  7853                           postinc1	equ	0xFE6
  7854                           postdec1	equ	0xFE5
  7855                           fsr1h	equ	0xFE2
  7856                           fsr1l	equ	0xFE1
  7857                           indf2	equ	0xFDF
  7858                           postinc2	equ	0xFDE
  7859                           postdec2	equ	0xFDD
  7860                           fsr2h	equ	0xFDA
  7861                           fsr2l	equ	0xFD9
  7862                           status	equ	0xFD8
  7863                           
  7864 ;; *************** function i2_PostSPI32ControlService *****************
  7865 ;; Defined at:
  7866 ;;		line 117 in file "SPI32_ControlService.c"
  7867 ;; Parameters:    Size  Location     Type
  7868 ;;  ThisEvent       3   29[COMRAM] struct ES_Event_t
  7869 ;; Auto vars:     Size  Location     Type
  7870 ;;		None
  7871 ;; Return value:  Size  Location     Type
  7872 ;;                  1    wreg      unsigned char 
  7873 ;; Registers used:
  7874 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7875 ;; Tracked objects:
  7876 ;;		On entry : 0/0
  7877 ;;		On exit  : 0/0
  7878 ;;		Unchanged: 0/0
  7879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7880 ;;      Params:         3       0       0       0
  7881 ;;      Locals:         0       0       0       0
  7882 ;;      Temps:          0       0       0       0
  7883 ;;      Totals:         3       0       0       0
  7884 ;;Total ram usage:        3 bytes
  7885 ;; Hardware stack levels used:    1
  7886 ;; Hardware stack levels required when called:    3
  7887 ;; This function calls:
  7888 ;;		i2_ES_PostToService
  7889 ;; This function is called by:
  7890 ;;		_SPI32_EOTResponse
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           	psect	text52
  7895  0019BE                     __ptext52:
  7896                           	opt stack 0
  7897  0019BE                     i2_PostSPI32ControlService:
  7898                           	opt stack 16
  7899                           
  7900                           ;SPI32_ControlService.c: 118: return ES_PostToService( MyPriority, ThisEvent);
  7901                           ;	Return value of i2_PostSPI32ControlService is never used
  7902                           
  7903                           ;incstack = 0
  7904  0019BE  C01E  F018         	movff	i2PostSPI32ControlService@ThisEvent,i2ES_PostToService@TheEvent
  7905  0019C2  C01F  F019         	movff	i2PostSPI32ControlService@ThisEvent+1,i2ES_PostToService@TheEvent+1
  7906  0019C6  C020  F01A         	movff	i2PostSPI32ControlService@ThisEvent+2,i2ES_PostToService@TheEvent+2
  7907  0019CA  0100               	movlb	0	; () banked
  7908  0019CC  5199               	movf	SPI32_ControlService@MyPriority& (0+255),w,b
  7909  0019CE  ECD1  F009         	call	i2_ES_PostToService
  7910  0019D2  0012               	return	
  7911  0019D4                     __end_ofi2_PostSPI32ControlService:
  7912                           	opt stack 0
  7913                           tosu	equ	0xFFF
  7914                           tosh	equ	0xFFE
  7915                           tosl	equ	0xFFD
  7916                           pclatu	equ	0xFFB
  7917                           pclath	equ	0xFFA
  7918                           tblptru	equ	0xFF8
  7919                           tblptrh	equ	0xFF7
  7920                           tblptrl	equ	0xFF6
  7921                           tablat	equ	0xFF5
  7922                           prodh	equ	0xFF4
  7923                           prodl	equ	0xFF3
  7924                           intcon	equ	0xFF2
  7925                           postinc0	equ	0xFEE
  7926                           fsr0h	equ	0xFEA
  7927                           fsr0l	equ	0xFE9
  7928                           wreg	equ	0xFE8
  7929                           indf1	equ	0xFE7
  7930                           postinc1	equ	0xFE6
  7931                           postdec1	equ	0xFE5
  7932                           fsr1h	equ	0xFE2
  7933                           fsr1l	equ	0xFE1
  7934                           indf2	equ	0xFDF
  7935                           postinc2	equ	0xFDE
  7936                           postdec2	equ	0xFDD
  7937                           fsr2h	equ	0xFDA
  7938                           fsr2l	equ	0xFD9
  7939                           status	equ	0xFD8
  7940                           
  7941 ;; *************** function i2_ES_PostToService *****************
  7942 ;; Defined at:
  7943 ;;		line 351 in file "ES_Framework.c"
  7944 ;; Parameters:    Size  Location     Type
  7945 ;;  WhichService    1    wreg     unsigned char 
  7946 ;;  TheEvent        3   23[COMRAM] struct ES_Event_t
  7947 ;; Auto vars:     Size  Location     Type
  7948 ;;  WhichService    1   28[COMRAM] unsigned char 
  7949 ;; Return value:  Size  Location     Type
  7950 ;;                  1    wreg      unsigned char 
  7951 ;; Registers used:
  7952 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7953 ;; Tracked objects:
  7954 ;;		On entry : 0/0
  7955 ;;		On exit  : 0/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7958 ;;      Params:         3       0       0       0
  7959 ;;      Locals:         1       0       0       0
  7960 ;;      Temps:          2       0       0       0
  7961 ;;      Totals:         6       0       0       0
  7962 ;;Total ram usage:        6 bytes
  7963 ;; Hardware stack levels used:    1
  7964 ;; Hardware stack levels required when called:    2
  7965 ;; This function calls:
  7966 ;;		i2_ES_EnQueueFIFO
  7967 ;; This function is called by:
  7968 ;;		i2_PostSPI32ControlService
  7969 ;; This function uses a non-reentrant model
  7970 ;;
  7971                           
  7972                           	psect	text53
  7973  0013A2                     __ptext53:
  7974                           	opt stack 0
  7975  0013A2                     i2_ES_PostToService:
  7976                           	opt stack 16
  7977                           
  7978                           ;incstack = 0
  7979                           ;i2ES_PostToService@WhichService stored from wreg
  7980  0013A2  6E1D               	movwf	i2ES_PostToService@WhichService,c
  7981                           
  7982                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  7983                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  7984                           ;ES_Framework.c: 354: 1 )){
  7985  0013A4  0E04               	movlw	4
  7986  0013A6  601D               	cpfslt	i2ES_PostToService@WhichService,c
  7987  0013A8  D02F               	goto	i2l2738
  7988  0013AA  501D               	movf	i2ES_PostToService@WhichService,w,c
  7989  0013AC  0D03               	mullw	3
  7990  0013AE  0E60               	movlw	low _EventQueues
  7991  0013B0  24F3               	addwf	prodl,w,c
  7992  0013B2  6EF6               	movwf	tblptrl,c
  7993  0013B4  0E03               	movlw	high _EventQueues
  7994  0013B6  20F4               	addwfc	prodh,w,c
  7995  0013B8  6EF7               	movwf	tblptrh,c
  7996  0013BA                     	if	0	;There are less than 3 active tblptr bytes
  7997  0013BA                     	endif
  7998  0013BA  0009               	tblrd		*+
  7999  0013BC  CFF5 F00D          	movff	tablat,i2ES_EnQueueFIFO@pBlock
  8000  0013C0  000A               	tblrd		*-
  8001  0013C2  CFF5 F00E          	movff	tablat,i2ES_EnQueueFIFO@pBlock+1
  8002  0013C6  C018  F00F         	movff	i2ES_PostToService@TheEvent,i2ES_EnQueueFIFO@Event2Add
  8003  0013CA  C019  F010         	movff	i2ES_PostToService@TheEvent+1,i2ES_EnQueueFIFO@Event2Add+1
  8004  0013CE  C01A  F011         	movff	i2ES_PostToService@TheEvent+2,i2ES_EnQueueFIFO@Event2Add+2
  8005  0013D2  EC0D  F007         	call	i2_ES_EnQueueFIFO	;wreg free
  8006  0013D6  06E8               	decf	wreg,f,c
  8007  0013D8  A4D8               	btfss	status,2,c
  8008  0013DA  D016               	goto	i2l2738
  8009                           
  8010                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  8011  0013DC  501D               	movf	i2ES_PostToService@WhichService,w,c
  8012  0013DE  0D02               	mullw	2
  8013  0013E0  0E01               	movlw	low _BitNum2SetMask
  8014  0013E2  24F3               	addwf	prodl,w,c
  8015  0013E4  6EF6               	movwf	tblptrl,c
  8016  0013E6  0E03               	movlw	high _BitNum2SetMask
  8017  0013E8  20F4               	addwfc	prodh,w,c
  8018  0013EA  6EF7               	movwf	tblptrh,c
  8019  0013EC                     	if	0	;There are less than 3 active tblptr bytes
  8020  0013EC                     	endif
  8021  0013EC  0009               	tblrd		*+
  8022  0013EE  CFF5 F01B          	movff	tablat,??i2_ES_PostToService
  8023  0013F2  0009               	tblrd		*+
  8024  0013F4  CFF5 F01C          	movff	tablat,??i2_ES_PostToService+1
  8025  0013F8  501B               	movf	??i2_ES_PostToService,w,c
  8026  0013FA  0100               	movlb	0	; () banked
  8027  0013FC  1391               	iorwf	_Ready& (0+255),f,b
  8028  0013FE  501C               	movf	??i2_ES_PostToService+1,w,c
  8029  001400  0100               	movlb	0	; () banked
  8030  001402  1392               	iorwf	(_Ready+1)& (0+255),f,b
  8031                           
  8032                           ; BSR set to: 0
  8033                           ;ES_Framework.c: 356: return 1;
  8034  001404  0E01               	movlw	1
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;ES_Framework.c: 357: } else
  8038                           
  8039                           ; BSR set to: 0
  8040  001406  0012               	return	
  8041  001408                     i2l2738:
  8042                           
  8043                           ;ES_Framework.c: 358: return 0;
  8044  001408  0E00               	movlw	0
  8045  00140A  0012               	return	
  8046  00140C                     __end_ofi2_ES_PostToService:
  8047                           	opt stack 0
  8048                           tosu	equ	0xFFF
  8049                           tosh	equ	0xFFE
  8050                           tosl	equ	0xFFD
  8051                           pclatu	equ	0xFFB
  8052                           pclath	equ	0xFFA
  8053                           tblptru	equ	0xFF8
  8054                           tblptrh	equ	0xFF7
  8055                           tblptrl	equ	0xFF6
  8056                           tablat	equ	0xFF5
  8057                           prodh	equ	0xFF4
  8058                           prodl	equ	0xFF3
  8059                           intcon	equ	0xFF2
  8060                           postinc0	equ	0xFEE
  8061                           fsr0h	equ	0xFEA
  8062                           fsr0l	equ	0xFE9
  8063                           wreg	equ	0xFE8
  8064                           indf1	equ	0xFE7
  8065                           postinc1	equ	0xFE6
  8066                           postdec1	equ	0xFE5
  8067                           fsr1h	equ	0xFE2
  8068                           fsr1l	equ	0xFE1
  8069                           indf2	equ	0xFDF
  8070                           postinc2	equ	0xFDE
  8071                           postdec2	equ	0xFDD
  8072                           fsr2h	equ	0xFDA
  8073                           fsr2l	equ	0xFD9
  8074                           status	equ	0xFD8
  8075                           
  8076 ;; *************** function i2_ES_EnQueueFIFO *****************
  8077 ;; Defined at:
  8078 ;;		line 85 in file "ES_Queue.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;  pBlock          2   12[COMRAM] PTR struct ES_Event_t
  8081 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  8082 ;;  Event2Add       3   14[COMRAM] struct ES_Event_t
  8083 ;; Auto vars:     Size  Location     Type
  8084 ;;  ES_EnQueueFI    2   21[COMRAM] PTR struct .
  8085 ;;		 -> Queue3(12), Queue2(12), Queue1(12), Queue0(12), 
  8086 ;;  ES_EnQueueFI    1   20[COMRAM] unsigned char 
  8087 ;; Return value:  Size  Location     Type
  8088 ;;                  1    wreg      unsigned char 
  8089 ;; Registers used:
  8090 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8096 ;;      Params:         5       0       0       0
  8097 ;;      Locals:         3       0       0       0
  8098 ;;      Temps:          3       0       0       0
  8099 ;;      Totals:        11       0       0       0
  8100 ;;Total ram usage:       11 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; Hardware stack levels required when called:    1
  8103 ;; This function calls:
  8104 ;;		i2___awmod
  8105 ;;		i2___wmul
  8106 ;; This function is called by:
  8107 ;;		i2_ES_PostToService
  8108 ;; This function uses a non-reentrant model
  8109 ;;
  8110                           
  8111                           	psect	text54
  8112  000E1A                     __ptext54:
  8113                           	opt stack 0
  8114  000E1A                     i2_ES_EnQueueFIFO:
  8115                           	opt stack 16
  8116                           
  8117                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  8118                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  8119                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  8120                           
  8121                           ;incstack = 0
  8122  000E1A  C00D  F016         	movff	i2ES_EnQueueFIFO@pBlock,i2ES_EnQueueFIFO@pThisQueue
  8123  000E1E  C00E  F017         	movff	i2ES_EnQueueFIFO@pBlock+1,i2ES_EnQueueFIFO@pThisQueue+1
  8124                           
  8125                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  8126  000E22  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  8127  000E26  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  8128  000E2A  EE10 F002          	lfsr	1,2
  8129  000E2E  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  8130  000E30  26E1               	addwf	fsr1l,f,c
  8131  000E32  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  8132  000E34  22E2               	addwfc	fsr1h,f,c
  8133  000E36  50DE               	movf	postinc2,w,c
  8134  000E38  5CE6               	subwf	postinc1,w,c
  8135  000E3A  B0D8               	btfsc	status,0,c
  8136  000E3C  D046               	goto	i2l2586
  8137                           
  8138                           ;ES_Queue.c: 92: {
  8139                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  8140  000E3E  CFF2 F015          	movff	intcon,i2ES_EnQueueFIFO@SaveCrit	;volatile
  8141  000E42  9EF2               	bcf	intcon,7,c	;volatile
  8142                           
  8143                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  8144                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  8145  000E44  C016  FFD9         	movff	i2ES_EnQueueFIFO@pThisQueue,fsr2l
  8146  000E48  C017  FFDA         	movff	i2ES_EnQueueFIFO@pThisQueue+1,fsr2h
  8147  000E4C  50DF               	movf	indf2,w,c
  8148  000E4E  6E12               	movwf	??i2_ES_EnQueueFIFO& (0+255),c
  8149  000E50  5012               	movf	??i2_ES_EnQueueFIFO,w,c
  8150  000E52  6E03               	movwf	i2___awmod@divisor,c
  8151  000E54  6A04               	clrf	i2___awmod@divisor+1,c
  8152  000E56  EE20 F002          	lfsr	2,2
  8153  000E5A  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  8154  000E5C  26D9               	addwf	fsr2l,f,c
  8155  000E5E  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  8156  000E60  22DA               	addwfc	fsr2h,f,c
  8157  000E62  50DF               	movf	indf2,w,c
  8158  000E64  6E13               	movwf	(??i2_ES_EnQueueFIFO+1)& (0+255),c
  8159  000E66  EE20 F001          	lfsr	2,1
  8160  000E6A  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  8161  000E6C  26D9               	addwf	fsr2l,f,c
  8162  000E6E  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  8163  000E70  22DA               	addwfc	fsr2h,f,c
  8164  000E72  50DF               	movf	indf2,w,c
  8165  000E74  6E14               	movwf	(??i2_ES_EnQueueFIFO+2)& (0+255),c
  8166  000E76  5014               	movf	??i2_ES_EnQueueFIFO+2,w,c
  8167  000E78  2413               	addwf	??i2_ES_EnQueueFIFO+1,w,c
  8168  000E7A  6E01               	movwf	i2___awmod@dividend,c
  8169  000E7C  6A02               	clrf	i2___awmod@dividend+1,c
  8170  000E7E  3602               	rlcf	i2___awmod@dividend+1,f,c
  8171  000E80  EC62  F009         	call	i2___awmod	;wreg free
  8172  000E84  0E01               	movlw	1
  8173  000E86  2401               	addwf	?i2___awmod,w,c
  8174  000E88  6E07               	movwf	i2___wmul@multiplier,c
  8175  000E8A  0E00               	movlw	0
  8176  000E8C  2002               	addwfc	?i2___awmod+1,w,c
  8177  000E8E  6E08               	movwf	i2___wmul@multiplier+1,c
  8178  000E90  0E00               	movlw	0
  8179  000E92  6E0A               	movwf	i2___wmul@multiplicand+1,c
  8180  000E94  0E03               	movlw	3
  8181  000E96  6E09               	movwf	i2___wmul@multiplicand,c
  8182  000E98  EC3A  F00C         	call	i2___wmul	;wreg free
  8183  000E9C  5007               	movf	?i2___wmul,w,c
  8184  000E9E  240D               	addwf	i2ES_EnQueueFIFO@pBlock,w,c
  8185  000EA0  6ED9               	movwf	fsr2l,c
  8186  000EA2  5008               	movf	?i2___wmul+1,w,c
  8187  000EA4  200E               	addwfc	i2ES_EnQueueFIFO@pBlock+1,w,c
  8188  000EA6  6EDA               	movwf	fsr2h,c
  8189  000EA8  C00F  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add,postinc2
  8190  000EAC  C010  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+1,postinc2
  8191  000EB0  C011  FFDE         	movff	i2ES_EnQueueFIFO@Event2Add+2,postinc2
  8192                           
  8193                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  8194  000EB4  EE20 F002          	lfsr	2,2
  8195  000EB8  5016               	movf	i2ES_EnQueueFIFO@pThisQueue,w,c
  8196  000EBA  26D9               	addwf	fsr2l,f,c
  8197  000EBC  5017               	movf	i2ES_EnQueueFIFO@pThisQueue+1,w,c
  8198  000EBE  22DA               	addwfc	fsr2h,f,c
  8199  000EC0  2ADF               	incf	indf2,f,c
  8200                           
  8201                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  8202  000EC2  C015  FFF2         	movff	i2ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  8203                           
  8204                           ;ES_Queue.c: 101: return(1);
  8205  000EC6  0E01               	movlw	1
  8206                           
  8207                           ;ES_Queue.c: 102: }else
  8208  000EC8  0012               	return	
  8209  000ECA                     i2l2586:
  8210                           
  8211                           ;ES_Queue.c: 103: return(0);
  8212  000ECA  0E00               	movlw	0
  8213  000ECC  0012               	return	
  8214  000ECE                     __end_ofi2_ES_EnQueueFIFO:
  8215                           	opt stack 0
  8216                           tosu	equ	0xFFF
  8217                           tosh	equ	0xFFE
  8218                           tosl	equ	0xFFD
  8219                           pclatu	equ	0xFFB
  8220                           pclath	equ	0xFFA
  8221                           tblptru	equ	0xFF8
  8222                           tblptrh	equ	0xFF7
  8223                           tblptrl	equ	0xFF6
  8224                           tablat	equ	0xFF5
  8225                           prodh	equ	0xFF4
  8226                           prodl	equ	0xFF3
  8227                           intcon	equ	0xFF2
  8228                           postinc0	equ	0xFEE
  8229                           fsr0h	equ	0xFEA
  8230                           fsr0l	equ	0xFE9
  8231                           wreg	equ	0xFE8
  8232                           indf1	equ	0xFE7
  8233                           postinc1	equ	0xFE6
  8234                           postdec1	equ	0xFE5
  8235                           fsr1h	equ	0xFE2
  8236                           fsr1l	equ	0xFE1
  8237                           indf2	equ	0xFDF
  8238                           postinc2	equ	0xFDE
  8239                           postdec2	equ	0xFDD
  8240                           fsr2h	equ	0xFDA
  8241                           fsr2l	equ	0xFD9
  8242                           status	equ	0xFD8
  8243                           
  8244 ;; *************** function i2___wmul *****************
  8245 ;; Defined at:
  8246 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  8247 ;; Parameters:    Size  Location     Type
  8248 ;;  multiplier      2    6[COMRAM] unsigned int 
  8249 ;;  multiplicand    2    8[COMRAM] unsigned int 
  8250 ;; Auto vars:     Size  Location     Type
  8251 ;;  __wmul          2   10[COMRAM] unsigned int 
  8252 ;; Return value:  Size  Location     Type
  8253 ;;                  2    6[COMRAM] unsigned int 
  8254 ;; Registers used:
  8255 ;;		wreg, status,2, status,0, prodl, prodh
  8256 ;; Tracked objects:
  8257 ;;		On entry : 0/0
  8258 ;;		On exit  : 0/0
  8259 ;;		Unchanged: 0/0
  8260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8261 ;;      Params:         4       0       0       0
  8262 ;;      Locals:         2       0       0       0
  8263 ;;      Temps:          0       0       0       0
  8264 ;;      Totals:         6       0       0       0
  8265 ;;Total ram usage:        6 bytes
  8266 ;; Hardware stack levels used:    1
  8267 ;; This function calls:
  8268 ;;		Nothing
  8269 ;; This function is called by:
  8270 ;;		i2_ES_EnQueueFIFO
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           	psect	text55
  8275  001874                     __ptext55:
  8276                           	opt stack 0
  8277  001874                     i2___wmul:
  8278                           	opt stack 16
  8279                           
  8280                           ;incstack = 0
  8281  001874  5007               	movf	i2___wmul@multiplier,w,c
  8282  001876  0209               	mulwf	i2___wmul@multiplicand,c
  8283  001878  CFF3 F00B          	movff	prodl,i2___wmul@product
  8284  00187C  CFF4 F00C          	movff	prodh,i2___wmul@product+1
  8285  001880  5007               	movf	i2___wmul@multiplier,w,c
  8286  001882  020A               	mulwf	i2___wmul@multiplicand+1,c
  8287  001884  50F3               	movf	prodl,w,c
  8288  001886  260C               	addwf	i2___wmul@product+1,f,c
  8289  001888  5008               	movf	i2___wmul@multiplier+1,w,c
  8290  00188A  0209               	mulwf	i2___wmul@multiplicand,c
  8291  00188C  50F3               	movf	prodl,w,c
  8292  00188E  260C               	addwf	i2___wmul@product+1,f,c
  8293  001890  C00B  F007         	movff	i2___wmul@product,?i2___wmul
  8294  001894  C00C  F008         	movff	i2___wmul@product+1,?i2___wmul+1
  8295  001898  0012               	return	
  8296  00189A                     __end_ofi2___wmul:
  8297                           	opt stack 0
  8298                           tosu	equ	0xFFF
  8299                           tosh	equ	0xFFE
  8300                           tosl	equ	0xFFD
  8301                           pclatu	equ	0xFFB
  8302                           pclath	equ	0xFFA
  8303                           tblptru	equ	0xFF8
  8304                           tblptrh	equ	0xFF7
  8305                           tblptrl	equ	0xFF6
  8306                           tablat	equ	0xFF5
  8307                           prodh	equ	0xFF4
  8308                           prodl	equ	0xFF3
  8309                           intcon	equ	0xFF2
  8310                           postinc0	equ	0xFEE
  8311                           fsr0h	equ	0xFEA
  8312                           fsr0l	equ	0xFE9
  8313                           wreg	equ	0xFE8
  8314                           indf1	equ	0xFE7
  8315                           postinc1	equ	0xFE6
  8316                           postdec1	equ	0xFE5
  8317                           fsr1h	equ	0xFE2
  8318                           fsr1l	equ	0xFE1
  8319                           indf2	equ	0xFDF
  8320                           postinc2	equ	0xFDE
  8321                           postdec2	equ	0xFDD
  8322                           fsr2h	equ	0xFDA
  8323                           fsr2l	equ	0xFD9
  8324                           status	equ	0xFD8
  8325                           
  8326 ;; *************** function i2___awmod *****************
  8327 ;; Defined at:
  8328 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  8329 ;; Parameters:    Size  Location     Type
  8330 ;;  dividend        2    0[COMRAM] int 
  8331 ;;  divisor         2    2[COMRAM] int 
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;  __awmod         1    5[COMRAM] unsigned char 
  8334 ;;  __awmod         1    4[COMRAM] unsigned char 
  8335 ;; Return value:  Size  Location     Type
  8336 ;;                  2    0[COMRAM] int 
  8337 ;; Registers used:
  8338 ;;		wreg, status,2, status,0
  8339 ;; Tracked objects:
  8340 ;;		On entry : 0/0
  8341 ;;		On exit  : 0/0
  8342 ;;		Unchanged: 0/0
  8343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8344 ;;      Params:         4       0       0       0
  8345 ;;      Locals:         2       0       0       0
  8346 ;;      Temps:          0       0       0       0
  8347 ;;      Totals:         6       0       0       0
  8348 ;;Total ram usage:        6 bytes
  8349 ;; Hardware stack levels used:    1
  8350 ;; This function calls:
  8351 ;;		Nothing
  8352 ;; This function is called by:
  8353 ;;		i2_ES_EnQueueFIFO
  8354 ;; This function uses a non-reentrant model
  8355 ;;
  8356                           
  8357                           	psect	text56
  8358  0012C4                     __ptext56:
  8359                           	opt stack 0
  8360  0012C4                     i2___awmod:
  8361                           	opt stack 16
  8362                           
  8363                           ;incstack = 0
  8364  0012C4  0E00               	movlw	0
  8365  0012C6  6E06               	movwf	i2___awmod@sign,c
  8366  0012C8  AE02               	btfss	i2___awmod@dividend+1,7,c
  8367  0012CA  D006               	goto	i2l2450
  8368  0012CC  6C01               	negf	i2___awmod@dividend,c
  8369  0012CE  1E02               	comf	i2___awmod@dividend+1,f,c
  8370  0012D0  B0D8               	btfsc	status,0,c
  8371  0012D2  2A02               	incf	i2___awmod@dividend+1,f,c
  8372  0012D4  0E01               	movlw	1
  8373  0012D6  6E06               	movwf	i2___awmod@sign,c
  8374  0012D8                     i2l2450:
  8375  0012D8  AE04               	btfss	i2___awmod@divisor+1,7,c
  8376  0012DA  D004               	goto	i2l2454
  8377  0012DC  6C03               	negf	i2___awmod@divisor,c
  8378  0012DE  1E04               	comf	i2___awmod@divisor+1,f,c
  8379  0012E0  B0D8               	btfsc	status,0,c
  8380  0012E2  2A04               	incf	i2___awmod@divisor+1,f,c
  8381  0012E4                     i2l2454:
  8382  0012E4  5003               	movf	i2___awmod@divisor,w,c
  8383  0012E6  1004               	iorwf	i2___awmod@divisor+1,w,c
  8384  0012E8  B4D8               	btfsc	status,2,c
  8385  0012EA  D018               	goto	i2l2470
  8386  0012EC  0E01               	movlw	1
  8387  0012EE  6E05               	movwf	i2___awmod@counter,c
  8388  0012F0  D004               	goto	i2l2460
  8389  0012F2                     i2l2458:
  8390  0012F2  90D8               	bcf	status,0,c
  8391  0012F4  3603               	rlcf	i2___awmod@divisor,f,c
  8392  0012F6  3604               	rlcf	i2___awmod@divisor+1,f,c
  8393  0012F8  2A05               	incf	i2___awmod@counter,f,c
  8394  0012FA                     i2l2460:
  8395  0012FA  AE04               	btfss	i2___awmod@divisor+1,7,c
  8396  0012FC  D7FA               	goto	i2l2458
  8397  0012FE                     i2l2462:
  8398  0012FE  5003               	movf	i2___awmod@divisor,w,c
  8399  001300  5C01               	subwf	i2___awmod@dividend,w,c
  8400  001302  5004               	movf	i2___awmod@divisor+1,w,c
  8401  001304  5802               	subwfb	i2___awmod@dividend+1,w,c
  8402  001306  A0D8               	btfss	status,0,c
  8403  001308  D004               	goto	i2l2466
  8404  00130A  5003               	movf	i2___awmod@divisor,w,c
  8405  00130C  5E01               	subwf	i2___awmod@dividend,f,c
  8406  00130E  5004               	movf	i2___awmod@divisor+1,w,c
  8407  001310  5A02               	subwfb	i2___awmod@dividend+1,f,c
  8408  001312                     i2l2466:
  8409  001312  90D8               	bcf	status,0,c
  8410  001314  3204               	rrcf	i2___awmod@divisor+1,f,c
  8411  001316  3203               	rrcf	i2___awmod@divisor,f,c
  8412  001318  2E05               	decfsz	i2___awmod@counter,f,c
  8413  00131A  D7F1               	goto	i2l2462
  8414  00131C                     i2l2470:
  8415  00131C  5006               	movf	i2___awmod@sign,w,c
  8416  00131E  B4D8               	btfsc	status,2,c
  8417  001320  D004               	goto	i2l2474
  8418  001322  6C01               	negf	i2___awmod@dividend,c
  8419  001324  1E02               	comf	i2___awmod@dividend+1,f,c
  8420  001326  B0D8               	btfsc	status,0,c
  8421  001328  2A02               	incf	i2___awmod@dividend+1,f,c
  8422  00132A                     i2l2474:
  8423  00132A  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  8424  00132E  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  8425  001332  0012               	return	
  8426  001334                     __end_ofi2___awmod:
  8427                           	opt stack 0
  8428                           tosu	equ	0xFFF
  8429                           tosh	equ	0xFFE
  8430                           tosl	equ	0xFFD
  8431                           pclatu	equ	0xFFB
  8432                           pclath	equ	0xFFA
  8433                           tblptru	equ	0xFF8
  8434                           tblptrh	equ	0xFF7
  8435                           tblptrl	equ	0xFF6
  8436                           tablat	equ	0xFF5
  8437                           prodh	equ	0xFF4
  8438                           prodl	equ	0xFF3
  8439                           intcon	equ	0xFF2
  8440                           postinc0	equ	0xFEE
  8441                           fsr0h	equ	0xFEA
  8442                           fsr0l	equ	0xFE9
  8443                           wreg	equ	0xFE8
  8444                           indf1	equ	0xFE7
  8445                           postinc1	equ	0xFE6
  8446                           postdec1	equ	0xFE5
  8447                           fsr1h	equ	0xFE2
  8448                           fsr1l	equ	0xFE1
  8449                           indf2	equ	0xFDF
  8450                           postinc2	equ	0xFDE
  8451                           postdec2	equ	0xFDD
  8452                           fsr2h	equ	0xFDA
  8453                           fsr2l	equ	0xFD9
  8454                           status	equ	0xFD8
  8455                           
  8456 ;; *************** function _CanXmitResponse *****************
  8457 ;; Defined at:
  8458 ;;		line 157 in file "Can_XmitService.c"
  8459 ;; Parameters:    Size  Location     Type
  8460 ;;		None
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;		None
  8463 ;; Return value:  Size  Location     Type
  8464 ;;                  1    wreg      void 
  8465 ;; Registers used:
  8466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8467 ;; Tracked objects:
  8468 ;;		On entry : 0/0
  8469 ;;		On exit  : 0/0
  8470 ;;		Unchanged: 0/0
  8471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8472 ;;      Params:         0       0       0       0
  8473 ;;      Locals:         0       0       0       0
  8474 ;;      Temps:          0       0       0       0
  8475 ;;      Totals:         0       0       0       0
  8476 ;;Total ram usage:        0 bytes
  8477 ;; Hardware stack levels used:    1
  8478 ;; Hardware stack levels required when called:    1
  8479 ;; This function calls:
  8480 ;;		i2_ES_Timer_InitTimer
  8481 ;; This function is called by:
  8482 ;;		_ISR
  8483 ;; This function uses a non-reentrant model
  8484 ;;
  8485                           
  8486                           	psect	text57
  8487  0019D4                     __ptext57:
  8488                           	opt stack 0
  8489  0019D4                     _CanXmitResponse:
  8490                           	opt stack 19
  8491                           
  8492                           ;Can_XmitService.c: 159: LATA1 = 1;
  8493                           
  8494                           ;incstack = 0
  8495  0019D4  8289               	bsf	3977,1,c	;volatile
  8496                           
  8497                           ;Can_XmitService.c: 160: TXB0CONbits.TXREQ = 0;
  8498  0019D6  010F               	movlb	15	; () banked
  8499  0019D8  9740               	bcf	64,3,b	;volatile
  8500                           
  8501                           ; BSR set to: 15
  8502                           ;Can_XmitService.c: 161: ES_Timer_InitTimer(2, 50);
  8503  0019DA  0E00               	movlw	0
  8504  0019DC  6E02               	movwf	i2ES_Timer_InitTimer@NewTime+1,c
  8505  0019DE  0E32               	movlw	50
  8506  0019E0  6E01               	movwf	i2ES_Timer_InitTimer@NewTime,c
  8507  0019E2  0E02               	movlw	2
  8508  0019E4  EC9A  F009         	call	i2_ES_Timer_InitTimer
  8509  0019E8  0012               	return		;funcret
  8510  0019EA                     __end_of_CanXmitResponse:
  8511                           	opt stack 0
  8512                           tosu	equ	0xFFF
  8513                           tosh	equ	0xFFE
  8514                           tosl	equ	0xFFD
  8515                           pclatu	equ	0xFFB
  8516                           pclath	equ	0xFFA
  8517                           tblptru	equ	0xFF8
  8518                           tblptrh	equ	0xFF7
  8519                           tblptrl	equ	0xFF6
  8520                           tablat	equ	0xFF5
  8521                           prodh	equ	0xFF4
  8522                           prodl	equ	0xFF3
  8523                           intcon	equ	0xFF2
  8524                           postinc0	equ	0xFEE
  8525                           fsr0h	equ	0xFEA
  8526                           fsr0l	equ	0xFE9
  8527                           wreg	equ	0xFE8
  8528                           indf1	equ	0xFE7
  8529                           postinc1	equ	0xFE6
  8530                           postdec1	equ	0xFE5
  8531                           fsr1h	equ	0xFE2
  8532                           fsr1l	equ	0xFE1
  8533                           indf2	equ	0xFDF
  8534                           postinc2	equ	0xFDE
  8535                           postdec2	equ	0xFDD
  8536                           fsr2h	equ	0xFDA
  8537                           fsr2l	equ	0xFD9
  8538                           status	equ	0xFD8
  8539                           
  8540 ;; *************** function i2_ES_Timer_InitTimer *****************
  8541 ;; Defined at:
  8542 ;;		line 229 in file "ES_Timers.c"
  8543 ;; Parameters:    Size  Location     Type
  8544 ;;  Num             1    wreg     unsigned char 
  8545 ;;  NewTime         2    0[COMRAM] unsigned int 
  8546 ;; Auto vars:     Size  Location     Type
  8547 ;;  Num             1    4[COMRAM] unsigned char 
  8548 ;; Return value:  Size  Location     Type
  8549 ;;                  1    wreg      enum E15473
  8550 ;; Registers used:
  8551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8552 ;; Tracked objects:
  8553 ;;		On entry : 0/0
  8554 ;;		On exit  : 0/0
  8555 ;;		Unchanged: 0/0
  8556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8557 ;;      Params:         2       0       0       0
  8558 ;;      Locals:         1       0       0       0
  8559 ;;      Temps:          2       0       0       0
  8560 ;;      Totals:         5       0       0       0
  8561 ;;Total ram usage:        5 bytes
  8562 ;; Hardware stack levels used:    1
  8563 ;; This function calls:
  8564 ;;		Nothing
  8565 ;; This function is called by:
  8566 ;;		_CanXmitResponse
  8567 ;; This function uses a non-reentrant model
  8568 ;;
  8569                           
  8570                           	psect	text58
  8571  001334                     __ptext58:
  8572                           	opt stack 0
  8573  001334                     i2_ES_Timer_InitTimer:
  8574                           	opt stack 19
  8575                           
  8576                           ;incstack = 0
  8577                           ;i2ES_Timer_InitTimer@Num stored from wreg
  8578  001334  6E05               	movwf	i2ES_Timer_InitTimer@Num,c
  8579                           
  8580                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  8581                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  8582                           ;ES_Timers.c: 236: (NewTime == 0) )
  8583  001336  0E10               	movlw	16
  8584  001338  6005               	cpfslt	i2ES_Timer_InitTimer@Num,c
  8585  00133A  0012               	return	
  8586  00133C  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  8587  00133E  0D02               	mullw	2
  8588  001340  0E21               	movlw	low _Timer2PostFunc
  8589  001342  24F3               	addwf	prodl,w,c
  8590  001344  6EF6               	movwf	tblptrl,c
  8591  001346  0E03               	movlw	high _Timer2PostFunc
  8592  001348  20F4               	addwfc	prodh,w,c
  8593  00134A  6EF7               	movwf	tblptrh,c
  8594  00134C                     	if	0	;There are less than 3 active tblptr bytes
  8595  00134C                     	endif
  8596  00134C  0009               	tblrd		*+
  8597  00134E  50F5               	movf	tablat,w,c
  8598  001350  0009               	tblrd		*+
  8599  001352  10F5               	iorwf	tablat,w,c
  8600  001354  B4D8               	btfsc	status,2,c
  8601  001356  0012               	return	
  8602  001358  5001               	movf	i2ES_Timer_InitTimer@NewTime,w,c
  8603  00135A  1002               	iorwf	i2ES_Timer_InitTimer@NewTime+1,w,c
  8604  00135C  B4D8               	btfsc	status,2,c
  8605  00135E  0012               	return	
  8606                           
  8607                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  8608                           
  8609                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  8610                           ;	Return value of i2_ES_Timer_InitTimer is never used
  8611  001360  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  8612  001362  0D02               	mullw	2
  8613  001364  0E60               	movlw	low _TMR_TimerArray
  8614  001366  24F3               	addwf	prodl,w,c
  8615  001368  6ED9               	movwf	fsr2l,c
  8616  00136A  0E00               	movlw	high _TMR_TimerArray
  8617  00136C  20F4               	addwfc	prodh,w,c
  8618  00136E  6EDA               	movwf	fsr2h,c
  8619  001370  C001  FFDE         	movff	i2ES_Timer_InitTimer@NewTime,postinc2
  8620  001374  C002  FFDD         	movff	i2ES_Timer_InitTimer@NewTime+1,postdec2
  8621                           
  8622                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  8623  001378  5005               	movf	i2ES_Timer_InitTimer@Num,w,c
  8624  00137A  0D02               	mullw	2
  8625  00137C  0E01               	movlw	low _BitNum2SetMask
  8626  00137E  24F3               	addwf	prodl,w,c
  8627  001380  6EF6               	movwf	tblptrl,c
  8628  001382  0E03               	movlw	high _BitNum2SetMask
  8629  001384  20F4               	addwfc	prodh,w,c
  8630  001386  6EF7               	movwf	tblptrh,c
  8631  001388                     	if	0	;There are less than 3 active tblptr bytes
  8632  001388                     	endif
  8633  001388  0009               	tblrd		*+
  8634  00138A  CFF5 F003          	movff	tablat,??i2_ES_Timer_InitTimer
  8635  00138E  0009               	tblrd		*+
  8636  001390  CFF5 F004          	movff	tablat,??i2_ES_Timer_InitTimer+1
  8637  001394  5003               	movf	??i2_ES_Timer_InitTimer,w,c
  8638  001396  0100               	movlb	0	; () banked
  8639  001398  1393               	iorwf	_TMR_ActiveFlags& (0+255),f,b
  8640  00139A  5004               	movf	??i2_ES_Timer_InitTimer+1,w,c
  8641  00139C  0100               	movlb	0	; () banked
  8642  00139E  1394               	iorwf	(_TMR_ActiveFlags+1)& (0+255),f,b
  8643  0013A0  0012               	return	
  8644  0013A2                     __end_ofi2_ES_Timer_InitTimer:
  8645                           	opt stack 0
  8646                           tosu	equ	0xFFF
  8647                           tosh	equ	0xFFE
  8648                           tosl	equ	0xFFD
  8649                           pclatu	equ	0xFFB
  8650                           pclath	equ	0xFFA
  8651                           tblptru	equ	0xFF8
  8652                           tblptrh	equ	0xFF7
  8653                           tblptrl	equ	0xFF6
  8654                           tablat	equ	0xFF5
  8655                           prodh	equ	0xFF4
  8656                           prodl	equ	0xFF3
  8657                           intcon	equ	0xFF2
  8658                           postinc0	equ	0xFEE
  8659                           fsr0h	equ	0xFEA
  8660                           fsr0l	equ	0xFE9
  8661                           wreg	equ	0xFE8
  8662                           indf1	equ	0xFE7
  8663                           postinc1	equ	0xFE6
  8664                           postdec1	equ	0xFE5
  8665                           fsr1h	equ	0xFE2
  8666                           fsr1l	equ	0xFE1
  8667                           indf2	equ	0xFDF
  8668                           postinc2	equ	0xFDE
  8669                           postdec2	equ	0xFDD
  8670                           fsr2h	equ	0xFDA
  8671                           fsr2l	equ	0xFD9
  8672                           status	equ	0xFD8
  8673                           
  8674 ;; *************** function _CanRCVResponse *****************
  8675 ;; Defined at:
  8676 ;;		line 164 in file "Can_XmitService.c"
  8677 ;; Parameters:    Size  Location     Type
  8678 ;;		None
  8679 ;; Auto vars:     Size  Location     Type
  8680 ;;		None
  8681 ;; Return value:  Size  Location     Type
  8682 ;;                  1    wreg      void 
  8683 ;; Registers used:
  8684 ;;		None
  8685 ;; Tracked objects:
  8686 ;;		On entry : 0/0
  8687 ;;		On exit  : 0/0
  8688 ;;		Unchanged: 0/0
  8689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8690 ;;      Params:         0       0       0       0
  8691 ;;      Locals:         0       0       0       0
  8692 ;;      Temps:          0       0       0       0
  8693 ;;      Totals:         0       0       0       0
  8694 ;;Total ram usage:        0 bytes
  8695 ;; Hardware stack levels used:    1
  8696 ;; This function calls:
  8697 ;;		Nothing
  8698 ;; This function is called by:
  8699 ;;		_ISR
  8700 ;; This function uses a non-reentrant model
  8701 ;;
  8702                           
  8703                           	psect	text59
  8704  001A20                     __ptext59:
  8705                           	opt stack 0
  8706  001A20                     _CanRCVResponse:
  8707                           	opt stack 20
  8708                           
  8709                           ;Can_XmitService.c: 166: if (RXB0CONbits.RXFUL == 1) {
  8710                           
  8711                           ;incstack = 0
  8712  001A20  AE60               	btfss	3936,7,c	;volatile
  8713  001A22  0012               	return	
  8714                           
  8715                           ;Can_XmitService.c: 167: RXB0CONbits.RXFUL = 0;
  8716  001A24  9E60               	bcf	3936,7,c	;volatile
  8717  001A26  0012               	return	
  8718  001A28                     __end_of_CanRCVResponse:
  8719                           	opt stack 0
  8720                           tosu	equ	0xFFF
  8721                           tosh	equ	0xFFE
  8722                           tosl	equ	0xFFD
  8723                           pclatu	equ	0xFFB
  8724                           pclath	equ	0xFFA
  8725                           tblptru	equ	0xFF8
  8726                           tblptrh	equ	0xFF7
  8727                           tblptrl	equ	0xFF6
  8728                           tablat	equ	0xFF5
  8729                           prodh	equ	0xFF4
  8730                           prodl	equ	0xFF3
  8731                           intcon	equ	0xFF2
  8732                           postinc0	equ	0xFEE
  8733                           fsr0h	equ	0xFEA
  8734                           fsr0l	equ	0xFE9
  8735                           wreg	equ	0xFE8
  8736                           indf1	equ	0xFE7
  8737                           postinc1	equ	0xFE6
  8738                           postdec1	equ	0xFE5
  8739                           fsr1h	equ	0xFE2
  8740                           fsr1l	equ	0xFE1
  8741                           indf2	equ	0xFDF
  8742                           postinc2	equ	0xFDE
  8743                           postdec2	equ	0xFDD
  8744                           fsr2h	equ	0xFDA
  8745                           fsr2l	equ	0xFD9
  8746                           status	equ	0xFD8
  8747                           tosu	equ	0xFFF
  8748                           tosh	equ	0xFFE
  8749                           tosl	equ	0xFFD
  8750                           pclatu	equ	0xFFB
  8751                           pclath	equ	0xFFA
  8752                           tblptru	equ	0xFF8
  8753                           tblptrh	equ	0xFF7
  8754                           tblptrl	equ	0xFF6
  8755                           tablat	equ	0xFF5
  8756                           prodh	equ	0xFF4
  8757                           prodl	equ	0xFF3
  8758                           intcon	equ	0xFF2
  8759                           postinc0	equ	0xFEE
  8760                           fsr0h	equ	0xFEA
  8761                           fsr0l	equ	0xFE9
  8762                           wreg	equ	0xFE8
  8763                           indf1	equ	0xFE7
  8764                           postinc1	equ	0xFE6
  8765                           postdec1	equ	0xFE5
  8766                           fsr1h	equ	0xFE2
  8767                           fsr1l	equ	0xFE1
  8768                           indf2	equ	0xFDF
  8769                           postinc2	equ	0xFDE
  8770                           postdec2	equ	0xFDD
  8771                           fsr2h	equ	0xFDA
  8772                           fsr2l	equ	0xFD9
  8773                           status	equ	0xFD8
  8774                           
  8775                           	psect	text60
  8776  000000                     __ptext60:
  8777                           	opt stack 0
  8778                           tosu	equ	0xFFF
  8779                           tosh	equ	0xFFE
  8780                           tosl	equ	0xFFD
  8781                           pclatu	equ	0xFFB
  8782                           pclath	equ	0xFFA
  8783                           tblptru	equ	0xFF8
  8784                           tblptrh	equ	0xFF7
  8785                           tblptrl	equ	0xFF6
  8786                           tablat	equ	0xFF5
  8787                           prodh	equ	0xFF4
  8788                           prodl	equ	0xFF3
  8789                           intcon	equ	0xFF2
  8790                           postinc0	equ	0xFEE
  8791                           fsr0h	equ	0xFEA
  8792                           fsr0l	equ	0xFE9
  8793                           wreg	equ	0xFE8
  8794                           indf1	equ	0xFE7
  8795                           postinc1	equ	0xFE6
  8796                           postdec1	equ	0xFE5
  8797                           fsr1h	equ	0xFE2
  8798                           fsr1l	equ	0xFE1
  8799                           indf2	equ	0xFDF
  8800                           postinc2	equ	0xFDE
  8801                           postdec2	equ	0xFDD
  8802                           fsr2h	equ	0xFDA
  8803                           fsr2l	equ	0xFD9
  8804                           status	equ	0xFD8
  8805                           
  8806                           	psect	rparam
  8807  0000                     tosu	equ	0xFFF
  8808                           tosh	equ	0xFFE
  8809                           tosl	equ	0xFFD
  8810                           pclatu	equ	0xFFB
  8811                           pclath	equ	0xFFA
  8812                           tblptru	equ	0xFF8
  8813                           tblptrh	equ	0xFF7
  8814                           tblptrl	equ	0xFF6
  8815                           tablat	equ	0xFF5
  8816                           prodh	equ	0xFF4
  8817                           prodl	equ	0xFF3
  8818                           intcon	equ	0xFF2
  8819                           postinc0	equ	0xFEE
  8820                           fsr0h	equ	0xFEA
  8821                           fsr0l	equ	0xFE9
  8822                           wreg	equ	0xFE8
  8823                           indf1	equ	0xFE7
  8824                           postinc1	equ	0xFE6
  8825                           postdec1	equ	0xFE5
  8826                           fsr1h	equ	0xFE2
  8827                           fsr1l	equ	0xFE1
  8828                           indf2	equ	0xFDF
  8829                           postinc2	equ	0xFDE
  8830                           postdec2	equ	0xFDD
  8831                           fsr2h	equ	0xFDA
  8832                           fsr2l	equ	0xFD9
  8833                           status	equ	0xFD8
  8834                           
  8835                           	psect	temp
  8836  000056                     btemp:
  8837                           	opt stack 0
  8838  000056                     	ds	1
  8839  0000                     int$flags	set	btemp
  8840                           tosu	equ	0xFFF
  8841                           tosh	equ	0xFFE
  8842                           tosl	equ	0xFFD
  8843                           pclatu	equ	0xFFB
  8844                           pclath	equ	0xFFA
  8845                           tblptru	equ	0xFF8
  8846                           tblptrh	equ	0xFF7
  8847                           tblptrl	equ	0xFF6
  8848                           tablat	equ	0xFF5
  8849                           prodh	equ	0xFF4
  8850                           prodl	equ	0xFF3
  8851                           intcon	equ	0xFF2
  8852                           postinc0	equ	0xFEE
  8853                           fsr0h	equ	0xFEA
  8854                           fsr0l	equ	0xFE9
  8855                           wreg	equ	0xFE8
  8856                           indf1	equ	0xFE7
  8857                           postinc1	equ	0xFE6
  8858                           postdec1	equ	0xFE5
  8859                           fsr1h	equ	0xFE2
  8860                           fsr1l	equ	0xFE1
  8861                           indf2	equ	0xFDF
  8862                           postinc2	equ	0xFDE
  8863                           postdec2	equ	0xFDD
  8864                           fsr2h	equ	0xFDA
  8865                           fsr2l	equ	0xFD9
  8866                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    113
    Data        58
    BSS         502
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     51      85
    BANK0           160     59     157
    BANK1           256      0     180
    BANK2           256      0     248

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 128
		 -> PixelFrames(BANK1[128]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 128
		 -> PixelFrames(BANK1[128]), 

    memcpy@s1	PTR const void  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    SPI32_TransmitFrames@framePointer	PTR unsigned long  size(2) Largest target is 128
		 -> OffFrames(BANK2[128]), PixelFrames(BANK1[128]), 

    FramePointer	PTR unsigned long  size(2) Largest target is 128
		 -> NULL(NULL[0]), OffFrames(BANK2[128]), PixelFrames(BANK1[128]), 

    SetupPattern@configs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Pattern_RGBPatterns@PatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), PatternConfigs(BANK0[5]), 

    sp__memcpy	PTR void  size(2) Largest target is 128
		 -> PixelFrames(BANK1[128]), 

    DotStar_Show@pixelPointer	PTR unsigned long  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    sp__UpdatePattern	PTR unsigned long  size(2) Largest target is 120
		 -> PixelPattern(BANK2[120]), 

    sp__GetPatternConfigs	PTR unsigned char  size(2) Largest target is 5
		 -> PatternConfigs(BANK0[5]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostToggleService(), PostSPI32ControlService(), PostPatternControlService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(BANK0[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue3(COMRAM[12]), Queue2(COMRAM[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue3(COMRAM[12]), Queue2(COMRAM[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue3(COMRAM[12]), Queue2(COMRAM[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue3(COMRAM[12]), Queue2(COMRAM[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue3(COMRAM[12]), Queue2(COMRAM[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue3(COMRAM[12]), Queue2(COMRAM[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [2] size(2) Largest target is 1
		 -> PostSPI32ControlService(), PostPatternControlService(), 

    S131$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue3(COMRAM[12]), Queue2(COMRAM[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue3(COMRAM[12]), Queue2(COMRAM[12]), Queue1(BANK0[12]), Queue0(BANK0[12]), 

    S80$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCan_XmitService(), RunToggleService(), RunSPI32ControlService(), RunPatternControlService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCan_XmitService(), RunToggleService(), RunSPI32ControlService(), RunPatternControlService(), 

    S80$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCan_XmitService(), InitToggleService(), InitSPI32ControlService(), InitPatternControlService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCan_XmitService(), InitToggleService(), InitSPI32ControlService(), InitPatternControlService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_SPI32_EOTResponse
    _SPI32_EOTResponse->i2_PostSPI32ControlService
    i2_PostSPI32ControlService->i2_ES_PostToService
    i2_ES_PostToService->i2_ES_EnQueueFIFO
    i2_ES_EnQueueFIFO->i2___wmul
    i2___wmul->i2___awmod
    _CanXmitResponse->i2_ES_Timer_InitTimer

Critical Paths under _main in BANK0

    _main->_ES_Run
    _ES_Run->_RunSPI32ControlService
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostPatternControlService
    _ES_Timer_Tick_Resp->_PostSPI32ControlService
    _ES_Timer_Tick_Resp->_PostToggleService
    _PostToggleService->_ES_PostToService
    _DotStar_Off->_SPI32_TransmitFrames
    _ShowPattern->_DotStar_Show
    _UpdatePattern->___llmod
    _DotStar_Show->_SPI32_TransmitFrames
    _SPI32_TransmitFrames->_PostSPI32ControlService
    _PostSPI32ControlService->_ES_PostToService
    _PostPatternControlService->_ES_PostToService
    _PausePattern->_ES_Timer_StopTimer
    _ES_DeQueue->___wmul
    _ES_Initialize->_InitCan_XmitService
    _ES_Initialize->_InitPatternControlService
    _ES_Initialize->_InitSPI32ControlService
    _ES_Initialize->_InitToggleService
    _InitToggleService->_ES_PostToService
    _InitSPI32ControlService->_ES_PostToService
    _InitPatternControlService->_ES_PostToService
    _InitCan_XmitService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   39876
                                             58 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     350
                                              0 BANK0      5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0   25769
                                             53 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                 _RunCan_XmitService *
           _RunPatternControlService *
             _RunSPI32ControlService *
                   _RunToggleService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0   10091
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0   10091
                                             32 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
          _PostPatternControlService *
            _PostSPI32ControlService *
                  _PostToggleService *
 ---------------------------------------------------------------------------------
 (4) _PostToggleService                                    3     0      3    3212
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     333
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunToggleService                                     6     3      3      90
                                             40 BANK0      6     3      3
                           _XmitData
 ---------------------------------------------------------------------------------
 (2) _RunSPI32ControlService                              13    10      3     177
                                             40 BANK0     13    10      3
                       _GetNextFrame
                     _SPI32_SendByte
 ---------------------------------------------------------------------------------
 (3) _SPI32_SendByte                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _GetNextFrame                                         4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _RunPatternControlService                             9     6      3   12578
                                             40 BANK0      9     6      3
                       _PausePattern
          _PostPatternControlService
                        _ShowPattern
                        _StopPattern
 ---------------------------------------------------------------------------------
 (3) _StopPattern                                          0     0      0    3726
                        _DotStar_Off
                 _ES_Timer_StopTimer
                       _ResetPattern
 ---------------------------------------------------------------------------------
 (4) _ResetPattern                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _DotStar_Off                                          0     0      0    3682
               _SPI32_TransmitFrames
 ---------------------------------------------------------------------------------
 (3) _ShowPattern                                          0     0      0    5373
                       _DotStar_Show
                 _ES_Timer_InitTimer
                      _UpdatePattern
 ---------------------------------------------------------------------------------
 (4) _UpdatePattern                                       13    11      2     987
                                              9 BANK0     13    11      2
                            ___awmod
                            ___llmod
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     311
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_InitTimer                                   5     3      2     258
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _DotStar_Show                                         2     0      2    4128
                                             38 BANK0      2     0      2
               _SPI32_TransmitFrames
                      _UpdatePattern (ARG)
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _memcpy                                              10     4      6     348
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (5) _SPI32_TransmitFrames                                 6     3      3    3682
                                             32 BANK0      6     3      3
            _PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (4) _PostSPI32ControlService                              3     0      3    3311
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _PostPatternControlService                            3     0      3    3235
                                             29 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (3) _PausePattern                                         0     0      0      44
                 _ES_Timer_StopTimer
 ---------------------------------------------------------------------------------
 (4) _ES_Timer_StopTimer                                   5     5      0      44
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _RunCan_XmitService                                   6     3      3     120
                                             40 BANK0      6     3      3
                    _InitCanHardware
                           _XmitData
 ---------------------------------------------------------------------------------
 (3) _XmitData                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2223
                                             12 BANK0     10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     208
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                              0 BANK0      1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2   13711
                                             33 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                _InitCan_XmitService *
          _InitPatternControlService *
            _InitSPI32ControlService *
                  _InitToggleService *
 ---------------------------------------------------------------------------------
 (2) _InitToggleService                                    4     4      0    3182
                                             29 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _InitSPI32ControlService                              4     4      0    3182
                                             29 BANK0      4     4      0
                   _ES_PostToService
                         _SPI32_Init
 ---------------------------------------------------------------------------------
 (3) _SPI32_Init                                           0     0      0       0
                            _HW_Init
 ---------------------------------------------------------------------------------
 (4) _HW_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitPatternControlService                            4     4      0    3446
                                             29 BANK0      4     4      0
                       _DotStar_Init
                   _ES_PostToService
                       _SetupPattern
 ---------------------------------------------------------------------------------
 (3) _SetupPattern                                         3     0      3     196
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _DotStar_Init                                         4     4      0      68
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _InitCan_XmitService                                  4     4      0    3182
                                             29 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    3137
                                             23 BANK0      6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2441
                                             12 BANK0     11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1355
                                              6 BANK0      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     560
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     174
                                              2 BANK0      2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      76
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     269
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                16    16      0    1082
                                             35 COMRAM    16    16      0
                     _CanRCVResponse
                    _CanXmitResponse
                  _SPI32_EOTResponse
 ---------------------------------------------------------------------------------
 (11) _SPI32_EOTResponse                                   3     3      0     924
                                             32 COMRAM     3     3      0
          i2_PostSPI32ControlService
 ---------------------------------------------------------------------------------
 (12) i2_PostSPI32ControlService                           3     0      3     901
                                             29 COMRAM     3     0      3
                 i2_ES_PostToService
 ---------------------------------------------------------------------------------
 (13) i2_ES_PostToService                                  6     3      3     853
                                             23 COMRAM     6     3      3
                   i2_ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (14) i2_ES_EnQueueFIFO                                   11     6      5     739
                                             12 COMRAM    11     6      5
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (15) i2___wmul                                            6     2      4     209
                                              6 COMRAM     6     2      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (15) i2___awmod                                           6     2      4     256
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) _CanXmitResponse                                     0     0      0     158
               i2_ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (12) i2_ES_Timer_InitTimer                                5     3      2     158
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (11) _CanRCVResponse                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitCan_XmitService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
     _InitPatternControlService *
       _DotStar_Init
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SetupPattern
     _InitSPI32ControlService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
       _SPI32_Init
         _HW_Init
     _InitToggleService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunCan_XmitService *
       _InitCanHardware
       _XmitData
     _RunPatternControlService *
       _PausePattern
         _ES_Timer_StopTimer
       _PostPatternControlService
         _ES_PostToService
           _ES_EnQueueFIFO
             ___awmod
             ___wmul
               ___awmod (ARG)
       _ShowPattern
         _DotStar_Show
           _SPI32_TransmitFrames
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
           _UpdatePattern (ARG)
             ___awmod
             ___llmod
           _memcpy (ARG)
         _ES_Timer_InitTimer
         _UpdatePattern
           ___awmod
           ___llmod
       _StopPattern
         _DotStar_Off
           _SPI32_TransmitFrames
             _PostSPI32ControlService
               _ES_PostToService
                 _ES_EnQueueFIFO
                   ___awmod
                   ___wmul
                     ___awmod (ARG)
         _ES_Timer_StopTimer
         _ResetPattern
     _RunSPI32ControlService *
       _GetNextFrame
       _SPI32_SendByte
     _RunToggleService *
       _XmitData
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostPatternControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostSPI32ControlService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
         _PostToggleService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _CanRCVResponse
   _CanXmitResponse
     i2_ES_Timer_InitTimer
   _SPI32_EOTResponse
     i2_PostSPI32ControlService
       i2_ES_PostToService
         i2_ES_EnQueueFIFO
           i2___awmod
           i2___wmul
             i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      F8       8       96.9%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      B4       6       70.3%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     3B      9D       4       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     33      55       1       90.4%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     29E       9        0.0%
DATA                 0      0     29E      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Nov 13 22:15:31 2016

                   ??__HW_Timer_Init 00BF                  ES_CheckUserEvents@i 00BD  
                __HW_Timer_Init@Rate 00BD                  ___wmul@multiplicand 00C5  
                    ??_UpdatePattern 00C8  RunPatternControlService@ReturnEvent 00E8  
                                l348 0D52                                  l481 069E  
                                l559 11CC                                  l592 1698  
                                l684 1420                __end_of_ES_Initialize 0BBA  
                                _GIE 007F97                                  _ISR 0008  
          __end_of_SPI32_EOTResponse 19BE                         ___awmod@sign 00C2  
            __end_of_Check4Keystroke 1A38                                  prod 000FF3  
                                tosl 000FFD                                  wreg 000FE8  
             ES_EnQueueFIFO@SaveCrit 00D1              ES_EnQueueFIFO@Event2Add 00CB  
                  ?_ES_PostToService 00D4                                 ?_ISR 0001  
         i2ES_EnQueueFIFO@pThisQueue 0016    Pattern_RGBPatterns@PatternConfigs 008D  
                       __CFG_WDT$OFF 000000           ES_Timer_Tick_Resp@NewEvent 0088  
                               l1057 109C                                 l3006 1822  
                               l2400 1526                                 l3016 183A  
                               l2330 0F8E                                 l3050 0B2E  
                               l3042 0AE0                                 l3106 179E  
                               l2340 0FBE                                 l3108 17A6  
                               l2342 0FC4                                 l2350 0FF6  
                               l2334 0F9E                                 l3062 0BB0  
                               l3054 0B32                                 l3046 0AEA  
                               l2502 14D4                                 l2406 1546  
                               l3070 08EC                                 l2432 108A  
                               l2424 1030                                 l2354 100A  
                               l2346 0FE8                                 l2338 0FB2  
                               l3066 0BB6                                 l2426 1040  
                               l2530 041E                                 l2610 089E  
                               l3082 09C2                                 l2428 1046  
                               l2532 045A                                 l2524 03F6  
                               l3076 096E                                 l2374 0C98  
                               l2390 12C0                                 l2526 03FE  
                               l3086 09D8                                 l2632 0AC0  
                               l2720 15E0                                 l2712 15B8  
                               l2536 04A8                                 l2480 0EDA  
                               l2608 0860                                 l2800 1968  
                               l3280 11A2                                 l2546 0534  
                               l2490 0F66                                 l3274 116C  
                               l2628 0A9A                                 l2548 055C  
                               l2900 0572                                 l2804 1970  
                               l3276 117E                                 l3284 11B4  
                               l2910 05A4                                 l2494 0F6C  
                               l3278 1190                                 l2840 0CCC  
                               l2912 05A8                                 l2904 057E  
                               l2850 0CEE                                 l2834 0CA4  
                               l2930 05EA                                 l2828 14C2  
                               l2772 078A                                 l2844 0CDA  
                               l2924 05D4                                 l2782 07CE  
                               l2862 0D10                                 l2846 0CDE  
                               l2942 066E                                 l2918 05BE  
                               l2598 07E8                                 l2776 07A6  
                               l2856 0CFE                                 l2946 0676  
                               l2972 162C                                 l2868 0D20  
                               l2876 0D36                                 l2894 1722  
                               l2990 16A2                                 l2988 169C  
                               STR_1 0372                                 STR_2 038D  
                               STR_3 03A5                                 STR_4 03BC  
                               u1324 0F00                                 u1325 0EF8  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 u1538 1584  
                               u1458 0848                                 u1539 159C  
                               _PIE1 000F9D                                 _PIE3 000FA3  
                               u1928 0998                                 u1929 09B0  
                               u1888 0B8A                                 u1889 0BA6  
                               _SCS1 007E99                     ?_CanXmitResponse 0001  
                 ??_ES_PostToService 00D7                      __end_of_HW_Init 18BC  
                               _main 113E                          ?_ES_DeQueue 00C9  
          Pattern_RGBPatterns@Length 0097                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 indf1 000FE7  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 0056  
                      main@ErrorType 00F7                                 pclat 000FFA  
       __end_ofi2_ES_Timer_InitTimer 13A2                                 prodh 000FF4  
                               prodl 000FF3                                 start 0016  
  __end_of_InitPatternControlService 14C6                      ?_SPI32_SendByte 0001  
                        ?_SPI32_Init 0001                        __CFG_MCLRE$ON 000000  
       InitCan_XmitService@ThisEvent 00DA                         ___param_bank 000010  
               __end_of_GetNextFrame 1966              __end_of_InitCanHardware 1474  
                              ??_ISR 0024                   ES_Run@HighestPrior 00F6  
                __end_of_DotStar_Off 1930                                ?_main 0001  
              __end_of_ES_Timer_Init 1A06                      __end_of___awmod 1014  
                    __end_of___lbmod 15EC             __end_of_RunToggleService 16B0  
                              _T1CON 000FCD                      __end_of___llmod 10AE  
                         _DistList00 036E                                _LATA0 007C48  
                              _LATA1 007C49                                _IRCF0 007E9C  
                              _IRCF1 007E9D                                _IRCF2 007E9E  
                              i2l171 0DDE          ??i2_PostSPI32ControlService 0021  
                              _PORTA 000F80                                _PORTB 000F81  
                              _PORTC 000F82                                _TRISA 000F92  
                              _TRISC 000F94                                _SSPIE 007CEB  
                              _SSPIF 007CF3                        __CFG_PWRT$OFF 000000  
               _SPI32_TransmitFrames 17C4                                _Ready 0091  
    __end_of_InitSPI32ControlService 1726                           _FrameIndex 009C  
              SPI32_SendByte@newByte 00BD                                _putch 1A38  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                     __end_ofi2___wmul 189A  
                              status 000FD8                   __size_ofi2___awmod 0070  
                    __initialization 10AE               ES_GetMSBitSet@LoopCntr 00C6  
         __end_of_ES_CheckUserEvents 15A8                         __end_of_main 11CE  
                  ES_Timer_Init@Rate 00BF                  __end_of_EventQueues 036C  
                             ??_main 00F7                    ?i2_ES_EnQueueFIFO 000D  
                      __activetblptr 000002           __size_of_SPI32_EOTResponse 0016  
                __size_of_ES_DeQueue 0128                      _Nybble2MSBitNum 0351  
              ?_SPI32_TransmitFrames 00DD     __end_of__HW_Process_Pending_Ints 197C  
                   ?_Check4Keystroke 0001                   ??i2_ES_EnQueueFIFO 0012  
               __end_of_DotStar_Init 0ACE                 __end_of_DotStar_Show 1672  
                __size_of_SPI32_Init 0006                               _ADCON1 000FC1  
                          ??_HW_Init 00BD                     __end_of_XmitData 18DC  
                             _CCP1IF 007CF2                               _CANCON 000F6F  
                   ___llmod@dividend 00BD                               _CCPR1H 000FBF  
                             _CCPR1L 000FBE                           _MyPriority 009E  
                             ?_putch 0001                     ??_ES_GetMSBitSet 00BF  
                             i2l3202 0DCA                               i2l3208 0DD4  
                             i2l2450 12D8                               i2l2460 12FA  
                             i2l2462 12FE                               i2l2470 131C  
                             i2l2454 12E4                               i2l2474 132A  
                             i2l2466 1312                               i2l2458 12F2  
                             i2l3196 0DC0                               i2l2586 0ECA  
                             i2l2738 1408                               _INTCON 000FF2  
                             _RXB0IE 007D18                               _RXB0IF 007D20  
                             _ES_Run 08EA                               _TXB0D0 000F46  
                             _TXB0IE 007D1A                               _TXB0IF 007D22  
                             _SSPADD 000FC8                               _SSPBUF 000FC9  
          i2_PostSPI32ControlService 19BE                     ??_CanRCVResponse 0001  
                   ??_ES_EnQueueFIFO 00CE                       _Timer2PostFunc 0321  
                             _Length 009D        SPI32_TransmitFrames@numFrames 00DF  
                      ?_PausePattern 0001                               _Queue0 00A2  
                             _Queue1 00AE                               _Queue2 003D  
                             _Queue3 0049                       _SysTickCounter 0038  
                        _DotStar_Off 1914             ??_RunSPI32ControlService 00E8  
                             ___wmul 1726      InitSPI32ControlService@Priority 00DD  
                          ??___awmod 00C1                            ??___lbmod 00BE  
                   ?_InitCanHardware 0001                    _UpdatePattern$672 00CD  
                          ??___llmod 00C5                               _memcpy 1514  
        __size_of_ES_Timer_InitTimer 0080                               clear_0 1106  
                             clear_1 1112                               clear_2 111E  
                             clear_3 112A                      ___awmod@divisor 00BF  
                      ??_ShowPattern 00E5            ES_Timer_InitTimer@NewTime 00BD  
                    ___awmod@counter 00C1                               _printf 1790  
                        ISR@LastTime 0034                         __pdataCOMRAM 0055  
             ES_InitQueue@pThisQueue 00C0                    __end_ofi2___awmod 1334  
               i2_ES_Timer_InitTimer 1334                         __mediumconst 0000  
                        ISR@NextTime 0036                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                             putch@c 0001                       i2___awmod@sign 0006  
        __size_of_ES_Timer_Tick_Resp 0116                 ES_DeQueue@pThisQueue 00D1  
             UpdatePattern@patternID 00D1              ES_GetMSBitSet@Val2Check 00BD  
        InitCan_XmitService@Priority 00DD                      ___lbmod@divisor 00BD  
                         __accesstop 0060              __end_of__initialization 1130  
             __end_of_Timer2PostFunc 0341                      ___lbmod@counter 00BF  
    RunSPI32ControlService@ThisEvent 00E5                      __CFG_PBADEN$OFF 000000  
  __size_of_RunPatternControlService 00C4            ?_RunPatternControlService 00E5  
              __size_of_GetNextFrame 001A                        ___rparam_used 000001  
        ??_InitPatternControlService 00DA                       ??_PausePattern 00C2  
                        _EventQueues 0360          __size_ofi2_ES_PostToService 006A  
                     __pcstackCOMRAM 0001                         __pidataBANK0 1A2E  
                       __pidataBANK1 175C          __size_of_ES_Timer_StopTimer 004E  
                      ?_ES_InitQueue 00BD     __size_of_InitSPI32ControlService 003A  
            __end_of_Nybble2MSBitNum 0360    _PostSPI32ControlService$intlevel0 18E2  
                      __end_of_putch 1A3A                      _TMR_ActiveFlags 0093  
             ??_SPI32_TransmitFrames 00E0                            ?i2___wmul 0007  
            ES_GetMSBitSet@ReturnVal 00C4                        ?_ResetPattern 0001  
        __end_of_InitCan_XmitService 1826                ?i2_ES_Timer_InitTimer 0001  
                __end_of_ShowPattern 1874                        ??_StopPattern 00E3  
                     _TMR_TimerArray 0060                         _GetNextFrame 194C  
           ES_EnQueueFIFO@pThisQueue 00D2                              ??_putch 00BD  
           __HW_Process_Pending_Ints 1966                           __pbssBANK0 0060  
                         __pbssBANK1 0100                           __pbssBANK2 0200  
                   ??_SPI32_SendByte 00BD                              ?_ES_Run 0001  
                       ??_ES_DeQueue 00CD          __size_of_RunCan_XmitService 0028  
                       ??_SPI32_Init 00BD             ?_PostSPI32ControlService 00DA  
          __size_of_ES_PostToService 0076                       ??_ES_InitQueue 00C0  
                            ?___wmul 00C3      __size_of_RunSPI32ControlService 0142  
                            _CCP1CON 000FBD                            ?_XmitData 0001  
                            ?_memcpy 00BD                              _ECANCON 000F77  
                            _CANSTAT 000F6E                              ?_printf 00BD  
              __size_of_DotStar_Init 00F0                       ??_ResetPattern 00BD  
              __end_of_UpdatePattern 056A                __size_of_DotStar_Show 0042  
                         ??i2___wmul 000B                    ?_RunToggleService 00E5  
          _InitPatternControlService 1474                   __end_of_ES_DeQueue 07D4  
             i2ES_EnQueueFIFO@pBlock 000D                ES_Timer_StopTimer@Num 00C1  
                 ??_RunToggleService 00E8                              _RXB0CON 000F60  
                            _TXB0DLC 000F45                              _HW_Init 189A  
                            _SSPCON1 000FC6                   __end_of_SPI32_Init 1A2E  
                            _SSPSTAT 000FC7     SPI32_ControlService@CurrentState 0098  
                    __size_of_ES_Run 00F4                  __end_of_StopPattern 1914  
                        _PixelFrames 0100              ToggleService@MyPriority 009A  
                      ?_SetupPattern 00BD               __size_of_ES_Initialize 00EC  
                            __Hparam 0000                              __Lparam 0000  
           __size_of_CanXmitResponse 0016   i2PostSPI32ControlService@ThisEvent 001E  
   PostSPI32ControlService@ThisEvent 00DA     InitSPI32ControlService@ThisEvent 00DA  
          i2ES_EnQueueFIFO@Event2Add 000F              UpdatePattern@brightness 00CC  
                       _DotStar_Init 09DE                         _DotStar_Show 1630  
         ?_PostPatternControlService 00DA                              ___awmod 0F72  
                            ___lbmod 15A8                      __size_of___wmul 0036  
                            ___llmod 1014   __size_ofi2_PostSPI32ControlService 0016  
                       __psmallconst 0300                           ??_XmitData 00BD  
              ES_Timer_InitTimer@Num 00C1           i2ES_PostToService@TheEvent 0018  
                            __pcinit 10AE                      __size_of_memcpy 004A  
                            __ramtop 0300                          _ShowPattern 184E  
                            __ptext0 113E                              __ptext1 1790  
                            __ptext2 1A38                              __ptext3 08EA  
                            __ptext4 1966                              __ptext5 07D4  
                            __ptext6 18DC                              __ptext7 197C  
                            __ptext8 1992                              __ptext9 0ECE  
           i2ES_EnQueueFIFO@SaveCrit 0015                      __size_of_printf 0034  
             ??i2_ES_Timer_InitTimer 0003                    _PostToggleService 1992  
                       __size_of_ISR 0E12                         _FramePointer 008F  
            __size_of__HW_Timer_Init 001C                     ___awmod@dividend 00BD  
                 _ES_CheckUserEvents 155E                   ?_PostToggleService 00DA  
                    ES_Run@ThisEvent 00BA                 __end_of_PausePattern 1A20  
          InitToggleService@Priority 00DD               _RunSPI32ControlService 056A  
                     __pintcode_body 0D60                 end_of_initialization 1130  
                ?_ES_CheckUserEvents 0001                  ??_PostToggleService 00DD  
                            memcpy@d 00C3                              memcpy@n 00C1  
                            memcpy@s 00C5            __size_ofi2_ES_EnQueueFIFO 00B4  
                      __Lmediumconst 0000                              int_func 0D60  
                i2___wmul@multiplier 0007      __end_of_PostSPI32ControlService 18F8  
       ES_PostToService@WhichService 00D9                       ??_SetupPattern 00C0  
             __size_of_ES_Timer_Init 000E             DotStar_Show@pixelPointer 00E3  
                       ?_DotStar_Off 0001                              printf@c 00C1  
                            printf@f 00BD              _InitSPI32ControlService 16EC  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE    __end_of_PostPatternControlService 1992  
               ??_ES_CheckUserEvents 00BD            __end_of_PostToggleService 19A8  
                      _ES_Initialize 0ACE     __end_of_RunPatternControlService 0D60  
                   ___lbmod@dividend 00BE    RunPatternControlService@ThisEvent 00E5  
 PostPatternControlService@ThisEvent 00DA   InitPatternControlService@ThisEvent 00DA  
                          _TRISBbits 000F93                 __end_of_ES_EventList 036E  
                        _StopPattern 18F8                 __end_of_ES_InitQueue 16EC  
                          i2___awmod 12C4                       ES_Initialize@i 00E0  
                        ___lbmod@rem 00C0             __size_of_Check4Keystroke 0004  
         PostToggleService@ThisEvent 00DA            RunToggleService@ThisEvent 00E5  
                     __end_of_ES_Run 09DE                 __end_of_ResetPattern 1A18  
        RunCan_XmitService@ThisEvent 00E5                            _GenColors 0180  
                 __end_of_DistList00 0372                     _ES_PostToService 124E  
         __end_of_ES_Timer_InitTimer 124E                 __end_of_ServDescList 0351  
                     __end_of___wmul 175C                        __pidataCOMRAM 1A3A  
                  ??_CanXmitResponse 0006                       __end_of_memcpy 155E  
              SetupPattern@numPixels 00BF                       ?_ES_Initialize 00DE  
                          _OffFrames 0200           ??__HW_Process_Pending_Ints 00E1  
                      _ES_Timer_Init 19F8                     i2___wmul@product 000B  
                     __end_of_printf 17C4             __size_of_InitCanHardware 0068  
         __end_of_ES_Timer_Tick_Resp 08EA                  start_initialization 10AE  
                        __end_of_ISR 0E1A                    __size_ofi2___wmul 0026  
                       _CurrentFrame 0080                         _CurrentState 009B  
                         ?i2___awmod 0001                          _CANSTATbits 000F6E  
 __size_of_InitPatternControlService 0052                             ??_ES_Run 00F2  
                   __CFG_OSC$IRCIO67 000000                      ___llmod@divisor 00C1  
                  _InitToggleService 15EC                            _TickCount 00A1  
                    ___llmod@counter 00C5                            _NumFrames 009F  
         __end_ofi2_ES_PostToService 140C            ??_InitSPI32ControlService 00DA  
         __end_of_ES_Timer_StopTimer 1514                            _NumPixels 003C  
                 ?_InitToggleService 0001              __size_of_ES_GetMSBitSet 00A4  
                          _TestColor 0084                             ??___wmul 00C7  
            i2ES_Timer_InitTimer@Num 0005                          __pdataBANK0 00F8  
                        __pdataBANK1 0180                             ??_memcpy 00C3  
                ??_InitToggleService 00DA           __size_of_PostToggleService 0016  
            __size_of_CanRCVResponse 0008              __size_of_ES_EnQueueFIFO 00E2  
                           ??_printf 00BF            SPI32_EOTResponse@EOTevent 0021  
              __size_of_PausePattern 0008                       ?_ES_Timer_Init 00BF  
                  __size_of_XmitData 0020                       __HW_Timer_Init 1930  
               __end_of_SetupPattern 19F8                          __pbssCOMRAM 0034  
   __size_of_PostSPI32ControlService 001C        __size_of_SPI32_TransmitFrames 0032  
                      __pcstackBANK0 00BD                          _BRGCON1bits 000F70  
                        _BRGCON2bits 000F71                   ES_InitQueue@pBlock 00BD  
                        _BRGCON3bits 000F72    RunPatternControlService@testEvent 00EB  
                           ?_HW_Init 0001             _RunPatternControlService 0C9C  
       __size_of_InitCan_XmitService 0030           __end_of_RunCan_XmitService 184E  
          __end_of_InitToggleService 1630     SPI32_TransmitFrames@framePointer 00DD  
                   i2_ES_EnQueueFIFO 0E1A            __size_of_RunToggleService 003E  
                      __PRIMASK_temp 003A                    ??_Check4Keystroke 00BD  
                       _PausePattern 1A18                            __pintcode 0008  
                           ?___awmod 00BD                             ?___lbmod 00BD  
                           ?___llmod 00BD          ??_PostPatternControlService 00DD  
               __size_of_DotStar_Off 001C          i2ES_Timer_InitTimer@NewTime 0001  
                    ??_ES_Initialize 00E0             ES_PostToService@TheEvent 00D4  
             __end_of__HW_Timer_Init 194C                         ?_ShowPattern 0001  
                        __smallconst 0300                __size_of_ES_InitQueue 003C  
            ?_RunSPI32ControlService 00E5                          ??i2___awmod 0005  
        RunToggleService@ReturnEvent 00E8                       __size_of_putch 0002  
              __size_of_ResetPattern 0008                 ES_Initialize@NewRate 00DE  
                  ??_InitCanHardware 00BD            ES_GetMSBitSet@Nybble2Test 00C5  
                 _PatternStepCounter 00A0                       ___wmul@product 00C7  
             __size_of_UpdatePattern 019E                DotStar_Init@numPixels 00BF  
                           _RXF0SIDH 000F00                         _ES_EventList 036C  
                           _RXF0SIDL 000F01              __size_of_SPI32_SendByte 000A  
                           _TXB0SIDH 000F41                             _TXB0SIDL 000F42  
                       _ES_InitQueue 16B0                             _RXM0SIDH 000F18  
                           _RXM0SIDL 000F19                      ??_ES_Timer_Init 00C1  
     i2ES_PostToService@WhichService 001D                      ?__HW_Timer_Init 00BD  
                  ___wmul@multiplier 00C3       __end_of_RunSPI32ControlService 06AC  
                           i2___wmul 1874                         _ResetPattern 1A10  
      __size_ofi2_ES_Timer_InitTimer 006E                   ES_DeQueue@SaveCrit 00CF  
               ES_EnQueueFIFO@pBlock 00C9             __end_of_ES_PostToService 12C4  
                       ?_StopPattern 0001            _PostPatternControlService 197C  
                          copy_data0 10C2                            copy_data1 10E2  
                   __size_of_HW_Init 0022                       _BitNum2SetMask 0301  
                     _PatternConfigs 00F8                         _ServDescList 0341  
                 i2___awmod@dividend 0001           __size_of_InitToggleService 0044  
                       _PixelPattern 0280                      _CanXmitResponse 19D4  
                           __Hrparam 0000                       _ES_GetMSBitSet 0ECE  
                           __Lrparam 0000    RunSPI32ControlService@ReturnEvent 00EF  
                   __size_of___awmod 00A2                     __size_of___lbmod 0044  
                           _XmitData 18BC                __size_of_SetupPattern 000E  
              i2___wmul@multiplicand 0009          __size_of_ES_CheckUserEvents 004A  
                   __size_of___llmod 009A                       _CanRCVResponse 1A20  
                     _ES_EnQueueFIFO 0BBA           ?i2_PostSPI32ControlService 001E  
            _PostSPI32ControlService 18DC                        _UpdatePattern 03CC  
                   XmitData@DataByte 00BD                   _ES_Timer_InitTimer 11CE  
             __end_of_BitNum2SetMask 0321                             __ptext10 1826  
                           __ptext11 056A                             __ptext20 03CC  
                           __ptext12 0C9C                             __ptext21 1014  
                           __ptext13 1672                             __ptext30 06AC  
                           __ptext22 11CE                             __ptext14 1A06  
                           __ptext31 15A8                             __ptext23 1630  
                           __ptext15 194C                             __ptext40 189A  
                           __ptext32 155E                             __ptext24 1514  
                           __ptext16 18F8                             __ptext41 19EA  
                           __ptext33 1A34                             __ptext25 17C4  
                           __ptext17 1A10                             __ptext42 09DE  
                           __ptext34 0ACE                             __ptext26 1A18  
                           __ptext18 1914                             __ptext51 19A8  
                           __ptext43 124E                             __ptext35 17F6  
                           __ptext27 14C6                             __ptext19 184E  
                           __ptext60 0000                             __ptext52 19BE  
                           __ptext44 0BBA                             __ptext36 16EC  
                           __ptext28 18BC                             __ptext53 13A2  
                           __ptext45 1726                             __ptext37 1474  
                           __ptext29 140C                             __ptext54 0E1A  
                           __ptext46 0F72                             __ptext38 15EC  
                           __ptext55 1874                             __ptext47 19F8  
                           __ptext39 1A28                             __ptext56 12C4  
                           __ptext48 1930                             __ptext57 19D4  
                           __ptext49 16B0                             __ptext58 1334  
                           __ptext59 1A20                        ?_GetNextFrame 00BD  
  ES_Timer_Tick_Resp@NeedsProcessing 008B                       UpdatePattern@i 00D2  
                ?_ES_Timer_InitTimer 00BD                        __size_of_main 0090  
                   _RunToggleService 1672                   _ES_Timer_Tick_Resp 07D4  
             __end_of_ES_GetMSBitSet 0F72                         _SetupPattern 19EA  
         InitToggleService@ThisEvent 00DA                  ?_ES_Timer_Tick_Resp 0001  
             __end_of_CanRCVResponse 1A28               __end_of_ES_EnQueueFIFO 0C9C  
                           int$flags 0056                  SetupPattern@configs 00BD  
                _InitCan_XmitService 17F6                 ??_ES_Timer_InitTimer 00BF  
     SPI32_ControlService@MyPriority 0099                        _MaxBrightness 0055  
                  ES_DeQueue@NumLeft 00D0                   i2_ES_PostToService 13A2  
                      DotStar_Init@i 00C0             __end_ofi2_ES_EnQueueFIFO 0ECE  
                 _ES_Timer_StopTimer 14C6                       ?_UpdatePattern 00C6  
         ??_RunPatternControlService 00E8                          _RXB0CONbits 000F60  
                  i2___awmod@divisor 0003                    i2___awmod@counter 0005  
               __size_of_ShowPattern 0026    __end_ofi2_PostSPI32ControlService 19D4  
                           memcpy@d1 00BD                             memcpy@s1 00BF  
                ?i2_ES_PostToService 0018                       ??_GetNextFrame 00C1  
               ??_ES_Timer_Tick_Resp 00DD                  ?_ES_Timer_StopTimer 0001  
      RunCan_XmitService@ReturnEvent 00E8                 ?_InitCan_XmitService 0001  
            __end_of_CanXmitResponse 19EA                      _Check4Keystroke 1A34  
                           intlevel2 0000            Can_XmitService@MyPriority 0095  
                         _ES_DeQueue 06AC    __size_of__HW_Process_Pending_Ints 0016  
          ?__HW_Process_Pending_Ints 0001                          _TXB0CONbits 000F40  
                    ?_ES_GetMSBitSet 00BD         __end_of_SPI32_TransmitFrames 17F6  
               ??i2_ES_PostToService 001B                           _SPI32_Init 1A28  
                      ?_DotStar_Init 0001                        ?_DotStar_Show 00E3  
               ??_ES_Timer_StopTimer 00BD                       _SPI32_SendByte 1A06  
ES_Timer_Tick_Resp@NextTimer2Process 0096                   _RunCan_XmitService 1826  
                           printf@ap 00BF                      ?_CanRCVResponse 0001  
                    ?_ES_EnQueueFIFO 00C9            ??_PostSPI32ControlService 00DD  
                   ES_DeQueue@pBlock 00C9                  ?_RunCan_XmitService 00E5  
                    _InitCanHardware 140C    SPI32_TransmitFrames@transmitEvent 00E0  
  InitPatternControlService@Priority 00DD                    _SPI32_EOTResponse 19A8  
             ES_DeQueue@pReturnEvent 00CB                ES_InitQueue@BlockSize 00BF  
                 ?_SPI32_EOTResponse 0001                ??_InitCan_XmitService 00DA  
               __size_of_StopPattern 001C             ?_InitSPI32ControlService 0001  
               ??_RunCan_XmitService 00E8                  ??_SPI32_EOTResponse 0021  
         ?_InitPatternControlService 0001   __size_of_PostPatternControlService 0016  
             __end_of_SPI32_SendByte 1A10                       ??_DotStar_Init 00BD  
                      ??_DotStar_Off 00E3                       ??_DotStar_Show 00E5  
