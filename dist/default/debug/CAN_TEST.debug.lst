

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Nov 14 01:00:57 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    44                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    45  0000                     
    46                           	psect	smallconst
    47  000300                     __psmallconst:
    48                           	opt stack 0
    49  000300  00                 	db	0
    50  000301                     _BitNum2SetMask:
    51                           	opt stack 0
    52  000301  0001               	dw	1
    53  000303  0002               	dw	2
    54  000305  0004               	dw	4
    55  000307  0008               	dw	8
    56  000309  0010               	dw	16
    57  00030B  0020               	dw	32
    58  00030D  0040               	dw	64
    59  00030F  0080               	dw	128
    60  000311  0100               	dw	256
    61  000313  0200               	dw	512
    62  000315  0400               	dw	1024
    63  000317  0800               	dw	2048
    64  000319  1000               	dw	4096
    65  00031B  2000               	dw	8192
    66  00031D  4000               	dw	16384
    67  00031F  8000               	dw	32768
    68  000321                     __end_of_BitNum2SetMask:
    69                           	opt stack 0
    70  000321                     _Timer2PostFunc:
    71                           	opt stack 0
    72  000321  00                 	db	0
    73  000322  00                 	db	0
    74  000323  00                 	db	0
    75  000324  00                 	db	0
    76  000325  2C                 	db	low _PostToggleService
    77  000326  0D                 	db	high _PostToggleService
    78  000327  00                 	db	0
    79  000328  00                 	db	0
    80  000329  00                 	db	0
    81  00032A  00                 	db	0
    82  00032B  00                 	db	0
    83  00032C  00                 	db	0
    84  00032D  00                 	db	0
    85  00032E  00                 	db	0
    86  00032F  00                 	db	0
    87  000330  00                 	db	0
    88  000331  00                 	db	0
    89  000332  00                 	db	0
    90  000333  00                 	db	0
    91  000334  00                 	db	0
    92  000335  00                 	db	0
    93  000336  00                 	db	0
    94  000337  00                 	db	0
    95  000338  00                 	db	0
    96  000339  00                 	db	0
    97  00033A  00                 	db	0
    98  00033B  00                 	db	0
    99  00033C  00                 	db	0
   100  00033D  00                 	db	0
   101  00033E  00                 	db	0
   102  00033F  00                 	db	0
   103  000340  00                 	db	0
   104  000341                     __end_of_Timer2PostFunc:
   105                           	opt stack 0
   106  000341                     _Nybble2MSBitNum:
   107                           	opt stack 0
   108  000341  00                 	db	0
   109  000342  01                 	db	1
   110  000343  01                 	db	1
   111  000344  02                 	db	2
   112  000345  02                 	db	2
   113  000346  02                 	db	2
   114  000347  02                 	db	2
   115  000348  03                 	db	3
   116  000349  03                 	db	3
   117  00034A  03                 	db	3
   118  00034B  03                 	db	3
   119  00034C  03                 	db	3
   120  00034D  03                 	db	3
   121  00034E  03                 	db	3
   122  00034F  03                 	db	3
   123  000350                     __end_of_Nybble2MSBitNum:
   124                           	opt stack 0
   125  000350                     _ServDescList:
   126                           	opt stack 0
   127  000350  D6                 	db	low _InitCan_XmitService
   128  000351  0B                 	db	high _InitCan_XmitService
   129  000352  F4                 	db	low _RunCan_XmitService
   130  000353  0C                 	db	high _RunCan_XmitService
   131  000354  1E                 	db	low _InitToggleService
   132  000355  0B                 	db	high _InitToggleService
   133  000356  2E                 	db	low _RunToggleService
   134  000357  0C                 	db	high _RunToggleService
   135  000358                     __end_of_ServDescList:
   136                           	opt stack 0
   137  000358                     _EventQueues:
   138                           	opt stack 0
   139  000358  40                 	db	low _Queue0
   140  000359  00                 	db	high _Queue0
   141  00035A  04                 	db	4
   142  00035B  80                 	db	low _Queue1
   143  00035C  00                 	db	high _Queue1
   144  00035D  04                 	db	4
   145  00035E                     __end_of_EventQueues:
   146                           	opt stack 0
   147  00035E                     _ES_EventList:
   148                           	opt stack 0
   149  00035E  74                 	db	low _Check4Keystroke
   150  00035F  0D                 	db	high _Check4Keystroke
   151  000360                     __end_of_ES_EventList:
   152                           	opt stack 0
   153  0000                     _RXF0SIDH	set	3840
   154  0000                     _RXF0SIDL	set	3841
   155  0000                     _RXM0SIDH	set	3864
   156  0000                     _RXM0SIDL	set	3865
   157  0000                     _TXB0CONbits	set	3904
   158  0000                     _TXB0D0	set	3910
   159  0000                     _TXB0DLC	set	3909
   160  0000                     _TXB0SIDH	set	3905
   161  0000                     _TXB0SIDL	set	3906
   162  0000                     _ADCON1	set	4033
   163  0000                     _BRGCON1bits	set	3952
   164  0000                     _BRGCON2bits	set	3953
   165  0000                     _BRGCON3bits	set	3954
   166  0000                     _CANCON	set	3951
   167  0000                     _CANSTATbits	set	3950
   168  0000                     _CCP1CON	set	4029
   169  0000                     _CCPR1H	set	4031
   170  0000                     _CCPR1L	set	4030
   171  0000                     _ECANCON	set	3959
   172  0000                     _INTCON	set	4082
   173  0000                     _LATA	set	3977
   174  0000                     _LATB	set	3978
   175  0000                     _PIE1	set	3997
   176  0000                     _PIE3	set	4003
   177  0000                     _PORTA	set	3968
   178  0000                     _PORTB	set	3969
   179  0000                     _RXB0CONbits	set	3936
   180  0000                     _T1CON	set	4045
   181  0000                     _TRISA	set	3986
   182  0000                     _TRISBbits	set	3987
   183  0000                     _CCP1IF	set	31986
   184  0000                     _GIE	set	32663
   185  0000                     _IRCF0	set	32412
   186  0000                     _IRCF1	set	32413
   187  0000                     _IRCF2	set	32414
   188  0000                     _LATA0	set	31816
   189  0000                     _LATA1	set	31817
   190  0000                     _RXB0IE	set	32024
   191  0000                     _RXB0IF	set	32032
   192  0000                     _SCS1	set	32409
   193  0000                     _TXB0IE	set	32026
   194  0000                     _TXB0IF	set	32034
   195  000360                     STR_1:
   196  000360  46                 	db	70	;'F'
   197  000361  61                 	db	97	;'a'
   198  000362  69                 	db	105	;'i'
   199  000363  6C                 	db	108	;'l'
   200  000364  65                 	db	101	;'e'
   201  000365  64                 	db	100	;'d'
   202  000366  20                 	db	32
   203  000367  6F                 	db	111	;'o'
   204  000368  6E                 	db	110	;'n'
   205  000369  20                 	db	32
   206  00036A  61                 	db	97	;'a'
   207  00036B  74                 	db	116	;'t'
   208  00036C  74                 	db	116	;'t'
   209  00036D  65                 	db	101	;'e'
   210  00036E  6D                 	db	109	;'m'
   211  00036F  70                 	db	112	;'p'
   212  000370  74                 	db	116	;'t'
   213  000371  20                 	db	32
   214  000372  74                 	db	116	;'t'
   215  000373  6F                 	db	111	;'o'
   216  000374  20                 	db	32
   217  000375  50                 	db	80	;'P'
   218  000376  6F                 	db	111	;'o'
   219  000377  73                 	db	115	;'s'
   220  000378  74                 	db	116	;'t'
   221  000379  0A                 	db	10
   222  00037A  00                 	db	0
   223  00037B                     STR_2:
   224  00037B  46                 	db	70	;'F'
   225  00037C  61                 	db	97	;'a'
   226  00037D  69                 	db	105	;'i'
   227  00037E  6C                 	db	108	;'l'
   228  00037F  65                 	db	101	;'e'
   229  000380  64                 	db	100	;'d'
   230  000381  20                 	db	32
   231  000382  6F                 	db	111	;'o'
   232  000383  6E                 	db	110	;'n'
   233  000384  20                 	db	32
   234  000385  4E                 	db	78	;'N'
   235  000386  55                 	db	85	;'U'
   236  000387  4C                 	db	76	;'L'
   237  000388  4C                 	db	76	;'L'
   238  000389  20                 	db	32
   239  00038A  70                 	db	112	;'p'
   240  00038B  6F                 	db	111	;'o'
   241  00038C  69                 	db	105	;'i'
   242  00038D  6E                 	db	110	;'n'
   243  00038E  74                 	db	116	;'t'
   244  00038F  65                 	db	101	;'e'
   245  000390  72                 	db	114	;'r'
   246  000391  0A                 	db	10
   247  000392  00                 	db	0
   248  000393                     STR_3:
   249  000393  46                 	db	70	;'F'
   250  000394  61                 	db	97	;'a'
   251  000395  69                 	db	105	;'i'
   252  000396  6C                 	db	108	;'l'
   253  000397  65                 	db	101	;'e'
   254  000398  64                 	db	100	;'d'
   255  000399  20                 	db	32
   256  00039A  49                 	db	73	;'I'
   257  00039B  6E                 	db	110	;'n'
   258  00039C  69                 	db	105	;'i'
   259  00039D  74                 	db	116	;'t'
   260  00039E  69                 	db	105	;'i'
   261  00039F  61                 	db	97	;'a'
   262  0003A0  6C                 	db	108	;'l'
   263  0003A1  69                 	db	105	;'i'
   264  0003A2  7A                 	db	122	;'z'
   265  0003A3  61                 	db	97	;'a'
   266  0003A4  74                 	db	116	;'t'
   267  0003A5  69                 	db	105	;'i'
   268  0003A6  6F                 	db	111	;'o'
   269  0003A7  6E                 	db	110	;'n'
   270  0003A8  0A                 	db	10
   271  0003A9  00                 	db	0
   272  0003AA                     STR_4:
   273  0003AA  4F                 	db	79	;'O'
   274  0003AB  74                 	db	116	;'t'
   275  0003AC  68                 	db	104	;'h'
   276  0003AD  65                 	db	101	;'e'
   277  0003AE  72                 	db	114	;'r'
   278  0003AF  20                 	db	32
   279  0003B0  46                 	db	70	;'F'
   280  0003B1  61                 	db	97	;'a'
   281  0003B2  69                 	db	105	;'i'
   282  0003B3  6C                 	db	108	;'l'
   283  0003B4  75                 	db	117	;'u'
   284  0003B5  72                 	db	114	;'r'
   285  0003B6  65                 	db	101	;'e'
   286  0003B7  0A                 	db	10
   287  0003B8  00                 	db	0
   288                           
   289                           ; #config settings
   290  0003B9  00                 	db	0	; dummy byte at the end
   291  0000                     
   292                           	psect	cinit
   293  000C82                     __pcinit:
   294                           	opt stack 0
   295  000C82                     start_initialization:
   296                           	opt stack 0
   297  000C82                     __initialization:
   298                           	opt stack 0
   299                           
   300                           ; Clear objects allocated to BANK0 (44 bytes)
   301  000C82  EE00  F060         	lfsr	0,__pbssBANK0
   302  000C86  0E2C               	movlw	44
   303  000C88                     clear_0:
   304  000C88  6AEE               	clrf	postinc0,c
   305  000C8A  06E8               	decf	wreg,f,c
   306  000C8C  E1FD               	bnz	clear_0
   307                           
   308                           ; Clear objects allocated to COMRAM (36 bytes)
   309  000C8E  EE00  F02B         	lfsr	0,__pbssCOMRAM
   310  000C92  0E24               	movlw	36
   311  000C94                     clear_1:
   312  000C94  6AEE               	clrf	postinc0,c
   313  000C96  06E8               	decf	wreg,f,c
   314  000C98  E1FD               	bnz	clear_1
   315  000C9A                     end_of_initialization:
   316                           	opt stack 0
   317  000C9A                     __end_of__initialization:
   318                           	opt stack 0
   319  000C9A  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   320  000C9C  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   321  000C9E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   322  000CA0  6EF8               	movwf	tblptru,c
   323  000CA2  0100               	movlb	0
   324  000CA4  EF73  F004         	goto	_main	;jump to C main() function
   325                           tblptru	equ	0xFF8
   326                           postinc0	equ	0xFEE
   327                           wreg	equ	0xFE8
   328                           
   329                           	psect	bssCOMRAM
   330  00002B                     __pbssCOMRAM:
   331                           	opt stack 0
   332  00002B                     ES_Timer_Tick_Resp@NewEvent:
   333                           	opt stack 0
   334  00002B                     	ds	3
   335  00002E                     ES_Timer_Tick_Resp@NeedsProcessing:
   336                           	opt stack 0
   337  00002E                     	ds	2
   338  000030                     ISR@LastTime:
   339                           	opt stack 0
   340  000030                     	ds	2
   341  000032                     ISR@NextTime:
   342                           	opt stack 0
   343  000032                     	ds	2
   344  000034                     _Ready:
   345                           	opt stack 0
   346  000034                     	ds	2
   347  000036                     _SysTickCounter:
   348                           	opt stack 0
   349  000036                     	ds	2
   350  000038                     _TMR_ActiveFlags:
   351                           	opt stack 0
   352  000038                     	ds	2
   353  00003A                     __PRIMASK_temp:
   354                           	opt stack 0
   355  00003A                     	ds	2
   356  00003C                     Can_XmitService@MyPriority:
   357                           	opt stack 0
   358  00003C                     	ds	1
   359  00003D                     ES_Timer_Tick_Resp@NextTimer2Process:
   360                           	opt stack 0
   361  00003D                     	ds	1
   362  00003E                     _MyPriority:
   363                           	opt stack 0
   364  00003E                     	ds	1
   365  00003F                     _TickCount:
   366                           	opt stack 0
   367  00003F                     	ds	1
   368  000040                     _Queue0:
   369                           	opt stack 0
   370  000040                     	ds	12
   371  00004C                     ES_Run@ThisEvent:
   372                           	opt stack 0
   373  00004C                     	ds	3
   374                           tblptru	equ	0xFF8
   375                           postinc0	equ	0xFEE
   376                           wreg	equ	0xFE8
   377                           
   378                           	psect	bssBANK0
   379  000060                     __pbssBANK0:
   380                           	opt stack 0
   381  000060                     _TMR_TimerArray:
   382                           	opt stack 0
   383  000060                     	ds	32
   384  000080                     _Queue1:
   385                           	opt stack 0
   386  000080                     	ds	12
   387                           tblptru	equ	0xFF8
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           
   391                           	psect	cstackBANK0
   392  00008C                     __pcstackBANK0:
   393                           	opt stack 0
   394  00008C                     ??_ES_PostToService:
   395                           
   396                           ; 1 bytes @ 0x0
   397  00008C                     	ds	2
   398  00008E                     ES_PostToService@WhichService:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0x2
   402  00008E                     	ds	1
   403  00008F                     InitToggleService@ThisEvent:
   404                           	opt stack 0
   405  00008F                     PostToggleService@ThisEvent:
   406                           	opt stack 0
   407  00008F                     InitCan_XmitService@ThisEvent:
   408                           	opt stack 0
   409                           
   410                           ; 3 bytes @ 0x3
   411  00008F                     	ds	3
   412  000092                     ??_ES_Timer_Tick_Resp:
   413  000092                     InitToggleService@Priority:
   414                           	opt stack 0
   415  000092                     InitCan_XmitService@Priority:
   416                           	opt stack 0
   417                           
   418                           ; 1 bytes @ 0x6
   419  000092                     	ds	1
   420  000093                     ES_Initialize@NewRate:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x7
   424  000093                     	ds	2
   425  000095                     ES_Initialize@i:
   426                           	opt stack 0
   427                           
   428                           ; 1 bytes @ 0x9
   429  000095                     	ds	1
   430  000096                     ??_ES_Run:
   431                           
   432                           ; 1 bytes @ 0xA
   433  000096                     	ds	4
   434  00009A                     ES_Run@HighestPrior:
   435                           	opt stack 0
   436                           
   437                           ; 1 bytes @ 0xE
   438  00009A                     	ds	1
   439  00009B                     main@ErrorType:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0xF
   443  00009B                     	ds	1
   444                           tblptru	equ	0xFF8
   445                           postinc0	equ	0xFEE
   446                           wreg	equ	0xFE8
   447                           
   448                           	psect	cstackCOMRAM
   449  000001                     __pcstackCOMRAM:
   450                           	opt stack 0
   451  000001                     ??_ISR:
   452  000001                     
   453                           ; 1 bytes @ 0x0
   454  000001                     	ds	16
   455  000011                     ?_printf:
   456                           	opt stack 0
   457  000011                     ?___awmod:
   458                           	opt stack 0
   459  000011                     ES_CheckUserEvents@i:
   460                           	opt stack 0
   461  000011                     XmitData@DataByte:
   462                           	opt stack 0
   463  000011                     ___lbmod@divisor:
   464                           	opt stack 0
   465  000011                     ES_GetMSBitSet@Val2Check:
   466                           	opt stack 0
   467  000011                     __HW_Timer_Init@Rate:
   468                           	opt stack 0
   469  000011                     ES_InitQueue@pBlock:
   470                           	opt stack 0
   471  000011                     printf@f:
   472                           	opt stack 0
   473  000011                     ___awmod@dividend:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x10
   477  000011                     	ds	1
   478  000012                     ?_RunCan_XmitService:
   479                           	opt stack 0
   480  000012                     ?_RunToggleService:
   481                           	opt stack 0
   482  000012                     ___lbmod@dividend:
   483                           	opt stack 0
   484  000012                     RunToggleService@ThisEvent:
   485                           	opt stack 0
   486  000012                     RunCan_XmitService@ThisEvent:
   487                           	opt stack 0
   488                           
   489                           ; 3 bytes @ 0x11
   490  000012                     	ds	1
   491  000013                     ??_ES_GetMSBitSet:
   492  000013                     ES_InitQueue@BlockSize:
   493                           	opt stack 0
   494  000013                     ___lbmod@counter:
   495                           	opt stack 0
   496  000013                     ES_Timer_Init@Rate:
   497                           	opt stack 0
   498  000013                     printf@ap:
   499                           	opt stack 0
   500  000013                     ___awmod@divisor:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x12
   504  000013                     	ds	1
   505  000014                     ___lbmod@rem:
   506                           	opt stack 0
   507  000014                     ES_InitQueue@pThisQueue:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x13
   511  000014                     	ds	1
   512  000015                     printf@c:
   513                           	opt stack 0
   514  000015                     ___awmod@counter:
   515                           	opt stack 0
   516  000015                     RunToggleService@ReturnEvent:
   517                           	opt stack 0
   518  000015                     RunCan_XmitService@ReturnEvent:
   519                           	opt stack 0
   520                           
   521                           ; 3 bytes @ 0x14
   522  000015                     	ds	1
   523  000016                     ___awmod@sign:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x15
   527  000016                     	ds	1
   528  000017                     ?___wmul:
   529                           	opt stack 0
   530  000017                     ___wmul@multiplier:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x16
   534  000017                     	ds	1
   535  000018                     ES_GetMSBitSet@ReturnVal:
   536                           	opt stack 0
   537                           
   538                           ; 1 bytes @ 0x17
   539  000018                     	ds	1
   540  000019                     ES_GetMSBitSet@Nybble2Test:
   541                           	opt stack 0
   542  000019                     ___wmul@multiplicand:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x18
   546  000019                     	ds	1
   547  00001A                     ES_GetMSBitSet@LoopCntr:
   548                           	opt stack 0
   549                           
   550                           ; 1 bytes @ 0x19
   551  00001A                     	ds	1
   552  00001B                     ___wmul@product:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x1A
   556  00001B                     	ds	2
   557  00001D                     ES_EnQueueFIFO@pBlock:
   558                           	opt stack 0
   559  00001D                     ES_DeQueue@pBlock:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x1C
   563  00001D                     	ds	2
   564  00001F                     ES_DeQueue@pReturnEvent:
   565                           	opt stack 0
   566  00001F                     ES_EnQueueFIFO@Event2Add:
   567                           	opt stack 0
   568                           
   569                           ; 3 bytes @ 0x1E
   570  00001F                     	ds	2
   571  000021                     ??_ES_DeQueue:
   572                           
   573                           ; 1 bytes @ 0x20
   574  000021                     	ds	1
   575  000022                     ??_ES_EnQueueFIFO:
   576                           
   577                           ; 1 bytes @ 0x21
   578  000022                     	ds	1
   579  000023                     ES_DeQueue@SaveCrit:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x22
   583  000023                     	ds	1
   584  000024                     ES_DeQueue@NumLeft:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0x23
   588  000024                     	ds	1
   589  000025                     ES_EnQueueFIFO@SaveCrit:
   590                           	opt stack 0
   591  000025                     ES_DeQueue@pThisQueue:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x24
   595  000025                     	ds	1
   596  000026                     ES_EnQueueFIFO@pThisQueue:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x25
   600  000026                     	ds	2
   601  000028                     ES_PostToService@TheEvent:
   602                           	opt stack 0
   603                           
   604                           ; 3 bytes @ 0x27
   605  000028                     	ds	3
   606  00002B                     tblptru	equ	0xFF8
   607                           postinc0	equ	0xFEE
   608                           wreg	equ	0xFE8
   609                           
   610                           ; 1 bytes @ 0x2A
   611 ;;
   612 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   613 ;;
   614 ;; *************** function _main *****************
   615 ;; Defined at:
   616 ;;		line 25 in file "main.c"
   617 ;; Parameters:    Size  Location     Type
   618 ;;		None
   619 ;; Auto vars:     Size  Location     Type
   620 ;;  ErrorType       1   15[BANK0 ] enum E15642
   621 ;; Return value:  Size  Location     Type
   622 ;;                  2  275[None  ] int 
   623 ;; Registers used:
   624 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   625 ;; Tracked objects:
   626 ;;		On entry : 0/0
   627 ;;		On exit  : 0/0
   628 ;;		Unchanged: 0/0
   629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   630 ;;      Params:         0       0       0       0
   631 ;;      Locals:         0       1       0       0
   632 ;;      Temps:          0       0       0       0
   633 ;;      Totals:         0       1       0       0
   634 ;;Total ram usage:        1 bytes
   635 ;; Hardware stack levels required when called:    9
   636 ;; This function calls:
   637 ;;		_ES_Initialize
   638 ;;		_ES_Run
   639 ;;		_printf
   640 ;; This function is called by:
   641 ;;		Startup code after reset
   642 ;; This function uses a non-reentrant model
   643 ;;
   644                           
   645                           	psect	text0
   646  0008E6                     __ptext0:
   647                           	opt stack 0
   648  0008E6                     _main:
   649                           	opt stack 22
   650                           
   651                           ;main.c: 28: IRCF0 = 1;
   652                           
   653                           ;incstack = 0
   654  0008E6  88D3               	bsf	4051,4,c	;volatile
   655                           
   656                           ;main.c: 29: IRCF1 = 1;
   657  0008E8  8AD3               	bsf	4051,5,c	;volatile
   658                           
   659                           ;main.c: 30: IRCF2 = 1;
   660  0008EA  8CD3               	bsf	4051,6,c	;volatile
   661                           
   662                           ;main.c: 31: SCS1 = 1;
   663  0008EC  82D3               	bsf	4051,1,c	;volatile
   664                           
   665                           ;main.c: 39: ES_Return_t ErrorType;
   666                           ;main.c: 55: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
   667  0008EE  0E9C               	movlw	156
   668  0008F0  0100               	movlb	0	; () banked
   669  0008F2  6F94               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
   670  0008F4  0E3F               	movlw	63
   671  0008F6  6F93               	movwf	ES_Initialize@NewRate& (0+255),b
   672  0008F8  ECD8  F002         	call	_ES_Initialize	;wreg free
   673  0008FC  0100               	movlb	0	; () banked
   674  0008FE  6F9B               	movwf	main@ErrorType& (0+255),b
   675                           
   676                           ; BSR set to: 0
   677                           ;main.c: 56: if ( ErrorType == Success ) {
   678  000900  0100               	movlb	0	; () banked
   679  000902  519B               	movf	main@ErrorType& (0+255),w,b
   680  000904  0100               	movlb	0	; () banked
   681  000906  A4D8               	btfss	status,2,c
   682  000908  D021               	goto	l2491
   683                           
   684                           ; BSR set to: 0
   685                           ;main.c: 58: ErrorType = ES_Run();
   686  00090A  EC4E  F003         	call	_ES_Run	;wreg free
   687  00090E  0100               	movlb	0	; () banked
   688  000910  6F9B               	movwf	main@ErrorType& (0+255),b
   689                           
   690                           ; BSR set to: 0
   691                           ;main.c: 60: }
   692                           ;main.c: 62: switch (ErrorType){
   693  000912  D01C               	goto	l2491
   694  000914                     l2481:
   695                           
   696                           ; BSR set to: 0
   697                           ;main.c: 64: printf("Failed on attempt to Post\n");
   698  000914  0E60               	movlw	low STR_1
   699  000916  6E11               	movwf	printf@f,c
   700  000918  0E03               	movlw	high STR_1
   701  00091A  6E12               	movwf	printf@f+1,c
   702  00091C  EC02  F006         	call	_printf	;wreg free
   703                           
   704                           ;main.c: 65: break;
   705  000920  D021               	goto	l283
   706  000922                     l2483:
   707                           
   708                           ;main.c: 67: printf("Failed on NULL pointer\n");
   709  000922  0E7B               	movlw	low STR_2
   710  000924  6E11               	movwf	printf@f,c
   711  000926  0E03               	movlw	high STR_2
   712  000928  6E12               	movwf	printf@f+1,c
   713  00092A  EC02  F006         	call	_printf	;wreg free
   714                           
   715                           ;main.c: 68: break;
   716  00092E  D01A               	goto	l283
   717  000930                     l2485:
   718                           
   719                           ;main.c: 70: printf("Failed Initialization\n");
   720  000930  0E93               	movlw	low STR_3
   721  000932  6E11               	movwf	printf@f,c
   722  000934  0E03               	movlw	high STR_3
   723  000936  6E12               	movwf	printf@f+1,c
   724  000938  EC02  F006         	call	_printf	;wreg free
   725                           
   726                           ;main.c: 71: break;
   727  00093C  D013               	goto	l283
   728  00093E                     l2487:
   729                           
   730                           ;main.c: 73: printf("Other Failure\n");
   731  00093E  0EAA               	movlw	low STR_4
   732  000940  6E11               	movwf	printf@f,c
   733  000942  0E03               	movlw	high STR_4
   734  000944  6E12               	movwf	printf@f+1,c
   735  000946  EC02  F006         	call	_printf	;wreg free
   736                           
   737                           ;main.c: 75: }
   738                           
   739                           ;main.c: 74: break;
   740  00094A  D00C               	goto	l283
   741  00094C                     l2491:
   742  00094C  0100               	movlb	0	; () banked
   743  00094E  519B               	movf	main@ErrorType& (0+255),w,b
   744                           
   745                           ; Switch size 1, requested type "space"
   746                           ; Number of cases is 3, Range of values is 1 to 5
   747                           ; switch strategies available:
   748                           ; Name         Instructions Cycles
   749                           ; simple_byte           10     6 (average)
   750                           ;	Chosen strategy is simple_byte
   751  000950  0A01               	xorlw	1	; case 1
   752  000952  B4D8               	btfsc	status,2,c
   753  000954  D7DF               	goto	l2481
   754  000956  0A02               	xorlw	2	; case 3
   755  000958  B4D8               	btfsc	status,2,c
   756  00095A  D7E3               	goto	l2483
   757  00095C  0A06               	xorlw	6	; case 5
   758  00095E  B4D8               	btfsc	status,2,c
   759  000960  D7E7               	goto	l2485
   760  000962  D7ED               	goto	l2487
   761  000964                     l283:
   762                           
   763                           ;main.c: 77: ;
   764  000964  D7FF               	goto	l283
   765  000966                     __end_of_main:
   766                           	opt stack 0
   767                           tblptru	equ	0xFF8
   768                           postinc0	equ	0xFEE
   769                           wreg	equ	0xFE8
   770                           status	equ	0xFD8
   771                           
   772 ;; *************** function _printf *****************
   773 ;; Defined at:
   774 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
   775 ;; Parameters:    Size  Location     Type
   776 ;;  f               2   16[COMRAM] PTR const unsigned char 
   777 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
   778 ;; Auto vars:     Size  Location     Type
   779 ;;  tmpval          4    0        struct .
   780 ;;  cp              3    0        PTR const unsigned char 
   781 ;;  ap              2   18[COMRAM] PTR void [1]
   782 ;;		 -> ?_printf(2), 
   783 ;;  len             2    0        unsigned int 
   784 ;;  val             2    0        unsigned int 
   785 ;;  c               1   20[COMRAM] char 
   786 ;;  flag            1    0        unsigned char 
   787 ;;  prec            1    0        char 
   788 ;; Return value:  Size  Location     Type
   789 ;;                  2   16[COMRAM] int 
   790 ;; Registers used:
   791 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   792 ;; Tracked objects:
   793 ;;		On entry : 0/0
   794 ;;		On exit  : 0/0
   795 ;;		Unchanged: 0/0
   796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   797 ;;      Params:         2       0       0       0
   798 ;;      Locals:         3       0       0       0
   799 ;;      Temps:          0       0       0       0
   800 ;;      Totals:         5       0       0       0
   801 ;;Total ram usage:        5 bytes
   802 ;; Hardware stack levels used:    1
   803 ;; Hardware stack levels required when called:    3
   804 ;; This function calls:
   805 ;;		_putch
   806 ;; This function is called by:
   807 ;;		_main
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           
   811                           	psect	text1
   812  000C04                     __ptext1:
   813                           	opt stack 0
   814  000C04                     _printf:
   815                           	opt stack 27
   816                           
   817                           ;doprnt.c: 466: va_list ap;
   818                           ;doprnt.c: 499: signed char c;
   819                           ;doprnt.c: 506: signed char prec;
   820                           ;doprnt.c: 508: unsigned char flag;
   821                           ;doprnt.c: 523: union {
   822                           ;doprnt.c: 524: unsigned long vd;
   823                           ;doprnt.c: 525: double integ;
   824                           ;doprnt.c: 526: } tmpval;
   825                           ;doprnt.c: 528: unsigned int val;
   826                           ;doprnt.c: 529: unsigned len;
   827                           ;doprnt.c: 530: const char * cp;
   828                           ;doprnt.c: 533: *ap = __va_start();
   829                           
   830                           ;incstack = 0
   831  000C04  0E13               	movlw	low (?_printf+2)
   832  000C06  6E13               	movwf	printf@ap,c
   833  000C08  0E00               	movlw	high (?_printf+2)
   834  000C0A  6E14               	movwf	printf@ap+1,c
   835                           
   836                           ;doprnt.c: 536: while(c = *f++) {
   837  000C0C  D003               	goto	l2401
   838  000C0E                     l2399:
   839                           
   840                           ;doprnt.c: 540: {
   841                           ;doprnt.c: 541: (putch(c) );
   842  000C0E  5015               	movf	printf@c,w,c
   843  000C10  ECBC  F006         	call	_putch
   844  000C14                     l2401:
   845  000C14  C011  FFF6         	movff	printf@f,tblptrl
   846  000C18  C012  FFF7         	movff	printf@f+1,tblptrh
   847  000C1C  4A11               	infsnz	printf@f,f,c
   848  000C1E  2A12               	incf	printf@f+1,f,c
   849  000C20                     	if	0	;tblptru may be non-zero
   850  000C20                     	endif
   851  000C20                     	if	0	;tblptru may be non-zero
   852  000C20                     	endif
   853  000C20  0008               	tblrd		*
   854  000C22  CFF5 F015          	movff	tablat,printf@c
   855  000C26  5015               	movf	printf@c,w,c
   856  000C28  B4D8               	btfsc	status,2,c
   857  000C2A  0012               	return	
   858  000C2C  D7F0               	goto	l2399
   859  000C2E                     __end_of_printf:
   860                           	opt stack 0
   861                           tblptru	equ	0xFF8
   862                           tblptrh	equ	0xFF7
   863                           tblptrl	equ	0xFF6
   864                           tablat	equ	0xFF5
   865                           postinc0	equ	0xFEE
   866                           wreg	equ	0xFE8
   867                           status	equ	0xFD8
   868                           
   869 ;; *************** function _putch *****************
   870 ;; Defined at:
   871 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;  c               1    wreg     unsigned char 
   874 ;; Auto vars:     Size  Location     Type
   875 ;;  c               1    0[COMRAM] unsigned char 
   876 ;; Return value:  Size  Location     Type
   877 ;;                  1    wreg      void 
   878 ;; Registers used:
   879 ;;		wreg
   880 ;; Tracked objects:
   881 ;;		On entry : 0/0
   882 ;;		On exit  : 0/0
   883 ;;		Unchanged: 0/0
   884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   885 ;;      Params:         0       0       0       0
   886 ;;      Locals:         0       0       0       0
   887 ;;      Temps:          0       0       0       0
   888 ;;      Totals:         0       0       0       0
   889 ;;Total ram usage:        0 bytes
   890 ;; Hardware stack levels used:    1
   891 ;; Hardware stack levels required when called:    2
   892 ;; This function calls:
   893 ;;		Nothing
   894 ;; This function is called by:
   895 ;;		_printf
   896 ;; This function uses a non-reentrant model
   897 ;;
   898                           
   899                           	psect	text2
   900  000D78                     __ptext2:
   901                           	opt stack 0
   902  000D78                     _putch:
   903                           	opt stack 27
   904                           
   905                           ;incstack = 0
   906  000D78  0012               	return		;funcret
   907  000D7A                     __end_of_putch:
   908                           	opt stack 0
   909                           tblptru	equ	0xFF8
   910                           tblptrh	equ	0xFF7
   911                           tblptrl	equ	0xFF6
   912                           tablat	equ	0xFF5
   913                           postinc0	equ	0xFEE
   914                           wreg	equ	0xFE8
   915                           status	equ	0xFD8
   916                           
   917 ;; *************** function _ES_Run *****************
   918 ;; Defined at:
   919 ;;		line 277 in file "ES_Framework.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;		None
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  HighestPrior    1   14[BANK0 ] unsigned char 
   924 ;; Return value:  Size  Location     Type
   925 ;;                  1    wreg      enum E15490
   926 ;; Registers used:
   927 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   933 ;;      Params:         0       0       0       0
   934 ;;      Locals:         0       1       0       0
   935 ;;      Temps:          0       4       0       0
   936 ;;      Totals:         0       5       0       0
   937 ;;Total ram usage:        5 bytes
   938 ;; Hardware stack levels used:    1
   939 ;; Hardware stack levels required when called:    8
   940 ;; This function calls:
   941 ;;		_ES_CheckUserEvents
   942 ;;		_ES_DeQueue
   943 ;;		_ES_GetMSBitSet
   944 ;;		_RunCan_XmitService
   945 ;;		_RunToggleService
   946 ;;		__HW_Process_Pending_Ints
   947 ;; This function is called by:
   948 ;;		_main
   949 ;; This function uses a non-reentrant model
   950 ;;
   951                           
   952                           	psect	text3
   953  00069C                     __ptext3:
   954                           	opt stack 0
   955  00069C                     _ES_Run:
   956                           	opt stack 22
   957                           
   958                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
   959                           
   960                           ;incstack = 0
   961                           ;ES_Framework.c: 279: uint8_t HighestPrior;
   962                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
   963                           ;ES_Framework.c: 282: while(1){
   964  00069C  D067               	goto	l2387
   965  00069E                     l2375:
   966                           
   967                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
   968  00069E  C034  F011         	movff	_Ready,ES_GetMSBitSet@Val2Check
   969  0006A2  C035  F012         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
   970  0006A6  ECB3  F004         	call	_ES_GetMSBitSet	;wreg free
   971  0006AA  0100               	movlb	0	; () banked
   972  0006AC  6F9A               	movwf	ES_Run@HighestPrior& (0+255),b
   973                           
   974                           ; BSR set to: 0
   975                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
   976  0006AE  0100               	movlb	0	; () banked
   977  0006B0  519A               	movf	ES_Run@HighestPrior& (0+255),w,b
   978  0006B2  0D03               	mullw	3
   979  0006B4  0E58               	movlw	low _EventQueues
   980  0006B6  24F3               	addwf	prodl,w,c
   981  0006B8  6EF6               	movwf	tblptrl,c
   982  0006BA  0E03               	movlw	high _EventQueues
   983  0006BC  20F4               	addwfc	prodh,w,c
   984  0006BE  6EF7               	movwf	tblptrh,c
   985  0006C0                     	if	0	;There are less than 3 active tblptr bytes
   986  0006C0                     	endif
   987  0006C0  0009               	tblrd		*+
   988  0006C2  CFF5 F01D          	movff	tablat,ES_DeQueue@pBlock
   989  0006C6  000A               	tblrd		*-
   990  0006C8  CFF5 F01E          	movff	tablat,ES_DeQueue@pBlock+1
   991  0006CC  0E4C               	movlw	low ES_Run@ThisEvent
   992  0006CE  6E1F               	movwf	ES_DeQueue@pReturnEvent,c
   993  0006D0  0E00               	movlw	high ES_Run@ThisEvent
   994  0006D2  6E20               	movwf	ES_DeQueue@pReturnEvent+1,c
   995  0006D4  ECDD  F001         	call	_ES_DeQueue	;wreg free
   996  0006D8  0900               	iorlw	0
   997  0006DA  A4D8               	btfss	status,2,c
   998  0006DC  D01D               	goto	l2381
   999                           
  1000                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1001  0006DE  0100               	movlb	0	; () banked
  1002  0006E0  519A               	movf	ES_Run@HighestPrior& (0+255),w,b
  1003  0006E2  0D02               	mullw	2
  1004  0006E4  0E01               	movlw	low _BitNum2SetMask
  1005  0006E6  24F3               	addwf	prodl,w,c
  1006  0006E8  6EF6               	movwf	tblptrl,c
  1007  0006EA  0E03               	movlw	high _BitNum2SetMask
  1008  0006EC  20F4               	addwfc	prodh,w,c
  1009  0006EE  6EF7               	movwf	tblptrh,c
  1010  0006F0                     	if	0	;There are less than 3 active tblptr bytes
  1011  0006F0                     	endif
  1012  0006F0  0009               	tblrd		*+
  1013  0006F2  CFF5 F096          	movff	tablat,??_ES_Run
  1014  0006F6  0009               	tblrd		*+
  1015  0006F8  CFF5 F097          	movff	tablat,??_ES_Run+1
  1016  0006FC  0100               	movlb	0	; () banked
  1017  0006FE  1D96               	comf	??_ES_Run& (0+255),w,b
  1018  000700  0100               	movlb	0	; () banked
  1019  000702  6F98               	movwf	(??_ES_Run+2)& (0+255),b
  1020  000704  0100               	movlb	0	; () banked
  1021  000706  1D97               	comf	(??_ES_Run+1)& (0+255),w,b
  1022  000708  0100               	movlb	0	; () banked
  1023  00070A  6F99               	movwf	(??_ES_Run+3)& (0+255),b
  1024  00070C  0100               	movlb	0	; () banked
  1025  00070E  5198               	movf	(??_ES_Run+2)& (0+255),w,b
  1026  000710  1634               	andwf	_Ready,f,c
  1027  000712  0100               	movlb	0	; () banked
  1028  000714  5199               	movf	(??_ES_Run+3)& (0+255),w,b
  1029  000716  1635               	andwf	_Ready+1,f,c
  1030  000718                     l2381:
  1031                           
  1032                           ;ES_Framework.c: 291: }
  1033                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1034  000718  C04C  F012         	movff	ES_Run@ThisEvent,RunToggleService@ThisEvent
  1035  00071C  C04D  F013         	movff	ES_Run@ThisEvent+1,RunToggleService@ThisEvent+1
  1036  000720  C04E  F014         	movff	ES_Run@ThisEvent+2,RunToggleService@ThisEvent+2
  1037  000724  0100               	movlb	0	; () banked
  1038  000726  519A               	movf	ES_Run@HighestPrior& (0+255),w,b
  1039  000728  0D04               	mullw	4
  1040  00072A  0E02               	movlw	2
  1041  00072C  26F3               	addwf	prodl,f,c
  1042  00072E  0E00               	movlw	0
  1043  000730  22F4               	addwfc	prodh,f,c
  1044  000732  0E50               	movlw	low _ServDescList
  1045  000734  24F3               	addwf	prodl,w,c
  1046  000736  6EF6               	movwf	tblptrl,c
  1047  000738  0E03               	movlw	high _ServDescList
  1048  00073A  20F4               	addwfc	prodh,w,c
  1049  00073C  6EF7               	movwf	tblptrh,c
  1050  00073E                     	if	0	;There are less than 3 active tblptr bytes
  1051  00073E                     	endif
  1052  00073E  D801               	call	u1648
  1053  000740  D00C               	goto	u1649
  1054  000742                     u1648:
  1055  000742  0005               	push	
  1056  000744  6EFA               	movwf	pclath,c
  1057  000746  0009               	tblrd		*+
  1058  000748  50F5               	movf	tablat,w,c
  1059  00074A  6EFD               	movwf	tosl,c
  1060  00074C  0009               	tblrd		*+
  1061  00074E  50F5               	movf	tablat,w,c
  1062  000750  6EFE               	movwf	tosh,c
  1063  000752  50F8               	movf	tblptru,w,c
  1064  000754  6EFF               	movwf	tosu,c
  1065  000756  50FA               	movf	pclath,w,c
  1066  000758  0012               	return		;indir
  1067  00075A                     u1649:
  1068  00075A  0E12               	movlw	low ?_RunToggleService
  1069  00075C  6ED9               	movwf	fsr2l,c
  1070  00075E  0E00               	movlw	high ?_RunToggleService
  1071  000760  6EDA               	movwf	fsr2h,c
  1072  000762  50DF               	movf	indf2,w,c
  1073  000764  B4D8               	btfsc	status,2,c
  1074  000766  D002               	goto	l2387
  1075                           
  1076                           ;ES_Framework.c: 293: return FailedRun;
  1077  000768  0E02               	movlw	2
  1078  00076A  0012               	return	
  1079  00076C                     l2387:
  1080  00076C  ECAA  F006         	call	__HW_Process_Pending_Ints	;wreg free
  1081  000770  0900               	iorlw	0
  1082  000772  B4D8               	btfsc	status,2,c
  1083  000774  D004               	goto	l2391
  1084  000776  5034               	movf	_Ready,w,c
  1085  000778  1035               	iorwf	_Ready+1,w,c
  1086  00077A  A4D8               	btfss	status,2,c
  1087  00077C  D790               	goto	l2375
  1088  00077E                     l2391:
  1089                           
  1090                           ;ES_Framework.c: 294: }
  1091                           ;ES_Framework.c: 295: }
  1092                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1093  00077E  ECB0  F005         	call	_ES_CheckUserEvents	;wreg free
  1094  000782  D7F4               	goto	l2387
  1095  000784                     __end_of_ES_Run:
  1096                           	opt stack 0
  1097                           tosu	equ	0xFFF
  1098                           tosh	equ	0xFFE
  1099                           tosl	equ	0xFFD
  1100                           pclath	equ	0xFFA
  1101                           tblptru	equ	0xFF8
  1102                           tblptrh	equ	0xFF7
  1103                           tblptrl	equ	0xFF6
  1104                           tablat	equ	0xFF5
  1105                           prodh	equ	0xFF4
  1106                           prodl	equ	0xFF3
  1107                           postinc0	equ	0xFEE
  1108                           wreg	equ	0xFE8
  1109                           indf2	equ	0xFDF
  1110                           fsr2h	equ	0xFDA
  1111                           fsr2l	equ	0xFD9
  1112                           status	equ	0xFD8
  1113                           
  1114 ;; *************** function __HW_Process_Pending_Ints *****************
  1115 ;; Defined at:
  1116 ;;		line 217 in file "ES_Port.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;		None
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;		None
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  1    wreg      unsigned char 
  1123 ;; Registers used:
  1124 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1130 ;;      Params:         0       0       0       0
  1131 ;;      Locals:         0       0       0       0
  1132 ;;      Temps:          0       0       0       0
  1133 ;;      Totals:         0       0       0       0
  1134 ;;Total ram usage:        0 bytes
  1135 ;; Hardware stack levels used:    1
  1136 ;; Hardware stack levels required when called:    7
  1137 ;; This function calls:
  1138 ;;		_ES_Timer_Tick_Resp
  1139 ;; This function is called by:
  1140 ;;		_ES_Run
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           	psect	text4
  1145  000D54                     __ptext4:
  1146                           	opt stack 0
  1147  000D54                     __HW_Process_Pending_Ints:
  1148                           	opt stack 22
  1149                           
  1150                           ;ES_Port.c: 219: while (TickCount > 0)
  1151                           
  1152                           ;incstack = 0
  1153  000D54  D003               	goto	l2271
  1154  000D56                     l2267:
  1155                           
  1156                           ;ES_Port.c: 220: {
  1157                           ;ES_Port.c: 222: ES_Timer_Tick_Resp();
  1158  000D56  EC5C  F002         	call	_ES_Timer_Tick_Resp	;wreg free
  1159                           
  1160                           ;ES_Port.c: 223: TickCount--;
  1161  000D5A  063F               	decf	_TickCount,f,c	;volatile
  1162  000D5C                     l2271:
  1163  000D5C  503F               	movf	_TickCount,w,c	;volatile
  1164  000D5E  A4D8               	btfss	status,2,c
  1165  000D60  D7FA               	goto	l2267
  1166                           
  1167                           ;ES_Port.c: 224: }
  1168                           ;ES_Port.c: 226: return 1;
  1169  000D62  0E01               	movlw	1
  1170  000D64  0012               	return	
  1171  000D66                     __end_of__HW_Process_Pending_Ints:
  1172                           	opt stack 0
  1173                           tosu	equ	0xFFF
  1174                           tosh	equ	0xFFE
  1175                           tosl	equ	0xFFD
  1176                           pclath	equ	0xFFA
  1177                           tblptru	equ	0xFF8
  1178                           tblptrh	equ	0xFF7
  1179                           tblptrl	equ	0xFF6
  1180                           tablat	equ	0xFF5
  1181                           prodh	equ	0xFF4
  1182                           prodl	equ	0xFF3
  1183                           postinc0	equ	0xFEE
  1184                           wreg	equ	0xFE8
  1185                           indf2	equ	0xFDF
  1186                           fsr2h	equ	0xFDA
  1187                           fsr2l	equ	0xFD9
  1188                           status	equ	0xFD8
  1189                           
  1190 ;; *************** function _ES_Timer_Tick_Resp *****************
  1191 ;; Defined at:
  1192 ;;		line 284 in file "ES_Timers.c"
  1193 ;; Parameters:    Size  Location     Type
  1194 ;;		None
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;		None
  1197 ;; Return value:  Size  Location     Type
  1198 ;;                  1    wreg      void 
  1199 ;; Registers used:
  1200 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1201 ;; Tracked objects:
  1202 ;;		On entry : 0/0
  1203 ;;		On exit  : 0/0
  1204 ;;		Unchanged: 0/0
  1205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1206 ;;      Params:         0       0       0       0
  1207 ;;      Locals:         0       0       0       0
  1208 ;;      Temps:          0       4       0       0
  1209 ;;      Totals:         0       4       0       0
  1210 ;;Total ram usage:        4 bytes
  1211 ;; Hardware stack levels used:    1
  1212 ;; Hardware stack levels required when called:    6
  1213 ;; This function calls:
  1214 ;;		Absolute function
  1215 ;;		_ES_GetMSBitSet
  1216 ;;		_PostToggleService
  1217 ;; This function is called by:
  1218 ;;		__HW_Process_Pending_Ints
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text5
  1223  0004B8                     __ptext5:
  1224                           	opt stack 0
  1225  0004B8                     _ES_Timer_Tick_Resp:
  1226                           	opt stack 22
  1227                           
  1228                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1229                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1230                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1231                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1232                           
  1233                           ;incstack = 0
  1234  0004B8  5038               	movf	_TMR_ActiveFlags,w,c
  1235  0004BA  1039               	iorwf	_TMR_ActiveFlags+1,w,c
  1236  0004BC  B4D8               	btfsc	status,2,c
  1237  0004BE  0012               	return	
  1238                           
  1239                           ;ES_Timers.c: 291: {
  1240                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1241  0004C0  C038  F02E         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1242  0004C4  C039  F02F         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1243  0004C8                     l2137:
  1244                           
  1245                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1246  0004C8  C02E  F011         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1247  0004CC  C02F  F012         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1248  0004D0  ECB3  F004         	call	_ES_GetMSBitSet	;wreg free
  1249  0004D4  6E3D               	movwf	ES_Timer_Tick_Resp@NextTimer2Process,c
  1250                           
  1251                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1252  0004D6  503D               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1253  0004D8  0D02               	mullw	2
  1254  0004DA  0E60               	movlw	low _TMR_TimerArray
  1255  0004DC  24F3               	addwf	prodl,w,c
  1256  0004DE  6ED9               	movwf	fsr2l,c
  1257  0004E0  0E00               	movlw	high _TMR_TimerArray
  1258  0004E2  20F4               	addwfc	prodh,w,c
  1259  0004E4  6EDA               	movwf	fsr2h,c
  1260  0004E6  06DE               	decf	postinc2,f,c
  1261  0004E8  0E00               	movlw	0
  1262  0004EA  5ADD               	subwfb	postdec2,f,c
  1263  0004EC  50DE               	movf	postinc2,w,c
  1264  0004EE  10DE               	iorwf	postinc2,w,c
  1265  0004F0  A4D8               	btfss	status,2,c
  1266  0004F2  D03D               	goto	l2149
  1267                           
  1268                           ;ES_Timers.c: 299: {
  1269                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1270  0004F4  0E03               	movlw	3
  1271  0004F6  6E2B               	movwf	ES_Timer_Tick_Resp@NewEvent,c
  1272                           
  1273                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1274  0004F8  C03D  F02C         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1275  0004FC  6A2D               	clrf	ES_Timer_Tick_Resp@NewEvent+2,c
  1276                           
  1277                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1278  0004FE  C02B  F08F         	movff	ES_Timer_Tick_Resp@NewEvent,PostToggleService@ThisEvent
  1279  000502  C02C  F090         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostToggleService@ThisEvent+1
  1280  000506  C02D  F091         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostToggleService@ThisEvent+2
  1281  00050A  503D               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1282  00050C  0D02               	mullw	2
  1283  00050E  0E21               	movlw	low _Timer2PostFunc
  1284  000510  24F3               	addwf	prodl,w,c
  1285  000512  6EF6               	movwf	tblptrl,c
  1286  000514  0E03               	movlw	high _Timer2PostFunc
  1287  000516  20F4               	addwfc	prodh,w,c
  1288  000518  6EF7               	movwf	tblptrh,c
  1289  00051A                     	if	0	;There are less than 3 active tblptr bytes
  1290  00051A                     	endif
  1291  00051A  D801               	call	u1408
  1292  00051C  D00C               	goto	l2147
  1293  00051E                     u1408:
  1294  00051E  0005               	push	
  1295  000520  6EFA               	movwf	pclath,c
  1296  000522  0009               	tblrd		*+
  1297  000524  50F5               	movf	tablat,w,c
  1298  000526  6EFD               	movwf	tosl,c
  1299  000528  0009               	tblrd		*+
  1300  00052A  50F5               	movf	tablat,w,c
  1301  00052C  6EFE               	movwf	tosh,c
  1302  00052E  50F8               	movf	tblptru,w,c
  1303  000530  6EFF               	movwf	tosu,c
  1304  000532  50FA               	movf	pclath,w,c
  1305  000534  0012               	return		;indir
  1306  000536                     l2147:
  1307                           
  1308                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1309  000536  503D               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1310  000538  0D02               	mullw	2
  1311  00053A  0E01               	movlw	low _BitNum2SetMask
  1312  00053C  24F3               	addwf	prodl,w,c
  1313  00053E  6EF6               	movwf	tblptrl,c
  1314  000540  0E03               	movlw	high _BitNum2SetMask
  1315  000542  20F4               	addwfc	prodh,w,c
  1316  000544  6EF7               	movwf	tblptrh,c
  1317  000546                     	if	0	;There are less than 3 active tblptr bytes
  1318  000546                     	endif
  1319  000546  0009               	tblrd		*+
  1320  000548  CFF5 F092          	movff	tablat,??_ES_Timer_Tick_Resp
  1321  00054C  0009               	tblrd		*+
  1322  00054E  CFF5 F093          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1323  000552  0100               	movlb	0	; () banked
  1324  000554  1D92               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1325  000556  0100               	movlb	0	; () banked
  1326  000558  6F94               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1327  00055A  0100               	movlb	0	; () banked
  1328  00055C  1D93               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1329  00055E  0100               	movlb	0	; () banked
  1330  000560  6F95               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1331  000562  0100               	movlb	0	; () banked
  1332  000564  5194               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1333  000566  1638               	andwf	_TMR_ActiveFlags,f,c
  1334  000568  0100               	movlb	0	; () banked
  1335  00056A  5195               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1336  00056C  1639               	andwf	_TMR_ActiveFlags+1,f,c
  1337  00056E                     l2149:
  1338                           
  1339                           ;ES_Timers.c: 306: }
  1340                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1341  00056E  503D               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1342  000570  0D02               	mullw	2
  1343  000572  0E01               	movlw	low _BitNum2SetMask
  1344  000574  24F3               	addwf	prodl,w,c
  1345  000576  6EF6               	movwf	tblptrl,c
  1346  000578  0E03               	movlw	high _BitNum2SetMask
  1347  00057A  20F4               	addwfc	prodh,w,c
  1348  00057C  6EF7               	movwf	tblptrh,c
  1349  00057E                     	if	0	;There are less than 3 active tblptr bytes
  1350  00057E                     	endif
  1351  00057E  0009               	tblrd		*+
  1352  000580  CFF5 F092          	movff	tablat,??_ES_Timer_Tick_Resp
  1353  000584  0009               	tblrd		*+
  1354  000586  CFF5 F093          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1355  00058A  0100               	movlb	0	; () banked
  1356  00058C  1D92               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1357  00058E  0100               	movlb	0	; () banked
  1358  000590  6F94               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1359  000592  0100               	movlb	0	; () banked
  1360  000594  1D93               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1361  000596  0100               	movlb	0	; () banked
  1362  000598  6F95               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1363  00059A  0100               	movlb	0	; () banked
  1364  00059C  5194               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1365  00059E  162E               	andwf	ES_Timer_Tick_Resp@NeedsProcessing,f,c
  1366  0005A0  0100               	movlb	0	; () banked
  1367  0005A2  5195               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1368  0005A4  162F               	andwf	ES_Timer_Tick_Resp@NeedsProcessing+1,f,c
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1372  0005A6  502E               	movf	ES_Timer_Tick_Resp@NeedsProcessing,w,c
  1373  0005A8  102F               	iorwf	ES_Timer_Tick_Resp@NeedsProcessing+1,w,c
  1374  0005AA  B4D8               	btfsc	status,2,c
  1375  0005AC  0012               	return	
  1376  0005AE  D78C               	goto	l2137
  1377  0005B0                     __end_of_ES_Timer_Tick_Resp:
  1378                           	opt stack 0
  1379                           tosu	equ	0xFFF
  1380                           tosh	equ	0xFFE
  1381                           tosl	equ	0xFFD
  1382                           pclath	equ	0xFFA
  1383                           tblptru	equ	0xFF8
  1384                           tblptrh	equ	0xFF7
  1385                           tblptrl	equ	0xFF6
  1386                           tablat	equ	0xFF5
  1387                           prodh	equ	0xFF4
  1388                           prodl	equ	0xFF3
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           indf2	equ	0xFDF
  1392                           postinc2	equ	0xFDE
  1393                           postdec2	equ	0xFDD
  1394                           fsr2h	equ	0xFDA
  1395                           fsr2l	equ	0xFD9
  1396                           status	equ	0xFD8
  1397                           
  1398 ;; *************** function _PostToggleService *****************
  1399 ;; Defined at:
  1400 ;;		line 108 in file "ToggleService.c"
  1401 ;; Parameters:    Size  Location     Type
  1402 ;;  ThisEvent       3    3[BANK0 ] struct ES_Event_t
  1403 ;; Auto vars:     Size  Location     Type
  1404 ;;		None
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  1    wreg      unsigned char 
  1407 ;; Registers used:
  1408 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1414 ;;      Params:         0       3       0       0
  1415 ;;      Locals:         0       0       0       0
  1416 ;;      Temps:          0       0       0       0
  1417 ;;      Totals:         0       3       0       0
  1418 ;;Total ram usage:        3 bytes
  1419 ;; Hardware stack levels used:    1
  1420 ;; Hardware stack levels required when called:    5
  1421 ;; This function calls:
  1422 ;;		_ES_PostToService
  1423 ;; This function is called by:
  1424 ;;		_ES_Timer_Tick_Resp
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428                           	psect	text6
  1429  000D2C                     __ptext6:
  1430                           	opt stack 0
  1431  000D2C                     _PostToggleService:
  1432                           	opt stack 22
  1433                           
  1434                           ;ToggleService.c: 110: return ES_PostToService( MyPriority, ThisEvent);
  1435                           ;	Return value of _PostToggleService is never used
  1436                           
  1437                           ;incstack = 0
  1438  000D2C  C08F  F028         	movff	PostToggleService@ThisEvent,ES_PostToService@TheEvent
  1439  000D30  C090  F029         	movff	PostToggleService@ThisEvent+1,ES_PostToService@TheEvent+1
  1440  000D34  C091  F02A         	movff	PostToggleService@ThisEvent+2,ES_PostToService@TheEvent+2
  1441  000D38  503E               	movf	_MyPriority,w,c
  1442  000D3A  ECEC  F004         	call	_ES_PostToService
  1443  000D3E  0012               	return	
  1444  000D40                     __end_of_PostToggleService:
  1445                           	opt stack 0
  1446                           tosu	equ	0xFFF
  1447                           tosh	equ	0xFFE
  1448                           tosl	equ	0xFFD
  1449                           pclath	equ	0xFFA
  1450                           tblptru	equ	0xFF8
  1451                           tblptrh	equ	0xFF7
  1452                           tblptrl	equ	0xFF6
  1453                           tablat	equ	0xFF5
  1454                           prodh	equ	0xFF4
  1455                           prodl	equ	0xFF3
  1456                           postinc0	equ	0xFEE
  1457                           wreg	equ	0xFE8
  1458                           indf2	equ	0xFDF
  1459                           postinc2	equ	0xFDE
  1460                           postdec2	equ	0xFDD
  1461                           fsr2h	equ	0xFDA
  1462                           fsr2l	equ	0xFD9
  1463                           status	equ	0xFD8
  1464                           
  1465 ;; *************** function _ES_GetMSBitSet *****************
  1466 ;; Defined at:
  1467 ;;		line 79 in file "ES_LookupTables.c"
  1468 ;; Parameters:    Size  Location     Type
  1469 ;;  Val2Check       2   16[COMRAM] unsigned int 
  1470 ;; Auto vars:     Size  Location     Type
  1471 ;;  LoopCntr        1   25[COMRAM] char 
  1472 ;;  Nybble2Test     1   24[COMRAM] unsigned char 
  1473 ;;  ReturnVal       1   23[COMRAM] unsigned char 
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  1    wreg      unsigned char 
  1476 ;; Registers used:
  1477 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1483 ;;      Params:         2       0       0       0
  1484 ;;      Locals:         3       0       0       0
  1485 ;;      Temps:          5       0       0       0
  1486 ;;      Totals:        10       0       0       0
  1487 ;;Total ram usage:       10 bytes
  1488 ;; Hardware stack levels used:    1
  1489 ;; Hardware stack levels required when called:    2
  1490 ;; This function calls:
  1491 ;;		Nothing
  1492 ;; This function is called by:
  1493 ;;		_ES_Run
  1494 ;;		_ES_Timer_Tick_Resp
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498                           	psect	text7
  1499  000966                     __ptext7:
  1500                           	opt stack 0
  1501  000966                     _ES_GetMSBitSet:
  1502                           	opt stack 25
  1503                           
  1504                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1505                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1506                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1507                           
  1508                           ;incstack = 0
  1509  000966  0E80               	movlw	128
  1510  000968  6E18               	movwf	ES_GetMSBitSet@ReturnVal,c
  1511                           
  1512                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1513  00096A  0E03               	movlw	3
  1514  00096C  6E1A               	movwf	ES_GetMSBitSet@LoopCntr,c
  1515  00096E                     l2107:
  1516                           
  1517                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1518  00096E  BE1A               	btfsc	ES_GetMSBitSet@LoopCntr,7,c
  1519  000970  D031               	goto	l2121
  1520                           
  1521                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1522                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1523                           ;ES_LookupTables.c: 91: 0x0F);
  1524  000972  501A               	movf	ES_GetMSBitSet@LoopCntr,w,c
  1525  000974  0D04               	mullw	4
  1526  000976  CFF3 F013          	movff	prodl,??_ES_GetMSBitSet
  1527  00097A  C011  F014         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1528  00097E  C012  F015         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1529  000982  2A13               	incf	??_ES_GetMSBitSet,f,c
  1530  000984  D003               	goto	u1354
  1531  000986                     u1355:
  1532  000986  90D8               	bcf	status,0,c
  1533  000988  3215               	rrcf	??_ES_GetMSBitSet+2,f,c
  1534  00098A  3214               	rrcf	??_ES_GetMSBitSet+1,f,c
  1535  00098C                     u1354:
  1536  00098C  2E13               	decfsz	??_ES_GetMSBitSet,f,c
  1537  00098E  D7FB               	goto	u1355
  1538  000990  5014               	movf	??_ES_GetMSBitSet+1,w,c
  1539  000992  0B0F               	andlw	15
  1540  000994  6E19               	movwf	ES_GetMSBitSet@Nybble2Test,c
  1541                           
  1542                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1543  000996  5019               	movf	ES_GetMSBitSet@Nybble2Test,w,c
  1544  000998  B4D8               	btfsc	status,2,c
  1545  00099A  D01A               	goto	l2117
  1546                           
  1547                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  1548                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  1549  00099C  0EFF               	movlw	255
  1550  00099E  6E13               	movwf	??_ES_GetMSBitSet& (0+255),c
  1551  0009A0  0EFF               	movlw	255
  1552  0009A2  6E14               	movwf	(??_ES_GetMSBitSet+1)& (0+255),c
  1553  0009A4  5019               	movf	ES_GetMSBitSet@Nybble2Test,w,c
  1554  0009A6  6E15               	movwf	(??_ES_GetMSBitSet+2)& (0+255),c
  1555  0009A8  6A16               	clrf	(??_ES_GetMSBitSet+3)& (0+255),c
  1556  0009AA  5013               	movf	??_ES_GetMSBitSet,w,c
  1557  0009AC  2615               	addwf	??_ES_GetMSBitSet+2,f,c
  1558  0009AE  5014               	movf	??_ES_GetMSBitSet+1,w,c
  1559  0009B0  2216               	addwfc	??_ES_GetMSBitSet+3,f,c
  1560  0009B2  0E41               	movlw	low _Nybble2MSBitNum
  1561  0009B4  2415               	addwf	??_ES_GetMSBitSet+2,w,c
  1562  0009B6  6EF6               	movwf	tblptrl,c
  1563  0009B8  0E03               	movlw	high _Nybble2MSBitNum
  1564  0009BA  2016               	addwfc	??_ES_GetMSBitSet+3,w,c
  1565  0009BC  6EF7               	movwf	tblptrh,c
  1566  0009BE                     	if	0	;There are less than 3 active tblptr bytes
  1567  0009BE                     	endif
  1568  0009BE  0008               	tblrd		*
  1569  0009C0  CFF5 F017          	movff	tablat,??_ES_GetMSBitSet+4
  1570  0009C4  501A               	movf	ES_GetMSBitSet@LoopCntr,w,c
  1571  0009C6  0D04               	mullw	4
  1572  0009C8  50F3               	movf	prodl,w,c
  1573  0009CA  2417               	addwf	??_ES_GetMSBitSet+4,w,c
  1574  0009CC  6E18               	movwf	ES_GetMSBitSet@ReturnVal,c
  1575                           
  1576                           ;ES_LookupTables.c: 96: break;
  1577  0009CE  D002               	goto	l2121
  1578  0009D0                     l2117:
  1579  0009D0  061A               	decf	ES_GetMSBitSet@LoopCntr,f,c
  1580  0009D2  D7CD               	goto	l2107
  1581  0009D4                     l2121:
  1582                           
  1583                           ;ES_LookupTables.c: 97: }
  1584                           ;ES_LookupTables.c: 98: }
  1585                           ;ES_LookupTables.c: 99: return ReturnVal;
  1586  0009D4  5018               	movf	ES_GetMSBitSet@ReturnVal,w,c
  1587  0009D6  0012               	return	
  1588  0009D8                     __end_of_ES_GetMSBitSet:
  1589                           	opt stack 0
  1590                           tosu	equ	0xFFF
  1591                           tosh	equ	0xFFE
  1592                           tosl	equ	0xFFD
  1593                           pclath	equ	0xFFA
  1594                           tblptru	equ	0xFF8
  1595                           tblptrh	equ	0xFF7
  1596                           tblptrl	equ	0xFF6
  1597                           tablat	equ	0xFF5
  1598                           prodh	equ	0xFF4
  1599                           prodl	equ	0xFF3
  1600                           postinc0	equ	0xFEE
  1601                           wreg	equ	0xFE8
  1602                           indf2	equ	0xFDF
  1603                           postinc2	equ	0xFDE
  1604                           postdec2	equ	0xFDD
  1605                           fsr2h	equ	0xFDA
  1606                           fsr2l	equ	0xFD9
  1607                           status	equ	0xFD8
  1608                           
  1609 ;; *************** function _RunCan_XmitService *****************
  1610 ;; Defined at:
  1611 ;;		line 133 in file "Can_XmitService.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;  ThisEvent       3   17[COMRAM] struct ES_Event_t
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;  ReturnEvent     3   20[COMRAM] struct ES_Event_t
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  3   17[COMRAM] struct ES_Event_t
  1618 ;; Registers used:
  1619 ;;		wreg, status,2, status,0, cstack
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1625 ;;      Params:         3       0       0       0
  1626 ;;      Locals:         3       0       0       0
  1627 ;;      Temps:          0       0       0       0
  1628 ;;      Totals:         6       0       0       0
  1629 ;;Total ram usage:        6 bytes
  1630 ;; Hardware stack levels used:    1
  1631 ;; Hardware stack levels required when called:    3
  1632 ;; This function calls:
  1633 ;;		_InitCanHardware
  1634 ;; This function is called by:
  1635 ;;		_ES_Run
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text8
  1640  000CF4                     __ptext8:
  1641                           	opt stack 0
  1642  000CF4                     _RunCan_XmitService:
  1643                           	opt stack 26
  1644                           
  1645                           ;Can_XmitService.c: 135: ES_Event ReturnEvent;
  1646                           ;Can_XmitService.c: 137: if (ThisEvent.EventType == ES_INIT) {
  1647                           
  1648                           ;incstack = 0
  1649  000CF4  0E02               	movlw	2
  1650  000CF6  1812               	xorwf	RunCan_XmitService@ThisEvent,w,c
  1651  000CF8  B4D8               	btfsc	status,2,c
  1652                           
  1653                           ;Can_XmitService.c: 138: InitCanHardware();
  1654  000CFA  EC5D  F005         	call	_InitCanHardware	;wreg free
  1655                           
  1656                           ;Can_XmitService.c: 140: }
  1657                           ;Can_XmitService.c: 141: ReturnEvent.EventType = ES_NO_EVENT;
  1658  000CFE  0E00               	movlw	0
  1659  000D00  6E15               	movwf	RunCan_XmitService@ReturnEvent,c
  1660                           
  1661                           ;Can_XmitService.c: 142: return ReturnEvent;
  1662  000D02  C015  F012         	movff	RunCan_XmitService@ReturnEvent,?_RunCan_XmitService
  1663  000D06  C016  F013         	movff	RunCan_XmitService@ReturnEvent+1,?_RunCan_XmitService+1
  1664  000D0A  C017  F014         	movff	RunCan_XmitService@ReturnEvent+2,?_RunCan_XmitService+2
  1665  000D0E  0012               	return	
  1666  000D10                     __end_of_RunCan_XmitService:
  1667                           	opt stack 0
  1668                           tosu	equ	0xFFF
  1669                           tosh	equ	0xFFE
  1670                           tosl	equ	0xFFD
  1671                           pclath	equ	0xFFA
  1672                           tblptru	equ	0xFF8
  1673                           tblptrh	equ	0xFF7
  1674                           tblptrl	equ	0xFF6
  1675                           tablat	equ	0xFF5
  1676                           prodh	equ	0xFF4
  1677                           prodl	equ	0xFF3
  1678                           postinc0	equ	0xFEE
  1679                           wreg	equ	0xFE8
  1680                           indf2	equ	0xFDF
  1681                           postinc2	equ	0xFDE
  1682                           postdec2	equ	0xFDD
  1683                           fsr2h	equ	0xFDA
  1684                           fsr2l	equ	0xFD9
  1685                           status	equ	0xFD8
  1686                           
  1687 ;; *************** function _RunToggleService *****************
  1688 ;; Defined at:
  1689 ;;		line 130 in file "ToggleService.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;  ThisEvent       3   17[COMRAM] struct ES_Event_t
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;  ReturnEvent     3   20[COMRAM] struct ES_Event_t
  1694 ;; Return value:  Size  Location     Type
  1695 ;;                  3   17[COMRAM] struct ES_Event_t
  1696 ;; Registers used:
  1697 ;;		wreg, status,2, status,0, cstack
  1698 ;; Tracked objects:
  1699 ;;		On entry : 0/0
  1700 ;;		On exit  : 0/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1703 ;;      Params:         3       0       0       0
  1704 ;;      Locals:         3       0       0       0
  1705 ;;      Temps:          0       0       0       0
  1706 ;;      Totals:         6       0       0       0
  1707 ;;Total ram usage:        6 bytes
  1708 ;; Hardware stack levels used:    1
  1709 ;; Hardware stack levels required when called:    3
  1710 ;; This function calls:
  1711 ;;		_XmitData
  1712 ;; This function is called by:
  1713 ;;		_ES_Run
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           	psect	text9
  1718  000C2E                     __ptext9:
  1719                           	opt stack 0
  1720  000C2E                     _RunToggleService:
  1721                           	opt stack 26
  1722                           
  1723                           ;ToggleService.c: 132: ES_Event ReturnEvent;
  1724                           ;ToggleService.c: 133: ReturnEvent.EventType = ES_NO_EVENT;
  1725                           
  1726                           ;incstack = 0
  1727  000C2E  0E00               	movlw	0
  1728  000C30  6E15               	movwf	RunToggleService@ReturnEvent,c
  1729                           
  1730                           ;ToggleService.c: 137: if (ThisEvent.EventType == ES_TIMEOUT) {
  1731  000C32  0E03               	movlw	3
  1732  000C34  1812               	xorwf	RunToggleService@ThisEvent,w,c
  1733  000C36  A4D8               	btfss	status,2,c
  1734  000C38  D008               	goto	l2313
  1735                           
  1736                           ;ToggleService.c: 138: if (ThisEvent.EventParam == 2) {
  1737  000C3A  0E02               	movlw	2
  1738  000C3C  1813               	xorwf	RunToggleService@ThisEvent+1,w,c
  1739  000C3E  1014               	iorwf	RunToggleService@ThisEvent+2,w,c
  1740  000C40  A4D8               	btfss	status,2,c
  1741  000C42  D003               	goto	l2313
  1742                           
  1743                           ;ToggleService.c: 145: XmitData(0xAA);
  1744  000C44  0EAA               	movlw	170
  1745  000C46  EC54  F006         	call	_XmitData
  1746  000C4A                     l2313:
  1747                           
  1748                           ;ToggleService.c: 147: }
  1749                           ;ToggleService.c: 148: }
  1750                           ;ToggleService.c: 149: return ReturnEvent;
  1751  000C4A  C015  F012         	movff	RunToggleService@ReturnEvent,?_RunToggleService
  1752  000C4E  C016  F013         	movff	RunToggleService@ReturnEvent+1,?_RunToggleService+1
  1753  000C52  C017  F014         	movff	RunToggleService@ReturnEvent+2,?_RunToggleService+2
  1754  000C56  0012               	return	
  1755  000C58                     __end_of_RunToggleService:
  1756                           	opt stack 0
  1757                           tosu	equ	0xFFF
  1758                           tosh	equ	0xFFE
  1759                           tosl	equ	0xFFD
  1760                           pclath	equ	0xFFA
  1761                           tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           prodh	equ	0xFF4
  1766                           prodl	equ	0xFF3
  1767                           postinc0	equ	0xFEE
  1768                           wreg	equ	0xFE8
  1769                           indf2	equ	0xFDF
  1770                           postinc2	equ	0xFDE
  1771                           postdec2	equ	0xFDD
  1772                           fsr2h	equ	0xFDA
  1773                           fsr2l	equ	0xFD9
  1774                           status	equ	0xFD8
  1775                           
  1776 ;; *************** function _XmitData *****************
  1777 ;; Defined at:
  1778 ;;		line 145 in file "Can_XmitService.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;  DataByte        1    wreg     unsigned char 
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;  DataByte        1   16[COMRAM] unsigned char 
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  1    wreg      void 
  1785 ;; Registers used:
  1786 ;;		wreg, status,2
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1792 ;;      Params:         0       0       0       0
  1793 ;;      Locals:         1       0       0       0
  1794 ;;      Temps:          0       0       0       0
  1795 ;;      Totals:         1       0       0       0
  1796 ;;Total ram usage:        1 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    2
  1799 ;; This function calls:
  1800 ;;		Nothing
  1801 ;; This function is called by:
  1802 ;;		_RunToggleService
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text10
  1807  000CA8                     __ptext10:
  1808                           	opt stack 0
  1809  000CA8                     _XmitData:
  1810                           	opt stack 26
  1811                           
  1812                           ;incstack = 0
  1813                           ;XmitData@DataByte stored from wreg
  1814  000CA8  6E11               	movwf	XmitData@DataByte,c
  1815                           
  1816                           ;Can_XmitService.c: 147: TXB0D0 = DataByte;
  1817  000CAA  C011  FF46         	movff	XmitData@DataByte,3910	;volatile
  1818                           
  1819                           ;Can_XmitService.c: 149: TXB0SIDL = 0b01100000;
  1820  000CAE  0E60               	movlw	96
  1821  000CB0  010F               	movlb	15	; () banked
  1822  000CB2  6F42               	movwf	66,b	;volatile
  1823                           
  1824                           ; BSR set to: 15
  1825                           ;Can_XmitService.c: 150: TXB0SIDH = 0b00100100;
  1826  000CB4  0E24               	movlw	36
  1827  000CB6  010F               	movlb	15	; () banked
  1828  000CB8  6F41               	movwf	65,b	;volatile
  1829                           
  1830                           ; BSR set to: 15
  1831                           ;Can_XmitService.c: 152: TXB0DLC = 0b00000001;
  1832  000CBA  0E01               	movlw	1
  1833  000CBC  010F               	movlb	15	; () banked
  1834  000CBE  6F45               	movwf	69,b	;volatile
  1835                           
  1836                           ; BSR set to: 15
  1837                           ;Can_XmitService.c: 153: TXB0CONbits.TXPRI0 = 1;
  1838  000CC0  010F               	movlb	15	; () banked
  1839  000CC2  8140               	bsf	64,0,b	;volatile
  1840                           
  1841                           ; BSR set to: 15
  1842                           ;Can_XmitService.c: 154: TXB0CONbits.TXPRI1 = 1;
  1843  000CC4  010F               	movlb	15	; () banked
  1844  000CC6  8340               	bsf	64,1,b	;volatile
  1845                           
  1846                           ; BSR set to: 15
  1847                           ;Can_XmitService.c: 156: TXB0CONbits.TXREQ = 1;
  1848  000CC8  010F               	movlb	15	; () banked
  1849  000CCA  8740               	bsf	64,3,b	;volatile
  1850                           
  1851                           ; BSR set to: 15
  1852  000CCC  0012               	return		;funcret
  1853  000CCE                     __end_of_XmitData:
  1854                           	opt stack 0
  1855                           tosu	equ	0xFFF
  1856                           tosh	equ	0xFFE
  1857                           tosl	equ	0xFFD
  1858                           pclath	equ	0xFFA
  1859                           tblptru	equ	0xFF8
  1860                           tblptrh	equ	0xFF7
  1861                           tblptrl	equ	0xFF6
  1862                           tablat	equ	0xFF5
  1863                           prodh	equ	0xFF4
  1864                           prodl	equ	0xFF3
  1865                           postinc0	equ	0xFEE
  1866                           wreg	equ	0xFE8
  1867                           indf2	equ	0xFDF
  1868                           postinc2	equ	0xFDE
  1869                           postdec2	equ	0xFDD
  1870                           fsr2h	equ	0xFDA
  1871                           fsr2l	equ	0xFD9
  1872                           status	equ	0xFD8
  1873                           
  1874 ;; *************** function _InitCanHardware *****************
  1875 ;; Defined at:
  1876 ;;		line 180 in file "Can_XmitService.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;		None
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg, status,2
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1890 ;;      Params:         0       0       0       0
  1891 ;;      Locals:         0       0       0       0
  1892 ;;      Temps:          0       0       0       0
  1893 ;;      Totals:         0       0       0       0
  1894 ;;Total ram usage:        0 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    2
  1897 ;; This function calls:
  1898 ;;		Nothing
  1899 ;; This function is called by:
  1900 ;;		_RunCan_XmitService
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           	psect	text11
  1905  000ABA                     __ptext11:
  1906                           	opt stack 0
  1907  000ABA                     _InitCanHardware:
  1908                           	opt stack 26
  1909                           
  1910                           ;Can_XmitService.c: 183: PORTB = 0x00;
  1911                           
  1912                           ; BSR set to: 15
  1913                           ;incstack = 0
  1914  000ABA  0E00               	movlw	0
  1915  000ABC  6E81               	movwf	3969,c	;volatile
  1916                           
  1917                           ;Can_XmitService.c: 184: LATB = 0x00;
  1918  000ABE  0E00               	movlw	0
  1919  000AC0  6E8A               	movwf	3978,c	;volatile
  1920                           
  1921                           ;Can_XmitService.c: 185: TRISBbits.TRISB2 = 0;
  1922  000AC2  9493               	bcf	3987,2,c	;volatile
  1923                           
  1924                           ;Can_XmitService.c: 186: TRISBbits.TRISB3 = 1;
  1925  000AC4  8693               	bsf	3987,3,c	;volatile
  1926                           
  1927                           ;Can_XmitService.c: 189: CANCON = 0x80;
  1928  000AC6  0E80               	movlw	128
  1929  000AC8  6E6F               	movwf	3951,c	;volatile
  1930  000ACA                     l400:
  1931  000ACA  AE6E               	btfss	3950,7,c	;volatile
  1932  000ACC  D7FE               	goto	l400
  1933                           
  1934                           ;Can_XmitService.c: 194: BRGCON1bits.SJW0 = 1;
  1935  000ACE  8C70               	bsf	3952,6,c	;volatile
  1936                           
  1937                           ;Can_XmitService.c: 195: BRGCON2bits.SAM = 1;
  1938  000AD0  8C71               	bsf	3953,6,c	;volatile
  1939                           
  1940                           ;Can_XmitService.c: 196: BRGCON2bits.SEG2PHTS = 1;
  1941  000AD2  8E71               	bsf	3953,7,c	;volatile
  1942                           
  1943                           ;Can_XmitService.c: 197: BRGCON2bits.PRSEG1 = 1;
  1944  000AD4  8271               	bsf	3953,1,c	;volatile
  1945                           
  1946                           ;Can_XmitService.c: 198: BRGCON2bits.SEG1PH0 = 1;
  1947  000AD6  8671               	bsf	3953,3,c	;volatile
  1948                           
  1949                           ;Can_XmitService.c: 199: BRGCON2bits.SEG1PH1 = 1;
  1950  000AD8  8871               	bsf	3953,4,c	;volatile
  1951                           
  1952                           ;Can_XmitService.c: 200: BRGCON2bits.SEG1PH2 = 1;
  1953  000ADA  8A71               	bsf	3953,5,c	;volatile
  1954                           
  1955                           ;Can_XmitService.c: 201: BRGCON3bits.SEG2PH0 = 1;
  1956  000ADC  8072               	bsf	3954,0,c	;volatile
  1957                           
  1958                           ;Can_XmitService.c: 202: BRGCON3bits.SEG2PH1 = 1;
  1959  000ADE  8272               	bsf	3954,1,c	;volatile
  1960                           
  1961                           ;Can_XmitService.c: 203: BRGCON1bits.BRP0 = 1;
  1962  000AE0  8070               	bsf	3952,0,c	;volatile
  1963                           
  1964                           ;Can_XmitService.c: 204: BRGCON1bits.BRP1 = 1;
  1965  000AE2  8270               	bsf	3952,1,c	;volatile
  1966                           
  1967                           ;Can_XmitService.c: 209: RXB0CONbits.RXM0 = 1;
  1968  000AE4  8A60               	bsf	3936,5,c	;volatile
  1969                           
  1970                           ;Can_XmitService.c: 210: RXB0CONbits.RXM1 = 1;
  1971  000AE6  8C60               	bsf	3936,6,c	;volatile
  1972                           
  1973                           ;Can_XmitService.c: 211: RXF0SIDH = 0x20;
  1974  000AE8  0E20               	movlw	32
  1975  000AEA  010F               	movlb	15	; () banked
  1976  000AEC  6F00               	movwf	0,b	;volatile
  1977                           
  1978                           ;Can_XmitService.c: 212: RXF0SIDL = 0x60;
  1979  000AEE  0E60               	movlw	96
  1980  000AF0  010F               	movlb	15	; () banked
  1981  000AF2  6F01               	movwf	1,b	;volatile
  1982                           
  1983                           ;Can_XmitService.c: 213: RXM0SIDH = 0x00;
  1984  000AF4  0E00               	movlw	0
  1985  000AF6  010F               	movlb	15	; () banked
  1986  000AF8  6F18               	movwf	24,b	;volatile
  1987                           
  1988                           ;Can_XmitService.c: 214: RXM0SIDL = 0x00;
  1989  000AFA  0E00               	movlw	0
  1990  000AFC  010F               	movlb	15	; () banked
  1991  000AFE  6F19               	movwf	25,b	;volatile
  1992                           
  1993                           ; BSR set to: 15
  1994                           ;Can_XmitService.c: 216: TXB0IE = 1;
  1995  000B00  84A3               	bsf	4003,2,c	;volatile
  1996                           
  1997                           ; BSR set to: 15
  1998                           ;Can_XmitService.c: 217: RXB0IE = 1;
  1999  000B02  80A3               	bsf	4003,0,c	;volatile
  2000                           
  2001                           ; BSR set to: 15
  2002                           ;Can_XmitService.c: 218: PIE3 = 0xff;
  2003  000B04  68A3               	setf	4003,c	;volatile
  2004                           
  2005                           ; BSR set to: 15
  2006                           ;Can_XmitService.c: 222: TXB0IF = 0;
  2007  000B06  94A4               	bcf	4004,2,c	;volatile
  2008                           
  2009                           ; BSR set to: 15
  2010                           ;Can_XmitService.c: 223: RXB0IF = 0;
  2011  000B08  90A4               	bcf	4004,0,c	;volatile
  2012                           
  2013                           ; BSR set to: 15
  2014                           ;Can_XmitService.c: 224: TXB0CONbits.TXREQ = 0;
  2015  000B0A  010F               	movlb	15	; () banked
  2016  000B0C  9740               	bcf	64,3,b	;volatile
  2017                           
  2018                           ; BSR set to: 15
  2019                           ;Can_XmitService.c: 225: RXB0CONbits.RXFUL = 0;
  2020  000B0E  9E60               	bcf	3936,7,c	;volatile
  2021                           
  2022                           ;Can_XmitService.c: 230: ECANCON = 0x00;
  2023  000B10  0E00               	movlw	0
  2024  000B12  6E77               	movwf	3959,c	;volatile
  2025                           
  2026                           ;Can_XmitService.c: 231: CANCON = 0x00;
  2027  000B14  0E00               	movlw	0
  2028  000B16  6E6F               	movwf	3951,c	;volatile
  2029  000B18                     l403:
  2030  000B18  AE6E               	btfss	3950,7,c	;volatile
  2031  000B1A  0012               	return	
  2032  000B1C  D7FD               	goto	l403
  2033  000B1E                     __end_of_InitCanHardware:
  2034                           	opt stack 0
  2035                           tosu	equ	0xFFF
  2036                           tosh	equ	0xFFE
  2037                           tosl	equ	0xFFD
  2038                           pclath	equ	0xFFA
  2039                           tblptru	equ	0xFF8
  2040                           tblptrh	equ	0xFF7
  2041                           tblptrl	equ	0xFF6
  2042                           tablat	equ	0xFF5
  2043                           prodh	equ	0xFF4
  2044                           prodl	equ	0xFF3
  2045                           postinc0	equ	0xFEE
  2046                           wreg	equ	0xFE8
  2047                           indf2	equ	0xFDF
  2048                           postinc2	equ	0xFDE
  2049                           postdec2	equ	0xFDD
  2050                           fsr2h	equ	0xFDA
  2051                           fsr2l	equ	0xFD9
  2052                           status	equ	0xFD8
  2053                           
  2054 ;; *************** function _ES_DeQueue *****************
  2055 ;; Defined at:
  2056 ;;		line 164 in file "ES_Queue.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;  pBlock          2   28[COMRAM] PTR struct ES_Event_t
  2059 ;;		 -> Queue1(12), Queue0(12), 
  2060 ;;  pReturnEvent    2   30[COMRAM] PTR struct ES_Event_t
  2061 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  2062 ;; Auto vars:     Size  Location     Type
  2063 ;;  pThisQueue      2   36[COMRAM] PTR struct .
  2064 ;;		 -> Queue1(12), Queue0(12), 
  2065 ;;  NumLeft         1   35[COMRAM] unsigned char 
  2066 ;;  SaveCrit        1   34[COMRAM] unsigned char 
  2067 ;; Return value:  Size  Location     Type
  2068 ;;                  1    wreg      unsigned char 
  2069 ;; Registers used:
  2070 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2071 ;; Tracked objects:
  2072 ;;		On entry : 0/0
  2073 ;;		On exit  : 0/0
  2074 ;;		Unchanged: 0/0
  2075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2076 ;;      Params:         4       0       0       0
  2077 ;;      Locals:         4       0       0       0
  2078 ;;      Temps:          2       0       0       0
  2079 ;;      Totals:        10       0       0       0
  2080 ;;Total ram usage:       10 bytes
  2081 ;; Hardware stack levels used:    1
  2082 ;; Hardware stack levels required when called:    3
  2083 ;; This function calls:
  2084 ;;		___lbmod
  2085 ;;		___wmul
  2086 ;; This function is called by:
  2087 ;;		_ES_Run
  2088 ;;		_ES_RecallEvents
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092                           	psect	text12
  2093  0003BA                     __ptext12:
  2094                           	opt stack 0
  2095  0003BA                     _ES_DeQueue:
  2096                           	opt stack 26
  2097                           
  2098                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  2099                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  2100                           ;ES_Queue.c: 168: uint8_t NumLeft;
  2101                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  2102                           
  2103                           ;incstack = 0
  2104  0003BA  C01D  F025         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  2105  0003BE  C01E  F026         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  2106                           
  2107                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  2108  0003C2  EE20 F002          	lfsr	2,2
  2109  0003C6  5025               	movf	ES_DeQueue@pThisQueue,w,c
  2110  0003C8  26D9               	addwf	fsr2l,f,c
  2111  0003CA  5026               	movf	ES_DeQueue@pThisQueue+1,w,c
  2112  0003CC  22DA               	addwfc	fsr2h,f,c
  2113  0003CE  50DF               	movf	indf2,w,c
  2114  0003D0  B4D8               	btfsc	status,2,c
  2115  0003D2  D05E               	goto	l2243
  2116                           
  2117                           ;ES_Queue.c: 172: {
  2118                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  2119  0003D4  CFF2 F023          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  2120  0003D8  9EF2               	bcf	intcon,7,c	;volatile
  2121                           
  2122                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  2123  0003DA  EE20 F001          	lfsr	2,1
  2124  0003DE  5025               	movf	ES_DeQueue@pThisQueue,w,c
  2125  0003E0  26D9               	addwf	fsr2l,f,c
  2126  0003E2  5026               	movf	ES_DeQueue@pThisQueue+1,w,c
  2127  0003E4  22DA               	addwfc	fsr2h,f,c
  2128  0003E6  50DF               	movf	indf2,w,c
  2129  0003E8  6E21               	movwf	??_ES_DeQueue& (0+255),c
  2130  0003EA  0E01               	movlw	1
  2131  0003EC  2421               	addwf	??_ES_DeQueue,w,c
  2132  0003EE  6E17               	movwf	___wmul@multiplier,c
  2133  0003F0  6A18               	clrf	___wmul@multiplier+1,c
  2134  0003F2  0E00               	movlw	0
  2135  0003F4  2218               	addwfc	___wmul@multiplier+1,f,c
  2136  0003F6  0E00               	movlw	0
  2137  0003F8  6E1A               	movwf	___wmul@multiplicand+1,c
  2138  0003FA  0E03               	movlw	3
  2139  0003FC  6E19               	movwf	___wmul@multiplicand,c
  2140  0003FE  EC67  F006         	call	___wmul	;wreg free
  2141  000402  5017               	movf	?___wmul,w,c
  2142  000404  241D               	addwf	ES_DeQueue@pBlock,w,c
  2143  000406  6ED9               	movwf	fsr2l,c
  2144  000408  5018               	movf	?___wmul+1,w,c
  2145  00040A  201E               	addwfc	ES_DeQueue@pBlock+1,w,c
  2146  00040C  6EDA               	movwf	fsr2h,c
  2147  00040E  C01F  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  2148  000412  C020  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  2149  000416  CFDE FFE6          	movff	postinc2,postinc1
  2150  00041A  CFDE FFE6          	movff	postinc2,postinc1
  2151  00041E  CFDE FFE6          	movff	postinc2,postinc1
  2152                           
  2153                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  2154  000422  EE20 F001          	lfsr	2,1
  2155  000426  5025               	movf	ES_DeQueue@pThisQueue,w,c
  2156  000428  26D9               	addwf	fsr2l,f,c
  2157  00042A  5026               	movf	ES_DeQueue@pThisQueue+1,w,c
  2158  00042C  22DA               	addwfc	fsr2h,f,c
  2159  00042E  2ADF               	incf	indf2,f,c
  2160                           
  2161                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  2162  000430  C025  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  2163  000434  C026  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  2164  000438  EE10 F001          	lfsr	1,1
  2165  00043C  5025               	movf	ES_DeQueue@pThisQueue,w,c
  2166  00043E  26E1               	addwf	fsr1l,f,c
  2167  000440  5026               	movf	ES_DeQueue@pThisQueue+1,w,c
  2168  000442  22E2               	addwfc	fsr1h,f,c
  2169  000444  50DE               	movf	postinc2,w,c
  2170  000446  5CE6               	subwf	postinc1,w,c
  2171  000448  A0D8               	btfss	status,0,c
  2172  00044A  D016               	goto	l2239
  2173                           
  2174                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  2175  00044C  EE20 F001          	lfsr	2,1
  2176  000450  5025               	movf	ES_DeQueue@pThisQueue,w,c
  2177  000452  26D9               	addwf	fsr2l,f,c
  2178  000454  5026               	movf	ES_DeQueue@pThisQueue+1,w,c
  2179  000456  22DA               	addwfc	fsr2h,f,c
  2180  000458  C025  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  2181  00045C  C026  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  2182  000460  50E7               	movf	indf1,w,c
  2183  000462  6E11               	movwf	___lbmod@divisor,c
  2184  000464  EE10 F001          	lfsr	1,1
  2185  000468  5025               	movf	ES_DeQueue@pThisQueue,w,c
  2186  00046A  26E1               	addwf	fsr1l,f,c
  2187  00046C  5026               	movf	ES_DeQueue@pThisQueue+1,w,c
  2188  00046E  22E2               	addwfc	fsr1h,f,c
  2189  000470  50E7               	movf	indf1,w,c
  2190  000472  EC2C  F006         	call	___lbmod
  2191  000476  6EDF               	movwf	indf2,c
  2192  000478                     l2239:
  2193                           
  2194                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  2195  000478  EE20 F002          	lfsr	2,2
  2196  00047C  5025               	movf	ES_DeQueue@pThisQueue,w,c
  2197  00047E  26D9               	addwf	fsr2l,f,c
  2198  000480  5026               	movf	ES_DeQueue@pThisQueue+1,w,c
  2199  000482  22DA               	addwfc	fsr2h,f,c
  2200  000484  06DF               	decf	indf2,f,c
  2201  000486  50DF               	movf	indf2,w,c
  2202  000488  6E24               	movwf	ES_DeQueue@NumLeft,c
  2203                           
  2204                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  2205  00048A  C023  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  2206                           
  2207                           ;ES_Queue.c: 183: }else {
  2208  00048E  D012               	goto	l2249
  2209  000490                     l2243:
  2210                           
  2211                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  2212  000490  C01F  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  2213  000494  C020  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  2214  000498  0E00               	movlw	0
  2215  00049A  6EDF               	movwf	indf2,c
  2216                           
  2217                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  2218  00049C  EE20 F001          	lfsr	2,1
  2219  0004A0  501F               	movf	ES_DeQueue@pReturnEvent,w,c
  2220  0004A2  26D9               	addwf	fsr2l,f,c
  2221  0004A4  5020               	movf	ES_DeQueue@pReturnEvent+1,w,c
  2222  0004A6  22DA               	addwfc	fsr2h,f,c
  2223  0004A8  0E00               	movlw	0
  2224  0004AA  6EDE               	movwf	postinc2,c
  2225  0004AC  0E00               	movlw	0
  2226  0004AE  6EDD               	movwf	postdec2,c
  2227                           
  2228                           ;ES_Queue.c: 186: NumLeft = 0;
  2229  0004B0  0E00               	movlw	0
  2230  0004B2  6E24               	movwf	ES_DeQueue@NumLeft,c
  2231  0004B4                     l2249:
  2232                           
  2233                           ;ES_Queue.c: 187: }
  2234                           ;ES_Queue.c: 188: return NumLeft;
  2235  0004B4  5024               	movf	ES_DeQueue@NumLeft,w,c
  2236  0004B6  0012               	return	
  2237  0004B8                     __end_of_ES_DeQueue:
  2238                           	opt stack 0
  2239                           tosu	equ	0xFFF
  2240                           tosh	equ	0xFFE
  2241                           tosl	equ	0xFFD
  2242                           pclath	equ	0xFFA
  2243                           tblptru	equ	0xFF8
  2244                           tblptrh	equ	0xFF7
  2245                           tblptrl	equ	0xFF6
  2246                           tablat	equ	0xFF5
  2247                           prodh	equ	0xFF4
  2248                           prodl	equ	0xFF3
  2249                           intcon	equ	0xFF2
  2250                           postinc0	equ	0xFEE
  2251                           wreg	equ	0xFE8
  2252                           indf1	equ	0xFE7
  2253                           postinc1	equ	0xFE6
  2254                           fsr1h	equ	0xFE2
  2255                           fsr1l	equ	0xFE1
  2256                           indf2	equ	0xFDF
  2257                           postinc2	equ	0xFDE
  2258                           postdec2	equ	0xFDD
  2259                           fsr2h	equ	0xFDA
  2260                           fsr2l	equ	0xFD9
  2261                           status	equ	0xFD8
  2262                           
  2263 ;; *************** function ___lbmod *****************
  2264 ;; Defined at:
  2265 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  2266 ;; Parameters:    Size  Location     Type
  2267 ;;  dividend        1    wreg     unsigned char 
  2268 ;;  divisor         1   16[COMRAM] unsigned char 
  2269 ;; Auto vars:     Size  Location     Type
  2270 ;;  dividend        1   17[COMRAM] unsigned char 
  2271 ;;  rem             1   19[COMRAM] unsigned char 
  2272 ;;  counter         1   18[COMRAM] unsigned char 
  2273 ;; Return value:  Size  Location     Type
  2274 ;;                  1    wreg      unsigned char 
  2275 ;; Registers used:
  2276 ;;		wreg, status,2, status,0
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2282 ;;      Params:         1       0       0       0
  2283 ;;      Locals:         3       0       0       0
  2284 ;;      Temps:          0       0       0       0
  2285 ;;      Totals:         4       0       0       0
  2286 ;;Total ram usage:        4 bytes
  2287 ;; Hardware stack levels used:    1
  2288 ;; Hardware stack levels required when called:    2
  2289 ;; This function calls:
  2290 ;;		Nothing
  2291 ;; This function is called by:
  2292 ;;		_ES_DeQueue
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           	psect	text13
  2297  000C58                     __ptext13:
  2298                           	opt stack 0
  2299  000C58                     ___lbmod:
  2300                           	opt stack 26
  2301                           
  2302                           ;incstack = 0
  2303                           ;___lbmod@dividend stored from wreg
  2304  000C58  6E12               	movwf	___lbmod@dividend,c
  2305  000C5A  0E08               	movlw	8
  2306  000C5C  6E13               	movwf	___lbmod@counter,c
  2307  000C5E  0E00               	movlw	0
  2308  000C60  6E14               	movwf	___lbmod@rem,c
  2309  000C62                     l2195:
  2310  000C62  90D8               	bcf	status,0,c
  2311  000C64  3412               	rlcf	___lbmod@dividend,w,c
  2312  000C66  3414               	rlcf	___lbmod@rem,w,c
  2313  000C68  6E14               	movwf	___lbmod@rem,c
  2314  000C6A  90D8               	bcf	status,0,c
  2315  000C6C  3612               	rlcf	___lbmod@dividend,f,c
  2316  000C6E  5011               	movf	___lbmod@divisor,w,c
  2317  000C70  5C14               	subwf	___lbmod@rem,w,c
  2318  000C72  A0D8               	btfss	status,0,c
  2319  000C74  D002               	goto	l2203
  2320  000C76  5011               	movf	___lbmod@divisor,w,c
  2321  000C78  5E14               	subwf	___lbmod@rem,f,c
  2322  000C7A                     l2203:
  2323  000C7A  2E13               	decfsz	___lbmod@counter,f,c
  2324  000C7C  D7F2               	goto	l2195
  2325  000C7E  5014               	movf	___lbmod@rem,w,c
  2326  000C80  0012               	return	
  2327  000C82                     __end_of___lbmod:
  2328                           	opt stack 0
  2329                           tosu	equ	0xFFF
  2330                           tosh	equ	0xFFE
  2331                           tosl	equ	0xFFD
  2332                           pclath	equ	0xFFA
  2333                           tblptru	equ	0xFF8
  2334                           tblptrh	equ	0xFF7
  2335                           tblptrl	equ	0xFF6
  2336                           tablat	equ	0xFF5
  2337                           prodh	equ	0xFF4
  2338                           prodl	equ	0xFF3
  2339                           intcon	equ	0xFF2
  2340                           postinc0	equ	0xFEE
  2341                           wreg	equ	0xFE8
  2342                           indf1	equ	0xFE7
  2343                           postinc1	equ	0xFE6
  2344                           fsr1h	equ	0xFE2
  2345                           fsr1l	equ	0xFE1
  2346                           indf2	equ	0xFDF
  2347                           postinc2	equ	0xFDE
  2348                           postdec2	equ	0xFDD
  2349                           fsr2h	equ	0xFDA
  2350                           fsr2l	equ	0xFD9
  2351                           status	equ	0xFD8
  2352                           
  2353 ;; *************** function _ES_CheckUserEvents *****************
  2354 ;; Defined at:
  2355 ;;		line 46 in file "ES_CheckEvents.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;		None
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;  i               1   16[COMRAM] unsigned char 
  2360 ;; Return value:  Size  Location     Type
  2361 ;;                  1    wreg      unsigned char 
  2362 ;; Registers used:
  2363 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2364 ;; Tracked objects:
  2365 ;;		On entry : 0/0
  2366 ;;		On exit  : 0/0
  2367 ;;		Unchanged: 0/0
  2368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2369 ;;      Params:         0       0       0       0
  2370 ;;      Locals:         1       0       0       0
  2371 ;;      Temps:          0       0       0       0
  2372 ;;      Totals:         1       0       0       0
  2373 ;;Total ram usage:        1 bytes
  2374 ;; Hardware stack levels used:    1
  2375 ;; Hardware stack levels required when called:    3
  2376 ;; This function calls:
  2377 ;;		_Check4Keystroke
  2378 ;; This function is called by:
  2379 ;;		_ES_Run
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           	psect	text14
  2384  000B60                     __ptext14:
  2385                           	opt stack 0
  2386  000B60                     _ES_CheckUserEvents:
  2387                           	opt stack 26
  2388                           
  2389                           ;ES_CheckEvents.c: 48: uint8_t i;
  2390                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  2391                           
  2392                           ;incstack = 0
  2393  000B60  0E00               	movlw	0
  2394  000B62  6E11               	movwf	ES_CheckUserEvents@i,c
  2395  000B64  5011               	movf	ES_CheckUserEvents@i,w,c
  2396  000B66  A4D8               	btfss	status,2,c
  2397  000B68  0012               	return	
  2398                           
  2399                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  2400  000B6A  5011               	movf	ES_CheckUserEvents@i,w,c
  2401  000B6C  0D02               	mullw	2
  2402  000B6E  0E5E               	movlw	low _ES_EventList
  2403  000B70  24F3               	addwf	prodl,w,c
  2404  000B72  6EF6               	movwf	tblptrl,c
  2405  000B74  0E03               	movlw	high _ES_EventList
  2406  000B76  20F4               	addwfc	prodh,w,c
  2407  000B78  6EF7               	movwf	tblptrh,c
  2408  000B7A                     	if	0	;There are less than 3 active tblptr bytes
  2409  000B7A                     	endif
  2410  000B7A  D801               	call	u1468
  2411  000B7C  D00C               	goto	u1469
  2412  000B7E                     u1468:
  2413  000B7E  0005               	push	
  2414  000B80  6EFA               	movwf	pclath,c
  2415  000B82  0009               	tblrd		*+
  2416  000B84  50F5               	movf	tablat,w,c
  2417  000B86  6EFD               	movwf	tosl,c
  2418  000B88  0009               	tblrd		*+
  2419  000B8A  50F5               	movf	tablat,w,c
  2420  000B8C  6EFE               	movwf	tosh,c
  2421  000B8E  50F8               	movf	tblptru,w,c
  2422  000B90  6EFF               	movwf	tosu,c
  2423  000B92  50FA               	movf	pclath,w,c
  2424  000B94  0012               	return		;indir
  2425  000B96                     u1469:
  2426  000B96  06E8               	decf	wreg,f,c
  2427  000B98  B4D8               	btfsc	status,2,c
  2428  000B9A  0012               	return	
  2429                           
  2430                           ;ES_CheckEvents.c: 52: break;
  2431  000B9C  2A11               	incf	ES_CheckUserEvents@i,f,c
  2432  000B9E  D7E2               	goto	L1
  2433  000BA0                     __end_of_ES_CheckUserEvents:
  2434                           	opt stack 0
  2435                           tosu	equ	0xFFF
  2436                           tosh	equ	0xFFE
  2437                           tosl	equ	0xFFD
  2438                           pclath	equ	0xFFA
  2439                           tblptru	equ	0xFF8
  2440                           tblptrh	equ	0xFF7
  2441                           tblptrl	equ	0xFF6
  2442                           tablat	equ	0xFF5
  2443                           prodh	equ	0xFF4
  2444                           prodl	equ	0xFF3
  2445                           intcon	equ	0xFF2
  2446                           postinc0	equ	0xFEE
  2447                           wreg	equ	0xFE8
  2448                           indf1	equ	0xFE7
  2449                           postinc1	equ	0xFE6
  2450                           fsr1h	equ	0xFE2
  2451                           fsr1l	equ	0xFE1
  2452                           indf2	equ	0xFDF
  2453                           postinc2	equ	0xFDE
  2454                           postdec2	equ	0xFDD
  2455                           fsr2h	equ	0xFDA
  2456                           fsr2l	equ	0xFD9
  2457                           status	equ	0xFD8
  2458                           
  2459 ;; *************** function _Check4Keystroke *****************
  2460 ;; Defined at:
  2461 ;;		line 62 in file "EventCheckers.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;		None
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;		None
  2466 ;; Return value:  Size  Location     Type
  2467 ;;                  1    wreg      unsigned char 
  2468 ;; Registers used:
  2469 ;;		wreg
  2470 ;; Tracked objects:
  2471 ;;		On entry : 0/0
  2472 ;;		On exit  : 0/0
  2473 ;;		Unchanged: 0/0
  2474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2475 ;;      Params:         0       0       0       0
  2476 ;;      Locals:         0       0       0       0
  2477 ;;      Temps:          0       0       0       0
  2478 ;;      Totals:         0       0       0       0
  2479 ;;Total ram usage:        0 bytes
  2480 ;; Hardware stack levels used:    1
  2481 ;; Hardware stack levels required when called:    2
  2482 ;; This function calls:
  2483 ;;		Nothing
  2484 ;; This function is called by:
  2485 ;;		_ES_CheckUserEvents
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488                           
  2489                           	psect	text15
  2490  000D74                     __ptext15:
  2491                           	opt stack 0
  2492  000D74                     _Check4Keystroke:
  2493                           	opt stack 26
  2494                           
  2495                           ;EventCheckers.c: 78: return 0;
  2496                           
  2497                           ;incstack = 0
  2498  000D74  0E00               	movlw	0
  2499  000D76  0012               	return	
  2500  000D78                     __end_of_Check4Keystroke:
  2501                           	opt stack 0
  2502                           tosu	equ	0xFFF
  2503                           tosh	equ	0xFFE
  2504                           tosl	equ	0xFFD
  2505                           pclath	equ	0xFFA
  2506                           tblptru	equ	0xFF8
  2507                           tblptrh	equ	0xFF7
  2508                           tblptrl	equ	0xFF6
  2509                           tablat	equ	0xFF5
  2510                           prodh	equ	0xFF4
  2511                           prodl	equ	0xFF3
  2512                           intcon	equ	0xFF2
  2513                           postinc0	equ	0xFEE
  2514                           wreg	equ	0xFE8
  2515                           indf1	equ	0xFE7
  2516                           postinc1	equ	0xFE6
  2517                           fsr1h	equ	0xFE2
  2518                           fsr1l	equ	0xFE1
  2519                           indf2	equ	0xFDF
  2520                           postinc2	equ	0xFDE
  2521                           postdec2	equ	0xFDD
  2522                           fsr2h	equ	0xFDA
  2523                           fsr2l	equ	0xFD9
  2524                           status	equ	0xFD8
  2525                           
  2526 ;; *************** function _ES_Initialize *****************
  2527 ;; Defined at:
  2528 ;;		line 242 in file "ES_Framework.c"
  2529 ;; Parameters:    Size  Location     Type
  2530 ;;  NewRate         2    7[BANK0 ] enum E15419
  2531 ;; Auto vars:     Size  Location     Type
  2532 ;;  i               1    9[BANK0 ] unsigned char 
  2533 ;; Return value:  Size  Location     Type
  2534 ;;                  1    wreg      enum E15490
  2535 ;; Registers used:
  2536 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2537 ;; Tracked objects:
  2538 ;;		On entry : 0/0
  2539 ;;		On exit  : 0/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2542 ;;      Params:         0       2       0       0
  2543 ;;      Locals:         0       1       0       0
  2544 ;;      Temps:          0       0       0       0
  2545 ;;      Totals:         0       3       0       0
  2546 ;;Total ram usage:        3 bytes
  2547 ;; Hardware stack levels used:    1
  2548 ;; Hardware stack levels required when called:    6
  2549 ;; This function calls:
  2550 ;;		_ES_InitQueue
  2551 ;;		_ES_Timer_Init
  2552 ;;		_InitCan_XmitService
  2553 ;;		_InitToggleService
  2554 ;; This function is called by:
  2555 ;;		_main
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559                           	psect	text16
  2560  0005B0                     __ptext16:
  2561                           	opt stack 0
  2562  0005B0                     _ES_Initialize:
  2563                           	opt stack 24
  2564                           
  2565                           ;ES_Framework.c: 243: uint8_t i;
  2566                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  2567                           
  2568                           ;incstack = 0
  2569  0005B0  C093  F013         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  2570  0005B4  C094  F014         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  2571  0005B8  ECB3  F006         	call	_ES_Timer_Init	;wreg free
  2572                           
  2573                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  2574  0005BC  0E00               	movlw	0
  2575  0005BE  0100               	movlb	0	; () banked
  2576  0005C0  6F95               	movwf	ES_Initialize@i& (0+255),b
  2577  0005C2                     l2347:
  2578                           
  2579                           ; BSR set to: 0
  2580  0005C2  0E01               	movlw	1
  2581  0005C4  0100               	movlb	0	; () banked
  2582  0005C6  6595               	cpfsgt	ES_Initialize@i& (0+255),b
  2583  0005C8  D001               	goto	l2351
  2584  0005CA  D066               	goto	l2371
  2585  0005CC                     l2351:
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  2589                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  2590  0005CC  0100               	movlb	0	; () banked
  2591  0005CE  5195               	movf	ES_Initialize@i& (0+255),w,b
  2592  0005D0  0D04               	mullw	4
  2593  0005D2  0E50               	movlw	low _ServDescList
  2594  0005D4  24F3               	addwf	prodl,w,c
  2595  0005D6  6EF6               	movwf	tblptrl,c
  2596  0005D8  0E03               	movlw	high _ServDescList
  2597  0005DA  20F4               	addwfc	prodh,w,c
  2598  0005DC  6EF7               	movwf	tblptrh,c
  2599  0005DE                     	if	0	;There are less than 3 active tblptr bytes
  2600  0005DE                     	endif
  2601  0005DE  0009               	tblrd		*+
  2602  0005E0  50F5               	movf	tablat,w,c
  2603  0005E2  0009               	tblrd		*+
  2604  0005E4  10F5               	iorwf	tablat,w,c
  2605  0005E6  B4D8               	btfsc	status,2,c
  2606  0005E8  D013               	goto	l2355
  2607                           
  2608                           ; BSR set to: 0
  2609  0005EA  0100               	movlb	0	; () banked
  2610  0005EC  5195               	movf	ES_Initialize@i& (0+255),w,b
  2611  0005EE  0D04               	mullw	4
  2612  0005F0  0E02               	movlw	2
  2613  0005F2  26F3               	addwf	prodl,f,c
  2614  0005F4  0E00               	movlw	0
  2615  0005F6  22F4               	addwfc	prodh,f,c
  2616  0005F8  0E50               	movlw	low _ServDescList
  2617  0005FA  24F3               	addwf	prodl,w,c
  2618  0005FC  6EF6               	movwf	tblptrl,c
  2619  0005FE  0E03               	movlw	high _ServDescList
  2620  000600  20F4               	addwfc	prodh,w,c
  2621  000602  6EF7               	movwf	tblptrh,c
  2622  000604                     	if	0	;There are less than 3 active tblptr bytes
  2623  000604                     	endif
  2624  000604  0009               	tblrd		*+
  2625  000606  50F5               	movf	tablat,w,c
  2626  000608  0009               	tblrd		*+
  2627  00060A  10F5               	iorwf	tablat,w,c
  2628  00060C  A4D8               	btfss	status,2,c
  2629  00060E  D002               	goto	l2359
  2630  000610                     l2355:
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;ES_Framework.c: 249: return FailedPointer;
  2634  000610  0E03               	movlw	3
  2635                           
  2636                           ; BSR set to: 0
  2637  000612  0012               	return	
  2638  000614                     l2359:
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  2642  000614  0100               	movlb	0	; () banked
  2643  000616  5195               	movf	ES_Initialize@i& (0+255),w,b
  2644  000618  0D03               	mullw	3
  2645  00061A  0E58               	movlw	low _EventQueues
  2646  00061C  24F3               	addwf	prodl,w,c
  2647  00061E  6EF6               	movwf	tblptrl,c
  2648  000620  0E03               	movlw	high _EventQueues
  2649  000622  20F4               	addwfc	prodh,w,c
  2650  000624  6EF7               	movwf	tblptrh,c
  2651  000626                     	if	0	;There are less than 3 active tblptr bytes
  2652  000626                     	endif
  2653  000626  0009               	tblrd		*+
  2654  000628  CFF5 F011          	movff	tablat,ES_InitQueue@pBlock
  2655  00062C  000A               	tblrd		*-
  2656  00062E  CFF5 F012          	movff	tablat,ES_InitQueue@pBlock+1
  2657  000632  0100               	movlb	0	; () banked
  2658  000634  5195               	movf	ES_Initialize@i& (0+255),w,b
  2659  000636  0D03               	mullw	3
  2660  000638  0E02               	movlw	2
  2661  00063A  26F3               	addwf	prodl,f,c
  2662  00063C  0E00               	movlw	0
  2663  00063E  22F4               	addwfc	prodh,f,c
  2664  000640  0E58               	movlw	low _EventQueues
  2665  000642  24F3               	addwf	prodl,w,c
  2666  000644  6EF6               	movwf	tblptrl,c
  2667  000646  0E03               	movlw	high _EventQueues
  2668  000648  20F4               	addwfc	prodh,w,c
  2669  00064A  6EF7               	movwf	tblptrh,c
  2670  00064C                     	if	0	;There are less than 3 active tblptr bytes
  2671  00064C                     	endif
  2672  00064C  0008               	tblrd		*
  2673  00064E  CFF5 F013          	movff	tablat,ES_InitQueue@BlockSize
  2674  000652  ECD0  F005         	call	_ES_InitQueue	;wreg free
  2675                           
  2676                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  2677  000656  0100               	movlb	0	; () banked
  2678  000658  5195               	movf	ES_Initialize@i& (0+255),w,b
  2679  00065A  0D04               	mullw	4
  2680  00065C  0E50               	movlw	low _ServDescList
  2681  00065E  24F3               	addwf	prodl,w,c
  2682  000660  6EF6               	movwf	tblptrl,c
  2683  000662  0E03               	movlw	high _ServDescList
  2684  000664  20F4               	addwfc	prodh,w,c
  2685  000666  6EF7               	movwf	tblptrh,c
  2686  000668                     	if	0	;There are less than 3 active tblptr bytes
  2687  000668                     	endif
  2688  000668  D801               	call	u1608
  2689  00066A  D00E               	goto	u1609
  2690  00066C                     u1608:
  2691  00066C  0005               	push	
  2692  00066E  6EFA               	movwf	pclath,c
  2693  000670  0009               	tblrd		*+
  2694  000672  50F5               	movf	tablat,w,c
  2695  000674  6EFD               	movwf	tosl,c
  2696  000676  0009               	tblrd		*+
  2697  000678  50F5               	movf	tablat,w,c
  2698  00067A  6EFE               	movwf	tosh,c
  2699  00067C  50F8               	movf	tblptru,w,c
  2700  00067E  6EFF               	movwf	tosu,c
  2701  000680  50FA               	movf	pclath,w,c
  2702  000682  0100               	movlb	0	; () banked
  2703  000684  5195               	movf	ES_Initialize@i& (0+255),w,b
  2704  000686  0012               	return		;indir
  2705  000688                     u1609:
  2706  000688  06E8               	decf	wreg,f,c
  2707  00068A  B4D8               	btfsc	status,2,c
  2708  00068C  D002               	goto	l2367
  2709                           
  2710                           ;ES_Framework.c: 254: return FailedInit;
  2711  00068E  0E05               	movlw	5
  2712  000690  0012               	return	
  2713  000692                     l2367:
  2714  000692  0100               	movlb	0	; () banked
  2715  000694  2B95               	incf	ES_Initialize@i& (0+255),f,b
  2716  000696  D795               	goto	l2347
  2717  000698                     l2371:
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;ES_Framework.c: 255: }
  2721                           ;ES_Framework.c: 256: return Success;
  2722  000698  0E00               	movlw	0
  2723  00069A  0012               	return	
  2724  00069C                     __end_of_ES_Initialize:
  2725                           	opt stack 0
  2726                           tosu	equ	0xFFF
  2727                           tosh	equ	0xFFE
  2728                           tosl	equ	0xFFD
  2729                           pclath	equ	0xFFA
  2730                           tblptru	equ	0xFF8
  2731                           tblptrh	equ	0xFF7
  2732                           tblptrl	equ	0xFF6
  2733                           tablat	equ	0xFF5
  2734                           prodh	equ	0xFF4
  2735                           prodl	equ	0xFF3
  2736                           intcon	equ	0xFF2
  2737                           postinc0	equ	0xFEE
  2738                           wreg	equ	0xFE8
  2739                           indf1	equ	0xFE7
  2740                           postinc1	equ	0xFE6
  2741                           fsr1h	equ	0xFE2
  2742                           fsr1l	equ	0xFE1
  2743                           indf2	equ	0xFDF
  2744                           postinc2	equ	0xFDE
  2745                           postdec2	equ	0xFDD
  2746                           fsr2h	equ	0xFDA
  2747                           fsr2l	equ	0xFD9
  2748                           status	equ	0xFD8
  2749                           
  2750 ;; *************** function _InitCan_XmitService *****************
  2751 ;; Defined at:
  2752 ;;		line 76 in file "Can_XmitService.c"
  2753 ;; Parameters:    Size  Location     Type
  2754 ;;  Priority        1    wreg     unsigned char 
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;  Priority        1    6[BANK0 ] unsigned char 
  2757 ;;  ThisEvent       3    3[BANK0 ] struct ES_Event_t
  2758 ;; Return value:  Size  Location     Type
  2759 ;;                  1    wreg      unsigned char 
  2760 ;; Registers used:
  2761 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2762 ;; Tracked objects:
  2763 ;;		On entry : 0/0
  2764 ;;		On exit  : 0/0
  2765 ;;		Unchanged: 0/0
  2766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2767 ;;      Params:         0       0       0       0
  2768 ;;      Locals:         0       4       0       0
  2769 ;;      Temps:          0       0       0       0
  2770 ;;      Totals:         0       4       0       0
  2771 ;;Total ram usage:        4 bytes
  2772 ;; Hardware stack levels used:    1
  2773 ;; Hardware stack levels required when called:    5
  2774 ;; This function calls:
  2775 ;;		_ES_PostToService
  2776 ;; This function is called by:
  2777 ;;		_ES_Initialize
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text17
  2782  000BD6                     __ptext17:
  2783                           	opt stack 0
  2784  000BD6                     _InitCan_XmitService:
  2785                           	opt stack 24
  2786                           
  2787                           ;incstack = 0
  2788                           ;InitCan_XmitService@Priority stored from wreg
  2789  000BD6  0100               	movlb	0	; () banked
  2790  000BD8  6F92               	movwf	InitCan_XmitService@Priority& (0+255),b
  2791                           
  2792                           ;Can_XmitService.c: 78: ES_Event ThisEvent;
  2793                           ;Can_XmitService.c: 80: MyPriority = Priority;
  2794  000BDA  C092  F03C         	movff	InitCan_XmitService@Priority,Can_XmitService@MyPriority
  2795                           
  2796                           ;Can_XmitService.c: 83: ThisEvent.EventType = ES_INIT;
  2797  000BDE  0E02               	movlw	2
  2798  000BE0  0100               	movlb	0	; () banked
  2799  000BE2  6F8F               	movwf	InitCan_XmitService@ThisEvent& (0+255),b
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;Can_XmitService.c: 84: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  2803  000BE4  C08F  F028         	movff	InitCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  2804  000BE8  C090  F029         	movff	InitCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  2805  000BEC  C091  F02A         	movff	InitCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  2806  000BF0  503C               	movf	Can_XmitService@MyPriority,w,c
  2807  000BF2  ECEC  F004         	call	_ES_PostToService
  2808  000BF6  06E8               	decf	wreg,f,c
  2809  000BF8  A4D8               	btfss	status,2,c
  2810  000BFA  D002               	goto	l2329
  2811                           
  2812                           ;Can_XmitService.c: 85: {
  2813                           ;Can_XmitService.c: 86: return 1;
  2814  000BFC  0E01               	movlw	1
  2815                           
  2816                           ;Can_XmitService.c: 87: }else
  2817  000BFE  0012               	return	
  2818  000C00                     l2329:
  2819                           
  2820                           ;Can_XmitService.c: 88: {
  2821                           ;Can_XmitService.c: 89: return 0;
  2822  000C00  0E00               	movlw	0
  2823  000C02  0012               	return	
  2824  000C04                     __end_of_InitCan_XmitService:
  2825                           	opt stack 0
  2826                           tosu	equ	0xFFF
  2827                           tosh	equ	0xFFE
  2828                           tosl	equ	0xFFD
  2829                           pclath	equ	0xFFA
  2830                           tblptru	equ	0xFF8
  2831                           tblptrh	equ	0xFF7
  2832                           tblptrl	equ	0xFF6
  2833                           tablat	equ	0xFF5
  2834                           prodh	equ	0xFF4
  2835                           prodl	equ	0xFF3
  2836                           intcon	equ	0xFF2
  2837                           postinc0	equ	0xFEE
  2838                           wreg	equ	0xFE8
  2839                           indf1	equ	0xFE7
  2840                           postinc1	equ	0xFE6
  2841                           fsr1h	equ	0xFE2
  2842                           fsr1l	equ	0xFE1
  2843                           indf2	equ	0xFDF
  2844                           postinc2	equ	0xFDE
  2845                           postdec2	equ	0xFDD
  2846                           fsr2h	equ	0xFDA
  2847                           fsr2l	equ	0xFD9
  2848                           status	equ	0xFD8
  2849                           
  2850 ;; *************** function _InitToggleService *****************
  2851 ;; Defined at:
  2852 ;;		line 63 in file "ToggleService.c"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;  Priority        1    wreg     unsigned char 
  2855 ;; Auto vars:     Size  Location     Type
  2856 ;;  Priority        1    6[BANK0 ] unsigned char 
  2857 ;;  ThisEvent       3    3[BANK0 ] struct ES_Event_t
  2858 ;; Return value:  Size  Location     Type
  2859 ;;                  1    wreg      unsigned char 
  2860 ;; Registers used:
  2861 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2862 ;; Tracked objects:
  2863 ;;		On entry : 0/0
  2864 ;;		On exit  : 0/0
  2865 ;;		Unchanged: 0/0
  2866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2867 ;;      Params:         0       0       0       0
  2868 ;;      Locals:         0       4       0       0
  2869 ;;      Temps:          0       0       0       0
  2870 ;;      Totals:         0       4       0       0
  2871 ;;Total ram usage:        4 bytes
  2872 ;; Hardware stack levels used:    1
  2873 ;; Hardware stack levels required when called:    5
  2874 ;; This function calls:
  2875 ;;		_ES_PostToService
  2876 ;; This function is called by:
  2877 ;;		_ES_Initialize
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881                           	psect	text18
  2882  000B1E                     __ptext18:
  2883                           	opt stack 0
  2884  000B1E                     _InitToggleService:
  2885                           	opt stack 24
  2886                           
  2887                           ;incstack = 0
  2888                           ;InitToggleService@Priority stored from wreg
  2889  000B1E  0100               	movlb	0	; () banked
  2890  000B20  6F92               	movwf	InitToggleService@Priority& (0+255),b
  2891                           
  2892                           ;ToggleService.c: 65: ES_Event ThisEvent;
  2893                           ;ToggleService.c: 67: MyPriority = Priority;
  2894  000B22  C092  F03E         	movff	InitToggleService@Priority,_MyPriority
  2895                           
  2896                           ;ToggleService.c: 71: PORTA = 0x00;
  2897  000B26  0E00               	movlw	0
  2898  000B28  6E80               	movwf	3968,c	;volatile
  2899                           
  2900                           ;ToggleService.c: 72: LATA = 0x00;
  2901  000B2A  0E00               	movlw	0
  2902  000B2C  6E89               	movwf	3977,c	;volatile
  2903                           
  2904                           ;ToggleService.c: 74: ADCON1 = 0x0F;
  2905  000B2E  0E0F               	movlw	15
  2906  000B30  6EC1               	movwf	4033,c	;volatile
  2907                           
  2908                           ;ToggleService.c: 75: TRISA = 0b11111100;
  2909  000B32  0EFC               	movlw	252
  2910  000B34  6E92               	movwf	3986,c	;volatile
  2911                           
  2912                           ;ToggleService.c: 76: LATA1 = 0;
  2913  000B36  9289               	bcf	3977,1,c	;volatile
  2914                           
  2915                           ;ToggleService.c: 77: LATA0 = 1;
  2916  000B38  8089               	bsf	3977,0,c	;volatile
  2917                           
  2918                           ;ToggleService.c: 81: ThisEvent.EventType = ES_INIT;
  2919  000B3A  0E02               	movlw	2
  2920  000B3C  0100               	movlb	0	; () banked
  2921  000B3E  6F8F               	movwf	InitToggleService@ThisEvent& (0+255),b
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;ToggleService.c: 82: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  2925  000B40  C08F  F028         	movff	InitToggleService@ThisEvent,ES_PostToService@TheEvent
  2926  000B44  C090  F029         	movff	InitToggleService@ThisEvent+1,ES_PostToService@TheEvent+1
  2927  000B48  C091  F02A         	movff	InitToggleService@ThisEvent+2,ES_PostToService@TheEvent+2
  2928  000B4C  503E               	movf	_MyPriority,w,c
  2929  000B4E  ECEC  F004         	call	_ES_PostToService
  2930  000B52  06E8               	decf	wreg,f,c
  2931  000B54  A4D8               	btfss	status,2,c
  2932  000B56  D002               	goto	l2301
  2933                           
  2934                           ;ToggleService.c: 83: {
  2935                           ;ToggleService.c: 84: return 1;
  2936  000B58  0E01               	movlw	1
  2937                           
  2938                           ;ToggleService.c: 85: }else
  2939  000B5A  0012               	return	
  2940  000B5C                     l2301:
  2941                           
  2942                           ;ToggleService.c: 86: {
  2943                           ;ToggleService.c: 87: return 0;
  2944  000B5C  0E00               	movlw	0
  2945  000B5E  0012               	return	
  2946  000B60                     __end_of_InitToggleService:
  2947                           	opt stack 0
  2948                           tosu	equ	0xFFF
  2949                           tosh	equ	0xFFE
  2950                           tosl	equ	0xFFD
  2951                           pclath	equ	0xFFA
  2952                           tblptru	equ	0xFF8
  2953                           tblptrh	equ	0xFF7
  2954                           tblptrl	equ	0xFF6
  2955                           tablat	equ	0xFF5
  2956                           prodh	equ	0xFF4
  2957                           prodl	equ	0xFF3
  2958                           intcon	equ	0xFF2
  2959                           postinc0	equ	0xFEE
  2960                           wreg	equ	0xFE8
  2961                           indf1	equ	0xFE7
  2962                           postinc1	equ	0xFE6
  2963                           fsr1h	equ	0xFE2
  2964                           fsr1l	equ	0xFE1
  2965                           indf2	equ	0xFDF
  2966                           postinc2	equ	0xFDE
  2967                           postdec2	equ	0xFDD
  2968                           fsr2h	equ	0xFDA
  2969                           fsr2l	equ	0xFD9
  2970                           status	equ	0xFD8
  2971                           
  2972 ;; *************** function _ES_PostToService *****************
  2973 ;; Defined at:
  2974 ;;		line 351 in file "ES_Framework.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;  WhichService    1    wreg     unsigned char 
  2977 ;;  TheEvent        3   39[COMRAM] struct ES_Event_t
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;  WhichService    1    2[BANK0 ] unsigned char 
  2980 ;; Return value:  Size  Location     Type
  2981 ;;                  1    wreg      unsigned char 
  2982 ;; Registers used:
  2983 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2984 ;; Tracked objects:
  2985 ;;		On entry : 0/0
  2986 ;;		On exit  : 0/0
  2987 ;;		Unchanged: 0/0
  2988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2989 ;;      Params:         3       0       0       0
  2990 ;;      Locals:         0       1       0       0
  2991 ;;      Temps:          0       2       0       0
  2992 ;;      Totals:         3       3       0       0
  2993 ;;Total ram usage:        6 bytes
  2994 ;; Hardware stack levels used:    1
  2995 ;; Hardware stack levels required when called:    4
  2996 ;; This function calls:
  2997 ;;		_ES_EnQueueFIFO
  2998 ;; This function is called by:
  2999 ;;		_InitToggleService
  3000 ;;		_PostToggleService
  3001 ;;		_InitCan_XmitService
  3002 ;;		_PostCan_TransmitService
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           	psect	text19
  3007  0009D8                     __ptext19:
  3008                           	opt stack 0
  3009  0009D8                     _ES_PostToService:
  3010                           	opt stack 22
  3011                           
  3012                           ;incstack = 0
  3013                           ;ES_PostToService@WhichService stored from wreg
  3014  0009D8  0100               	movlb	0	; () banked
  3015  0009DA  6F8E               	movwf	ES_PostToService@WhichService& (0+255),b
  3016                           
  3017                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  3018                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  3019                           ;ES_Framework.c: 354: 1 )){
  3020  0009DC  0E02               	movlw	2
  3021  0009DE  0100               	movlb	0	; () banked
  3022  0009E0  618E               	cpfslt	ES_PostToService@WhichService& (0+255),b
  3023  0009E2  D031               	goto	l2101
  3024                           
  3025                           ; BSR set to: 0
  3026  0009E4  0100               	movlb	0	; () banked
  3027  0009E6  518E               	movf	ES_PostToService@WhichService& (0+255),w,b
  3028  0009E8  0D03               	mullw	3
  3029  0009EA  0E58               	movlw	low _EventQueues
  3030  0009EC  24F3               	addwf	prodl,w,c
  3031  0009EE  6EF6               	movwf	tblptrl,c
  3032  0009F0  0E03               	movlw	high _EventQueues
  3033  0009F2  20F4               	addwfc	prodh,w,c
  3034  0009F4  6EF7               	movwf	tblptrh,c
  3035  0009F6                     	if	0	;There are less than 3 active tblptr bytes
  3036  0009F6                     	endif
  3037  0009F6  0009               	tblrd		*+
  3038  0009F8  CFF5 F01D          	movff	tablat,ES_EnQueueFIFO@pBlock
  3039  0009FC  000A               	tblrd		*-
  3040  0009FE  CFF5 F01E          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  3041  000A02  C028  F01F         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  3042  000A06  C029  F020         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  3043  000A0A  C02A  F021         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  3044  000A0E  ECC2  F003         	call	_ES_EnQueueFIFO	;wreg free
  3045  000A12  06E8               	decf	wreg,f,c
  3046  000A14  A4D8               	btfss	status,2,c
  3047  000A16  D017               	goto	l2101
  3048                           
  3049                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  3050  000A18  0100               	movlb	0	; () banked
  3051  000A1A  518E               	movf	ES_PostToService@WhichService& (0+255),w,b
  3052  000A1C  0D02               	mullw	2
  3053  000A1E  0E01               	movlw	low _BitNum2SetMask
  3054  000A20  24F3               	addwf	prodl,w,c
  3055  000A22  6EF6               	movwf	tblptrl,c
  3056  000A24  0E03               	movlw	high _BitNum2SetMask
  3057  000A26  20F4               	addwfc	prodh,w,c
  3058  000A28  6EF7               	movwf	tblptrh,c
  3059  000A2A                     	if	0	;There are less than 3 active tblptr bytes
  3060  000A2A                     	endif
  3061  000A2A  0009               	tblrd		*+
  3062  000A2C  CFF5 F08C          	movff	tablat,??_ES_PostToService
  3063  000A30  0009               	tblrd		*+
  3064  000A32  CFF5 F08D          	movff	tablat,??_ES_PostToService+1
  3065  000A36  0100               	movlb	0	; () banked
  3066  000A38  518C               	movf	??_ES_PostToService& (0+255),w,b
  3067  000A3A  1234               	iorwf	_Ready,f,c
  3068  000A3C  0100               	movlb	0	; () banked
  3069  000A3E  518D               	movf	(??_ES_PostToService+1)& (0+255),w,b
  3070  000A40  1235               	iorwf	_Ready+1,f,c
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;ES_Framework.c: 356: return 1;
  3074  000A42  0E01               	movlw	1
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;ES_Framework.c: 357: } else
  3078                           
  3079                           ; BSR set to: 0
  3080  000A44  0012               	return	
  3081  000A46                     l2101:
  3082                           
  3083                           ;ES_Framework.c: 358: return 0;
  3084  000A46  0E00               	movlw	0
  3085  000A48  0012               	return	
  3086  000A4A                     __end_of_ES_PostToService:
  3087                           	opt stack 0
  3088                           tosu	equ	0xFFF
  3089                           tosh	equ	0xFFE
  3090                           tosl	equ	0xFFD
  3091                           pclath	equ	0xFFA
  3092                           tblptru	equ	0xFF8
  3093                           tblptrh	equ	0xFF7
  3094                           tblptrl	equ	0xFF6
  3095                           tablat	equ	0xFF5
  3096                           prodh	equ	0xFF4
  3097                           prodl	equ	0xFF3
  3098                           intcon	equ	0xFF2
  3099                           postinc0	equ	0xFEE
  3100                           wreg	equ	0xFE8
  3101                           indf1	equ	0xFE7
  3102                           postinc1	equ	0xFE6
  3103                           fsr1h	equ	0xFE2
  3104                           fsr1l	equ	0xFE1
  3105                           indf2	equ	0xFDF
  3106                           postinc2	equ	0xFDE
  3107                           postdec2	equ	0xFDD
  3108                           fsr2h	equ	0xFDA
  3109                           fsr2l	equ	0xFD9
  3110                           status	equ	0xFD8
  3111                           
  3112 ;; *************** function _ES_EnQueueFIFO *****************
  3113 ;; Defined at:
  3114 ;;		line 85 in file "ES_Queue.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;  pBlock          2   28[COMRAM] PTR struct ES_Event_t
  3117 ;;		 -> Queue1(12), Queue0(12), 
  3118 ;;  Event2Add       3   30[COMRAM] struct ES_Event_t
  3119 ;; Auto vars:     Size  Location     Type
  3120 ;;  pThisQueue      2   37[COMRAM] PTR struct .
  3121 ;;		 -> Queue1(12), Queue0(12), 
  3122 ;;  SaveCrit        1   36[COMRAM] unsigned char 
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  1    wreg      unsigned char 
  3125 ;; Registers used:
  3126 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3132 ;;      Params:         5       0       0       0
  3133 ;;      Locals:         3       0       0       0
  3134 ;;      Temps:          3       0       0       0
  3135 ;;      Totals:        11       0       0       0
  3136 ;;Total ram usage:       11 bytes
  3137 ;; Hardware stack levels used:    1
  3138 ;; Hardware stack levels required when called:    3
  3139 ;; This function calls:
  3140 ;;		___awmod
  3141 ;;		___wmul
  3142 ;; This function is called by:
  3143 ;;		_ES_PostToService
  3144 ;;		_ES_PostAll
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           	psect	text20
  3149  000784                     __ptext20:
  3150                           	opt stack 0
  3151  000784                     _ES_EnQueueFIFO:
  3152                           	opt stack 22
  3153                           
  3154                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  3155                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  3156                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  3157                           
  3158                           ;incstack = 0
  3159  000784  C01D  F026         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  3160  000788  C01E  F027         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  3161                           
  3162                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  3163  00078C  C026  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3164  000790  C027  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3165  000794  EE10 F002          	lfsr	1,2
  3166  000798  5026               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3167  00079A  26E1               	addwf	fsr1l,f,c
  3168  00079C  5027               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3169  00079E  22E2               	addwfc	fsr1h,f,c
  3170  0007A0  50DE               	movf	postinc2,w,c
  3171  0007A2  5CE6               	subwf	postinc1,w,c
  3172  0007A4  B0D8               	btfsc	status,0,c
  3173  0007A6  D046               	goto	l2085
  3174                           
  3175                           ;ES_Queue.c: 92: {
  3176                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  3177  0007A8  CFF2 F025          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  3178  0007AC  9EF2               	bcf	intcon,7,c	;volatile
  3179                           
  3180                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  3181                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  3182  0007AE  C026  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3183  0007B2  C027  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3184  0007B6  50DF               	movf	indf2,w,c
  3185  0007B8  6E22               	movwf	??_ES_EnQueueFIFO& (0+255),c
  3186  0007BA  5022               	movf	??_ES_EnQueueFIFO,w,c
  3187  0007BC  6E13               	movwf	___awmod@divisor,c
  3188  0007BE  6A14               	clrf	___awmod@divisor+1,c
  3189  0007C0  EE20 F002          	lfsr	2,2
  3190  0007C4  5026               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3191  0007C6  26D9               	addwf	fsr2l,f,c
  3192  0007C8  5027               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3193  0007CA  22DA               	addwfc	fsr2h,f,c
  3194  0007CC  50DF               	movf	indf2,w,c
  3195  0007CE  6E23               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),c
  3196  0007D0  EE20 F001          	lfsr	2,1
  3197  0007D4  5026               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3198  0007D6  26D9               	addwf	fsr2l,f,c
  3199  0007D8  5027               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3200  0007DA  22DA               	addwfc	fsr2h,f,c
  3201  0007DC  50DF               	movf	indf2,w,c
  3202  0007DE  6E24               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),c
  3203  0007E0  5024               	movf	??_ES_EnQueueFIFO+2,w,c
  3204  0007E2  2423               	addwf	??_ES_EnQueueFIFO+1,w,c
  3205  0007E4  6E11               	movwf	___awmod@dividend,c
  3206  0007E6  6A12               	clrf	___awmod@dividend+1,c
  3207  0007E8  3612               	rlcf	___awmod@dividend+1,f,c
  3208  0007EA  EC25  F005         	call	___awmod	;wreg free
  3209  0007EE  0E01               	movlw	1
  3210  0007F0  2411               	addwf	?___awmod,w,c
  3211  0007F2  6E17               	movwf	___wmul@multiplier,c
  3212  0007F4  0E00               	movlw	0
  3213  0007F6  2012               	addwfc	?___awmod+1,w,c
  3214  0007F8  6E18               	movwf	___wmul@multiplier+1,c
  3215  0007FA  0E00               	movlw	0
  3216  0007FC  6E1A               	movwf	___wmul@multiplicand+1,c
  3217  0007FE  0E03               	movlw	3
  3218  000800  6E19               	movwf	___wmul@multiplicand,c
  3219  000802  EC67  F006         	call	___wmul	;wreg free
  3220  000806  5017               	movf	?___wmul,w,c
  3221  000808  241D               	addwf	ES_EnQueueFIFO@pBlock,w,c
  3222  00080A  6ED9               	movwf	fsr2l,c
  3223  00080C  5018               	movf	?___wmul+1,w,c
  3224  00080E  201E               	addwfc	ES_EnQueueFIFO@pBlock+1,w,c
  3225  000810  6EDA               	movwf	fsr2h,c
  3226  000812  C01F  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  3227  000816  C020  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  3228  00081A  C021  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  3229                           
  3230                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  3231  00081E  EE20 F002          	lfsr	2,2
  3232  000822  5026               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3233  000824  26D9               	addwf	fsr2l,f,c
  3234  000826  5027               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3235  000828  22DA               	addwfc	fsr2h,f,c
  3236  00082A  2ADF               	incf	indf2,f,c
  3237                           
  3238                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  3239  00082C  C025  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  3240                           
  3241                           ;ES_Queue.c: 101: return(1);
  3242  000830  0E01               	movlw	1
  3243                           
  3244                           ;ES_Queue.c: 102: }else
  3245  000832  0012               	return	
  3246  000834                     l2085:
  3247                           
  3248                           ;ES_Queue.c: 103: return(0);
  3249  000834  0E00               	movlw	0
  3250  000836  0012               	return	
  3251  000838                     __end_of_ES_EnQueueFIFO:
  3252                           	opt stack 0
  3253                           tosu	equ	0xFFF
  3254                           tosh	equ	0xFFE
  3255                           tosl	equ	0xFFD
  3256                           pclath	equ	0xFFA
  3257                           tblptru	equ	0xFF8
  3258                           tblptrh	equ	0xFF7
  3259                           tblptrl	equ	0xFF6
  3260                           tablat	equ	0xFF5
  3261                           prodh	equ	0xFF4
  3262                           prodl	equ	0xFF3
  3263                           intcon	equ	0xFF2
  3264                           postinc0	equ	0xFEE
  3265                           wreg	equ	0xFE8
  3266                           indf1	equ	0xFE7
  3267                           postinc1	equ	0xFE6
  3268                           fsr1h	equ	0xFE2
  3269                           fsr1l	equ	0xFE1
  3270                           indf2	equ	0xFDF
  3271                           postinc2	equ	0xFDE
  3272                           postdec2	equ	0xFDD
  3273                           fsr2h	equ	0xFDA
  3274                           fsr2l	equ	0xFD9
  3275                           status	equ	0xFD8
  3276                           
  3277 ;; *************** function ___wmul *****************
  3278 ;; Defined at:
  3279 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  3280 ;; Parameters:    Size  Location     Type
  3281 ;;  multiplier      2   22[COMRAM] unsigned int 
  3282 ;;  multiplicand    2   24[COMRAM] unsigned int 
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;  product         2   26[COMRAM] unsigned int 
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  2   22[COMRAM] unsigned int 
  3287 ;; Registers used:
  3288 ;;		wreg, status,2, status,0, prodl, prodh
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3294 ;;      Params:         4       0       0       0
  3295 ;;      Locals:         2       0       0       0
  3296 ;;      Temps:          0       0       0       0
  3297 ;;      Totals:         6       0       0       0
  3298 ;;Total ram usage:        6 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:    2
  3301 ;; This function calls:
  3302 ;;		Nothing
  3303 ;; This function is called by:
  3304 ;;		_ES_EnQueueFIFO
  3305 ;;		_ES_DeQueue
  3306 ;;		_ES_EnQueueLIFO
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310                           	psect	text21
  3311  000CCE                     __ptext21:
  3312                           	opt stack 0
  3313  000CCE                     ___wmul:
  3314                           	opt stack 22
  3315                           
  3316                           ;incstack = 0
  3317  000CCE  5017               	movf	___wmul@multiplier,w,c
  3318  000CD0  0219               	mulwf	___wmul@multiplicand,c
  3319  000CD2  CFF3 F01B          	movff	prodl,___wmul@product
  3320  000CD6  CFF4 F01C          	movff	prodh,___wmul@product+1
  3321  000CDA  5017               	movf	___wmul@multiplier,w,c
  3322  000CDC  021A               	mulwf	___wmul@multiplicand+1,c
  3323  000CDE  50F3               	movf	prodl,w,c
  3324  000CE0  261C               	addwf	___wmul@product+1,f,c
  3325  000CE2  5018               	movf	___wmul@multiplier+1,w,c
  3326  000CE4  0219               	mulwf	___wmul@multiplicand,c
  3327  000CE6  50F3               	movf	prodl,w,c
  3328  000CE8  261C               	addwf	___wmul@product+1,f,c
  3329  000CEA  C01B  F017         	movff	___wmul@product,?___wmul
  3330  000CEE  C01C  F018         	movff	___wmul@product+1,?___wmul+1
  3331  000CF2  0012               	return	
  3332  000CF4                     __end_of___wmul:
  3333                           	opt stack 0
  3334                           tosu	equ	0xFFF
  3335                           tosh	equ	0xFFE
  3336                           tosl	equ	0xFFD
  3337                           pclath	equ	0xFFA
  3338                           tblptru	equ	0xFF8
  3339                           tblptrh	equ	0xFF7
  3340                           tblptrl	equ	0xFF6
  3341                           tablat	equ	0xFF5
  3342                           prodh	equ	0xFF4
  3343                           prodl	equ	0xFF3
  3344                           intcon	equ	0xFF2
  3345                           postinc0	equ	0xFEE
  3346                           wreg	equ	0xFE8
  3347                           indf1	equ	0xFE7
  3348                           postinc1	equ	0xFE6
  3349                           fsr1h	equ	0xFE2
  3350                           fsr1l	equ	0xFE1
  3351                           indf2	equ	0xFDF
  3352                           postinc2	equ	0xFDE
  3353                           postdec2	equ	0xFDD
  3354                           fsr2h	equ	0xFDA
  3355                           fsr2l	equ	0xFD9
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function ___awmod *****************
  3359 ;; Defined at:
  3360 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  dividend        2   16[COMRAM] int 
  3363 ;;  divisor         2   18[COMRAM] int 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  sign            1   21[COMRAM] unsigned char 
  3366 ;;  counter         1   20[COMRAM] unsigned char 
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  2   16[COMRAM] int 
  3369 ;; Registers used:
  3370 ;;		wreg, status,2, status,0
  3371 ;; Tracked objects:
  3372 ;;		On entry : 0/0
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3376 ;;      Params:         4       0       0       0
  3377 ;;      Locals:         2       0       0       0
  3378 ;;      Temps:          0       0       0       0
  3379 ;;      Totals:         6       0       0       0
  3380 ;;Total ram usage:        6 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; Hardware stack levels required when called:    2
  3383 ;; This function calls:
  3384 ;;		Nothing
  3385 ;; This function is called by:
  3386 ;;		_ES_EnQueueFIFO
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           	psect	text22
  3391  000A4A                     __ptext22:
  3392                           	opt stack 0
  3393  000A4A                     ___awmod:
  3394                           	opt stack 22
  3395                           
  3396                           ;incstack = 0
  3397  000A4A  0E00               	movlw	0
  3398  000A4C  6E16               	movwf	___awmod@sign,c
  3399  000A4E  AE12               	btfss	___awmod@dividend+1,7,c
  3400  000A50  D006               	goto	l2041
  3401  000A52  6C11               	negf	___awmod@dividend,c
  3402  000A54  1E12               	comf	___awmod@dividend+1,f,c
  3403  000A56  B0D8               	btfsc	status,0,c
  3404  000A58  2A12               	incf	___awmod@dividend+1,f,c
  3405  000A5A  0E01               	movlw	1
  3406  000A5C  6E16               	movwf	___awmod@sign,c
  3407  000A5E                     l2041:
  3408  000A5E  AE14               	btfss	___awmod@divisor+1,7,c
  3409  000A60  D004               	goto	l2045
  3410  000A62  6C13               	negf	___awmod@divisor,c
  3411  000A64  1E14               	comf	___awmod@divisor+1,f,c
  3412  000A66  B0D8               	btfsc	status,0,c
  3413  000A68  2A14               	incf	___awmod@divisor+1,f,c
  3414  000A6A                     l2045:
  3415  000A6A  5013               	movf	___awmod@divisor,w,c
  3416  000A6C  1014               	iorwf	___awmod@divisor+1,w,c
  3417  000A6E  B4D8               	btfsc	status,2,c
  3418  000A70  D018               	goto	l2061
  3419  000A72  0E01               	movlw	1
  3420  000A74  6E15               	movwf	___awmod@counter,c
  3421  000A76  D004               	goto	l2051
  3422  000A78                     l2049:
  3423  000A78  90D8               	bcf	status,0,c
  3424  000A7A  3613               	rlcf	___awmod@divisor,f,c
  3425  000A7C  3614               	rlcf	___awmod@divisor+1,f,c
  3426  000A7E  2A15               	incf	___awmod@counter,f,c
  3427  000A80                     l2051:
  3428  000A80  AE14               	btfss	___awmod@divisor+1,7,c
  3429  000A82  D7FA               	goto	l2049
  3430  000A84                     l2053:
  3431  000A84  5013               	movf	___awmod@divisor,w,c
  3432  000A86  5C11               	subwf	___awmod@dividend,w,c
  3433  000A88  5014               	movf	___awmod@divisor+1,w,c
  3434  000A8A  5812               	subwfb	___awmod@dividend+1,w,c
  3435  000A8C  A0D8               	btfss	status,0,c
  3436  000A8E  D004               	goto	l2057
  3437  000A90  5013               	movf	___awmod@divisor,w,c
  3438  000A92  5E11               	subwf	___awmod@dividend,f,c
  3439  000A94  5014               	movf	___awmod@divisor+1,w,c
  3440  000A96  5A12               	subwfb	___awmod@dividend+1,f,c
  3441  000A98                     l2057:
  3442  000A98  90D8               	bcf	status,0,c
  3443  000A9A  3214               	rrcf	___awmod@divisor+1,f,c
  3444  000A9C  3213               	rrcf	___awmod@divisor,f,c
  3445  000A9E  2E15               	decfsz	___awmod@counter,f,c
  3446  000AA0  D7F1               	goto	l2053
  3447  000AA2                     l2061:
  3448  000AA2  5016               	movf	___awmod@sign,w,c
  3449  000AA4  B4D8               	btfsc	status,2,c
  3450  000AA6  D004               	goto	l2065
  3451  000AA8  6C11               	negf	___awmod@dividend,c
  3452  000AAA  1E12               	comf	___awmod@dividend+1,f,c
  3453  000AAC  B0D8               	btfsc	status,0,c
  3454  000AAE  2A12               	incf	___awmod@dividend+1,f,c
  3455  000AB0                     l2065:
  3456  000AB0  C011  F011         	movff	___awmod@dividend,?___awmod
  3457  000AB4  C012  F012         	movff	___awmod@dividend+1,?___awmod+1
  3458  000AB8  0012               	return	
  3459  000ABA                     __end_of___awmod:
  3460                           	opt stack 0
  3461                           tosu	equ	0xFFF
  3462                           tosh	equ	0xFFE
  3463                           tosl	equ	0xFFD
  3464                           pclath	equ	0xFFA
  3465                           tblptru	equ	0xFF8
  3466                           tblptrh	equ	0xFF7
  3467                           tblptrl	equ	0xFF6
  3468                           tablat	equ	0xFF5
  3469                           prodh	equ	0xFF4
  3470                           prodl	equ	0xFF3
  3471                           intcon	equ	0xFF2
  3472                           postinc0	equ	0xFEE
  3473                           wreg	equ	0xFE8
  3474                           indf1	equ	0xFE7
  3475                           postinc1	equ	0xFE6
  3476                           fsr1h	equ	0xFE2
  3477                           fsr1l	equ	0xFE1
  3478                           indf2	equ	0xFDF
  3479                           postinc2	equ	0xFDE
  3480                           postdec2	equ	0xFDD
  3481                           fsr2h	equ	0xFDA
  3482                           fsr2l	equ	0xFD9
  3483                           status	equ	0xFD8
  3484                           
  3485 ;; *************** function _ES_Timer_Init *****************
  3486 ;; Defined at:
  3487 ;;		line 130 in file "ES_Timers.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;  Rate            2   18[COMRAM] enum E15419
  3490 ;; Auto vars:     Size  Location     Type
  3491 ;;		None
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  1    wreg      void 
  3494 ;; Registers used:
  3495 ;;		wreg, status,2, cstack
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3501 ;;      Params:         2       0       0       0
  3502 ;;      Locals:         0       0       0       0
  3503 ;;      Temps:          0       0       0       0
  3504 ;;      Totals:         2       0       0       0
  3505 ;;Total ram usage:        2 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    3
  3508 ;; This function calls:
  3509 ;;		__HW_Timer_Init
  3510 ;; This function is called by:
  3511 ;;		_ES_Initialize
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           	psect	text23
  3516  000D66                     __ptext23:
  3517                           	opt stack 0
  3518  000D66                     _ES_Timer_Init:
  3519                           	opt stack 26
  3520                           
  3521                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  3522                           
  3523                           ;incstack = 0
  3524  000D66  C013  F011         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  3525  000D6A  C014  F012         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  3526  000D6E  EC88  F006         	call	__HW_Timer_Init	;wreg free
  3527  000D72  0012               	return		;funcret
  3528  000D74                     __end_of_ES_Timer_Init:
  3529                           	opt stack 0
  3530                           tosu	equ	0xFFF
  3531                           tosh	equ	0xFFE
  3532                           tosl	equ	0xFFD
  3533                           pclath	equ	0xFFA
  3534                           tblptru	equ	0xFF8
  3535                           tblptrh	equ	0xFF7
  3536                           tblptrl	equ	0xFF6
  3537                           tablat	equ	0xFF5
  3538                           prodh	equ	0xFF4
  3539                           prodl	equ	0xFF3
  3540                           intcon	equ	0xFF2
  3541                           postinc0	equ	0xFEE
  3542                           wreg	equ	0xFE8
  3543                           indf1	equ	0xFE7
  3544                           postinc1	equ	0xFE6
  3545                           fsr1h	equ	0xFE2
  3546                           fsr1l	equ	0xFE1
  3547                           indf2	equ	0xFDF
  3548                           postinc2	equ	0xFDE
  3549                           postdec2	equ	0xFDD
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554 ;; *************** function __HW_Timer_Init *****************
  3555 ;; Defined at:
  3556 ;;		line 72 in file "ES_Port.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  Rate            2   16[COMRAM] enum E15412
  3559 ;; Auto vars:     Size  Location     Type
  3560 ;;		None
  3561 ;; Return value:  Size  Location     Type
  3562 ;;                  1    wreg      void 
  3563 ;; Registers used:
  3564 ;;		wreg, status,2
  3565 ;; Tracked objects:
  3566 ;;		On entry : 0/0
  3567 ;;		On exit  : 0/0
  3568 ;;		Unchanged: 0/0
  3569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3570 ;;      Params:         2       0       0       0
  3571 ;;      Locals:         0       0       0       0
  3572 ;;      Temps:          0       0       0       0
  3573 ;;      Totals:         2       0       0       0
  3574 ;;Total ram usage:        2 bytes
  3575 ;; Hardware stack levels used:    1
  3576 ;; Hardware stack levels required when called:    2
  3577 ;; This function calls:
  3578 ;;		Nothing
  3579 ;; This function is called by:
  3580 ;;		_ES_Timer_Init
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text24
  3585  000D10                     __ptext24:
  3586                           	opt stack 0
  3587  000D10                     __HW_Timer_Init:
  3588                           	opt stack 26
  3589                           
  3590                           ;ES_Port.c: 80: PIE1 = 0b00000100;
  3591                           
  3592                           ;incstack = 0
  3593  000D10  0E04               	movlw	4
  3594  000D12  6E9D               	movwf	3997,c	;volatile
  3595                           
  3596                           ;ES_Port.c: 85: INTCON = 0b01000000;
  3597  000D14  0E40               	movlw	64
  3598  000D16  6EF2               	movwf	intcon,c	;volatile
  3599                           
  3600                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
  3601  000D18  0E0A               	movlw	10
  3602  000D1A  6EBD               	movwf	4029,c	;volatile
  3603                           
  3604                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
  3605  000D1C  0E01               	movlw	1
  3606  000D1E  6EBE               	movwf	4030,c	;volatile
  3607                           
  3608                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
  3609  000D20  0E00               	movlw	0
  3610  000D22  6EBF               	movwf	4031,c	;volatile
  3611                           
  3612                           ;ES_Port.c: 107: T1CON = 0b00100001;
  3613  000D24  0E21               	movlw	33
  3614  000D26  6ECD               	movwf	4045,c	;volatile
  3615                           
  3616                           ;ES_Port.c: 109: {GIE = 1;};
  3617  000D28  8EF2               	bsf	intcon,7,c	;volatile
  3618  000D2A  0012               	return		;funcret
  3619  000D2C                     __end_of__HW_Timer_Init:
  3620                           	opt stack 0
  3621                           tosu	equ	0xFFF
  3622                           tosh	equ	0xFFE
  3623                           tosl	equ	0xFFD
  3624                           pclath	equ	0xFFA
  3625                           tblptru	equ	0xFF8
  3626                           tblptrh	equ	0xFF7
  3627                           tblptrl	equ	0xFF6
  3628                           tablat	equ	0xFF5
  3629                           prodh	equ	0xFF4
  3630                           prodl	equ	0xFF3
  3631                           intcon	equ	0xFF2
  3632                           postinc0	equ	0xFEE
  3633                           wreg	equ	0xFE8
  3634                           indf1	equ	0xFE7
  3635                           postinc1	equ	0xFE6
  3636                           fsr1h	equ	0xFE2
  3637                           fsr1l	equ	0xFE1
  3638                           indf2	equ	0xFDF
  3639                           postinc2	equ	0xFDE
  3640                           postdec2	equ	0xFDD
  3641                           fsr2h	equ	0xFDA
  3642                           fsr2l	equ	0xFD9
  3643                           status	equ	0xFD8
  3644                           
  3645 ;; *************** function _ES_InitQueue *****************
  3646 ;; Defined at:
  3647 ;;		line 58 in file "ES_Queue.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;  pBlock          2   16[COMRAM] PTR struct ES_Event_t
  3650 ;;		 -> Queue1(12), Queue0(12), 
  3651 ;;  BlockSize       1   18[COMRAM] unsigned char 
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;  pThisQueue      2   19[COMRAM] PTR struct .
  3654 ;;		 -> Queue1(12), Queue0(12), 
  3655 ;; Return value:  Size  Location     Type
  3656 ;;                  1    wreg      unsigned char 
  3657 ;; Registers used:
  3658 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3659 ;; Tracked objects:
  3660 ;;		On entry : 0/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3664 ;;      Params:         3       0       0       0
  3665 ;;      Locals:         2       0       0       0
  3666 ;;      Temps:          0       0       0       0
  3667 ;;      Totals:         5       0       0       0
  3668 ;;Total ram usage:        5 bytes
  3669 ;; Hardware stack levels used:    1
  3670 ;; Hardware stack levels required when called:    2
  3671 ;; This function calls:
  3672 ;;		Nothing
  3673 ;; This function is called by:
  3674 ;;		_ES_Initialize
  3675 ;; This function uses a non-reentrant model
  3676 ;;
  3677                           
  3678                           	psect	text25
  3679  000BA0                     __ptext25:
  3680                           	opt stack 0
  3681  000BA0                     _ES_InitQueue:
  3682                           	opt stack 27
  3683                           
  3684                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  3685                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  3686                           
  3687                           ;incstack = 0
  3688  000BA0  C011  F014         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  3689  000BA4  C012  F015         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  3690                           
  3691                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  3692  000BA8  0413               	decf	ES_InitQueue@BlockSize,w,c
  3693  000BAA  C014  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  3694  000BAE  C015  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  3695  000BB2  6EDF               	movwf	indf2,c
  3696                           
  3697                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  3698  000BB4  EE20 F001          	lfsr	2,1
  3699  000BB8  5014               	movf	ES_InitQueue@pThisQueue,w,c
  3700  000BBA  26D9               	addwf	fsr2l,f,c
  3701  000BBC  5015               	movf	ES_InitQueue@pThisQueue+1,w,c
  3702  000BBE  22DA               	addwfc	fsr2h,f,c
  3703  000BC0  0E00               	movlw	0
  3704  000BC2  6EDF               	movwf	indf2,c
  3705                           
  3706                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  3707  000BC4  EE20 F002          	lfsr	2,2
  3708  000BC8  5014               	movf	ES_InitQueue@pThisQueue,w,c
  3709  000BCA  26D9               	addwf	fsr2l,f,c
  3710  000BCC  5015               	movf	ES_InitQueue@pThisQueue+1,w,c
  3711  000BCE  22DA               	addwfc	fsr2h,f,c
  3712  000BD0  0E00               	movlw	0
  3713  000BD2  6EDF               	movwf	indf2,c
  3714  000BD4  0012               	return	
  3715  000BD6                     __end_of_ES_InitQueue:
  3716                           	opt stack 0
  3717                           tosu	equ	0xFFF
  3718                           tosh	equ	0xFFE
  3719                           tosl	equ	0xFFD
  3720                           pclath	equ	0xFFA
  3721                           tblptru	equ	0xFF8
  3722                           tblptrh	equ	0xFF7
  3723                           tblptrl	equ	0xFF6
  3724                           tablat	equ	0xFF5
  3725                           prodh	equ	0xFF4
  3726                           prodl	equ	0xFF3
  3727                           intcon	equ	0xFF2
  3728                           postinc0	equ	0xFEE
  3729                           wreg	equ	0xFE8
  3730                           indf1	equ	0xFE7
  3731                           postinc1	equ	0xFE6
  3732                           fsr1h	equ	0xFE2
  3733                           fsr1l	equ	0xFE1
  3734                           indf2	equ	0xFDF
  3735                           postinc2	equ	0xFDE
  3736                           postdec2	equ	0xFDD
  3737                           fsr2h	equ	0xFDA
  3738                           fsr2l	equ	0xFD9
  3739                           status	equ	0xFD8
  3740                           
  3741 ;; *************** function _ISR *****************
  3742 ;; Defined at:
  3743 ;;		line 112 in file "ES_Port.c"
  3744 ;; Parameters:    Size  Location     Type
  3745 ;;		None
  3746 ;; Auto vars:     Size  Location     Type
  3747 ;;		None
  3748 ;; Return value:  Size  Location     Type
  3749 ;;                  1    wreg      void 
  3750 ;; Registers used:
  3751 ;;		wreg, status,2, status,0, cstack
  3752 ;; Tracked objects:
  3753 ;;		On entry : 0/0
  3754 ;;		On exit  : 0/0
  3755 ;;		Unchanged: 0/0
  3756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3757 ;;      Params:         0       0       0       0
  3758 ;;      Locals:         0       0       0       0
  3759 ;;      Temps:         16       0       0       0
  3760 ;;      Totals:        16       0       0       0
  3761 ;;Total ram usage:       16 bytes
  3762 ;; Hardware stack levels used:    1
  3763 ;; Hardware stack levels required when called:    1
  3764 ;; This function calls:
  3765 ;;		_CanRCVResponse
  3766 ;;		_CanXmitResponse
  3767 ;; This function is called by:
  3768 ;;		Interrupt level 2
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           	psect	intcode
  3773  000008                     __pintcode:
  3774                           	opt stack 0
  3775  000008                     _ISR:
  3776                           	opt stack 22
  3777                           
  3778                           ;incstack = 0
  3779  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3780  00000A  CFFA F003          	movff	pclath,??_ISR+2
  3781  00000E  CFFB F004          	movff	pclatu,??_ISR+3
  3782  000012  ED1C  F004         	call	int_func,f	;refresh shadow registers
  3783                           tosu	equ	0xFFF
  3784                           tosh	equ	0xFFE
  3785                           tosl	equ	0xFFD
  3786                           pclatu	equ	0xFFB
  3787                           pclath	equ	0xFFA
  3788                           tblptru	equ	0xFF8
  3789                           tblptrh	equ	0xFF7
  3790                           tblptrl	equ	0xFF6
  3791                           tablat	equ	0xFF5
  3792                           prodh	equ	0xFF4
  3793                           prodl	equ	0xFF3
  3794                           intcon	equ	0xFF2
  3795                           postinc0	equ	0xFEE
  3796                           wreg	equ	0xFE8
  3797                           indf1	equ	0xFE7
  3798                           postinc1	equ	0xFE6
  3799                           fsr1h	equ	0xFE2
  3800                           fsr1l	equ	0xFE1
  3801                           indf2	equ	0xFDF
  3802                           postinc2	equ	0xFDE
  3803                           postdec2	equ	0xFDD
  3804                           fsr2h	equ	0xFDA
  3805                           fsr2l	equ	0xFD9
  3806                           status	equ	0xFD8
  3807                           
  3808                           	psect	intcode_body
  3809  000838                     __pintcode_body:
  3810                           	opt stack 22
  3811  000838                     int_func:
  3812                           	opt stack 22
  3813  000838  0006               	pop		; remove dummy address from shadow register refresh
  3814  00083A  CFE9 F005          	movff	fsr0l,??_ISR+4
  3815  00083E  CFEA F006          	movff	fsr0h,??_ISR+5
  3816  000842  CFE1 F007          	movff	fsr1l,??_ISR+6
  3817  000846  CFE2 F008          	movff	fsr1h,??_ISR+7
  3818  00084A  CFD9 F009          	movff	fsr2l,??_ISR+8
  3819  00084E  CFDA F00A          	movff	fsr2h,??_ISR+9
  3820  000852  CFF3 F00B          	movff	prodl,??_ISR+10
  3821  000856  CFF4 F00C          	movff	prodh,??_ISR+11
  3822  00085A  CFF6 F00D          	movff	tblptrl,??_ISR+12
  3823  00085E  CFF7 F00E          	movff	tblptrh,??_ISR+13
  3824  000862  CFF8 F00F          	movff	tblptru,??_ISR+14
  3825  000866  CFF5 F010          	movff	tablat,??_ISR+15
  3826                           
  3827                           ;ES_Port.c: 115: static unsigned int LastTime;
  3828                           ;ES_Port.c: 116: static unsigned int NextTime;
  3829                           ;ES_Port.c: 118: if (CCP1IF == 1)
  3830  00086A  A49E               	btfss	3998,2,c	;volatile
  3831  00086C  D014               	goto	i2l1513
  3832                           
  3833                           ;ES_Port.c: 119: {
  3834                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  3835  00086E  50BF               	movf	4031,w,c	;volatile
  3836  000870  6E01               	movwf	??_ISR& (0+255),c
  3837  000872  50BE               	movf	4030,w,c	;volatile
  3838  000874  6E30               	movwf	ISR@LastTime,c
  3839  000876  C001  F031         	movff	??_ISR,ISR@LastTime+1
  3840                           
  3841                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
  3842  00087A  0E20               	movlw	32
  3843  00087C  2430               	addwf	ISR@LastTime,w,c
  3844  00087E  6E32               	movwf	ISR@NextTime,c
  3845  000880  0E4E               	movlw	78
  3846  000882  2031               	addwfc	ISR@LastTime+1,w,c
  3847  000884  6E33               	movwf	ISR@NextTime+1,c
  3848                           
  3849                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
  3850  000886  5033               	movf	ISR@NextTime+1,w,c
  3851  000888  6EBF               	movwf	4031,c	;volatile
  3852                           
  3853                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
  3854  00088A  C032  FFBE         	movff	ISR@NextTime,4030	;volatile
  3855                           
  3856                           ;ES_Port.c: 124: CCP1IF = 0;
  3857  00088E  949E               	bcf	3998,2,c	;volatile
  3858                           
  3859                           ;ES_Port.c: 125: TickCount++;
  3860  000890  2A3F               	incf	_TickCount,f,c	;volatile
  3861                           
  3862                           ;ES_Port.c: 126: SysTickCounter++;
  3863  000892  4A36               	infsnz	_SysTickCounter,f,c	;volatile
  3864  000894  2A37               	incf	_SysTickCounter+1,f,c	;volatile
  3865  000896                     i2l1513:
  3866                           
  3867                           ;ES_Port.c: 127: }
  3868                           ;ES_Port.c: 133: if (TXB0IF == 1)
  3869  000896  A4A4               	btfss	4004,2,c	;volatile
  3870  000898  D003               	goto	i2l1519
  3871                           
  3872                           ;ES_Port.c: 134: {
  3873                           ;ES_Port.c: 135: TXB0IF = 0;
  3874  00089A  94A4               	bcf	4004,2,c	;volatile
  3875                           
  3876                           ;ES_Port.c: 136: CanXmitResponse();
  3877  00089C  ECBD  F006         	call	_CanXmitResponse	;wreg free
  3878  0008A0                     i2l1519:
  3879                           
  3880                           ;ES_Port.c: 137: }
  3881                           ;ES_Port.c: 138: if (RXB0IF == 1) {
  3882  0008A0  A0A4               	btfss	4004,0,c	;volatile
  3883  0008A2  D003               	goto	i2l154
  3884                           
  3885                           ;ES_Port.c: 139: RXB0IF = 0;
  3886  0008A4  90A4               	bcf	4004,0,c	;volatile
  3887                           
  3888                           ;ES_Port.c: 140: CanRCVResponse();
  3889  0008A6  ECA0  F006         	call	_CanRCVResponse	;wreg free
  3890  0008AA                     i2l154:
  3891  0008AA  C010  FFF5         	movff	??_ISR+15,tablat
  3892  0008AE  C00F  FFF8         	movff	??_ISR+14,tblptru
  3893  0008B2  C00E  FFF7         	movff	??_ISR+13,tblptrh
  3894  0008B6  C00D  FFF6         	movff	??_ISR+12,tblptrl
  3895  0008BA  C00C  FFF4         	movff	??_ISR+11,prodh
  3896  0008BE  C00B  FFF3         	movff	??_ISR+10,prodl
  3897  0008C2  C00A  FFDA         	movff	??_ISR+9,fsr2h
  3898  0008C6  C009  FFD9         	movff	??_ISR+8,fsr2l
  3899  0008CA  C008  FFE2         	movff	??_ISR+7,fsr1h
  3900  0008CE  C007  FFE1         	movff	??_ISR+6,fsr1l
  3901  0008D2  C006  FFEA         	movff	??_ISR+5,fsr0h
  3902  0008D6  C005  FFE9         	movff	??_ISR+4,fsr0l
  3903  0008DA  C004  FFFB         	movff	??_ISR+3,pclatu
  3904  0008DE  C003  FFFA         	movff	??_ISR+2,pclath
  3905  0008E2  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3906  0008E4  0011               	retfie		f
  3907  0008E6                     __end_of_ISR:
  3908                           	opt stack 0
  3909                           tosu	equ	0xFFF
  3910                           tosh	equ	0xFFE
  3911                           tosl	equ	0xFFD
  3912                           pclatu	equ	0xFFB
  3913                           pclath	equ	0xFFA
  3914                           tblptru	equ	0xFF8
  3915                           tblptrh	equ	0xFF7
  3916                           tblptrl	equ	0xFF6
  3917                           tablat	equ	0xFF5
  3918                           prodh	equ	0xFF4
  3919                           prodl	equ	0xFF3
  3920                           intcon	equ	0xFF2
  3921                           postinc0	equ	0xFEE
  3922                           fsr0h	equ	0xFEA
  3923                           fsr0l	equ	0xFE9
  3924                           wreg	equ	0xFE8
  3925                           indf1	equ	0xFE7
  3926                           postinc1	equ	0xFE6
  3927                           fsr1h	equ	0xFE2
  3928                           fsr1l	equ	0xFE1
  3929                           indf2	equ	0xFDF
  3930                           postinc2	equ	0xFDE
  3931                           postdec2	equ	0xFDD
  3932                           fsr2h	equ	0xFDA
  3933                           fsr2l	equ	0xFD9
  3934                           status	equ	0xFD8
  3935                           
  3936 ;; *************** function _CanXmitResponse *****************
  3937 ;; Defined at:
  3938 ;;		line 160 in file "Can_XmitService.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;		None
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;		None
  3943 ;; Return value:  Size  Location     Type
  3944 ;;                  1    wreg      void 
  3945 ;; Registers used:
  3946 ;;		None
  3947 ;; Tracked objects:
  3948 ;;		On entry : 0/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3952 ;;      Params:         0       0       0       0
  3953 ;;      Locals:         0       0       0       0
  3954 ;;      Temps:          0       0       0       0
  3955 ;;      Totals:         0       0       0       0
  3956 ;;Total ram usage:        0 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; This function calls:
  3959 ;;		Nothing
  3960 ;; This function is called by:
  3961 ;;		_ISR
  3962 ;; This function uses a non-reentrant model
  3963 ;;
  3964                           
  3965                           	psect	text27
  3966  000D7A                     __ptext27:
  3967                           	opt stack 0
  3968  000D7A                     _CanXmitResponse:
  3969                           	opt stack 22
  3970                           
  3971                           ;incstack = 0
  3972  000D7A  0012               	return		;funcret
  3973  000D7C                     __end_of_CanXmitResponse:
  3974                           	opt stack 0
  3975                           tosu	equ	0xFFF
  3976                           tosh	equ	0xFFE
  3977                           tosl	equ	0xFFD
  3978                           pclatu	equ	0xFFB
  3979                           pclath	equ	0xFFA
  3980                           tblptru	equ	0xFF8
  3981                           tblptrh	equ	0xFF7
  3982                           tblptrl	equ	0xFF6
  3983                           tablat	equ	0xFF5
  3984                           prodh	equ	0xFF4
  3985                           prodl	equ	0xFF3
  3986                           intcon	equ	0xFF2
  3987                           postinc0	equ	0xFEE
  3988                           fsr0h	equ	0xFEA
  3989                           fsr0l	equ	0xFE9
  3990                           wreg	equ	0xFE8
  3991                           indf1	equ	0xFE7
  3992                           postinc1	equ	0xFE6
  3993                           fsr1h	equ	0xFE2
  3994                           fsr1l	equ	0xFE1
  3995                           indf2	equ	0xFDF
  3996                           postinc2	equ	0xFDE
  3997                           postdec2	equ	0xFDD
  3998                           fsr2h	equ	0xFDA
  3999                           fsr2l	equ	0xFD9
  4000                           status	equ	0xFD8
  4001                           
  4002 ;; *************** function _CanRCVResponse *****************
  4003 ;; Defined at:
  4004 ;;		line 166 in file "Can_XmitService.c"
  4005 ;; Parameters:    Size  Location     Type
  4006 ;;		None
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;		None
  4009 ;; Return value:  Size  Location     Type
  4010 ;;                  1    wreg      void 
  4011 ;; Registers used:
  4012 ;;		None
  4013 ;; Tracked objects:
  4014 ;;		On entry : 0/0
  4015 ;;		On exit  : 0/0
  4016 ;;		Unchanged: 0/0
  4017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4018 ;;      Params:         0       0       0       0
  4019 ;;      Locals:         0       0       0       0
  4020 ;;      Temps:          0       0       0       0
  4021 ;;      Totals:         0       0       0       0
  4022 ;;Total ram usage:        0 bytes
  4023 ;; Hardware stack levels used:    1
  4024 ;; This function calls:
  4025 ;;		Nothing
  4026 ;; This function is called by:
  4027 ;;		_ISR
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031                           	psect	text28
  4032  000D40                     __ptext28:
  4033                           	opt stack 0
  4034  000D40                     _CanRCVResponse:
  4035                           	opt stack 22
  4036                           
  4037                           ;Can_XmitService.c: 168: if (LATA1 == 1) {
  4038                           
  4039                           ;incstack = 0
  4040  000D40  A289               	btfss	3977,1,c	;volatile
  4041  000D42  D002               	goto	i2l393
  4042                           
  4043                           ;Can_XmitService.c: 169: LATA1 = 0;
  4044  000D44  9289               	bcf	3977,1,c	;volatile
  4045                           
  4046                           ;Can_XmitService.c: 170: } else if (LATA1 == 0) {
  4047  000D46  D002               	goto	i2l394
  4048  000D48                     i2l393:
  4049  000D48  A289               	btfss	3977,1,c	;volatile
  4050                           
  4051                           ;Can_XmitService.c: 171: LATA1 = 1;
  4052  000D4A  8289               	bsf	3977,1,c	;volatile
  4053  000D4C                     i2l394:
  4054                           
  4055                           ;Can_XmitService.c: 172: }
  4056                           ;Can_XmitService.c: 173: if (RXB0CONbits.RXFUL == 1) {
  4057  000D4C  AE60               	btfss	3936,7,c	;volatile
  4058  000D4E  0012               	return	
  4059                           
  4060                           ;Can_XmitService.c: 174: RXB0CONbits.RXFUL = 0;
  4061  000D50  9E60               	bcf	3936,7,c	;volatile
  4062  000D52  0012               	return	
  4063  000D54                     __end_of_CanRCVResponse:
  4064                           	opt stack 0
  4065                           tosu	equ	0xFFF
  4066                           tosh	equ	0xFFE
  4067                           tosl	equ	0xFFD
  4068                           pclatu	equ	0xFFB
  4069                           pclath	equ	0xFFA
  4070                           tblptru	equ	0xFF8
  4071                           tblptrh	equ	0xFF7
  4072                           tblptrl	equ	0xFF6
  4073                           tablat	equ	0xFF5
  4074                           prodh	equ	0xFF4
  4075                           prodl	equ	0xFF3
  4076                           intcon	equ	0xFF2
  4077                           postinc0	equ	0xFEE
  4078                           fsr0h	equ	0xFEA
  4079                           fsr0l	equ	0xFE9
  4080                           wreg	equ	0xFE8
  4081                           indf1	equ	0xFE7
  4082                           postinc1	equ	0xFE6
  4083                           fsr1h	equ	0xFE2
  4084                           fsr1l	equ	0xFE1
  4085                           indf2	equ	0xFDF
  4086                           postinc2	equ	0xFDE
  4087                           postdec2	equ	0xFDD
  4088                           fsr2h	equ	0xFDA
  4089                           fsr2l	equ	0xFD9
  4090                           status	equ	0xFD8
  4091                           tosu	equ	0xFFF
  4092                           tosh	equ	0xFFE
  4093                           tosl	equ	0xFFD
  4094                           pclatu	equ	0xFFB
  4095                           pclath	equ	0xFFA
  4096                           tblptru	equ	0xFF8
  4097                           tblptrh	equ	0xFF7
  4098                           tblptrl	equ	0xFF6
  4099                           tablat	equ	0xFF5
  4100                           prodh	equ	0xFF4
  4101                           prodl	equ	0xFF3
  4102                           intcon	equ	0xFF2
  4103                           postinc0	equ	0xFEE
  4104                           fsr0h	equ	0xFEA
  4105                           fsr0l	equ	0xFE9
  4106                           wreg	equ	0xFE8
  4107                           indf1	equ	0xFE7
  4108                           postinc1	equ	0xFE6
  4109                           fsr1h	equ	0xFE2
  4110                           fsr1l	equ	0xFE1
  4111                           indf2	equ	0xFDF
  4112                           postinc2	equ	0xFDE
  4113                           postdec2	equ	0xFDD
  4114                           fsr2h	equ	0xFDA
  4115                           fsr2l	equ	0xFD9
  4116                           status	equ	0xFD8
  4117                           
  4118                           	psect	text29
  4119  000000                     __ptext29:
  4120                           	opt stack 0
  4121                           tosu	equ	0xFFF
  4122                           tosh	equ	0xFFE
  4123                           tosl	equ	0xFFD
  4124                           pclatu	equ	0xFFB
  4125                           pclath	equ	0xFFA
  4126                           tblptru	equ	0xFF8
  4127                           tblptrh	equ	0xFF7
  4128                           tblptrl	equ	0xFF6
  4129                           tablat	equ	0xFF5
  4130                           prodh	equ	0xFF4
  4131                           prodl	equ	0xFF3
  4132                           intcon	equ	0xFF2
  4133                           postinc0	equ	0xFEE
  4134                           fsr0h	equ	0xFEA
  4135                           fsr0l	equ	0xFE9
  4136                           wreg	equ	0xFE8
  4137                           indf1	equ	0xFE7
  4138                           postinc1	equ	0xFE6
  4139                           fsr1h	equ	0xFE2
  4140                           fsr1l	equ	0xFE1
  4141                           indf2	equ	0xFDF
  4142                           postinc2	equ	0xFDE
  4143                           postdec2	equ	0xFDD
  4144                           fsr2h	equ	0xFDA
  4145                           fsr2l	equ	0xFD9
  4146                           status	equ	0xFD8
  4147                           
  4148                           	psect	rparam
  4149  0000                     tosu	equ	0xFFF
  4150                           tosh	equ	0xFFE
  4151                           tosl	equ	0xFFD
  4152                           pclatu	equ	0xFFB
  4153                           pclath	equ	0xFFA
  4154                           tblptru	equ	0xFF8
  4155                           tblptrh	equ	0xFF7
  4156                           tblptrl	equ	0xFF6
  4157                           tablat	equ	0xFF5
  4158                           prodh	equ	0xFF4
  4159                           prodl	equ	0xFF3
  4160                           intcon	equ	0xFF2
  4161                           postinc0	equ	0xFEE
  4162                           fsr0h	equ	0xFEA
  4163                           fsr0l	equ	0xFE9
  4164                           wreg	equ	0xFE8
  4165                           indf1	equ	0xFE7
  4166                           postinc1	equ	0xFE6
  4167                           fsr1h	equ	0xFE2
  4168                           fsr1l	equ	0xFE1
  4169                           indf2	equ	0xFDF
  4170                           postinc2	equ	0xFDE
  4171                           postdec2	equ	0xFDD
  4172                           fsr2h	equ	0xFDA
  4173                           fsr2l	equ	0xFD9
  4174                           status	equ	0xFD8
  4175                           
  4176                           	psect	temp
  4177  00004F                     btemp:
  4178                           	opt stack 0
  4179  00004F                     	ds	1
  4180  0000                     int$flags	set	btemp
  4181                           tosu	equ	0xFFF
  4182                           tosh	equ	0xFFE
  4183                           tosl	equ	0xFFD
  4184                           pclatu	equ	0xFFB
  4185                           pclath	equ	0xFFA
  4186                           tblptru	equ	0xFF8
  4187                           tblptrh	equ	0xFF7
  4188                           tblptrl	equ	0xFF6
  4189                           tablat	equ	0xFF5
  4190                           prodh	equ	0xFF4
  4191                           prodl	equ	0xFF3
  4192                           intcon	equ	0xFF2
  4193                           postinc0	equ	0xFEE
  4194                           fsr0h	equ	0xFEA
  4195                           fsr0l	equ	0xFE9
  4196                           wreg	equ	0xFE8
  4197                           indf1	equ	0xFE7
  4198                           postinc1	equ	0xFE6
  4199                           fsr1h	equ	0xFE2
  4200                           fsr1l	equ	0xFE1
  4201                           indf2	equ	0xFDF
  4202                           postinc2	equ	0xFDE
  4203                           postdec2	equ	0xFDD
  4204                           fsr2h	equ	0xFDA
  4205                           fsr2l	equ	0xFD9
  4206                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    95
    Data        0
    BSS         80
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     42      78
    BANK0           160     16      60
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostToggleService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(COMRAM[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(COMRAM[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(COMRAM[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(COMRAM[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(COMRAM[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(COMRAM[12]), 

    S101$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(COMRAM[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(COMRAM[12]), 

    S70$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunToggleService(), RunCan_XmitService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunToggleService(), RunCan_XmitService(), 

    S70$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitToggleService(), InitCan_XmitService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitToggleService(), InitCan_XmitService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    _PostToggleService->_ES_PostToService
    _RunToggleService->_XmitData
    _ES_DeQueue->___wmul
    _InitToggleService->_ES_PostToService
    _InitCan_XmitService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_ES_Run
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostToggleService
    _PostToggleService->_ES_PostToService
    _ES_Initialize->_InitCan_XmitService
    _ES_Initialize->_InitToggleService
    _InitToggleService->_ES_PostToService
    _InitCan_XmitService->_ES_PostToService

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   14703
                                             15 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     428
                                             16 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0    6996
                                             10 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                 _RunCan_XmitService *
                   _RunToggleService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    3614
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    3614
                                              6 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
                  _PostToggleService *
 ---------------------------------------------------------------------------------
 (4) _PostToggleService                                    3     0      3    3171
                                              3 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     443
                                             16 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                             16 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunToggleService                                     6     3      3     186
                                             17 COMRAM     6     3      3
                           _XmitData
 ---------------------------------------------------------------------------------
 (3) _XmitData                                             1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _RunCan_XmitService                                   6     3      3      45
                                             17 COMRAM     6     3      3
                    _InitCanHardware
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2522
                                             28 COMRAM    10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     292
                                             16 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                             16 COMRAM     1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    7211
                                              7 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                _InitCan_XmitService *
                  _InitToggleService *
 ---------------------------------------------------------------------------------
 (2) _InitToggleService                                    4     4      0    3140
                                              3 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _InitCan_XmitService                                  4     4      0    3140
                                              3 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    3075
                                             39 COMRAM     3     0      3
                                              0 BANK0      3     3      0
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2591
                                             28 COMRAM    11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1362
                                             22 COMRAM     6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     553
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     211
                                             18 COMRAM     2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      90
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     345
                                             16 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 16    16      0       0
                                              0 COMRAM    16    16      0
                     _CanRCVResponse
                    _CanXmitResponse
 ---------------------------------------------------------------------------------
 (9) _CanXmitResponse                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CanRCVResponse                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitCan_XmitService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
     _InitToggleService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunCan_XmitService *
       _InitCanHardware
     _RunToggleService *
       _XmitData
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostToggleService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _CanRCVResponse
   _CanXmitResponse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     10      3C       4       37.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2A      4E       1       83.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8A       9        0.0%
DATA                 0      0      8A      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Nov 14 01:00:57 2016

                   ??__HW_Timer_Init 0013                  ES_CheckUserEvents@i 0011  
                __HW_Timer_Init@Rate 0011                  ___wmul@multiplicand 0019  
                                l400 0ACA                                  l403 0B18  
                                l283 0964                __end_of_ES_Initialize 069C  
                                _GIE 007F97                                  _ISR 0008  
                       ___awmod@sign 0016              __end_of_Check4Keystroke 0D78  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 0025  
            ES_EnQueueFIFO@Event2Add 001F                    ?_ES_PostToService 0028  
                               ?_ISR 0001                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 002B                                 l2101 0A46  
                               l2041 0A5E                                 l2121 09D4  
                               l2051 0A80                                 l2203 0C7A  
                               l2107 096E                                 l2053 0A84  
                               l2061 0AA2                                 l2045 0A6A  
                               l2301 0B5C                                 l2117 09D0  
                               l2065 0AB0                                 l2057 0A98  
                               l2049 0A78                                 l2313 0C4A  
                               l2137 04C8                                 l2401 0C14  
                               l2243 0490                                 l2147 0536  
                               l2085 0834                                 l2149 056E  
                               l2351 05CC                                 l2239 0478  
                               l2271 0D5C                                 l2329 0C00  
                               l2249 04B4                                 l2355 0610  
                               l2371 0698                                 l2347 05C2  
                               l2195 0C62                                 l2267 0D56  
                               l2381 0718                                 l2367 0692  
                               l2359 0614                                 l2391 077E  
                               l2375 069E                                 l2481 0914  
                               l2387 076C                                 l2483 0922  
                               l2491 094C                                 l2485 0930  
                               l2399 0C0E                                 l2487 093E  
                               STR_1 0360                                 STR_2 037B  
                               STR_3 0393                                 STR_4 03AA  
                               _LATA 000F89                                 _LATB 000F8A  
                               u1408 051E                                 u1354 098C  
                               u1355 0986                                 u1608 066C  
                               u1609 0688                                 u1468 0B7E  
                               u1469 0B96                                 _PIE1 000F9D  
                               u1648 0742                                 u1649 075A  
                               _PIE3 000FA3                                 _SCS1 007E99  
                   ?_CanXmitResponse 0001                   ??_ES_PostToService 008C  
                               _main 08E6                          ?_ES_DeQueue 001D  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               indf1 000FE7                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 004F                        main@ErrorType 009B  
                               pclat 000FFA                                 prodh 000FF4  
                               prodl 000FF3                                 start 0016  
                      __CFG_MCLRE$ON 000000         InitCan_XmitService@ThisEvent 008F  
                       ___param_bank 000010              __end_of_InitCanHardware 0B1E  
                              ??_ISR 0001                   ES_Run@HighestPrior 009A  
                              ?_main 0001                __end_of_ES_Timer_Init 0D74  
                    __end_of___awmod 0ABA                      __end_of___lbmod 0C82  
           __end_of_RunToggleService 0C58                                _T1CON 000FCD  
                              _LATA0 007C48                                _LATA1 007C49  
                              _IRCF0 007E9C                                _IRCF1 007E9D  
                              _IRCF2 007E9E                                i2l154 08AA  
                              i2l393 0D48                                i2l394 0D4C  
                              _PORTA 000F80                                _PORTB 000F81  
                              _TRISA 000F92                        __CFG_PWRT$OFF 000000  
                              _Ready 0034                                _putch 0D78  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                                status 000FD8  
                    __initialization 0C82               ES_GetMSBitSet@LoopCntr 001A  
         __end_of_ES_CheckUserEvents 0BA0                         __end_of_main 0966  
                  ES_Timer_Init@Rate 0013                  __end_of_EventQueues 035E  
                             ??_main 002B                        __activetblptr 000002  
                __size_of_ES_DeQueue 00FE                      _Nybble2MSBitNum 0341  
   __end_of__HW_Process_Pending_Ints 0D66                     ?_Check4Keystroke 0001  
                             _ADCON1 000FC1                     __end_of_XmitData 0CCE  
                             _CCP1IF 007CF2                               _CANCON 000F6F  
                             _CCPR1H 000FBF                               _CCPR1L 000FBE  
                         _MyPriority 003E                               ?_putch 0001  
                   ??_ES_GetMSBitSet 0013                               i2l1513 0896  
                             i2l1519 08A0                               _INTCON 000FF2  
                             _RXB0IE 007D18                               _RXB0IF 007D20  
                             _ES_Run 069C                               _TXB0D0 000F46  
                             _TXB0IE 007D1A                               _TXB0IF 007D22  
                   ??_CanRCVResponse 0001                     ??_ES_EnQueueFIFO 0022  
                     _Timer2PostFunc 0321                               _Queue0 0040  
                             _Queue1 0080                       _SysTickCounter 0036  
                             ___wmul 0CCE                            ??___awmod 0015  
                          ??___lbmod 0012                     ?_InitCanHardware 0001  
                             clear_0 0C88                               clear_1 0C94  
                    ___awmod@divisor 0013                      ___awmod@counter 0015  
                             _printf 0C04                          ISR@LastTime 0030  
             ES_InitQueue@pThisQueue 0014                         __mediumconst 0000  
                        ISR@NextTime 0032                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                             putch@c 0001          __size_of_ES_Timer_Tick_Resp 00F8  
               ES_DeQueue@pThisQueue 0025              ES_GetMSBitSet@Val2Check 0011  
        InitCan_XmitService@Priority 0092                      ___lbmod@divisor 0011  
                         __accesstop 0060              __end_of__initialization 0C9A  
             __end_of_Timer2PostFunc 0341                      ___lbmod@counter 0013  
                    __CFG_PBADEN$OFF 000000                        ___rparam_used 000001  
                        _EventQueues 0358                       __pcstackCOMRAM 0001  
                      ?_ES_InitQueue 0011              __end_of_Nybble2MSBitNum 0350  
                      __end_of_putch 0D7A                      _TMR_ActiveFlags 0038  
            ES_GetMSBitSet@ReturnVal 0018          __end_of_InitCan_XmitService 0C04  
                     _TMR_TimerArray 0060             ES_EnQueueFIFO@pThisQueue 0026  
                            ??_putch 0011             __HW_Process_Pending_Ints 0D54  
                         __pbssBANK0 0060                              ?_ES_Run 0001  
                       ??_ES_DeQueue 0021          __size_of_RunCan_XmitService 001C  
          __size_of_ES_PostToService 0072                       ??_ES_InitQueue 0014  
                            ?___wmul 0017                              _CCP1CON 000FBD  
                          ?_XmitData 0001                              _ECANCON 000F77  
                            ?_printf 0011                    ?_RunToggleService 0012  
                 __end_of_ES_DeQueue 04B8                   ??_RunToggleService 0015  
                            _TXB0DLC 000F45                      __size_of_ES_Run 00E8  
             __size_of_ES_Initialize 00EC                              __Hparam 0000  
                            __Lparam 0000             __size_of_CanXmitResponse 0002  
                            ___awmod 0A4A                              ___lbmod 0C58  
                    __size_of___wmul 0026                         __psmallconst 0300  
                         ??_XmitData 0011                              __pcinit 0C82  
                            __ramtop 0300                              __ptext0 08E6  
                            __ptext1 0C04                              __ptext2 0D78  
                            __ptext3 069C                              __ptext4 0D54  
                            __ptext5 04B8                              __ptext6 0D2C  
                            __ptext7 0966                              __ptext8 0CF4  
                            __ptext9 0C2E                      __size_of_printf 002A  
                  _PostToggleService 0D2C                         __size_of_ISR 08DE  
            __size_of__HW_Timer_Init 001C                     ___awmod@dividend 0011  
                 _ES_CheckUserEvents 0B60                   ?_PostToggleService 008F  
                    ES_Run@ThisEvent 004C            InitToggleService@Priority 0092  
                     __pintcode_body 0838                 end_of_initialization 0C9A  
                ?_ES_CheckUserEvents 0001                  ??_PostToggleService 002B  
                      __Lmediumconst 0000                              int_func 0838  
       ES_PostToService@WhichService 008E               __size_of_ES_Timer_Init 000E  
                            printf@c 0015                              printf@f 0011  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
               ??_ES_CheckUserEvents 0011            __end_of_PostToggleService 0D40  
                      _ES_Initialize 05B0                     ___lbmod@dividend 0012  
                          _TRISBbits 000F93                 __end_of_ES_EventList 0360  
               __end_of_ES_InitQueue 0BD6                       ES_Initialize@i 0095  
                        ___lbmod@rem 0014             __size_of_Check4Keystroke 0004  
         PostToggleService@ThisEvent 008F            RunToggleService@ThisEvent 0012  
                     __end_of_ES_Run 0784          RunCan_XmitService@ThisEvent 0012  
                   _ES_PostToService 09D8                 __end_of_ServDescList 0358  
                     __end_of___wmul 0CF4                    ??_CanXmitResponse 0001  
                     ?_ES_Initialize 0093           ??__HW_Process_Pending_Ints 002B  
                      _ES_Timer_Init 0D66                       __end_of_printf 0C2E  
           __size_of_InitCanHardware 0064           __end_of_ES_Timer_Tick_Resp 05B0  
                start_initialization 0C82                          __end_of_ISR 08E6  
                        _CANSTATbits 000F6E                             ??_ES_Run 0096  
                   __CFG_OSC$IRCIO67 000000                    _InitToggleService 0B1E  
                          _TickCount 003F                   ?_InitToggleService 0001  
            __size_of_ES_GetMSBitSet 0072                             ??___wmul 001B  
                ??_InitToggleService 002B           __size_of_PostToggleService 0014  
            __size_of_CanRCVResponse 0014              __size_of_ES_EnQueueFIFO 00B4  
                           ??_printf 0013                       ?_ES_Timer_Init 0013  
                  __size_of_XmitData 0026                       __HW_Timer_Init 0D10  
                        __pbssCOMRAM 002B                        __pcstackBANK0 008C  
                        _BRGCON1bits 000F70                          _BRGCON2bits 000F71  
                 ES_InitQueue@pBlock 0011                          _BRGCON3bits 000F72  
       __size_of_InitCan_XmitService 002E           __end_of_RunCan_XmitService 0D10  
          __end_of_InitToggleService 0B60            __size_of_RunToggleService 002A  
                      __PRIMASK_temp 003A                    ??_Check4Keystroke 0011  
                          __pintcode 0008                             ?___awmod 0011  
                           ?___lbmod 0011                      ??_ES_Initialize 002B  
           ES_PostToService@TheEvent 0028               __end_of__HW_Timer_Init 0D2C  
                        __smallconst 0300                __size_of_ES_InitQueue 0036  
        RunToggleService@ReturnEvent 0015                       __size_of_putch 0002  
               ES_Initialize@NewRate 0093                    ??_InitCanHardware 0011  
          ES_GetMSBitSet@Nybble2Test 0019                       ___wmul@product 001B  
                           _RXF0SIDH 000F00                         _ES_EventList 035E  
                           _RXF0SIDL 000F01                             _TXB0SIDH 000F41  
                           _TXB0SIDL 000F42                         _ES_InitQueue 0BA0  
                           _RXM0SIDH 000F18                             _RXM0SIDL 000F19  
                    ??_ES_Timer_Init 0015                      ?__HW_Timer_Init 0011  
                  ___wmul@multiplier 0017                   ES_DeQueue@SaveCrit 0023  
               ES_EnQueueFIFO@pBlock 001D             __end_of_ES_PostToService 0A4A  
                     _BitNum2SetMask 0301                         _ServDescList 0350  
         __size_of_InitToggleService 0042                      _CanXmitResponse 0D7A  
                           __Hrparam 0000                       _ES_GetMSBitSet 0966  
                           __Lrparam 0000                     __size_of___awmod 0070  
                   __size_of___lbmod 002A                             _XmitData 0CA8  
        __size_of_ES_CheckUserEvents 0040                       _CanRCVResponse 0D40  
                     _ES_EnQueueFIFO 0784                     XmitData@DataByte 0011  
             __end_of_BitNum2SetMask 0321                             __ptext10 0CA8  
                           __ptext11 0ABA                             __ptext20 0784  
                           __ptext12 03BA                             __ptext21 0CCE  
                           __ptext13 0C58                             __ptext22 0A4A  
                           __ptext14 0B60                             __ptext23 0D66  
                           __ptext15 0D74                             __ptext24 0D10  
                           __ptext16 05B0                             __ptext25 0BA0  
                           __ptext17 0BD6                             __ptext18 0B1E  
                           __ptext27 0D7A                             __ptext19 09D8  
                           __ptext28 0D40                             __ptext29 0000  
  ES_Timer_Tick_Resp@NeedsProcessing 002E                        __size_of_main 0080  
                   _RunToggleService 0C2E                   _ES_Timer_Tick_Resp 04B8  
             __end_of_ES_GetMSBitSet 09D8           InitToggleService@ThisEvent 008F  
                ?_ES_Timer_Tick_Resp 0001               __end_of_CanRCVResponse 0D54  
             __end_of_ES_EnQueueFIFO 0838                             int$flags 004F  
                _InitCan_XmitService 0BD6                    ES_DeQueue@NumLeft 0024  
                        _RXB0CONbits 000F60                 ??_ES_Timer_Tick_Resp 0092  
      RunCan_XmitService@ReturnEvent 0015                 ?_InitCan_XmitService 0001  
            __end_of_CanXmitResponse 0D7C                      _Check4Keystroke 0D74  
                           intlevel2 0000            Can_XmitService@MyPriority 003C  
                         _ES_DeQueue 03BA    __size_of__HW_Process_Pending_Ints 0012  
          ?__HW_Process_Pending_Ints 0001                          _TXB0CONbits 000F40  
                    ?_ES_GetMSBitSet 0011  ES_Timer_Tick_Resp@NextTimer2Process 003D  
                 _RunCan_XmitService 0CF4                             printf@ap 0013  
                    ?_CanRCVResponse 0001                      ?_ES_EnQueueFIFO 001D  
                   ES_DeQueue@pBlock 001D                  ?_RunCan_XmitService 0012  
                    _InitCanHardware 0ABA               ES_DeQueue@pReturnEvent 001F  
              ES_InitQueue@BlockSize 0013                ??_InitCan_XmitService 002B  
               ??_RunCan_XmitService 0015  
