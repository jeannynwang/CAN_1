

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Tue Nov 22 22:28:05 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           	psect	smallconst
    49  000300                     __psmallconst:
    50                           	opt stack 0
    51  000300  00                 	db	0
    52  000301                     _BitNum2SetMask:
    53                           	opt stack 0
    54  000301  0001               	dw	1
    55  000303  0002               	dw	2
    56  000305  0004               	dw	4
    57  000307  0008               	dw	8
    58  000309  0010               	dw	16
    59  00030B  0020               	dw	32
    60  00030D  0040               	dw	64
    61  00030F  0080               	dw	128
    62  000311  0100               	dw	256
    63  000313  0200               	dw	512
    64  000315  0400               	dw	1024
    65  000317  0800               	dw	2048
    66  000319  1000               	dw	4096
    67  00031B  2000               	dw	8192
    68  00031D  4000               	dw	16384
    69  00031F  8000               	dw	32768
    70  000321                     __end_of_BitNum2SetMask:
    71                           	opt stack 0
    72  000321                     _Timer2PostFunc:
    73                           	opt stack 0
    74  000321  84                 	db	low _PostCan_XmitService
    75  000322  0D                 	db	high _PostCan_XmitService
    76  000323  00                 	db	0
    77  000324  00                 	db	0
    78  000325  00                 	db	0
    79  000326  00                 	db	0
    80  000327  00                 	db	0
    81  000328  00                 	db	0
    82  000329  00                 	db	0
    83  00032A  00                 	db	0
    84  00032B  00                 	db	0
    85  00032C  00                 	db	0
    86  00032D  00                 	db	0
    87  00032E  00                 	db	0
    88  00032F  00                 	db	0
    89  000330  00                 	db	0
    90  000331  00                 	db	0
    91  000332  00                 	db	0
    92  000333  00                 	db	0
    93  000334  00                 	db	0
    94  000335  00                 	db	0
    95  000336  00                 	db	0
    96  000337  00                 	db	0
    97  000338  00                 	db	0
    98  000339  00                 	db	0
    99  00033A  00                 	db	0
   100  00033B  00                 	db	0
   101  00033C  00                 	db	0
   102  00033D  00                 	db	0
   103  00033E  00                 	db	0
   104  00033F  00                 	db	0
   105  000340  00                 	db	0
   106  000341                     __end_of_Timer2PostFunc:
   107                           	opt stack 0
   108  000341                     _Nybble2MSBitNum:
   109                           	opt stack 0
   110  000341  00                 	db	0
   111  000342  01                 	db	1
   112  000343  01                 	db	1
   113  000344  02                 	db	2
   114  000345  02                 	db	2
   115  000346  02                 	db	2
   116  000347  02                 	db	2
   117  000348  03                 	db	3
   118  000349  03                 	db	3
   119  00034A  03                 	db	3
   120  00034B  03                 	db	3
   121  00034C  03                 	db	3
   122  00034D  03                 	db	3
   123  00034E  03                 	db	3
   124  00034F  03                 	db	3
   125  000350                     __end_of_Nybble2MSBitNum:
   126                           	opt stack 0
   127  000350                     _ServDescList:
   128                           	opt stack 0
   129  000350  4E                 	db	low _InitCan_XmitService
   130  000351  0C                 	db	high _InitCan_XmitService
   131  000352  1A                 	db	low _RunCan_XmitService
   132  000353  0C                 	db	high _RunCan_XmitService
   133  000354                     __end_of_ServDescList:
   134                           	opt stack 0
   135  000354                     _EventQueues:
   136                           	opt stack 0
   137  000354  80                 	db	low _Queue0
   138  000355  00                 	db	high _Queue0
   139  000356  04                 	db	4
   140  000357                     __end_of_EventQueues:
   141                           	opt stack 0
   142  000357                     _ES_EventList:
   143                           	opt stack 0
   144  000357  DE                 	db	low _Check4Keystroke
   145  000358  0D                 	db	high _Check4Keystroke
   146  000359                     __end_of_ES_EventList:
   147                           	opt stack 0
   148  000359                     _DistList00:
   149                           	opt stack 0
   150  000359  84                 	db	low _PostCan_XmitService
   151  00035A  0D                 	db	high _PostCan_XmitService
   152  00035B                     __end_of_DistList00:
   153                           	opt stack 0
   154  0000                     _RXF0EIDH	set	3842
   155  0000                     _RXF0EIDL	set	3843
   156  0000                     _RXF0SIDH	set	3840
   157  0000                     _RXF0SIDL	set	3841
   158  0000                     _RXM0EIDH	set	3866
   159  0000                     _RXM0EIDL	set	3867
   160  0000                     _RXM0SIDH	set	3864
   161  0000                     _RXM0SIDL	set	3865
   162  0000                     _TXB0CONbits	set	3904
   163  0000                     _TXB0D0	set	3910
   164  0000                     _TXB0D1	set	3911
   165  0000                     _TXB0DLC	set	3909
   166  0000                     _TXB0EIDH	set	3907
   167  0000                     _TXB0EIDL	set	3908
   168  0000                     _TXB0SIDH	set	3905
   169  0000                     _TXB0SIDL	set	3906
   170  0000                     _ADCON1	set	4033
   171  0000                     _BRGCON1bits	set	3952
   172  0000                     _BRGCON2bits	set	3953
   173  0000                     _BRGCON3bits	set	3954
   174  0000                     _CANCON	set	3951
   175  0000                     _CANSTATbits	set	3950
   176  0000                     _CCP1CON	set	4029
   177  0000                     _CCPR1H	set	4031
   178  0000                     _CCPR1L	set	4030
   179  0000                     _CIOCON	set	3955
   180  0000                     _ECANCON	set	3959
   181  0000                     _INTCON	set	4082
   182  0000                     _LATA	set	3977
   183  0000                     _LATB	set	3978
   184  0000                     _PIE1	set	3997
   185  0000                     _PORTA	set	3968
   186  0000                     _PORTB	set	3969
   187  0000                     _RXB0CONbits	set	3936
   188  0000                     _RXB0D0	set	3942
   189  0000                     _T1CON	set	4045
   190  0000                     _TRISAbits	set	3986
   191  0000                     _TRISBbits	set	3987
   192  0000                     _CCP1IF	set	31986
   193  0000                     _ERRIE	set	32029
   194  0000                     _ERRIF	set	32037
   195  0000                     _GIE	set	32663
   196  0000                     _IRCF0	set	32412
   197  0000                     _IRCF1	set	32413
   198  0000                     _IRCF2	set	32414
   199  0000                     _IRXIE	set	32031
   200  0000                     _IRXIF	set	32039
   201  0000                     _LATA0	set	31816
   202  0000                     _LATA1	set	31817
   203  0000                     _LATA2	set	31818
   204  0000                     _LATA3	set	31819
   205  0000                     _LATB2	set	31826
   206  0000                     _PEIE	set	32662
   207  0000                     _RXB0IE	set	32024
   208  0000                     _RXB0IF	set	32032
   209  0000                     _SCS1	set	32409
   210  0000                     _TXB0IF	set	32034
   211  00035B                     STR_1:
   212  00035B  46                 	db	70	;'F'
   213  00035C  61                 	db	97	;'a'
   214  00035D  69                 	db	105	;'i'
   215  00035E  6C                 	db	108	;'l'
   216  00035F  65                 	db	101	;'e'
   217  000360  64                 	db	100	;'d'
   218  000361  20                 	db	32
   219  000362  6F                 	db	111	;'o'
   220  000363  6E                 	db	110	;'n'
   221  000364  20                 	db	32
   222  000365  61                 	db	97	;'a'
   223  000366  74                 	db	116	;'t'
   224  000367  74                 	db	116	;'t'
   225  000368  65                 	db	101	;'e'
   226  000369  6D                 	db	109	;'m'
   227  00036A  70                 	db	112	;'p'
   228  00036B  74                 	db	116	;'t'
   229  00036C  20                 	db	32
   230  00036D  74                 	db	116	;'t'
   231  00036E  6F                 	db	111	;'o'
   232  00036F  20                 	db	32
   233  000370  50                 	db	80	;'P'
   234  000371  6F                 	db	111	;'o'
   235  000372  73                 	db	115	;'s'
   236  000373  74                 	db	116	;'t'
   237  000374  0A                 	db	10
   238  000375  00                 	db	0
   239  000376                     STR_2:
   240  000376  46                 	db	70	;'F'
   241  000377  61                 	db	97	;'a'
   242  000378  69                 	db	105	;'i'
   243  000379  6C                 	db	108	;'l'
   244  00037A  65                 	db	101	;'e'
   245  00037B  64                 	db	100	;'d'
   246  00037C  20                 	db	32
   247  00037D  6F                 	db	111	;'o'
   248  00037E  6E                 	db	110	;'n'
   249  00037F  20                 	db	32
   250  000380  4E                 	db	78	;'N'
   251  000381  55                 	db	85	;'U'
   252  000382  4C                 	db	76	;'L'
   253  000383  4C                 	db	76	;'L'
   254  000384  20                 	db	32
   255  000385  70                 	db	112	;'p'
   256  000386  6F                 	db	111	;'o'
   257  000387  69                 	db	105	;'i'
   258  000388  6E                 	db	110	;'n'
   259  000389  74                 	db	116	;'t'
   260  00038A  65                 	db	101	;'e'
   261  00038B  72                 	db	114	;'r'
   262  00038C  0A                 	db	10
   263  00038D  00                 	db	0
   264  00038E                     STR_3:
   265  00038E  46                 	db	70	;'F'
   266  00038F  61                 	db	97	;'a'
   267  000390  69                 	db	105	;'i'
   268  000391  6C                 	db	108	;'l'
   269  000392  65                 	db	101	;'e'
   270  000393  64                 	db	100	;'d'
   271  000394  20                 	db	32
   272  000395  49                 	db	73	;'I'
   273  000396  6E                 	db	110	;'n'
   274  000397  69                 	db	105	;'i'
   275  000398  74                 	db	116	;'t'
   276  000399  69                 	db	105	;'i'
   277  00039A  61                 	db	97	;'a'
   278  00039B  6C                 	db	108	;'l'
   279  00039C  69                 	db	105	;'i'
   280  00039D  7A                 	db	122	;'z'
   281  00039E  61                 	db	97	;'a'
   282  00039F  74                 	db	116	;'t'
   283  0003A0  69                 	db	105	;'i'
   284  0003A1  6F                 	db	111	;'o'
   285  0003A2  6E                 	db	110	;'n'
   286  0003A3  0A                 	db	10
   287  0003A4  00                 	db	0
   288  0003A5                     STR_4:
   289  0003A5  4F                 	db	79	;'O'
   290  0003A6  74                 	db	116	;'t'
   291  0003A7  68                 	db	104	;'h'
   292  0003A8  65                 	db	101	;'e'
   293  0003A9  72                 	db	114	;'r'
   294  0003AA  20                 	db	32
   295  0003AB  46                 	db	70	;'F'
   296  0003AC  61                 	db	97	;'a'
   297  0003AD  69                 	db	105	;'i'
   298  0003AE  6C                 	db	108	;'l'
   299  0003AF  75                 	db	117	;'u'
   300  0003B0  72                 	db	114	;'r'
   301  0003B1  65                 	db	101	;'e'
   302  0003B2  0A                 	db	10
   303  0003B3  00                 	db	0
   304                           
   305                           ; #config settings
   306  0003B4  00                 	db	0	; dummy byte at the end
   307  0000                     
   308                           	psect	cinit
   309  000CFC                     __pcinit:
   310                           	opt stack 0
   311  000CFC                     start_initialization:
   312                           	opt stack 0
   313  000CFC                     __initialization:
   314                           	opt stack 0
   315                           
   316                           ; Clear objects allocated to BANK0 (44 bytes)
   317  000CFC  EE00  F060         	lfsr	0,__pbssBANK0
   318  000D00  0E2C               	movlw	44
   319  000D02                     clear_0:
   320  000D02  6AEE               	clrf	postinc0,c
   321  000D04  06E8               	decf	wreg,f,c
   322  000D06  E1FD               	bnz	clear_0
   323                           
   324                           ; Clear objects allocated to COMRAM (23 bytes)
   325  000D08  EE00  F033         	lfsr	0,__pbssCOMRAM
   326  000D0C  0E17               	movlw	23
   327  000D0E                     clear_1:
   328  000D0E  6AEE               	clrf	postinc0,c
   329  000D10  06E8               	decf	wreg,f,c
   330  000D12  E1FD               	bnz	clear_1
   331  000D14                     end_of_initialization:
   332                           	opt stack 0
   333  000D14                     __end_of__initialization:
   334                           	opt stack 0
   335  000D14  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   336  000D16  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   337  000D18  0E00               	movlw	low (__Lmediumconst shr (0+16))
   338  000D1A  6EF8               	movwf	tblptru,c
   339  000D1C  0100               	movlb	0
   340  000D1E  EF7B  F004         	goto	_main	;jump to C main() function
   341                           tblptru	equ	0xFF8
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           
   345                           	psect	bssCOMRAM
   346  000033                     __pbssCOMRAM:
   347                           	opt stack 0
   348  000033                     ES_Timer_Tick_Resp@NewEvent:
   349                           	opt stack 0
   350  000033                     	ds	3
   351  000036                     ES_Timer_Tick_Resp@NeedsProcessing:
   352                           	opt stack 0
   353  000036                     	ds	2
   354  000038                     ISR@LastTime:
   355                           	opt stack 0
   356  000038                     	ds	2
   357  00003A                     ISR@NextTime:
   358                           	opt stack 0
   359  00003A                     	ds	2
   360  00003C                     _Ready:
   361                           	opt stack 0
   362  00003C                     	ds	2
   363  00003E                     _SysTickCounter:
   364                           	opt stack 0
   365  00003E                     	ds	2
   366  000040                     _TMR_ActiveFlags:
   367                           	opt stack 0
   368  000040                     	ds	2
   369  000042                     __PRIMASK_temp:
   370                           	opt stack 0
   371  000042                     	ds	2
   372  000044                     ES_Timer_Tick_Resp@NextTimer2Process:
   373                           	opt stack 0
   374  000044                     	ds	1
   375  000045                     _MyPriority:
   376                           	opt stack 0
   377  000045                     	ds	1
   378  000046                     _TickCount:
   379                           	opt stack 0
   380  000046                     	ds	1
   381  000047                     ES_Run@ThisEvent:
   382                           	opt stack 0
   383  000047                     	ds	3
   384                           tblptru	equ	0xFF8
   385                           postinc0	equ	0xFEE
   386                           wreg	equ	0xFE8
   387                           
   388                           	psect	bssBANK0
   389  000060                     __pbssBANK0:
   390                           	opt stack 0
   391  000060                     _TMR_TimerArray:
   392                           	opt stack 0
   393  000060                     	ds	32
   394  000080                     _Queue0:
   395                           	opt stack 0
   396  000080                     	ds	12
   397                           tblptru	equ	0xFF8
   398                           postinc0	equ	0xFEE
   399                           wreg	equ	0xFE8
   400                           
   401                           	psect	cstackBANK0
   402  00008C                     __pcstackBANK0:
   403                           	opt stack 0
   404  00008C                     InitCan_XmitService@ThisEvent:
   405                           	opt stack 0
   406  00008C                     PostCan_XmitService@ThisEvent:
   407                           	opt stack 0
   408                           
   409                           ; 3 bytes @ 0x0
   410  00008C                     	ds	3
   411  00008F                     ??_ES_Timer_Tick_Resp:
   412  00008F                     InitCan_XmitService@Priority:
   413                           	opt stack 0
   414                           
   415                           ; 1 bytes @ 0x3
   416  00008F                     	ds	1
   417  000090                     ES_Initialize@NewRate:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x4
   421  000090                     	ds	2
   422  000092                     ES_Initialize@i:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x6
   426  000092                     	ds	1
   427  000093                     ??_ES_Run:
   428                           
   429                           ; 1 bytes @ 0x7
   430  000093                     	ds	4
   431  000097                     ES_Run@HighestPrior:
   432                           	opt stack 0
   433                           
   434                           ; 1 bytes @ 0xB
   435  000097                     	ds	1
   436  000098                     main@ErrorType:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0xC
   440  000098                     	ds	1
   441                           tblptru	equ	0xFF8
   442                           postinc0	equ	0xFEE
   443                           wreg	equ	0xFE8
   444                           
   445                           	psect	cstackCOMRAM
   446  000001                     __pcstackCOMRAM:
   447                           	opt stack 0
   448  000001                     ES_Timer_InitTimer@NewTime:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x0
   452  000001                     	ds	2
   453  000003                     ??_ES_Timer_InitTimer:
   454                           
   455                           ; 1 bytes @ 0x2
   456  000003                     	ds	2
   457  000005                     ES_Timer_InitTimer@Num:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0x4
   461  000005                     	ds	1
   462  000006                     ??_ISR:
   463                           
   464                           ; 1 bytes @ 0x5
   465  000006                     	ds	16
   466  000016                     ?_printf:
   467                           	opt stack 0
   468  000016                     ?___awmod:
   469                           	opt stack 0
   470  000016                     ?_RunCan_XmitService:
   471                           	opt stack 0
   472  000016                     ES_CheckUserEvents@i:
   473                           	opt stack 0
   474  000016                     ___lbmod@divisor:
   475                           	opt stack 0
   476  000016                     ES_GetMSBitSet@Val2Check:
   477                           	opt stack 0
   478  000016                     __HW_Timer_Init@Rate:
   479                           	opt stack 0
   480  000016                     ES_InitQueue@pBlock:
   481                           	opt stack 0
   482  000016                     printf@f:
   483                           	opt stack 0
   484  000016                     ___awmod@dividend:
   485                           	opt stack 0
   486  000016                     RunCan_XmitService@ThisEvent:
   487                           	opt stack 0
   488                           
   489                           ; 3 bytes @ 0x15
   490  000016                     	ds	1
   491  000017                     ___lbmod@dividend:
   492                           	opt stack 0
   493                           
   494                           ; 1 bytes @ 0x16
   495  000017                     	ds	1
   496  000018                     ??_ES_GetMSBitSet:
   497  000018                     ES_InitQueue@BlockSize:
   498                           	opt stack 0
   499  000018                     ___lbmod@counter:
   500                           	opt stack 0
   501  000018                     ES_Timer_Init@Rate:
   502                           	opt stack 0
   503  000018                     printf@ap:
   504                           	opt stack 0
   505  000018                     ___awmod@divisor:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x17
   509  000018                     	ds	1
   510  000019                     ___lbmod@rem:
   511                           	opt stack 0
   512  000019                     ES_InitQueue@pThisQueue:
   513                           	opt stack 0
   514  000019                     RunCan_XmitService@ReturnEvent:
   515                           	opt stack 0
   516                           
   517                           ; 3 bytes @ 0x18
   518  000019                     	ds	1
   519  00001A                     printf@c:
   520                           	opt stack 0
   521  00001A                     ___awmod@counter:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x19
   525  00001A                     	ds	1
   526  00001B                     ___awmod@sign:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x1A
   530  00001B                     	ds	1
   531  00001C                     ?___wmul:
   532                           	opt stack 0
   533  00001C                     ___wmul@multiplier:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x1B
   537  00001C                     	ds	1
   538  00001D                     ES_GetMSBitSet@ReturnVal:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x1C
   542  00001D                     	ds	1
   543  00001E                     ES_GetMSBitSet@Nybble2Test:
   544                           	opt stack 0
   545  00001E                     ___wmul@multiplicand:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x1D
   549  00001E                     	ds	1
   550  00001F                     ES_GetMSBitSet@LoopCntr:
   551                           	opt stack 0
   552                           
   553                           ; 1 bytes @ 0x1E
   554  00001F                     	ds	1
   555  000020                     ___wmul@product:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x1F
   559  000020                     	ds	2
   560  000022                     ES_EnQueueFIFO@pBlock:
   561                           	opt stack 0
   562  000022                     ES_DeQueue@pBlock:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x21
   566  000022                     	ds	2
   567  000024                     ES_DeQueue@pReturnEvent:
   568                           	opt stack 0
   569  000024                     ES_EnQueueFIFO@Event2Add:
   570                           	opt stack 0
   571                           
   572                           ; 3 bytes @ 0x23
   573  000024                     	ds	2
   574  000026                     ??_ES_DeQueue:
   575                           
   576                           ; 1 bytes @ 0x25
   577  000026                     	ds	1
   578  000027                     ??_ES_EnQueueFIFO:
   579                           
   580                           ; 1 bytes @ 0x26
   581  000027                     	ds	1
   582  000028                     ES_DeQueue@SaveCrit:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x27
   586  000028                     	ds	1
   587  000029                     ES_DeQueue@NumLeft:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x28
   591  000029                     	ds	1
   592  00002A                     ES_EnQueueFIFO@SaveCrit:
   593                           	opt stack 0
   594  00002A                     ES_DeQueue@pThisQueue:
   595                           	opt stack 0
   596                           
   597                           ; 2 bytes @ 0x29
   598  00002A                     	ds	1
   599  00002B                     ES_EnQueueFIFO@pThisQueue:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x2A
   603  00002B                     	ds	2
   604  00002D                     ES_PostToService@TheEvent:
   605                           	opt stack 0
   606                           
   607                           ; 3 bytes @ 0x2C
   608  00002D                     	ds	3
   609  000030                     ??_ES_PostToService:
   610                           
   611                           ; 1 bytes @ 0x2F
   612  000030                     	ds	2
   613  000032                     ES_PostToService@WhichService:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x31
   617  000032                     	ds	1
   618  000033                     tblptru	equ	0xFF8
   619                           postinc0	equ	0xFEE
   620                           wreg	equ	0xFE8
   621                           
   622                           ; 1 bytes @ 0x32
   623 ;;
   624 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   625 ;;
   626 ;; *************** function _main *****************
   627 ;; Defined at:
   628 ;;		line 25 in file "main.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;		None
   631 ;; Auto vars:     Size  Location     Type
   632 ;;  ErrorType       1   12[BANK0 ] enum E15642
   633 ;; Return value:  Size  Location     Type
   634 ;;                  2  299[None  ] int 
   635 ;; Registers used:
   636 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   637 ;; Tracked objects:
   638 ;;		On entry : 0/0
   639 ;;		On exit  : 0/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   642 ;;      Params:         0       0       0       0
   643 ;;      Locals:         0       1       0       0
   644 ;;      Temps:          0       0       0       0
   645 ;;      Totals:         0       1       0       0
   646 ;;Total ram usage:        1 bytes
   647 ;; Hardware stack levels required when called:   10
   648 ;; This function calls:
   649 ;;		_ES_Initialize
   650 ;;		_ES_Run
   651 ;;		_printf
   652 ;; This function is called by:
   653 ;;		Startup code after reset
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text0
   658  0008F6                     __ptext0:
   659                           	opt stack 0
   660  0008F6                     _main:
   661                           	opt stack 21
   662                           
   663                           ;main.c: 28: IRCF0 = 1;
   664                           
   665                           ;incstack = 0
   666  0008F6  88D3               	bsf	4051,4,c	;volatile
   667                           
   668                           ;main.c: 29: IRCF1 = 1;
   669  0008F8  8AD3               	bsf	4051,5,c	;volatile
   670                           
   671                           ;main.c: 30: IRCF2 = 1;
   672  0008FA  8CD3               	bsf	4051,6,c	;volatile
   673                           
   674                           ;main.c: 31: SCS1 = 1;
   675  0008FC  82D3               	bsf	4051,1,c	;volatile
   676                           
   677                           ;main.c: 39: ES_Return_t ErrorType;
   678                           ;main.c: 55: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
   679  0008FE  0E9C               	movlw	156
   680  000900  0100               	movlb	0	; () banked
   681  000902  6F91               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
   682  000904  0E3F               	movlw	63
   683  000906  6F90               	movwf	ES_Initialize@NewRate& (0+255),b
   684  000908  ECD6  F002         	call	_ES_Initialize	;wreg free
   685  00090C  0100               	movlb	0	; () banked
   686  00090E  6F98               	movwf	main@ErrorType& (0+255),b
   687                           
   688                           ; BSR set to: 0
   689                           ;main.c: 56: if ( ErrorType == Success ) {
   690  000910  0100               	movlb	0	; () banked
   691  000912  5198               	movf	main@ErrorType& (0+255),w,b
   692  000914  0100               	movlb	0	; () banked
   693  000916  A4D8               	btfss	status,2,c
   694  000918  D021               	goto	l2686
   695                           
   696                           ; BSR set to: 0
   697                           ;main.c: 58: ErrorType = ES_Run();
   698  00091A  EC4C  F003         	call	_ES_Run	;wreg free
   699  00091E  0100               	movlb	0	; () banked
   700  000920  6F98               	movwf	main@ErrorType& (0+255),b
   701                           
   702                           ; BSR set to: 0
   703                           ;main.c: 60: }
   704                           ;main.c: 62: switch (ErrorType){
   705  000922  D01C               	goto	l2686
   706  000924                     l2676:
   707                           
   708                           ; BSR set to: 0
   709                           ;main.c: 64: printf("Failed on attempt to Post\n");
   710  000924  0E5B               	movlw	low STR_1
   711  000926  6E16               	movwf	printf@f,c
   712  000928  0E03               	movlw	high STR_1
   713  00092A  6E17               	movwf	printf@f+1,c
   714  00092C  EC54  F006         	call	_printf	;wreg free
   715                           
   716                           ;main.c: 65: break;
   717  000930  D021               	goto	l307
   718  000932                     l2678:
   719                           
   720                           ;main.c: 67: printf("Failed on NULL pointer\n");
   721  000932  0E76               	movlw	low STR_2
   722  000934  6E16               	movwf	printf@f,c
   723  000936  0E03               	movlw	high STR_2
   724  000938  6E17               	movwf	printf@f+1,c
   725  00093A  EC54  F006         	call	_printf	;wreg free
   726                           
   727                           ;main.c: 68: break;
   728  00093E  D01A               	goto	l307
   729  000940                     l2680:
   730                           
   731                           ;main.c: 70: printf("Failed Initialization\n");
   732  000940  0E8E               	movlw	low STR_3
   733  000942  6E16               	movwf	printf@f,c
   734  000944  0E03               	movlw	high STR_3
   735  000946  6E17               	movwf	printf@f+1,c
   736  000948  EC54  F006         	call	_printf	;wreg free
   737                           
   738                           ;main.c: 71: break;
   739  00094C  D013               	goto	l307
   740  00094E                     l2682:
   741                           
   742                           ;main.c: 73: printf("Other Failure\n");
   743  00094E  0EA5               	movlw	low STR_4
   744  000950  6E16               	movwf	printf@f,c
   745  000952  0E03               	movlw	high STR_4
   746  000954  6E17               	movwf	printf@f+1,c
   747  000956  EC54  F006         	call	_printf	;wreg free
   748                           
   749                           ;main.c: 75: }
   750                           
   751                           ;main.c: 74: break;
   752  00095A  D00C               	goto	l307
   753  00095C                     l2686:
   754  00095C  0100               	movlb	0	; () banked
   755  00095E  5198               	movf	main@ErrorType& (0+255),w,b
   756                           
   757                           ; Switch size 1, requested type "space"
   758                           ; Number of cases is 3, Range of values is 1 to 5
   759                           ; switch strategies available:
   760                           ; Name         Instructions Cycles
   761                           ; simple_byte           10     6 (average)
   762                           ;	Chosen strategy is simple_byte
   763  000960  0A01               	xorlw	1	; case 1
   764  000962  B4D8               	btfsc	status,2,c
   765  000964  D7DF               	goto	l2676
   766  000966  0A02               	xorlw	2	; case 3
   767  000968  B4D8               	btfsc	status,2,c
   768  00096A  D7E3               	goto	l2678
   769  00096C  0A06               	xorlw	6	; case 5
   770  00096E  B4D8               	btfsc	status,2,c
   771  000970  D7E7               	goto	l2680
   772  000972  D7ED               	goto	l2682
   773  000974                     l307:
   774                           
   775                           ;main.c: 77: ;
   776  000974  D7FF               	goto	l307
   777  000976                     __end_of_main:
   778                           	opt stack 0
   779                           tblptru	equ	0xFF8
   780                           postinc0	equ	0xFEE
   781                           wreg	equ	0xFE8
   782                           status	equ	0xFD8
   783                           
   784 ;; *************** function _printf *****************
   785 ;; Defined at:
   786 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
   787 ;; Parameters:    Size  Location     Type
   788 ;;  f               2   21[COMRAM] PTR const unsigned char 
   789 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  tmpval          4    0        struct .
   792 ;;  cp              3    0        PTR const unsigned char 
   793 ;;  ap              2   23[COMRAM] PTR void [1]
   794 ;;		 -> ?_printf(2), 
   795 ;;  len             2    0        unsigned int 
   796 ;;  val             2    0        unsigned int 
   797 ;;  c               1   25[COMRAM] char 
   798 ;;  flag            1    0        unsigned char 
   799 ;;  prec            1    0        char 
   800 ;; Return value:  Size  Location     Type
   801 ;;                  2   21[COMRAM] int 
   802 ;; Registers used:
   803 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   809 ;;      Params:         2       0       0       0
   810 ;;      Locals:         3       0       0       0
   811 ;;      Temps:          0       0       0       0
   812 ;;      Totals:         5       0       0       0
   813 ;;Total ram usage:        5 bytes
   814 ;; Hardware stack levels used:    1
   815 ;; Hardware stack levels required when called:    4
   816 ;; This function calls:
   817 ;;		_putch
   818 ;; This function is called by:
   819 ;;		_main
   820 ;; This function uses a non-reentrant model
   821 ;;
   822                           
   823                           	psect	text1
   824  000CA8                     __ptext1:
   825                           	opt stack 0
   826  000CA8                     _printf:
   827                           	opt stack 26
   828                           
   829                           ;doprnt.c: 466: va_list ap;
   830                           ;doprnt.c: 499: signed char c;
   831                           ;doprnt.c: 506: signed char prec;
   832                           ;doprnt.c: 508: unsigned char flag;
   833                           ;doprnt.c: 523: union {
   834                           ;doprnt.c: 524: unsigned long vd;
   835                           ;doprnt.c: 525: double integ;
   836                           ;doprnt.c: 526: } tmpval;
   837                           ;doprnt.c: 528: unsigned int val;
   838                           ;doprnt.c: 529: unsigned len;
   839                           ;doprnt.c: 530: const char * cp;
   840                           ;doprnt.c: 533: *ap = __va_start();
   841                           
   842                           ;incstack = 0
   843  000CA8  0E18               	movlw	low (?_printf+2)
   844  000CAA  6E18               	movwf	printf@ap,c
   845  000CAC  0E00               	movlw	high (?_printf+2)
   846  000CAE  6E19               	movwf	printf@ap+1,c
   847                           
   848                           ;doprnt.c: 536: while(c = *f++) {
   849  000CB0  D003               	goto	l2572
   850  000CB2                     l2570:
   851                           
   852                           ;doprnt.c: 540: {
   853                           ;doprnt.c: 541: (putch(c) );
   854  000CB2  501A               	movf	printf@c,w,c
   855  000CB4  ECF1  F006         	call	_putch
   856  000CB8                     l2572:
   857  000CB8  C016  FFF6         	movff	printf@f,tblptrl
   858  000CBC  C017  FFF7         	movff	printf@f+1,tblptrh
   859  000CC0  4A16               	infsnz	printf@f,f,c
   860  000CC2  2A17               	incf	printf@f+1,f,c
   861  000CC4                     	if	0	;tblptru may be non-zero
   862  000CC4                     	endif
   863  000CC4                     	if	0	;tblptru may be non-zero
   864  000CC4                     	endif
   865  000CC4  0008               	tblrd		*
   866  000CC6  CFF5 F01A          	movff	tablat,printf@c
   867  000CCA  501A               	movf	printf@c,w,c
   868  000CCC  B4D8               	btfsc	status,2,c
   869  000CCE  0012               	return	
   870  000CD0  D7F0               	goto	l2570
   871  000CD2                     __end_of_printf:
   872                           	opt stack 0
   873                           tblptru	equ	0xFF8
   874                           tblptrh	equ	0xFF7
   875                           tblptrl	equ	0xFF6
   876                           tablat	equ	0xFF5
   877                           postinc0	equ	0xFEE
   878                           wreg	equ	0xFE8
   879                           status	equ	0xFD8
   880                           
   881 ;; *************** function _putch *****************
   882 ;; Defined at:
   883 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
   884 ;; Parameters:    Size  Location     Type
   885 ;;  c               1    wreg     unsigned char 
   886 ;; Auto vars:     Size  Location     Type
   887 ;;  c               1    0[COMRAM] unsigned char 
   888 ;; Return value:  Size  Location     Type
   889 ;;                  1    wreg      void 
   890 ;; Registers used:
   891 ;;		wreg
   892 ;; Tracked objects:
   893 ;;		On entry : 0/0
   894 ;;		On exit  : 0/0
   895 ;;		Unchanged: 0/0
   896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   897 ;;      Params:         0       0       0       0
   898 ;;      Locals:         0       0       0       0
   899 ;;      Temps:          0       0       0       0
   900 ;;      Totals:         0       0       0       0
   901 ;;Total ram usage:        0 bytes
   902 ;; Hardware stack levels used:    1
   903 ;; Hardware stack levels required when called:    3
   904 ;; This function calls:
   905 ;;		Nothing
   906 ;; This function is called by:
   907 ;;		_printf
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911                           	psect	text2
   912  000DE2                     __ptext2:
   913                           	opt stack 0
   914  000DE2                     _putch:
   915                           	opt stack 26
   916                           
   917                           ;incstack = 0
   918  000DE2  0012               	return		;funcret
   919  000DE4                     __end_of_putch:
   920                           	opt stack 0
   921                           tblptru	equ	0xFF8
   922                           tblptrh	equ	0xFF7
   923                           tblptrl	equ	0xFF6
   924                           tablat	equ	0xFF5
   925                           postinc0	equ	0xFEE
   926                           wreg	equ	0xFE8
   927                           status	equ	0xFD8
   928                           
   929 ;; *************** function _ES_Run *****************
   930 ;; Defined at:
   931 ;;		line 277 in file "ES_Framework.c"
   932 ;; Parameters:    Size  Location     Type
   933 ;;		None
   934 ;; Auto vars:     Size  Location     Type
   935 ;;  HighestPrior    1   11[BANK0 ] unsigned char 
   936 ;; Return value:  Size  Location     Type
   937 ;;                  1    wreg      enum E15490
   938 ;; Registers used:
   939 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   945 ;;      Params:         0       0       0       0
   946 ;;      Locals:         0       1       0       0
   947 ;;      Temps:          0       4       0       0
   948 ;;      Totals:         0       5       0       0
   949 ;;Total ram usage:        5 bytes
   950 ;; Hardware stack levels used:    1
   951 ;; Hardware stack levels required when called:    9
   952 ;; This function calls:
   953 ;;		_ES_CheckUserEvents
   954 ;;		_ES_DeQueue
   955 ;;		_ES_GetMSBitSet
   956 ;;		_RunCan_XmitService
   957 ;;		__HW_Process_Pending_Ints
   958 ;; This function is called by:
   959 ;;		_main
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963                           	psect	text3
   964  000698                     __ptext3:
   965                           	opt stack 0
   966  000698                     _ES_Run:
   967                           	opt stack 21
   968                           
   969                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
   970                           
   971                           ;incstack = 0
   972                           ;ES_Framework.c: 279: uint8_t HighestPrior;
   973                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
   974                           ;ES_Framework.c: 282: while(1){
   975  000698  D067               	goto	l2558
   976  00069A                     l2546:
   977                           
   978                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
   979  00069A  C03C  F016         	movff	_Ready,ES_GetMSBitSet@Val2Check
   980  00069E  C03D  F017         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
   981  0006A2  ECF9  F004         	call	_ES_GetMSBitSet	;wreg free
   982  0006A6  0100               	movlb	0	; () banked
   983  0006A8  6F97               	movwf	ES_Run@HighestPrior& (0+255),b
   984                           
   985                           ; BSR set to: 0
   986                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
   987  0006AA  0100               	movlb	0	; () banked
   988  0006AC  5197               	movf	ES_Run@HighestPrior& (0+255),w,b
   989  0006AE  0D03               	mullw	3
   990  0006B0  0E54               	movlw	low _EventQueues
   991  0006B2  24F3               	addwf	prodl,w,c
   992  0006B4  6EF6               	movwf	tblptrl,c
   993  0006B6  0E03               	movlw	high _EventQueues
   994  0006B8  20F4               	addwfc	prodh,w,c
   995  0006BA  6EF7               	movwf	tblptrh,c
   996  0006BC                     	if	0	;There are less than 3 active tblptr bytes
   997  0006BC                     	endif
   998  0006BC  0009               	tblrd		*+
   999  0006BE  CFF5 F022          	movff	tablat,ES_DeQueue@pBlock
  1000  0006C2  000A               	tblrd		*-
  1001  0006C4  CFF5 F023          	movff	tablat,ES_DeQueue@pBlock+1
  1002  0006C8  0E47               	movlw	low ES_Run@ThisEvent
  1003  0006CA  6E24               	movwf	ES_DeQueue@pReturnEvent,c
  1004  0006CC  0E00               	movlw	high ES_Run@ThisEvent
  1005  0006CE  6E25               	movwf	ES_DeQueue@pReturnEvent+1,c
  1006  0006D0  ECDB  F001         	call	_ES_DeQueue	;wreg free
  1007  0006D4  0900               	iorlw	0
  1008  0006D6  A4D8               	btfss	status,2,c
  1009  0006D8  D01D               	goto	l2552
  1010                           
  1011                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1012  0006DA  0100               	movlb	0	; () banked
  1013  0006DC  5197               	movf	ES_Run@HighestPrior& (0+255),w,b
  1014  0006DE  0D02               	mullw	2
  1015  0006E0  0E01               	movlw	low _BitNum2SetMask
  1016  0006E2  24F3               	addwf	prodl,w,c
  1017  0006E4  6EF6               	movwf	tblptrl,c
  1018  0006E6  0E03               	movlw	high _BitNum2SetMask
  1019  0006E8  20F4               	addwfc	prodh,w,c
  1020  0006EA  6EF7               	movwf	tblptrh,c
  1021  0006EC                     	if	0	;There are less than 3 active tblptr bytes
  1022  0006EC                     	endif
  1023  0006EC  0009               	tblrd		*+
  1024  0006EE  CFF5 F093          	movff	tablat,??_ES_Run
  1025  0006F2  0009               	tblrd		*+
  1026  0006F4  CFF5 F094          	movff	tablat,??_ES_Run+1
  1027  0006F8  0100               	movlb	0	; () banked
  1028  0006FA  1D93               	comf	??_ES_Run& (0+255),w,b
  1029  0006FC  0100               	movlb	0	; () banked
  1030  0006FE  6F95               	movwf	(??_ES_Run+2)& (0+255),b
  1031  000700  0100               	movlb	0	; () banked
  1032  000702  1D94               	comf	(??_ES_Run+1)& (0+255),w,b
  1033  000704  0100               	movlb	0	; () banked
  1034  000706  6F96               	movwf	(??_ES_Run+3)& (0+255),b
  1035  000708  0100               	movlb	0	; () banked
  1036  00070A  5195               	movf	(??_ES_Run+2)& (0+255),w,b
  1037  00070C  163C               	andwf	_Ready,f,c
  1038  00070E  0100               	movlb	0	; () banked
  1039  000710  5196               	movf	(??_ES_Run+3)& (0+255),w,b
  1040  000712  163D               	andwf	_Ready+1,f,c
  1041  000714                     l2552:
  1042                           
  1043                           ;ES_Framework.c: 291: }
  1044                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1045  000714  C047  F016         	movff	ES_Run@ThisEvent,RunCan_XmitService@ThisEvent
  1046  000718  C048  F017         	movff	ES_Run@ThisEvent+1,RunCan_XmitService@ThisEvent+1
  1047  00071C  C049  F018         	movff	ES_Run@ThisEvent+2,RunCan_XmitService@ThisEvent+2
  1048  000720  0100               	movlb	0	; () banked
  1049  000722  5197               	movf	ES_Run@HighestPrior& (0+255),w,b
  1050  000724  0D04               	mullw	4
  1051  000726  0E02               	movlw	2
  1052  000728  26F3               	addwf	prodl,f,c
  1053  00072A  0E00               	movlw	0
  1054  00072C  22F4               	addwfc	prodh,f,c
  1055  00072E  0E50               	movlw	low _ServDescList
  1056  000730  24F3               	addwf	prodl,w,c
  1057  000732  6EF6               	movwf	tblptrl,c
  1058  000734  0E03               	movlw	high _ServDescList
  1059  000736  20F4               	addwfc	prodh,w,c
  1060  000738  6EF7               	movwf	tblptrh,c
  1061  00073A                     	if	0	;There are less than 3 active tblptr bytes
  1062  00073A                     	endif
  1063  00073A  D801               	call	u1848
  1064  00073C  D00C               	goto	u1849
  1065  00073E                     u1848:
  1066  00073E  0005               	push	
  1067  000740  6EFA               	movwf	pclath,c
  1068  000742  0009               	tblrd		*+
  1069  000744  50F5               	movf	tablat,w,c
  1070  000746  6EFD               	movwf	tosl,c
  1071  000748  0009               	tblrd		*+
  1072  00074A  50F5               	movf	tablat,w,c
  1073  00074C  6EFE               	movwf	tosh,c
  1074  00074E  50F8               	movf	tblptru,w,c
  1075  000750  6EFF               	movwf	tosu,c
  1076  000752  50FA               	movf	pclath,w,c
  1077  000754  0012               	return		;indir
  1078  000756                     u1849:
  1079  000756  0E16               	movlw	low ?_RunCan_XmitService
  1080  000758  6ED9               	movwf	fsr2l,c
  1081  00075A  0E00               	movlw	high ?_RunCan_XmitService
  1082  00075C  6EDA               	movwf	fsr2h,c
  1083  00075E  50DF               	movf	indf2,w,c
  1084  000760  B4D8               	btfsc	status,2,c
  1085  000762  D002               	goto	l2558
  1086                           
  1087                           ;ES_Framework.c: 293: return FailedRun;
  1088  000764  0E02               	movlw	2
  1089  000766  0012               	return	
  1090  000768                     l2558:
  1091  000768  ECCC  F006         	call	__HW_Process_Pending_Ints	;wreg free
  1092  00076C  0900               	iorlw	0
  1093  00076E  B4D8               	btfsc	status,2,c
  1094  000770  D004               	goto	l2562
  1095  000772  503C               	movf	_Ready,w,c
  1096  000774  103D               	iorwf	_Ready+1,w,c
  1097  000776  A4D8               	btfss	status,2,c
  1098  000778  D790               	goto	l2546
  1099  00077A                     l2562:
  1100                           
  1101                           ;ES_Framework.c: 294: }
  1102                           ;ES_Framework.c: 295: }
  1103                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1104  00077A  ECD2  F005         	call	_ES_CheckUserEvents	;wreg free
  1105  00077E  D7F4               	goto	l2558
  1106  000780                     __end_of_ES_Run:
  1107                           	opt stack 0
  1108                           tosu	equ	0xFFF
  1109                           tosh	equ	0xFFE
  1110                           tosl	equ	0xFFD
  1111                           pclath	equ	0xFFA
  1112                           tblptru	equ	0xFF8
  1113                           tblptrh	equ	0xFF7
  1114                           tblptrl	equ	0xFF6
  1115                           tablat	equ	0xFF5
  1116                           prodh	equ	0xFF4
  1117                           prodl	equ	0xFF3
  1118                           postinc0	equ	0xFEE
  1119                           wreg	equ	0xFE8
  1120                           indf2	equ	0xFDF
  1121                           fsr2h	equ	0xFDA
  1122                           fsr2l	equ	0xFD9
  1123                           status	equ	0xFD8
  1124                           
  1125 ;; *************** function __HW_Process_Pending_Ints *****************
  1126 ;; Defined at:
  1127 ;;		line 225 in file "ES_Port.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;		None
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;		None
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      unsigned char 
  1134 ;; Registers used:
  1135 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1141 ;;      Params:         0       0       0       0
  1142 ;;      Locals:         0       0       0       0
  1143 ;;      Temps:          0       0       0       0
  1144 ;;      Totals:         0       0       0       0
  1145 ;;Total ram usage:        0 bytes
  1146 ;; Hardware stack levels used:    1
  1147 ;; Hardware stack levels required when called:    8
  1148 ;; This function calls:
  1149 ;;		_ES_Timer_Tick_Resp
  1150 ;; This function is called by:
  1151 ;;		_ES_Run
  1152 ;; This function uses a non-reentrant model
  1153 ;;
  1154                           
  1155                           	psect	text4
  1156  000D98                     __ptext4:
  1157                           	opt stack 0
  1158  000D98                     __HW_Process_Pending_Ints:
  1159                           	opt stack 21
  1160                           
  1161                           ;ES_Port.c: 227: while (TickCount > 0)
  1162                           
  1163                           ;incstack = 0
  1164  000D98  D003               	goto	l2476
  1165  000D9A                     l2472:
  1166                           
  1167                           ;ES_Port.c: 228: {
  1168                           ;ES_Port.c: 230: ES_Timer_Tick_Resp();
  1169  000D9A  EC5A  F002         	call	_ES_Timer_Tick_Resp	;wreg free
  1170                           
  1171                           ;ES_Port.c: 231: TickCount--;
  1172  000D9E  0646               	decf	_TickCount,f,c	;volatile
  1173  000DA0                     l2476:
  1174  000DA0  5046               	movf	_TickCount,w,c	;volatile
  1175  000DA2  A4D8               	btfss	status,2,c
  1176  000DA4  D7FA               	goto	l2472
  1177                           
  1178                           ;ES_Port.c: 232: }
  1179                           ;ES_Port.c: 234: return 1;
  1180  000DA6  0E01               	movlw	1
  1181  000DA8  0012               	return	
  1182  000DAA                     __end_of__HW_Process_Pending_Ints:
  1183                           	opt stack 0
  1184                           tosu	equ	0xFFF
  1185                           tosh	equ	0xFFE
  1186                           tosl	equ	0xFFD
  1187                           pclath	equ	0xFFA
  1188                           tblptru	equ	0xFF8
  1189                           tblptrh	equ	0xFF7
  1190                           tblptrl	equ	0xFF6
  1191                           tablat	equ	0xFF5
  1192                           prodh	equ	0xFF4
  1193                           prodl	equ	0xFF3
  1194                           postinc0	equ	0xFEE
  1195                           wreg	equ	0xFE8
  1196                           indf2	equ	0xFDF
  1197                           fsr2h	equ	0xFDA
  1198                           fsr2l	equ	0xFD9
  1199                           status	equ	0xFD8
  1200                           
  1201 ;; *************** function _ES_Timer_Tick_Resp *****************
  1202 ;; Defined at:
  1203 ;;		line 284 in file "ES_Timers.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;		None
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;		None
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      void 
  1210 ;; Registers used:
  1211 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1217 ;;      Params:         0       0       0       0
  1218 ;;      Locals:         0       0       0       0
  1219 ;;      Temps:          0       4       0       0
  1220 ;;      Totals:         0       4       0       0
  1221 ;;Total ram usage:        4 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    7
  1224 ;; This function calls:
  1225 ;;		Absolute function
  1226 ;;		_ES_GetMSBitSet
  1227 ;;		_PostCan_XmitService
  1228 ;; This function is called by:
  1229 ;;		__HW_Process_Pending_Ints
  1230 ;; This function uses a non-reentrant model
  1231 ;;
  1232                           
  1233                           	psect	text5
  1234  0004B4                     __ptext5:
  1235                           	opt stack 0
  1236  0004B4                     _ES_Timer_Tick_Resp:
  1237                           	opt stack 21
  1238                           
  1239                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1240                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1241                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1242                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1243                           
  1244                           ;incstack = 0
  1245  0004B4  5040               	movf	_TMR_ActiveFlags,w,c
  1246  0004B6  1041               	iorwf	_TMR_ActiveFlags+1,w,c
  1247  0004B8  B4D8               	btfsc	status,2,c
  1248  0004BA  0012               	return	
  1249                           
  1250                           ;ES_Timers.c: 291: {
  1251                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1252  0004BC  C040  F036         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1253  0004C0  C041  F037         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1254  0004C4                     l2308:
  1255                           
  1256                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1257  0004C4  C036  F016         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1258  0004C8  C037  F017         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1259  0004CC  ECF9  F004         	call	_ES_GetMSBitSet	;wreg free
  1260  0004D0  6E44               	movwf	ES_Timer_Tick_Resp@NextTimer2Process,c
  1261                           
  1262                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1263  0004D2  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1264  0004D4  0D02               	mullw	2
  1265  0004D6  0E60               	movlw	low _TMR_TimerArray
  1266  0004D8  24F3               	addwf	prodl,w,c
  1267  0004DA  6ED9               	movwf	fsr2l,c
  1268  0004DC  0E00               	movlw	high _TMR_TimerArray
  1269  0004DE  20F4               	addwfc	prodh,w,c
  1270  0004E0  6EDA               	movwf	fsr2h,c
  1271  0004E2  06DE               	decf	postinc2,f,c
  1272  0004E4  0E00               	movlw	0
  1273  0004E6  5ADD               	subwfb	postdec2,f,c
  1274  0004E8  50DE               	movf	postinc2,w,c
  1275  0004EA  10DE               	iorwf	postinc2,w,c
  1276  0004EC  A4D8               	btfss	status,2,c
  1277  0004EE  D03D               	goto	l2320
  1278                           
  1279                           ;ES_Timers.c: 299: {
  1280                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1281  0004F0  0E03               	movlw	3
  1282  0004F2  6E33               	movwf	ES_Timer_Tick_Resp@NewEvent,c
  1283                           
  1284                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1285  0004F4  C044  F034         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1286  0004F8  6A35               	clrf	ES_Timer_Tick_Resp@NewEvent+2,c
  1287                           
  1288                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1289  0004FA  C033  F08C         	movff	ES_Timer_Tick_Resp@NewEvent,PostCan_XmitService@ThisEvent
  1290  0004FE  C034  F08D         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostCan_XmitService@ThisEvent+1
  1291  000502  C035  F08E         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostCan_XmitService@ThisEvent+2
  1292  000506  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1293  000508  0D02               	mullw	2
  1294  00050A  0E21               	movlw	low _Timer2PostFunc
  1295  00050C  24F3               	addwf	prodl,w,c
  1296  00050E  6EF6               	movwf	tblptrl,c
  1297  000510  0E03               	movlw	high _Timer2PostFunc
  1298  000512  20F4               	addwfc	prodh,w,c
  1299  000514  6EF7               	movwf	tblptrh,c
  1300  000516                     	if	0	;There are less than 3 active tblptr bytes
  1301  000516                     	endif
  1302  000516  D801               	call	u1598
  1303  000518  D00C               	goto	l2318
  1304  00051A                     u1598:
  1305  00051A  0005               	push	
  1306  00051C  6EFA               	movwf	pclath,c
  1307  00051E  0009               	tblrd		*+
  1308  000520  50F5               	movf	tablat,w,c
  1309  000522  6EFD               	movwf	tosl,c
  1310  000524  0009               	tblrd		*+
  1311  000526  50F5               	movf	tablat,w,c
  1312  000528  6EFE               	movwf	tosh,c
  1313  00052A  50F8               	movf	tblptru,w,c
  1314  00052C  6EFF               	movwf	tosu,c
  1315  00052E  50FA               	movf	pclath,w,c
  1316  000530  0012               	return		;indir
  1317  000532                     l2318:
  1318                           
  1319                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1320  000532  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1321  000534  0D02               	mullw	2
  1322  000536  0E01               	movlw	low _BitNum2SetMask
  1323  000538  24F3               	addwf	prodl,w,c
  1324  00053A  6EF6               	movwf	tblptrl,c
  1325  00053C  0E03               	movlw	high _BitNum2SetMask
  1326  00053E  20F4               	addwfc	prodh,w,c
  1327  000540  6EF7               	movwf	tblptrh,c
  1328  000542                     	if	0	;There are less than 3 active tblptr bytes
  1329  000542                     	endif
  1330  000542  0009               	tblrd		*+
  1331  000544  CFF5 F08F          	movff	tablat,??_ES_Timer_Tick_Resp
  1332  000548  0009               	tblrd		*+
  1333  00054A  CFF5 F090          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1334  00054E  0100               	movlb	0	; () banked
  1335  000550  1D8F               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1336  000552  0100               	movlb	0	; () banked
  1337  000554  6F91               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1338  000556  0100               	movlb	0	; () banked
  1339  000558  1D90               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1340  00055A  0100               	movlb	0	; () banked
  1341  00055C  6F92               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1342  00055E  0100               	movlb	0	; () banked
  1343  000560  5191               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1344  000562  1640               	andwf	_TMR_ActiveFlags,f,c
  1345  000564  0100               	movlb	0	; () banked
  1346  000566  5192               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1347  000568  1641               	andwf	_TMR_ActiveFlags+1,f,c
  1348  00056A                     l2320:
  1349                           
  1350                           ;ES_Timers.c: 306: }
  1351                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1352  00056A  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1353  00056C  0D02               	mullw	2
  1354  00056E  0E01               	movlw	low _BitNum2SetMask
  1355  000570  24F3               	addwf	prodl,w,c
  1356  000572  6EF6               	movwf	tblptrl,c
  1357  000574  0E03               	movlw	high _BitNum2SetMask
  1358  000576  20F4               	addwfc	prodh,w,c
  1359  000578  6EF7               	movwf	tblptrh,c
  1360  00057A                     	if	0	;There are less than 3 active tblptr bytes
  1361  00057A                     	endif
  1362  00057A  0009               	tblrd		*+
  1363  00057C  CFF5 F08F          	movff	tablat,??_ES_Timer_Tick_Resp
  1364  000580  0009               	tblrd		*+
  1365  000582  CFF5 F090          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1366  000586  0100               	movlb	0	; () banked
  1367  000588  1D8F               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1368  00058A  0100               	movlb	0	; () banked
  1369  00058C  6F91               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1370  00058E  0100               	movlb	0	; () banked
  1371  000590  1D90               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1372  000592  0100               	movlb	0	; () banked
  1373  000594  6F92               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1374  000596  0100               	movlb	0	; () banked
  1375  000598  5191               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1376  00059A  1636               	andwf	ES_Timer_Tick_Resp@NeedsProcessing,f,c
  1377  00059C  0100               	movlb	0	; () banked
  1378  00059E  5192               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1379  0005A0  1637               	andwf	ES_Timer_Tick_Resp@NeedsProcessing+1,f,c
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1383  0005A2  5036               	movf	ES_Timer_Tick_Resp@NeedsProcessing,w,c
  1384  0005A4  1037               	iorwf	ES_Timer_Tick_Resp@NeedsProcessing+1,w,c
  1385  0005A6  B4D8               	btfsc	status,2,c
  1386  0005A8  0012               	return	
  1387  0005AA  D78C               	goto	l2308
  1388  0005AC                     __end_of_ES_Timer_Tick_Resp:
  1389                           	opt stack 0
  1390                           tosu	equ	0xFFF
  1391                           tosh	equ	0xFFE
  1392                           tosl	equ	0xFFD
  1393                           pclath	equ	0xFFA
  1394                           tblptru	equ	0xFF8
  1395                           tblptrh	equ	0xFF7
  1396                           tblptrl	equ	0xFF6
  1397                           tablat	equ	0xFF5
  1398                           prodh	equ	0xFF4
  1399                           prodl	equ	0xFF3
  1400                           postinc0	equ	0xFEE
  1401                           wreg	equ	0xFE8
  1402                           indf2	equ	0xFDF
  1403                           postinc2	equ	0xFDE
  1404                           postdec2	equ	0xFDD
  1405                           fsr2h	equ	0xFDA
  1406                           fsr2l	equ	0xFD9
  1407                           status	equ	0xFD8
  1408                           
  1409 ;; *************** function _PostCan_XmitService *****************
  1410 ;; Defined at:
  1411 ;;		line 113 in file "Can_XmitService.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;  ThisEvent       3    0[BANK0 ] struct ES_Event_t
  1414 ;; Auto vars:     Size  Location     Type
  1415 ;;		None
  1416 ;; Return value:  Size  Location     Type
  1417 ;;                  1    wreg      unsigned char 
  1418 ;; Registers used:
  1419 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1420 ;; Tracked objects:
  1421 ;;		On entry : 0/0
  1422 ;;		On exit  : 0/0
  1423 ;;		Unchanged: 0/0
  1424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1425 ;;      Params:         0       3       0       0
  1426 ;;      Locals:         0       0       0       0
  1427 ;;      Temps:          0       0       0       0
  1428 ;;      Totals:         0       3       0       0
  1429 ;;Total ram usage:        3 bytes
  1430 ;; Hardware stack levels used:    1
  1431 ;; Hardware stack levels required when called:    6
  1432 ;; This function calls:
  1433 ;;		_ES_PostToService
  1434 ;; This function is called by:
  1435 ;;		_ES_Timer_Tick_Resp
  1436 ;;		_PostToList
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440                           	psect	text6
  1441  000D84                     __ptext6:
  1442                           	opt stack 0
  1443  000D84                     _PostCan_XmitService:
  1444                           	opt stack 21
  1445                           
  1446                           ;Can_XmitService.c: 115: return ES_PostToService( MyPriority, ThisEvent);
  1447                           
  1448                           ;incstack = 0
  1449  000D84  C08C  F02D         	movff	PostCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  1450  000D88  C08D  F02E         	movff	PostCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  1451  000D8C  C08E  F02F         	movff	PostCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  1452  000D90  5045               	movf	_MyPriority,w,c
  1453  000D92  EC9F  F005         	call	_ES_PostToService
  1454  000D96  0012               	return	
  1455  000D98                     __end_of_PostCan_XmitService:
  1456                           	opt stack 0
  1457                           tosu	equ	0xFFF
  1458                           tosh	equ	0xFFE
  1459                           tosl	equ	0xFFD
  1460                           pclath	equ	0xFFA
  1461                           tblptru	equ	0xFF8
  1462                           tblptrh	equ	0xFF7
  1463                           tblptrl	equ	0xFF6
  1464                           tablat	equ	0xFF5
  1465                           prodh	equ	0xFF4
  1466                           prodl	equ	0xFF3
  1467                           postinc0	equ	0xFEE
  1468                           wreg	equ	0xFE8
  1469                           indf2	equ	0xFDF
  1470                           postinc2	equ	0xFDE
  1471                           postdec2	equ	0xFDD
  1472                           fsr2h	equ	0xFDA
  1473                           fsr2l	equ	0xFD9
  1474                           status	equ	0xFD8
  1475                           
  1476 ;; *************** function _ES_GetMSBitSet *****************
  1477 ;; Defined at:
  1478 ;;		line 79 in file "ES_LookupTables.c"
  1479 ;; Parameters:    Size  Location     Type
  1480 ;;  Val2Check       2   21[COMRAM] unsigned int 
  1481 ;; Auto vars:     Size  Location     Type
  1482 ;;  LoopCntr        1   30[COMRAM] char 
  1483 ;;  Nybble2Test     1   29[COMRAM] unsigned char 
  1484 ;;  ReturnVal       1   28[COMRAM] unsigned char 
  1485 ;; Return value:  Size  Location     Type
  1486 ;;                  1    wreg      unsigned char 
  1487 ;; Registers used:
  1488 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1494 ;;      Params:         2       0       0       0
  1495 ;;      Locals:         3       0       0       0
  1496 ;;      Temps:          5       0       0       0
  1497 ;;      Totals:        10       0       0       0
  1498 ;;Total ram usage:       10 bytes
  1499 ;; Hardware stack levels used:    1
  1500 ;; Hardware stack levels required when called:    3
  1501 ;; This function calls:
  1502 ;;		Nothing
  1503 ;; This function is called by:
  1504 ;;		_ES_Run
  1505 ;;		_ES_Timer_Tick_Resp
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           	psect	text7
  1510  0009F2                     __ptext7:
  1511                           	opt stack 0
  1512  0009F2                     _ES_GetMSBitSet:
  1513                           	opt stack 24
  1514                           
  1515                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1516                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1517                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1518                           
  1519                           ;incstack = 0
  1520  0009F2  0E80               	movlw	128
  1521  0009F4  6E1D               	movwf	ES_GetMSBitSet@ReturnVal,c
  1522                           
  1523                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1524  0009F6  0E03               	movlw	3
  1525  0009F8  6E1F               	movwf	ES_GetMSBitSet@LoopCntr,c
  1526  0009FA                     l2276:
  1527                           
  1528                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1529  0009FA  BE1F               	btfsc	ES_GetMSBitSet@LoopCntr,7,c
  1530  0009FC  D031               	goto	l2290
  1531                           
  1532                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1533                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1534                           ;ES_LookupTables.c: 91: 0x0F);
  1535  0009FE  501F               	movf	ES_GetMSBitSet@LoopCntr,w,c
  1536  000A00  0D04               	mullw	4
  1537  000A02  CFF3 F018          	movff	prodl,??_ES_GetMSBitSet
  1538  000A06  C016  F019         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1539  000A0A  C017  F01A         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1540  000A0E  2A18               	incf	??_ES_GetMSBitSet,f,c
  1541  000A10  D003               	goto	u1544
  1542  000A12                     u1545:
  1543  000A12  90D8               	bcf	status,0,c
  1544  000A14  321A               	rrcf	??_ES_GetMSBitSet+2,f,c
  1545  000A16  3219               	rrcf	??_ES_GetMSBitSet+1,f,c
  1546  000A18                     u1544:
  1547  000A18  2E18               	decfsz	??_ES_GetMSBitSet,f,c
  1548  000A1A  D7FB               	goto	u1545
  1549  000A1C  5019               	movf	??_ES_GetMSBitSet+1,w,c
  1550  000A1E  0B0F               	andlw	15
  1551  000A20  6E1E               	movwf	ES_GetMSBitSet@Nybble2Test,c
  1552                           
  1553                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1554  000A22  501E               	movf	ES_GetMSBitSet@Nybble2Test,w,c
  1555  000A24  B4D8               	btfsc	status,2,c
  1556  000A26  D01A               	goto	l2286
  1557                           
  1558                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  1559                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  1560  000A28  0EFF               	movlw	255
  1561  000A2A  6E18               	movwf	??_ES_GetMSBitSet& (0+255),c
  1562  000A2C  0EFF               	movlw	255
  1563  000A2E  6E19               	movwf	(??_ES_GetMSBitSet+1)& (0+255),c
  1564  000A30  501E               	movf	ES_GetMSBitSet@Nybble2Test,w,c
  1565  000A32  6E1A               	movwf	(??_ES_GetMSBitSet+2)& (0+255),c
  1566  000A34  6A1B               	clrf	(??_ES_GetMSBitSet+3)& (0+255),c
  1567  000A36  5018               	movf	??_ES_GetMSBitSet,w,c
  1568  000A38  261A               	addwf	??_ES_GetMSBitSet+2,f,c
  1569  000A3A  5019               	movf	??_ES_GetMSBitSet+1,w,c
  1570  000A3C  221B               	addwfc	??_ES_GetMSBitSet+3,f,c
  1571  000A3E  0E41               	movlw	low _Nybble2MSBitNum
  1572  000A40  241A               	addwf	??_ES_GetMSBitSet+2,w,c
  1573  000A42  6EF6               	movwf	tblptrl,c
  1574  000A44  0E03               	movlw	high _Nybble2MSBitNum
  1575  000A46  201B               	addwfc	??_ES_GetMSBitSet+3,w,c
  1576  000A48  6EF7               	movwf	tblptrh,c
  1577  000A4A                     	if	0	;There are less than 3 active tblptr bytes
  1578  000A4A                     	endif
  1579  000A4A  0008               	tblrd		*
  1580  000A4C  CFF5 F01C          	movff	tablat,??_ES_GetMSBitSet+4
  1581  000A50  501F               	movf	ES_GetMSBitSet@LoopCntr,w,c
  1582  000A52  0D04               	mullw	4
  1583  000A54  50F3               	movf	prodl,w,c
  1584  000A56  241C               	addwf	??_ES_GetMSBitSet+4,w,c
  1585  000A58  6E1D               	movwf	ES_GetMSBitSet@ReturnVal,c
  1586                           
  1587                           ;ES_LookupTables.c: 96: break;
  1588  000A5A  D002               	goto	l2290
  1589  000A5C                     l2286:
  1590  000A5C  061F               	decf	ES_GetMSBitSet@LoopCntr,f,c
  1591  000A5E  D7CD               	goto	l2276
  1592  000A60                     l2290:
  1593                           
  1594                           ;ES_LookupTables.c: 97: }
  1595                           ;ES_LookupTables.c: 98: }
  1596                           ;ES_LookupTables.c: 99: return ReturnVal;
  1597  000A60  501D               	movf	ES_GetMSBitSet@ReturnVal,w,c
  1598  000A62  0012               	return	
  1599  000A64                     __end_of_ES_GetMSBitSet:
  1600                           	opt stack 0
  1601                           tosu	equ	0xFFF
  1602                           tosh	equ	0xFFE
  1603                           tosl	equ	0xFFD
  1604                           pclath	equ	0xFFA
  1605                           tblptru	equ	0xFF8
  1606                           tblptrh	equ	0xFF7
  1607                           tblptrl	equ	0xFF6
  1608                           tablat	equ	0xFF5
  1609                           prodh	equ	0xFF4
  1610                           prodl	equ	0xFF3
  1611                           postinc0	equ	0xFEE
  1612                           wreg	equ	0xFE8
  1613                           indf2	equ	0xFDF
  1614                           postinc2	equ	0xFDE
  1615                           postdec2	equ	0xFDD
  1616                           fsr2h	equ	0xFDA
  1617                           fsr2l	equ	0xFD9
  1618                           status	equ	0xFD8
  1619                           
  1620 ;; *************** function _RunCan_XmitService *****************
  1621 ;; Defined at:
  1622 ;;		line 136 in file "Can_XmitService.c"
  1623 ;; Parameters:    Size  Location     Type
  1624 ;;  ThisEvent       3   21[COMRAM] struct ES_Event_t
  1625 ;; Auto vars:     Size  Location     Type
  1626 ;;  ReturnEvent     3   24[COMRAM] struct ES_Event_t
  1627 ;; Return value:  Size  Location     Type
  1628 ;;                  3   21[COMRAM] struct ES_Event_t
  1629 ;; Registers used:
  1630 ;;		wreg, status,2, status,0, cstack
  1631 ;; Tracked objects:
  1632 ;;		On entry : 0/0
  1633 ;;		On exit  : 0/0
  1634 ;;		Unchanged: 0/0
  1635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1636 ;;      Params:         3       0       0       0
  1637 ;;      Locals:         3       0       0       0
  1638 ;;      Temps:          0       0       0       0
  1639 ;;      Totals:         6       0       0       0
  1640 ;;Total ram usage:        6 bytes
  1641 ;; Hardware stack levels used:    1
  1642 ;; Hardware stack levels required when called:    4
  1643 ;; This function calls:
  1644 ;;		_InitCanHardware
  1645 ;;		_InitPins
  1646 ;;		_ToggleDebugLED
  1647 ;; This function is called by:
  1648 ;;		_ES_Run
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652                           	psect	text8
  1653  000C1A                     __ptext8:
  1654                           	opt stack 0
  1655  000C1A                     _RunCan_XmitService:
  1656                           	opt stack 25
  1657                           
  1658                           ;Can_XmitService.c: 138: ES_Event ReturnEvent;
  1659                           ;Can_XmitService.c: 140: if (ThisEvent.EventType == ES_INIT) {
  1660                           
  1661                           ;incstack = 0
  1662  000C1A  0E02               	movlw	2
  1663  000C1C  1816               	xorwf	RunCan_XmitService@ThisEvent,w,c
  1664  000C1E  A4D8               	btfss	status,2,c
  1665  000C20  D004               	goto	l2502
  1666                           
  1667                           ;Can_XmitService.c: 141: InitPins();
  1668  000C22  EC3E  F006         	call	_InitPins	;wreg free
  1669                           
  1670                           ;Can_XmitService.c: 142: InitCanHardware();
  1671  000C26  ECBB  F004         	call	_InitCanHardware	;wreg free
  1672  000C2A                     l2502:
  1673                           
  1674                           ;Can_XmitService.c: 147: }
  1675                           ;Can_XmitService.c: 148: if (ThisEvent.EventType == ES_TIMEOUT) {
  1676  000C2A  0E03               	movlw	3
  1677  000C2C  1816               	xorwf	RunCan_XmitService@ThisEvent,w,c
  1678  000C2E  A4D8               	btfss	status,2,c
  1679  000C30  D005               	goto	l2508
  1680                           
  1681                           ;Can_XmitService.c: 149: if (ThisEvent.EventParam == 0) {
  1682  000C32  5017               	movf	RunCan_XmitService@ThisEvent+1,w,c
  1683  000C34  1018               	iorwf	RunCan_XmitService@ThisEvent+2,w,c
  1684  000C36  B4D8               	btfsc	status,2,c
  1685                           
  1686                           ;Can_XmitService.c: 151: ToggleDebugLED();
  1687  000C38  ECD5  F006         	call	_ToggleDebugLED	;wreg free
  1688  000C3C                     l2508:
  1689                           
  1690                           ;Can_XmitService.c: 157: }
  1691                           ;Can_XmitService.c: 158: }
  1692                           ;Can_XmitService.c: 159: ReturnEvent.EventType = ES_NO_EVENT;
  1693  000C3C  0E00               	movlw	0
  1694  000C3E  6E19               	movwf	RunCan_XmitService@ReturnEvent,c
  1695                           
  1696                           ;Can_XmitService.c: 160: return ReturnEvent;
  1697  000C40  C019  F016         	movff	RunCan_XmitService@ReturnEvent,?_RunCan_XmitService
  1698  000C44  C01A  F017         	movff	RunCan_XmitService@ReturnEvent+1,?_RunCan_XmitService+1
  1699  000C48  C01B  F018         	movff	RunCan_XmitService@ReturnEvent+2,?_RunCan_XmitService+2
  1700  000C4C  0012               	return	
  1701  000C4E                     __end_of_RunCan_XmitService:
  1702                           	opt stack 0
  1703                           tosu	equ	0xFFF
  1704                           tosh	equ	0xFFE
  1705                           tosl	equ	0xFFD
  1706                           pclath	equ	0xFFA
  1707                           tblptru	equ	0xFF8
  1708                           tblptrh	equ	0xFF7
  1709                           tblptrl	equ	0xFF6
  1710                           tablat	equ	0xFF5
  1711                           prodh	equ	0xFF4
  1712                           prodl	equ	0xFF3
  1713                           postinc0	equ	0xFEE
  1714                           wreg	equ	0xFE8
  1715                           indf2	equ	0xFDF
  1716                           postinc2	equ	0xFDE
  1717                           postdec2	equ	0xFDD
  1718                           fsr2h	equ	0xFDA
  1719                           fsr2l	equ	0xFD9
  1720                           status	equ	0xFD8
  1721                           
  1722 ;; *************** function _ToggleDebugLED *****************
  1723 ;; Defined at:
  1724 ;;		line 334 in file "Can_XmitService.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;		None
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;		None
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  1    wreg      void 
  1731 ;; Registers used:
  1732 ;;		None
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1738 ;;      Params:         0       0       0       0
  1739 ;;      Locals:         0       0       0       0
  1740 ;;      Temps:          0       0       0       0
  1741 ;;      Totals:         0       0       0       0
  1742 ;;Total ram usage:        0 bytes
  1743 ;; Hardware stack levels used:    1
  1744 ;; Hardware stack levels required when called:    3
  1745 ;; This function calls:
  1746 ;;		Nothing
  1747 ;; This function is called by:
  1748 ;;		_RunCan_XmitService
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           	psect	text9
  1753  000DAA                     __ptext9:
  1754                           	opt stack 0
  1755  000DAA                     _ToggleDebugLED:
  1756                           	opt stack 25
  1757                           
  1758                           ;Can_XmitService.c: 336: if (LATA1 == 1) {
  1759                           
  1760                           ;incstack = 0
  1761  000DAA  A289               	btfss	3977,1,c	;volatile
  1762  000DAC  D002               	goto	l456
  1763                           
  1764                           ;Can_XmitService.c: 337: LATA1 = 0;
  1765  000DAE  9289               	bcf	3977,1,c	;volatile
  1766                           
  1767                           ;Can_XmitService.c: 338: } else if (LATA1 == 0) {
  1768  000DB0  0012               	return	
  1769  000DB2                     l456:
  1770  000DB2  B289               	btfsc	3977,1,c	;volatile
  1771  000DB4  0012               	return	
  1772                           
  1773                           ;Can_XmitService.c: 339: LATA1 = 1;
  1774  000DB6  8289               	bsf	3977,1,c	;volatile
  1775  000DB8  0012               	return	
  1776  000DBA                     __end_of_ToggleDebugLED:
  1777                           	opt stack 0
  1778                           tosu	equ	0xFFF
  1779                           tosh	equ	0xFFE
  1780                           tosl	equ	0xFFD
  1781                           pclath	equ	0xFFA
  1782                           tblptru	equ	0xFF8
  1783                           tblptrh	equ	0xFF7
  1784                           tblptrl	equ	0xFF6
  1785                           tablat	equ	0xFF5
  1786                           prodh	equ	0xFF4
  1787                           prodl	equ	0xFF3
  1788                           postinc0	equ	0xFEE
  1789                           wreg	equ	0xFE8
  1790                           indf2	equ	0xFDF
  1791                           postinc2	equ	0xFDE
  1792                           postdec2	equ	0xFDD
  1793                           fsr2h	equ	0xFDA
  1794                           fsr2l	equ	0xFD9
  1795                           status	equ	0xFD8
  1796                           
  1797 ;; *************** function _InitPins *****************
  1798 ;; Defined at:
  1799 ;;		line 313 in file "Can_XmitService.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;		None
  1802 ;; Auto vars:     Size  Location     Type
  1803 ;;		None
  1804 ;; Return value:  Size  Location     Type
  1805 ;;                  1    wreg      void 
  1806 ;; Registers used:
  1807 ;;		wreg, status,2
  1808 ;; Tracked objects:
  1809 ;;		On entry : 0/0
  1810 ;;		On exit  : 0/0
  1811 ;;		Unchanged: 0/0
  1812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1813 ;;      Params:         0       0       0       0
  1814 ;;      Locals:         0       0       0       0
  1815 ;;      Temps:          0       0       0       0
  1816 ;;      Totals:         0       0       0       0
  1817 ;;Total ram usage:        0 bytes
  1818 ;; Hardware stack levels used:    1
  1819 ;; Hardware stack levels required when called:    3
  1820 ;; This function calls:
  1821 ;;		Nothing
  1822 ;; This function is called by:
  1823 ;;		_RunCan_XmitService
  1824 ;; This function uses a non-reentrant model
  1825 ;;
  1826                           
  1827                           	psect	text10
  1828  000C7C                     __ptext10:
  1829                           	opt stack 0
  1830  000C7C                     _InitPins:
  1831                           	opt stack 25
  1832                           
  1833                           ;Can_XmitService.c: 316: PORTB = 0x00;
  1834                           
  1835                           ;incstack = 0
  1836  000C7C  0E00               	movlw	0
  1837  000C7E  6E81               	movwf	3969,c	;volatile
  1838                           
  1839                           ;Can_XmitService.c: 317: LATB = 0x00;
  1840  000C80  0E00               	movlw	0
  1841  000C82  6E8A               	movwf	3978,c	;volatile
  1842                           
  1843                           ;Can_XmitService.c: 318: PORTA = 0x00;
  1844  000C84  0E00               	movlw	0
  1845  000C86  6E80               	movwf	3968,c	;volatile
  1846                           
  1847                           ;Can_XmitService.c: 319: LATA = 0x00;
  1848  000C88  0E00               	movlw	0
  1849  000C8A  6E89               	movwf	3977,c	;volatile
  1850                           
  1851                           ;Can_XmitService.c: 320: ADCON1 = 0x0F;
  1852  000C8C  0E0F               	movlw	15
  1853  000C8E  6EC1               	movwf	4033,c	;volatile
  1854                           
  1855                           ;Can_XmitService.c: 321: TRISAbits.TRISA0 = 0;
  1856  000C90  9092               	bcf	3986,0,c	;volatile
  1857                           
  1858                           ;Can_XmitService.c: 322: TRISAbits.TRISA1 = 0;
  1859  000C92  9292               	bcf	3986,1,c	;volatile
  1860                           
  1861                           ;Can_XmitService.c: 323: TRISAbits.TRISA2 = 0;
  1862  000C94  9492               	bcf	3986,2,c	;volatile
  1863                           
  1864                           ;Can_XmitService.c: 324: TRISAbits.TRISA3 = 0;
  1865  000C96  9692               	bcf	3986,3,c	;volatile
  1866                           
  1867                           ;Can_XmitService.c: 325: TRISBbits.TRISB2 = 0;
  1868  000C98  9493               	bcf	3987,2,c	;volatile
  1869                           
  1870                           ;Can_XmitService.c: 326: TRISBbits.TRISB3 = 1;
  1871  000C9A  8693               	bsf	3987,3,c	;volatile
  1872                           
  1873                           ;Can_XmitService.c: 327: LATA1 = 0;
  1874  000C9C  9289               	bcf	3977,1,c	;volatile
  1875                           
  1876                           ;Can_XmitService.c: 328: LATA0 = 0;
  1877  000C9E  9089               	bcf	3977,0,c	;volatile
  1878                           
  1879                           ;Can_XmitService.c: 329: LATA2 = 0;
  1880  000CA0  9489               	bcf	3977,2,c	;volatile
  1881                           
  1882                           ;Can_XmitService.c: 330: LATA3 = 1;
  1883  000CA2  8689               	bsf	3977,3,c	;volatile
  1884                           
  1885                           ;Can_XmitService.c: 331: LATB2 = 0;
  1886  000CA4  948A               	bcf	3978,2,c	;volatile
  1887  000CA6  0012               	return		;funcret
  1888  000CA8                     __end_of_InitPins:
  1889                           	opt stack 0
  1890                           tosu	equ	0xFFF
  1891                           tosh	equ	0xFFE
  1892                           tosl	equ	0xFFD
  1893                           pclath	equ	0xFFA
  1894                           tblptru	equ	0xFF8
  1895                           tblptrh	equ	0xFF7
  1896                           tblptrl	equ	0xFF6
  1897                           tablat	equ	0xFF5
  1898                           prodh	equ	0xFF4
  1899                           prodl	equ	0xFF3
  1900                           postinc0	equ	0xFEE
  1901                           wreg	equ	0xFE8
  1902                           indf2	equ	0xFDF
  1903                           postinc2	equ	0xFDE
  1904                           postdec2	equ	0xFDD
  1905                           fsr2h	equ	0xFDA
  1906                           fsr2l	equ	0xFD9
  1907                           status	equ	0xFD8
  1908                           
  1909 ;; *************** function _InitCanHardware *****************
  1910 ;; Defined at:
  1911 ;;		line 225 in file "Can_XmitService.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;		None
  1914 ;; Auto vars:     Size  Location     Type
  1915 ;;		None
  1916 ;; Return value:  Size  Location     Type
  1917 ;;                  1    wreg      void 
  1918 ;; Registers used:
  1919 ;;		wreg, status,2
  1920 ;; Tracked objects:
  1921 ;;		On entry : 0/0
  1922 ;;		On exit  : 0/0
  1923 ;;		Unchanged: 0/0
  1924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1925 ;;      Params:         0       0       0       0
  1926 ;;      Locals:         0       0       0       0
  1927 ;;      Temps:          0       0       0       0
  1928 ;;      Totals:         0       0       0       0
  1929 ;;Total ram usage:        0 bytes
  1930 ;; Hardware stack levels used:    1
  1931 ;; Hardware stack levels required when called:    3
  1932 ;; This function calls:
  1933 ;;		Nothing
  1934 ;; This function is called by:
  1935 ;;		_RunCan_XmitService
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939                           	psect	text11
  1940  000976                     __ptext11:
  1941                           	opt stack 0
  1942  000976                     _InitCanHardware:
  1943                           	opt stack 25
  1944                           
  1945                           ;Can_XmitService.c: 229: CANCON = 0x80;
  1946                           
  1947                           ;incstack = 0
  1948  000976  0E80               	movlw	128
  1949  000978  6E6F               	movwf	3951,c	;volatile
  1950  00097A                     l444:
  1951  00097A  AE6E               	btfss	3950,7,c	;volatile
  1952  00097C  D7FE               	goto	l444
  1953                           
  1954                           ;Can_XmitService.c: 232: CIOCON = 0x20;
  1955  00097E  0E20               	movlw	32
  1956  000980  6E73               	movwf	3955,c	;volatile
  1957                           
  1958                           ;Can_XmitService.c: 235: BRGCON2bits.SEG2PHTS = 1;
  1959  000982  8E71               	bsf	3953,7,c	;volatile
  1960                           
  1961                           ;Can_XmitService.c: 237: BRGCON1bits.BRP0 = 0;
  1962  000984  9070               	bcf	3952,0,c	;volatile
  1963                           
  1964                           ;Can_XmitService.c: 238: BRGCON1bits.BRP1 = 1;
  1965  000986  8270               	bsf	3952,1,c	;volatile
  1966                           
  1967                           ;Can_XmitService.c: 239: BRGCON1bits.BRP2 = 1;
  1968  000988  8470               	bsf	3952,2,c	;volatile
  1969                           
  1970                           ;Can_XmitService.c: 240: BRGCON1bits.BRP3 = 0;
  1971  00098A  9670               	bcf	3952,3,c	;volatile
  1972                           
  1973                           ;Can_XmitService.c: 242: BRGCON2bits.PRSEG0 = 0;
  1974  00098C  9071               	bcf	3953,0,c	;volatile
  1975                           
  1976                           ;Can_XmitService.c: 243: BRGCON2bits.PRSEG1 = 0;
  1977  00098E  9271               	bcf	3953,1,c	;volatile
  1978                           
  1979                           ;Can_XmitService.c: 244: BRGCON2bits.PRSEG2 = 0;
  1980  000990  9471               	bcf	3953,2,c	;volatile
  1981                           
  1982                           ;Can_XmitService.c: 246: BRGCON2bits.SEG1PH0 = 0;
  1983  000992  9671               	bcf	3953,3,c	;volatile
  1984                           
  1985                           ;Can_XmitService.c: 247: BRGCON2bits.SEG1PH1 = 0;
  1986  000994  9871               	bcf	3953,4,c	;volatile
  1987                           
  1988                           ;Can_XmitService.c: 248: BRGCON2bits.SEG1PH2 = 0;
  1989  000996  9A71               	bcf	3953,5,c	;volatile
  1990                           
  1991                           ;Can_XmitService.c: 250: BRGCON3bits.SEG2PH0 = 1;
  1992  000998  8072               	bsf	3954,0,c	;volatile
  1993                           
  1994                           ;Can_XmitService.c: 251: BRGCON3bits.SEG2PH1 = 0;
  1995  00099A  9272               	bcf	3954,1,c	;volatile
  1996                           
  1997                           ;Can_XmitService.c: 252: BRGCON3bits.SEG2PH2 = 0;
  1998  00099C  9472               	bcf	3954,2,c	;volatile
  1999                           
  2000                           ;Can_XmitService.c: 254: BRGCON1bits.SJW0 = 0;
  2001  00099E  9C70               	bcf	3952,6,c	;volatile
  2002                           
  2003                           ;Can_XmitService.c: 258: RXB0CONbits.RXB0DBEN = 0;
  2004  0009A0  9460               	bcf	3936,2,c	;volatile
  2005                           
  2006                           ;Can_XmitService.c: 259: RXB0CONbits.RXM0 = 0;
  2007  0009A2  9A60               	bcf	3936,5,c	;volatile
  2008                           
  2009                           ;Can_XmitService.c: 260: RXB0CONbits.RXM1 = 0;
  2010  0009A4  9C60               	bcf	3936,6,c	;volatile
  2011                           
  2012                           ;Can_XmitService.c: 262: RXF0SIDH = 0x00;
  2013  0009A6  0E00               	movlw	0
  2014  0009A8  010F               	movlb	15	; () banked
  2015  0009AA  6F00               	movwf	0,b	;volatile
  2016                           
  2017                           ;Can_XmitService.c: 263: RXF0SIDL = 0x08;
  2018  0009AC  0E08               	movlw	8
  2019  0009AE  010F               	movlb	15	; () banked
  2020  0009B0  6F01               	movwf	1,b	;volatile
  2021                           
  2022                           ;Can_XmitService.c: 264: RXF0EIDH = 0x00;
  2023  0009B2  0E00               	movlw	0
  2024  0009B4  010F               	movlb	15	; () banked
  2025  0009B6  6F02               	movwf	2,b	;volatile
  2026                           
  2027                           ;Can_XmitService.c: 265: RXF0EIDL = 0x01;
  2028  0009B8  0E01               	movlw	1
  2029  0009BA  010F               	movlb	15	; () banked
  2030  0009BC  6F03               	movwf	3,b	;volatile
  2031                           
  2032                           ;Can_XmitService.c: 267: RXM0SIDH = 0x00;
  2033  0009BE  0E00               	movlw	0
  2034  0009C0  010F               	movlb	15	; () banked
  2035  0009C2  6F18               	movwf	24,b	;volatile
  2036                           
  2037                           ;Can_XmitService.c: 268: RXM0SIDL = 0x00;
  2038  0009C4  0E00               	movlw	0
  2039  0009C6  010F               	movlb	15	; () banked
  2040  0009C8  6F19               	movwf	25,b	;volatile
  2041                           
  2042                           ;Can_XmitService.c: 269: RXM0EIDH = 0x00;
  2043  0009CA  0E00               	movlw	0
  2044  0009CC  010F               	movlb	15	; () banked
  2045  0009CE  6F1A               	movwf	26,b	;volatile
  2046                           
  2047                           ;Can_XmitService.c: 270: RXM0EIDL = 0x01;
  2048  0009D0  0E01               	movlw	1
  2049  0009D2  010F               	movlb	15	; () banked
  2050  0009D4  6F1B               	movwf	27,b	;volatile
  2051                           
  2052                           ;Can_XmitService.c: 291: ECANCON = 0x00;
  2053  0009D6  0E00               	movlw	0
  2054  0009D8  6E77               	movwf	3959,c	;volatile
  2055                           
  2056                           ;Can_XmitService.c: 292: CANCON = 0b00010000;
  2057  0009DA  0E10               	movlw	16
  2058  0009DC  6E6F               	movwf	3951,c	;volatile
  2059  0009DE                     l447:
  2060  0009DE  BE6E               	btfsc	3950,7,c	;volatile
  2061  0009E0  D7FE               	goto	l447
  2062                           
  2063                           ;Can_XmitService.c: 296: RXB0IE = 1;
  2064  0009E2  80A3               	bsf	4003,0,c	;volatile
  2065                           
  2066                           ;Can_XmitService.c: 297: ERRIE = 1;
  2067  0009E4  8AA3               	bsf	4003,5,c	;volatile
  2068                           
  2069                           ;Can_XmitService.c: 298: IRXIE = 1;
  2070  0009E6  8EA3               	bsf	4003,7,c	;volatile
  2071                           
  2072                           ;Can_XmitService.c: 302: RXB0IF = 0;
  2073  0009E8  90A4               	bcf	4004,0,c	;volatile
  2074                           
  2075                           ;Can_XmitService.c: 303: ERRIF = 0;
  2076  0009EA  9AA4               	bcf	4004,5,c	;volatile
  2077                           
  2078                           ;Can_XmitService.c: 304: IRXIF = 0;
  2079  0009EC  9EA4               	bcf	4004,7,c	;volatile
  2080                           
  2081                           ;Can_XmitService.c: 310: RXB0CONbits.RXFUL = 0;
  2082  0009EE  9E60               	bcf	3936,7,c	;volatile
  2083  0009F0  0012               	return		;funcret
  2084  0009F2                     __end_of_InitCanHardware:
  2085                           	opt stack 0
  2086                           tosu	equ	0xFFF
  2087                           tosh	equ	0xFFE
  2088                           tosl	equ	0xFFD
  2089                           pclath	equ	0xFFA
  2090                           tblptru	equ	0xFF8
  2091                           tblptrh	equ	0xFF7
  2092                           tblptrl	equ	0xFF6
  2093                           tablat	equ	0xFF5
  2094                           prodh	equ	0xFF4
  2095                           prodl	equ	0xFF3
  2096                           postinc0	equ	0xFEE
  2097                           wreg	equ	0xFE8
  2098                           indf2	equ	0xFDF
  2099                           postinc2	equ	0xFDE
  2100                           postdec2	equ	0xFDD
  2101                           fsr2h	equ	0xFDA
  2102                           fsr2l	equ	0xFD9
  2103                           status	equ	0xFD8
  2104                           
  2105 ;; *************** function _ES_DeQueue *****************
  2106 ;; Defined at:
  2107 ;;		line 164 in file "ES_Queue.c"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;  pBlock          2   33[COMRAM] PTR struct ES_Event_t
  2110 ;;		 -> Queue0(12), 
  2111 ;;  pReturnEvent    2   35[COMRAM] PTR struct ES_Event_t
  2112 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  2113 ;; Auto vars:     Size  Location     Type
  2114 ;;  pThisQueue      2   41[COMRAM] PTR struct .
  2115 ;;		 -> Queue0(12), 
  2116 ;;  NumLeft         1   40[COMRAM] unsigned char 
  2117 ;;  SaveCrit        1   39[COMRAM] unsigned char 
  2118 ;; Return value:  Size  Location     Type
  2119 ;;                  1    wreg      unsigned char 
  2120 ;; Registers used:
  2121 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2127 ;;      Params:         4       0       0       0
  2128 ;;      Locals:         4       0       0       0
  2129 ;;      Temps:          2       0       0       0
  2130 ;;      Totals:        10       0       0       0
  2131 ;;Total ram usage:       10 bytes
  2132 ;; Hardware stack levels used:    1
  2133 ;; Hardware stack levels required when called:    4
  2134 ;; This function calls:
  2135 ;;		___lbmod
  2136 ;;		___wmul
  2137 ;; This function is called by:
  2138 ;;		_ES_Run
  2139 ;;		_ES_RecallEvents
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           	psect	text12
  2144  0003B6                     __ptext12:
  2145                           	opt stack 0
  2146  0003B6                     _ES_DeQueue:
  2147                           	opt stack 25
  2148                           
  2149                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  2150                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  2151                           ;ES_Queue.c: 168: uint8_t NumLeft;
  2152                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  2153                           
  2154                           ;incstack = 0
  2155  0003B6  C022  F02A         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  2156  0003BA  C023  F02B         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  2157                           
  2158                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  2159  0003BE  EE20 F002          	lfsr	2,2
  2160  0003C2  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2161  0003C4  26D9               	addwf	fsr2l,f,c
  2162  0003C6  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2163  0003C8  22DA               	addwfc	fsr2h,f,c
  2164  0003CA  50DF               	movf	indf2,w,c
  2165  0003CC  B4D8               	btfsc	status,2,c
  2166  0003CE  D05E               	goto	l2448
  2167                           
  2168                           ;ES_Queue.c: 172: {
  2169                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  2170  0003D0  CFF2 F028          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  2171  0003D4  9EF2               	bcf	intcon,7,c	;volatile
  2172                           
  2173                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  2174  0003D6  EE20 F001          	lfsr	2,1
  2175  0003DA  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2176  0003DC  26D9               	addwf	fsr2l,f,c
  2177  0003DE  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2178  0003E0  22DA               	addwfc	fsr2h,f,c
  2179  0003E2  50DF               	movf	indf2,w,c
  2180  0003E4  6E26               	movwf	??_ES_DeQueue& (0+255),c
  2181  0003E6  0E01               	movlw	1
  2182  0003E8  2426               	addwf	??_ES_DeQueue,w,c
  2183  0003EA  6E1C               	movwf	___wmul@multiplier,c
  2184  0003EC  6A1D               	clrf	___wmul@multiplier+1,c
  2185  0003EE  0E00               	movlw	0
  2186  0003F0  221D               	addwfc	___wmul@multiplier+1,f,c
  2187  0003F2  0E00               	movlw	0
  2188  0003F4  6E1F               	movwf	___wmul@multiplicand+1,c
  2189  0003F6  0E03               	movlw	3
  2190  0003F8  6E1E               	movwf	___wmul@multiplicand,c
  2191  0003FA  EC91  F006         	call	___wmul	;wreg free
  2192  0003FE  501C               	movf	?___wmul,w,c
  2193  000400  2422               	addwf	ES_DeQueue@pBlock,w,c
  2194  000402  6ED9               	movwf	fsr2l,c
  2195  000404  501D               	movf	?___wmul+1,w,c
  2196  000406  2023               	addwfc	ES_DeQueue@pBlock+1,w,c
  2197  000408  6EDA               	movwf	fsr2h,c
  2198  00040A  C024  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  2199  00040E  C025  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  2200  000412  CFDE FFE6          	movff	postinc2,postinc1
  2201  000416  CFDE FFE6          	movff	postinc2,postinc1
  2202  00041A  CFDE FFE6          	movff	postinc2,postinc1
  2203                           
  2204                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  2205  00041E  EE20 F001          	lfsr	2,1
  2206  000422  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2207  000424  26D9               	addwf	fsr2l,f,c
  2208  000426  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2209  000428  22DA               	addwfc	fsr2h,f,c
  2210  00042A  2ADF               	incf	indf2,f,c
  2211                           
  2212                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  2213  00042C  C02A  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  2214  000430  C02B  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  2215  000434  EE10 F001          	lfsr	1,1
  2216  000438  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2217  00043A  26E1               	addwf	fsr1l,f,c
  2218  00043C  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2219  00043E  22E2               	addwfc	fsr1h,f,c
  2220  000440  50DE               	movf	postinc2,w,c
  2221  000442  5CE6               	subwf	postinc1,w,c
  2222  000444  A0D8               	btfss	status,0,c
  2223  000446  D016               	goto	l2444
  2224                           
  2225                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  2226  000448  EE20 F001          	lfsr	2,1
  2227  00044C  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2228  00044E  26D9               	addwf	fsr2l,f,c
  2229  000450  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2230  000452  22DA               	addwfc	fsr2h,f,c
  2231  000454  C02A  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  2232  000458  C02B  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  2233  00045C  50E7               	movf	indf1,w,c
  2234  00045E  6E16               	movwf	___lbmod@divisor,c
  2235  000460  EE10 F001          	lfsr	1,1
  2236  000464  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2237  000466  26E1               	addwf	fsr1l,f,c
  2238  000468  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2239  00046A  22E2               	addwfc	fsr1h,f,c
  2240  00046C  50E7               	movf	indf1,w,c
  2241  00046E  EC69  F006         	call	___lbmod
  2242  000472  6EDF               	movwf	indf2,c
  2243  000474                     l2444:
  2244                           
  2245                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  2246  000474  EE20 F002          	lfsr	2,2
  2247  000478  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2248  00047A  26D9               	addwf	fsr2l,f,c
  2249  00047C  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2250  00047E  22DA               	addwfc	fsr2h,f,c
  2251  000480  06DF               	decf	indf2,f,c
  2252  000482  50DF               	movf	indf2,w,c
  2253  000484  6E29               	movwf	ES_DeQueue@NumLeft,c
  2254                           
  2255                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  2256  000486  C028  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  2257                           
  2258                           ;ES_Queue.c: 183: }else {
  2259  00048A  D012               	goto	l2454
  2260  00048C                     l2448:
  2261                           
  2262                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  2263  00048C  C024  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  2264  000490  C025  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  2265  000494  0E00               	movlw	0
  2266  000496  6EDF               	movwf	indf2,c
  2267                           
  2268                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  2269  000498  EE20 F001          	lfsr	2,1
  2270  00049C  5024               	movf	ES_DeQueue@pReturnEvent,w,c
  2271  00049E  26D9               	addwf	fsr2l,f,c
  2272  0004A0  5025               	movf	ES_DeQueue@pReturnEvent+1,w,c
  2273  0004A2  22DA               	addwfc	fsr2h,f,c
  2274  0004A4  0E00               	movlw	0
  2275  0004A6  6EDE               	movwf	postinc2,c
  2276  0004A8  0E00               	movlw	0
  2277  0004AA  6EDD               	movwf	postdec2,c
  2278                           
  2279                           ;ES_Queue.c: 186: NumLeft = 0;
  2280  0004AC  0E00               	movlw	0
  2281  0004AE  6E29               	movwf	ES_DeQueue@NumLeft,c
  2282  0004B0                     l2454:
  2283                           
  2284                           ;ES_Queue.c: 187: }
  2285                           ;ES_Queue.c: 188: return NumLeft;
  2286  0004B0  5029               	movf	ES_DeQueue@NumLeft,w,c
  2287  0004B2  0012               	return	
  2288  0004B4                     __end_of_ES_DeQueue:
  2289                           	opt stack 0
  2290                           tosu	equ	0xFFF
  2291                           tosh	equ	0xFFE
  2292                           tosl	equ	0xFFD
  2293                           pclath	equ	0xFFA
  2294                           tblptru	equ	0xFF8
  2295                           tblptrh	equ	0xFF7
  2296                           tblptrl	equ	0xFF6
  2297                           tablat	equ	0xFF5
  2298                           prodh	equ	0xFF4
  2299                           prodl	equ	0xFF3
  2300                           intcon	equ	0xFF2
  2301                           postinc0	equ	0xFEE
  2302                           wreg	equ	0xFE8
  2303                           indf1	equ	0xFE7
  2304                           postinc1	equ	0xFE6
  2305                           fsr1h	equ	0xFE2
  2306                           fsr1l	equ	0xFE1
  2307                           indf2	equ	0xFDF
  2308                           postinc2	equ	0xFDE
  2309                           postdec2	equ	0xFDD
  2310                           fsr2h	equ	0xFDA
  2311                           fsr2l	equ	0xFD9
  2312                           status	equ	0xFD8
  2313                           
  2314 ;; *************** function ___lbmod *****************
  2315 ;; Defined at:
  2316 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;  dividend        1    wreg     unsigned char 
  2319 ;;  divisor         1   21[COMRAM] unsigned char 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  dividend        1   22[COMRAM] unsigned char 
  2322 ;;  rem             1   24[COMRAM] unsigned char 
  2323 ;;  counter         1   23[COMRAM] unsigned char 
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  1    wreg      unsigned char 
  2326 ;; Registers used:
  2327 ;;		wreg, status,2, status,0
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2333 ;;      Params:         1       0       0       0
  2334 ;;      Locals:         3       0       0       0
  2335 ;;      Temps:          0       0       0       0
  2336 ;;      Totals:         4       0       0       0
  2337 ;;Total ram usage:        4 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    3
  2340 ;; This function calls:
  2341 ;;		Nothing
  2342 ;; This function is called by:
  2343 ;;		_ES_DeQueue
  2344 ;; This function uses a non-reentrant model
  2345 ;;
  2346                           
  2347                           	psect	text13
  2348  000CD2                     __ptext13:
  2349                           	opt stack 0
  2350  000CD2                     ___lbmod:
  2351                           	opt stack 25
  2352                           
  2353                           ;incstack = 0
  2354                           ;___lbmod@dividend stored from wreg
  2355  000CD2  6E17               	movwf	___lbmod@dividend,c
  2356  000CD4  0E08               	movlw	8
  2357  000CD6  6E18               	movwf	___lbmod@counter,c
  2358  000CD8  0E00               	movlw	0
  2359  000CDA  6E19               	movwf	___lbmod@rem,c
  2360  000CDC                     l2400:
  2361  000CDC  90D8               	bcf	status,0,c
  2362  000CDE  3417               	rlcf	___lbmod@dividend,w,c
  2363  000CE0  3419               	rlcf	___lbmod@rem,w,c
  2364  000CE2  6E19               	movwf	___lbmod@rem,c
  2365  000CE4  90D8               	bcf	status,0,c
  2366  000CE6  3617               	rlcf	___lbmod@dividend,f,c
  2367  000CE8  5016               	movf	___lbmod@divisor,w,c
  2368  000CEA  5C19               	subwf	___lbmod@rem,w,c
  2369  000CEC  A0D8               	btfss	status,0,c
  2370  000CEE  D002               	goto	l2408
  2371  000CF0  5016               	movf	___lbmod@divisor,w,c
  2372  000CF2  5E19               	subwf	___lbmod@rem,f,c
  2373  000CF4                     l2408:
  2374  000CF4  2E18               	decfsz	___lbmod@counter,f,c
  2375  000CF6  D7F2               	goto	l2400
  2376  000CF8  5019               	movf	___lbmod@rem,w,c
  2377  000CFA  0012               	return	
  2378  000CFC                     __end_of___lbmod:
  2379                           	opt stack 0
  2380                           tosu	equ	0xFFF
  2381                           tosh	equ	0xFFE
  2382                           tosl	equ	0xFFD
  2383                           pclath	equ	0xFFA
  2384                           tblptru	equ	0xFF8
  2385                           tblptrh	equ	0xFF7
  2386                           tblptrl	equ	0xFF6
  2387                           tablat	equ	0xFF5
  2388                           prodh	equ	0xFF4
  2389                           prodl	equ	0xFF3
  2390                           intcon	equ	0xFF2
  2391                           postinc0	equ	0xFEE
  2392                           wreg	equ	0xFE8
  2393                           indf1	equ	0xFE7
  2394                           postinc1	equ	0xFE6
  2395                           fsr1h	equ	0xFE2
  2396                           fsr1l	equ	0xFE1
  2397                           indf2	equ	0xFDF
  2398                           postinc2	equ	0xFDE
  2399                           postdec2	equ	0xFDD
  2400                           fsr2h	equ	0xFDA
  2401                           fsr2l	equ	0xFD9
  2402                           status	equ	0xFD8
  2403                           
  2404 ;; *************** function _ES_CheckUserEvents *****************
  2405 ;; Defined at:
  2406 ;;		line 46 in file "ES_CheckEvents.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;		None
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;  i               1   21[COMRAM] unsigned char 
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  1    wreg      unsigned char 
  2413 ;; Registers used:
  2414 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2420 ;;      Params:         0       0       0       0
  2421 ;;      Locals:         1       0       0       0
  2422 ;;      Temps:          0       0       0       0
  2423 ;;      Totals:         1       0       0       0
  2424 ;;Total ram usage:        1 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    4
  2427 ;; This function calls:
  2428 ;;		_Check4Keystroke
  2429 ;; This function is called by:
  2430 ;;		_ES_Run
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           	psect	text14
  2435  000BA4                     __ptext14:
  2436                           	opt stack 0
  2437  000BA4                     _ES_CheckUserEvents:
  2438                           	opt stack 25
  2439                           
  2440                           ;ES_CheckEvents.c: 48: uint8_t i;
  2441                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  2442                           
  2443                           ;incstack = 0
  2444  000BA4  0E00               	movlw	0
  2445  000BA6  6E16               	movwf	ES_CheckUserEvents@i,c
  2446  000BA8  5016               	movf	ES_CheckUserEvents@i,w,c
  2447  000BAA  A4D8               	btfss	status,2,c
  2448  000BAC  0012               	return	
  2449                           
  2450                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  2451  000BAE  5016               	movf	ES_CheckUserEvents@i,w,c
  2452  000BB0  0D02               	mullw	2
  2453  000BB2  0E57               	movlw	low _ES_EventList
  2454  000BB4  24F3               	addwf	prodl,w,c
  2455  000BB6  6EF6               	movwf	tblptrl,c
  2456  000BB8  0E03               	movlw	high _ES_EventList
  2457  000BBA  20F4               	addwfc	prodh,w,c
  2458  000BBC  6EF7               	movwf	tblptrh,c
  2459  000BBE                     	if	0	;There are less than 3 active tblptr bytes
  2460  000BBE                     	endif
  2461  000BBE  D801               	call	u1678
  2462  000BC0  D00C               	goto	u1679
  2463  000BC2                     u1678:
  2464  000BC2  0005               	push	
  2465  000BC4  6EFA               	movwf	pclath,c
  2466  000BC6  0009               	tblrd		*+
  2467  000BC8  50F5               	movf	tablat,w,c
  2468  000BCA  6EFD               	movwf	tosl,c
  2469  000BCC  0009               	tblrd		*+
  2470  000BCE  50F5               	movf	tablat,w,c
  2471  000BD0  6EFE               	movwf	tosh,c
  2472  000BD2  50F8               	movf	tblptru,w,c
  2473  000BD4  6EFF               	movwf	tosu,c
  2474  000BD6  50FA               	movf	pclath,w,c
  2475  000BD8  0012               	return		;indir
  2476  000BDA                     u1679:
  2477  000BDA  06E8               	decf	wreg,f,c
  2478  000BDC  B4D8               	btfsc	status,2,c
  2479  000BDE  0012               	return	
  2480                           
  2481                           ;ES_CheckEvents.c: 52: break;
  2482  000BE0  2A16               	incf	ES_CheckUserEvents@i,f,c
  2483  000BE2  D7E2               	goto	L1
  2484  000BE4                     __end_of_ES_CheckUserEvents:
  2485                           	opt stack 0
  2486                           tosu	equ	0xFFF
  2487                           tosh	equ	0xFFE
  2488                           tosl	equ	0xFFD
  2489                           pclath	equ	0xFFA
  2490                           tblptru	equ	0xFF8
  2491                           tblptrh	equ	0xFF7
  2492                           tblptrl	equ	0xFF6
  2493                           tablat	equ	0xFF5
  2494                           prodh	equ	0xFF4
  2495                           prodl	equ	0xFF3
  2496                           intcon	equ	0xFF2
  2497                           postinc0	equ	0xFEE
  2498                           wreg	equ	0xFE8
  2499                           indf1	equ	0xFE7
  2500                           postinc1	equ	0xFE6
  2501                           fsr1h	equ	0xFE2
  2502                           fsr1l	equ	0xFE1
  2503                           indf2	equ	0xFDF
  2504                           postinc2	equ	0xFDE
  2505                           postdec2	equ	0xFDD
  2506                           fsr2h	equ	0xFDA
  2507                           fsr2l	equ	0xFD9
  2508                           status	equ	0xFD8
  2509                           
  2510 ;; *************** function _Check4Keystroke *****************
  2511 ;; Defined at:
  2512 ;;		line 62 in file "EventCheckers.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;		None
  2515 ;; Auto vars:     Size  Location     Type
  2516 ;;		None
  2517 ;; Return value:  Size  Location     Type
  2518 ;;                  1    wreg      unsigned char 
  2519 ;; Registers used:
  2520 ;;		wreg
  2521 ;; Tracked objects:
  2522 ;;		On entry : 0/0
  2523 ;;		On exit  : 0/0
  2524 ;;		Unchanged: 0/0
  2525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2526 ;;      Params:         0       0       0       0
  2527 ;;      Locals:         0       0       0       0
  2528 ;;      Temps:          0       0       0       0
  2529 ;;      Totals:         0       0       0       0
  2530 ;;Total ram usage:        0 bytes
  2531 ;; Hardware stack levels used:    1
  2532 ;; Hardware stack levels required when called:    3
  2533 ;; This function calls:
  2534 ;;		Nothing
  2535 ;; This function is called by:
  2536 ;;		_ES_CheckUserEvents
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text15
  2541  000DDE                     __ptext15:
  2542                           	opt stack 0
  2543  000DDE                     _Check4Keystroke:
  2544                           	opt stack 25
  2545                           
  2546                           ;EventCheckers.c: 78: return 0;
  2547                           
  2548                           ;incstack = 0
  2549  000DDE  0E00               	movlw	0
  2550  000DE0  0012               	return	
  2551  000DE2                     __end_of_Check4Keystroke:
  2552                           	opt stack 0
  2553                           tosu	equ	0xFFF
  2554                           tosh	equ	0xFFE
  2555                           tosl	equ	0xFFD
  2556                           pclath	equ	0xFFA
  2557                           tblptru	equ	0xFF8
  2558                           tblptrh	equ	0xFF7
  2559                           tblptrl	equ	0xFF6
  2560                           tablat	equ	0xFF5
  2561                           prodh	equ	0xFF4
  2562                           prodl	equ	0xFF3
  2563                           intcon	equ	0xFF2
  2564                           postinc0	equ	0xFEE
  2565                           wreg	equ	0xFE8
  2566                           indf1	equ	0xFE7
  2567                           postinc1	equ	0xFE6
  2568                           fsr1h	equ	0xFE2
  2569                           fsr1l	equ	0xFE1
  2570                           indf2	equ	0xFDF
  2571                           postinc2	equ	0xFDE
  2572                           postdec2	equ	0xFDD
  2573                           fsr2h	equ	0xFDA
  2574                           fsr2l	equ	0xFD9
  2575                           status	equ	0xFD8
  2576                           
  2577 ;; *************** function _ES_Initialize *****************
  2578 ;; Defined at:
  2579 ;;		line 242 in file "ES_Framework.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;  NewRate         2    4[BANK0 ] enum E15419
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;  i               1    6[BANK0 ] unsigned char 
  2584 ;; Return value:  Size  Location     Type
  2585 ;;                  1    wreg      enum E15490
  2586 ;; Registers used:
  2587 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2588 ;; Tracked objects:
  2589 ;;		On entry : 0/0
  2590 ;;		On exit  : 0/0
  2591 ;;		Unchanged: 0/0
  2592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2593 ;;      Params:         0       2       0       0
  2594 ;;      Locals:         0       1       0       0
  2595 ;;      Temps:          0       0       0       0
  2596 ;;      Totals:         0       3       0       0
  2597 ;;Total ram usage:        3 bytes
  2598 ;; Hardware stack levels used:    1
  2599 ;; Hardware stack levels required when called:    7
  2600 ;; This function calls:
  2601 ;;		_ES_InitQueue
  2602 ;;		_ES_Timer_Init
  2603 ;;		_InitCan_XmitService
  2604 ;; This function is called by:
  2605 ;;		_main
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text16
  2610  0005AC                     __ptext16:
  2611                           	opt stack 0
  2612  0005AC                     _ES_Initialize:
  2613                           	opt stack 23
  2614                           
  2615                           ;ES_Framework.c: 243: uint8_t i;
  2616                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  2617                           
  2618                           ;incstack = 0
  2619  0005AC  C090  F018         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  2620  0005B0  C091  F019         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  2621  0005B4  ECE5  F006         	call	_ES_Timer_Init	;wreg free
  2622                           
  2623                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  2624  0005B8  0E00               	movlw	0
  2625  0005BA  0100               	movlb	0	; () banked
  2626  0005BC  6F92               	movwf	ES_Initialize@i& (0+255),b
  2627  0005BE                     l2518:
  2628                           
  2629                           ; BSR set to: 0
  2630  0005BE  0100               	movlb	0	; () banked
  2631  0005C0  5192               	movf	ES_Initialize@i& (0+255),w,b
  2632  0005C2  0100               	movlb	0	; () banked
  2633  0005C4  A4D8               	btfss	status,2,c
  2634  0005C6  D066               	goto	l2542
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  2638                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  2639                           
  2640                           ; BSR set to: 0
  2641                           
  2642                           ; BSR set to: 0
  2643  0005C8  0100               	movlb	0	; () banked
  2644  0005CA  5192               	movf	ES_Initialize@i& (0+255),w,b
  2645  0005CC  0D04               	mullw	4
  2646  0005CE  0E50               	movlw	low _ServDescList
  2647  0005D0  24F3               	addwf	prodl,w,c
  2648  0005D2  6EF6               	movwf	tblptrl,c
  2649  0005D4  0E03               	movlw	high _ServDescList
  2650  0005D6  20F4               	addwfc	prodh,w,c
  2651  0005D8  6EF7               	movwf	tblptrh,c
  2652  0005DA                     	if	0	;There are less than 3 active tblptr bytes
  2653  0005DA                     	endif
  2654  0005DA  0009               	tblrd		*+
  2655  0005DC  50F5               	movf	tablat,w,c
  2656  0005DE  0009               	tblrd		*+
  2657  0005E0  10F5               	iorwf	tablat,w,c
  2658  0005E2  B4D8               	btfsc	status,2,c
  2659  0005E4  D013               	goto	l2526
  2660                           
  2661                           ; BSR set to: 0
  2662  0005E6  0100               	movlb	0	; () banked
  2663  0005E8  5192               	movf	ES_Initialize@i& (0+255),w,b
  2664  0005EA  0D04               	mullw	4
  2665  0005EC  0E02               	movlw	2
  2666  0005EE  26F3               	addwf	prodl,f,c
  2667  0005F0  0E00               	movlw	0
  2668  0005F2  22F4               	addwfc	prodh,f,c
  2669  0005F4  0E50               	movlw	low _ServDescList
  2670  0005F6  24F3               	addwf	prodl,w,c
  2671  0005F8  6EF6               	movwf	tblptrl,c
  2672  0005FA  0E03               	movlw	high _ServDescList
  2673  0005FC  20F4               	addwfc	prodh,w,c
  2674  0005FE  6EF7               	movwf	tblptrh,c
  2675  000600                     	if	0	;There are less than 3 active tblptr bytes
  2676  000600                     	endif
  2677  000600  0009               	tblrd		*+
  2678  000602  50F5               	movf	tablat,w,c
  2679  000604  0009               	tblrd		*+
  2680  000606  10F5               	iorwf	tablat,w,c
  2681  000608  A4D8               	btfss	status,2,c
  2682  00060A  D002               	goto	l2530
  2683  00060C                     l2526:
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;ES_Framework.c: 249: return FailedPointer;
  2687  00060C  0E03               	movlw	3
  2688                           
  2689                           ; BSR set to: 0
  2690  00060E  0012               	return	
  2691  000610                     l2530:
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  2695  000610  0100               	movlb	0	; () banked
  2696  000612  5192               	movf	ES_Initialize@i& (0+255),w,b
  2697  000614  0D03               	mullw	3
  2698  000616  0E54               	movlw	low _EventQueues
  2699  000618  24F3               	addwf	prodl,w,c
  2700  00061A  6EF6               	movwf	tblptrl,c
  2701  00061C  0E03               	movlw	high _EventQueues
  2702  00061E  20F4               	addwfc	prodh,w,c
  2703  000620  6EF7               	movwf	tblptrh,c
  2704  000622                     	if	0	;There are less than 3 active tblptr bytes
  2705  000622                     	endif
  2706  000622  0009               	tblrd		*+
  2707  000624  CFF5 F016          	movff	tablat,ES_InitQueue@pBlock
  2708  000628  000A               	tblrd		*-
  2709  00062A  CFF5 F017          	movff	tablat,ES_InitQueue@pBlock+1
  2710  00062E  0100               	movlb	0	; () banked
  2711  000630  5192               	movf	ES_Initialize@i& (0+255),w,b
  2712  000632  0D03               	mullw	3
  2713  000634  0E02               	movlw	2
  2714  000636  26F3               	addwf	prodl,f,c
  2715  000638  0E00               	movlw	0
  2716  00063A  22F4               	addwfc	prodh,f,c
  2717  00063C  0E54               	movlw	low _EventQueues
  2718  00063E  24F3               	addwf	prodl,w,c
  2719  000640  6EF6               	movwf	tblptrl,c
  2720  000642  0E03               	movlw	high _EventQueues
  2721  000644  20F4               	addwfc	prodh,w,c
  2722  000646  6EF7               	movwf	tblptrh,c
  2723  000648                     	if	0	;There are less than 3 active tblptr bytes
  2724  000648                     	endif
  2725  000648  0008               	tblrd		*
  2726  00064A  CFF5 F018          	movff	tablat,ES_InitQueue@BlockSize
  2727  00064E  ECF2  F005         	call	_ES_InitQueue	;wreg free
  2728                           
  2729                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  2730  000652  0100               	movlb	0	; () banked
  2731  000654  5192               	movf	ES_Initialize@i& (0+255),w,b
  2732  000656  0D04               	mullw	4
  2733  000658  0E50               	movlw	low _ServDescList
  2734  00065A  24F3               	addwf	prodl,w,c
  2735  00065C  6EF6               	movwf	tblptrl,c
  2736  00065E  0E03               	movlw	high _ServDescList
  2737  000660  20F4               	addwfc	prodh,w,c
  2738  000662  6EF7               	movwf	tblptrh,c
  2739  000664                     	if	0	;There are less than 3 active tblptr bytes
  2740  000664                     	endif
  2741  000664  D801               	call	u1808
  2742  000666  D00E               	goto	u1809
  2743  000668                     u1808:
  2744  000668  0005               	push	
  2745  00066A  6EFA               	movwf	pclath,c
  2746  00066C  0009               	tblrd		*+
  2747  00066E  50F5               	movf	tablat,w,c
  2748  000670  6EFD               	movwf	tosl,c
  2749  000672  0009               	tblrd		*+
  2750  000674  50F5               	movf	tablat,w,c
  2751  000676  6EFE               	movwf	tosh,c
  2752  000678  50F8               	movf	tblptru,w,c
  2753  00067A  6EFF               	movwf	tosu,c
  2754  00067C  50FA               	movf	pclath,w,c
  2755  00067E  0100               	movlb	0	; () banked
  2756  000680  5192               	movf	ES_Initialize@i& (0+255),w,b
  2757  000682  0012               	return		;indir
  2758  000684                     u1809:
  2759  000684  06E8               	decf	wreg,f,c
  2760  000686  B4D8               	btfsc	status,2,c
  2761  000688  D002               	goto	l2538
  2762                           
  2763                           ;ES_Framework.c: 254: return FailedInit;
  2764  00068A  0E05               	movlw	5
  2765  00068C  0012               	return	
  2766  00068E                     l2538:
  2767  00068E  0100               	movlb	0	; () banked
  2768  000690  2B92               	incf	ES_Initialize@i& (0+255),f,b
  2769  000692  D795               	goto	l2518
  2770  000694                     l2542:
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;ES_Framework.c: 255: }
  2774                           ;ES_Framework.c: 256: return Success;
  2775  000694  0E00               	movlw	0
  2776  000696  0012               	return	
  2777  000698                     __end_of_ES_Initialize:
  2778                           	opt stack 0
  2779                           tosu	equ	0xFFF
  2780                           tosh	equ	0xFFE
  2781                           tosl	equ	0xFFD
  2782                           pclath	equ	0xFFA
  2783                           tblptru	equ	0xFF8
  2784                           tblptrh	equ	0xFF7
  2785                           tblptrl	equ	0xFF6
  2786                           tablat	equ	0xFF5
  2787                           prodh	equ	0xFF4
  2788                           prodl	equ	0xFF3
  2789                           intcon	equ	0xFF2
  2790                           postinc0	equ	0xFEE
  2791                           wreg	equ	0xFE8
  2792                           indf1	equ	0xFE7
  2793                           postinc1	equ	0xFE6
  2794                           fsr1h	equ	0xFE2
  2795                           fsr1l	equ	0xFE1
  2796                           indf2	equ	0xFDF
  2797                           postinc2	equ	0xFDE
  2798                           postdec2	equ	0xFDD
  2799                           fsr2h	equ	0xFDA
  2800                           fsr2l	equ	0xFD9
  2801                           status	equ	0xFD8
  2802                           
  2803 ;; *************** function _InitCan_XmitService *****************
  2804 ;; Defined at:
  2805 ;;		line 79 in file "Can_XmitService.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;  Priority        1    wreg     unsigned char 
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;  Priority        1    3[BANK0 ] unsigned char 
  2810 ;;  ThisEvent       3    0[BANK0 ] struct ES_Event_t
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  1    wreg      unsigned char 
  2813 ;; Registers used:
  2814 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2820 ;;      Params:         0       0       0       0
  2821 ;;      Locals:         0       4       0       0
  2822 ;;      Temps:          0       0       0       0
  2823 ;;      Totals:         0       4       0       0
  2824 ;;Total ram usage:        4 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    6
  2827 ;; This function calls:
  2828 ;;		_ES_PostToService
  2829 ;; This function is called by:
  2830 ;;		_ES_Initialize
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           	psect	text17
  2835  000C4E                     __ptext17:
  2836                           	opt stack 0
  2837  000C4E                     _InitCan_XmitService:
  2838                           	opt stack 23
  2839                           
  2840                           ;incstack = 0
  2841                           ;InitCan_XmitService@Priority stored from wreg
  2842  000C4E  0100               	movlb	0	; () banked
  2843  000C50  6F8F               	movwf	InitCan_XmitService@Priority& (0+255),b
  2844                           
  2845                           ;Can_XmitService.c: 81: ES_Event ThisEvent;
  2846                           ;Can_XmitService.c: 83: MyPriority = Priority;
  2847  000C52  C08F  F045         	movff	InitCan_XmitService@Priority,_MyPriority
  2848                           
  2849                           ;Can_XmitService.c: 86: ThisEvent.EventType = ES_INIT;
  2850  000C56  0E02               	movlw	2
  2851  000C58  0100               	movlb	0	; () banked
  2852  000C5A  6F8C               	movwf	InitCan_XmitService@ThisEvent& (0+255),b
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;Can_XmitService.c: 87: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  2856  000C5C  C08C  F02D         	movff	InitCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  2857  000C60  C08D  F02E         	movff	InitCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  2858  000C64  C08E  F02F         	movff	InitCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  2859  000C68  5045               	movf	_MyPriority,w,c
  2860  000C6A  EC9F  F005         	call	_ES_PostToService
  2861  000C6E  06E8               	decf	wreg,f,c
  2862  000C70  A4D8               	btfss	status,2,c
  2863  000C72  D002               	goto	l2494
  2864                           
  2865                           ;Can_XmitService.c: 88: {
  2866                           ;Can_XmitService.c: 89: return 1;
  2867  000C74  0E01               	movlw	1
  2868                           
  2869                           ;Can_XmitService.c: 90: }else
  2870  000C76  0012               	return	
  2871  000C78                     l2494:
  2872                           
  2873                           ;Can_XmitService.c: 91: {
  2874                           ;Can_XmitService.c: 92: return 0;
  2875  000C78  0E00               	movlw	0
  2876  000C7A  0012               	return	
  2877  000C7C                     __end_of_InitCan_XmitService:
  2878                           	opt stack 0
  2879                           tosu	equ	0xFFF
  2880                           tosh	equ	0xFFE
  2881                           tosl	equ	0xFFD
  2882                           pclath	equ	0xFFA
  2883                           tblptru	equ	0xFF8
  2884                           tblptrh	equ	0xFF7
  2885                           tblptrl	equ	0xFF6
  2886                           tablat	equ	0xFF5
  2887                           prodh	equ	0xFF4
  2888                           prodl	equ	0xFF3
  2889                           intcon	equ	0xFF2
  2890                           postinc0	equ	0xFEE
  2891                           wreg	equ	0xFE8
  2892                           indf1	equ	0xFE7
  2893                           postinc1	equ	0xFE6
  2894                           fsr1h	equ	0xFE2
  2895                           fsr1l	equ	0xFE1
  2896                           indf2	equ	0xFDF
  2897                           postinc2	equ	0xFDE
  2898                           postdec2	equ	0xFDD
  2899                           fsr2h	equ	0xFDA
  2900                           fsr2l	equ	0xFD9
  2901                           status	equ	0xFD8
  2902                           
  2903 ;; *************** function _ES_PostToService *****************
  2904 ;; Defined at:
  2905 ;;		line 351 in file "ES_Framework.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;  WhichService    1    wreg     unsigned char 
  2908 ;;  TheEvent        3   44[COMRAM] struct ES_Event_t
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;  WhichService    1   49[COMRAM] unsigned char 
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  1    wreg      unsigned char 
  2913 ;; Registers used:
  2914 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2920 ;;      Params:         3       0       0       0
  2921 ;;      Locals:         1       0       0       0
  2922 ;;      Temps:          2       0       0       0
  2923 ;;      Totals:         6       0       0       0
  2924 ;;Total ram usage:        6 bytes
  2925 ;; Hardware stack levels used:    1
  2926 ;; Hardware stack levels required when called:    5
  2927 ;; This function calls:
  2928 ;;		_ES_EnQueueFIFO
  2929 ;; This function is called by:
  2930 ;;		_InitCan_XmitService
  2931 ;;		_PostCan_XmitService
  2932 ;; This function uses a non-reentrant model
  2933 ;;
  2934                           
  2935                           	psect	text18
  2936  000B3E                     __ptext18:
  2937                           	opt stack 0
  2938  000B3E                     _ES_PostToService:
  2939                           	opt stack 21
  2940                           
  2941                           ;incstack = 0
  2942                           ;ES_PostToService@WhichService stored from wreg
  2943  000B3E  6E32               	movwf	ES_PostToService@WhichService,c
  2944                           
  2945                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  2946                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  2947                           ;ES_Framework.c: 354: 1 )){
  2948  000B40  5032               	movf	ES_PostToService@WhichService,w,c
  2949  000B42  A4D8               	btfss	status,2,c
  2950  000B44  D02D               	goto	l2270
  2951  000B46  5032               	movf	ES_PostToService@WhichService,w,c
  2952  000B48  0D03               	mullw	3
  2953  000B4A  0E54               	movlw	low _EventQueues
  2954  000B4C  24F3               	addwf	prodl,w,c
  2955  000B4E  6EF6               	movwf	tblptrl,c
  2956  000B50  0E03               	movlw	high _EventQueues
  2957  000B52  20F4               	addwfc	prodh,w,c
  2958  000B54  6EF7               	movwf	tblptrh,c
  2959  000B56                     	if	0	;There are less than 3 active tblptr bytes
  2960  000B56                     	endif
  2961  000B56  0009               	tblrd		*+
  2962  000B58  CFF5 F022          	movff	tablat,ES_EnQueueFIFO@pBlock
  2963  000B5C  000A               	tblrd		*-
  2964  000B5E  CFF5 F023          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  2965  000B62  C02D  F024         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  2966  000B66  C02E  F025         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  2967  000B6A  C02F  F026         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  2968  000B6E  EC21  F004         	call	_ES_EnQueueFIFO	;wreg free
  2969  000B72  06E8               	decf	wreg,f,c
  2970  000B74  A4D8               	btfss	status,2,c
  2971  000B76  D014               	goto	l2270
  2972                           
  2973                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  2974  000B78  5032               	movf	ES_PostToService@WhichService,w,c
  2975  000B7A  0D02               	mullw	2
  2976  000B7C  0E01               	movlw	low _BitNum2SetMask
  2977  000B7E  24F3               	addwf	prodl,w,c
  2978  000B80  6EF6               	movwf	tblptrl,c
  2979  000B82  0E03               	movlw	high _BitNum2SetMask
  2980  000B84  20F4               	addwfc	prodh,w,c
  2981  000B86  6EF7               	movwf	tblptrh,c
  2982  000B88                     	if	0	;There are less than 3 active tblptr bytes
  2983  000B88                     	endif
  2984  000B88  0009               	tblrd		*+
  2985  000B8A  CFF5 F030          	movff	tablat,??_ES_PostToService
  2986  000B8E  0009               	tblrd		*+
  2987  000B90  CFF5 F031          	movff	tablat,??_ES_PostToService+1
  2988  000B94  5030               	movf	??_ES_PostToService,w,c
  2989  000B96  123C               	iorwf	_Ready,f,c
  2990  000B98  5031               	movf	??_ES_PostToService+1,w,c
  2991  000B9A  123D               	iorwf	_Ready+1,f,c
  2992                           
  2993                           ;ES_Framework.c: 356: return 1;
  2994  000B9C  0E01               	movlw	1
  2995                           
  2996                           ;ES_Framework.c: 357: } else
  2997  000B9E  0012               	return	
  2998  000BA0                     l2270:
  2999                           
  3000                           ;ES_Framework.c: 358: return 0;
  3001  000BA0  0E00               	movlw	0
  3002  000BA2  0012               	return	
  3003  000BA4                     __end_of_ES_PostToService:
  3004                           	opt stack 0
  3005                           tosu	equ	0xFFF
  3006                           tosh	equ	0xFFE
  3007                           tosl	equ	0xFFD
  3008                           pclath	equ	0xFFA
  3009                           tblptru	equ	0xFF8
  3010                           tblptrh	equ	0xFF7
  3011                           tblptrl	equ	0xFF6
  3012                           tablat	equ	0xFF5
  3013                           prodh	equ	0xFF4
  3014                           prodl	equ	0xFF3
  3015                           intcon	equ	0xFF2
  3016                           postinc0	equ	0xFEE
  3017                           wreg	equ	0xFE8
  3018                           indf1	equ	0xFE7
  3019                           postinc1	equ	0xFE6
  3020                           fsr1h	equ	0xFE2
  3021                           fsr1l	equ	0xFE1
  3022                           indf2	equ	0xFDF
  3023                           postinc2	equ	0xFDE
  3024                           postdec2	equ	0xFDD
  3025                           fsr2h	equ	0xFDA
  3026                           fsr2l	equ	0xFD9
  3027                           status	equ	0xFD8
  3028                           
  3029 ;; *************** function _ES_EnQueueFIFO *****************
  3030 ;; Defined at:
  3031 ;;		line 85 in file "ES_Queue.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;  pBlock          2   33[COMRAM] PTR struct ES_Event_t
  3034 ;;		 -> Queue0(12), 
  3035 ;;  Event2Add       3   35[COMRAM] struct ES_Event_t
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;  pThisQueue      2   42[COMRAM] PTR struct .
  3038 ;;		 -> Queue0(12), 
  3039 ;;  SaveCrit        1   41[COMRAM] unsigned char 
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  1    wreg      unsigned char 
  3042 ;; Registers used:
  3043 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3049 ;;      Params:         5       0       0       0
  3050 ;;      Locals:         3       0       0       0
  3051 ;;      Temps:          3       0       0       0
  3052 ;;      Totals:        11       0       0       0
  3053 ;;Total ram usage:       11 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; Hardware stack levels required when called:    4
  3056 ;; This function calls:
  3057 ;;		___awmod
  3058 ;;		___wmul
  3059 ;; This function is called by:
  3060 ;;		_ES_PostToService
  3061 ;;		_ES_PostAll
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text19
  3066  000842                     __ptext19:
  3067                           	opt stack 0
  3068  000842                     _ES_EnQueueFIFO:
  3069                           	opt stack 21
  3070                           
  3071                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  3072                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  3073                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  3074                           
  3075                           ;incstack = 0
  3076  000842  C022  F02B         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  3077  000846  C023  F02C         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  3078                           
  3079                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  3080  00084A  C02B  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3081  00084E  C02C  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3082  000852  EE10 F002          	lfsr	1,2
  3083  000856  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3084  000858  26E1               	addwf	fsr1l,f,c
  3085  00085A  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3086  00085C  22E2               	addwfc	fsr1h,f,c
  3087  00085E  50DE               	movf	postinc2,w,c
  3088  000860  5CE6               	subwf	postinc1,w,c
  3089  000862  B0D8               	btfsc	status,0,c
  3090  000864  D046               	goto	l2254
  3091                           
  3092                           ;ES_Queue.c: 92: {
  3093                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  3094  000866  CFF2 F02A          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  3095  00086A  9EF2               	bcf	intcon,7,c	;volatile
  3096                           
  3097                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  3098                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  3099  00086C  C02B  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3100  000870  C02C  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3101  000874  50DF               	movf	indf2,w,c
  3102  000876  6E27               	movwf	??_ES_EnQueueFIFO& (0+255),c
  3103  000878  5027               	movf	??_ES_EnQueueFIFO,w,c
  3104  00087A  6E18               	movwf	___awmod@divisor,c
  3105  00087C  6A19               	clrf	___awmod@divisor+1,c
  3106  00087E  EE20 F002          	lfsr	2,2
  3107  000882  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3108  000884  26D9               	addwf	fsr2l,f,c
  3109  000886  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3110  000888  22DA               	addwfc	fsr2h,f,c
  3111  00088A  50DF               	movf	indf2,w,c
  3112  00088C  6E28               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),c
  3113  00088E  EE20 F001          	lfsr	2,1
  3114  000892  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3115  000894  26D9               	addwf	fsr2l,f,c
  3116  000896  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3117  000898  22DA               	addwfc	fsr2h,f,c
  3118  00089A  50DF               	movf	indf2,w,c
  3119  00089C  6E29               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),c
  3120  00089E  5029               	movf	??_ES_EnQueueFIFO+2,w,c
  3121  0008A0  2428               	addwf	??_ES_EnQueueFIFO+1,w,c
  3122  0008A2  6E16               	movwf	___awmod@dividend,c
  3123  0008A4  6A17               	clrf	___awmod@dividend+1,c
  3124  0008A6  3617               	rlcf	___awmod@dividend+1,f,c
  3125  0008A8  EC32  F005         	call	___awmod	;wreg free
  3126  0008AC  0E01               	movlw	1
  3127  0008AE  2416               	addwf	?___awmod,w,c
  3128  0008B0  6E1C               	movwf	___wmul@multiplier,c
  3129  0008B2  0E00               	movlw	0
  3130  0008B4  2017               	addwfc	?___awmod+1,w,c
  3131  0008B6  6E1D               	movwf	___wmul@multiplier+1,c
  3132  0008B8  0E00               	movlw	0
  3133  0008BA  6E1F               	movwf	___wmul@multiplicand+1,c
  3134  0008BC  0E03               	movlw	3
  3135  0008BE  6E1E               	movwf	___wmul@multiplicand,c
  3136  0008C0  EC91  F006         	call	___wmul	;wreg free
  3137  0008C4  501C               	movf	?___wmul,w,c
  3138  0008C6  2422               	addwf	ES_EnQueueFIFO@pBlock,w,c
  3139  0008C8  6ED9               	movwf	fsr2l,c
  3140  0008CA  501D               	movf	?___wmul+1,w,c
  3141  0008CC  2023               	addwfc	ES_EnQueueFIFO@pBlock+1,w,c
  3142  0008CE  6EDA               	movwf	fsr2h,c
  3143  0008D0  C024  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  3144  0008D4  C025  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  3145  0008D8  C026  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  3146                           
  3147                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  3148  0008DC  EE20 F002          	lfsr	2,2
  3149  0008E0  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3150  0008E2  26D9               	addwf	fsr2l,f,c
  3151  0008E4  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3152  0008E6  22DA               	addwfc	fsr2h,f,c
  3153  0008E8  2ADF               	incf	indf2,f,c
  3154                           
  3155                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  3156  0008EA  C02A  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  3157                           
  3158                           ;ES_Queue.c: 101: return(1);
  3159  0008EE  0E01               	movlw	1
  3160                           
  3161                           ;ES_Queue.c: 102: }else
  3162  0008F0  0012               	return	
  3163  0008F2                     l2254:
  3164                           
  3165                           ;ES_Queue.c: 103: return(0);
  3166  0008F2  0E00               	movlw	0
  3167  0008F4  0012               	return	
  3168  0008F6                     __end_of_ES_EnQueueFIFO:
  3169                           	opt stack 0
  3170                           tosu	equ	0xFFF
  3171                           tosh	equ	0xFFE
  3172                           tosl	equ	0xFFD
  3173                           pclath	equ	0xFFA
  3174                           tblptru	equ	0xFF8
  3175                           tblptrh	equ	0xFF7
  3176                           tblptrl	equ	0xFF6
  3177                           tablat	equ	0xFF5
  3178                           prodh	equ	0xFF4
  3179                           prodl	equ	0xFF3
  3180                           intcon	equ	0xFF2
  3181                           postinc0	equ	0xFEE
  3182                           wreg	equ	0xFE8
  3183                           indf1	equ	0xFE7
  3184                           postinc1	equ	0xFE6
  3185                           fsr1h	equ	0xFE2
  3186                           fsr1l	equ	0xFE1
  3187                           indf2	equ	0xFDF
  3188                           postinc2	equ	0xFDE
  3189                           postdec2	equ	0xFDD
  3190                           fsr2h	equ	0xFDA
  3191                           fsr2l	equ	0xFD9
  3192                           status	equ	0xFD8
  3193                           
  3194 ;; *************** function ___wmul *****************
  3195 ;; Defined at:
  3196 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;  multiplier      2   27[COMRAM] unsigned int 
  3199 ;;  multiplicand    2   29[COMRAM] unsigned int 
  3200 ;; Auto vars:     Size  Location     Type
  3201 ;;  product         2   31[COMRAM] unsigned int 
  3202 ;; Return value:  Size  Location     Type
  3203 ;;                  2   27[COMRAM] unsigned int 
  3204 ;; Registers used:
  3205 ;;		wreg, status,2, status,0, prodl, prodh
  3206 ;; Tracked objects:
  3207 ;;		On entry : 0/0
  3208 ;;		On exit  : 0/0
  3209 ;;		Unchanged: 0/0
  3210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3211 ;;      Params:         4       0       0       0
  3212 ;;      Locals:         2       0       0       0
  3213 ;;      Temps:          0       0       0       0
  3214 ;;      Totals:         6       0       0       0
  3215 ;;Total ram usage:        6 bytes
  3216 ;; Hardware stack levels used:    1
  3217 ;; Hardware stack levels required when called:    3
  3218 ;; This function calls:
  3219 ;;		Nothing
  3220 ;; This function is called by:
  3221 ;;		_ES_EnQueueFIFO
  3222 ;;		_ES_DeQueue
  3223 ;;		_ES_EnQueueLIFO
  3224 ;; This function uses a non-reentrant model
  3225 ;;
  3226                           
  3227                           	psect	text20
  3228  000D22                     __ptext20:
  3229                           	opt stack 0
  3230  000D22                     ___wmul:
  3231                           	opt stack 21
  3232                           
  3233                           ;incstack = 0
  3234  000D22  501C               	movf	___wmul@multiplier,w,c
  3235  000D24  021E               	mulwf	___wmul@multiplicand,c
  3236  000D26  CFF3 F020          	movff	prodl,___wmul@product
  3237  000D2A  CFF4 F021          	movff	prodh,___wmul@product+1
  3238  000D2E  501C               	movf	___wmul@multiplier,w,c
  3239  000D30  021F               	mulwf	___wmul@multiplicand+1,c
  3240  000D32  50F3               	movf	prodl,w,c
  3241  000D34  2621               	addwf	___wmul@product+1,f,c
  3242  000D36  501D               	movf	___wmul@multiplier+1,w,c
  3243  000D38  021E               	mulwf	___wmul@multiplicand,c
  3244  000D3A  50F3               	movf	prodl,w,c
  3245  000D3C  2621               	addwf	___wmul@product+1,f,c
  3246  000D3E  C020  F01C         	movff	___wmul@product,?___wmul
  3247  000D42  C021  F01D         	movff	___wmul@product+1,?___wmul+1
  3248  000D46  0012               	return	
  3249  000D48                     __end_of___wmul:
  3250                           	opt stack 0
  3251                           tosu	equ	0xFFF
  3252                           tosh	equ	0xFFE
  3253                           tosl	equ	0xFFD
  3254                           pclath	equ	0xFFA
  3255                           tblptru	equ	0xFF8
  3256                           tblptrh	equ	0xFF7
  3257                           tblptrl	equ	0xFF6
  3258                           tablat	equ	0xFF5
  3259                           prodh	equ	0xFF4
  3260                           prodl	equ	0xFF3
  3261                           intcon	equ	0xFF2
  3262                           postinc0	equ	0xFEE
  3263                           wreg	equ	0xFE8
  3264                           indf1	equ	0xFE7
  3265                           postinc1	equ	0xFE6
  3266                           fsr1h	equ	0xFE2
  3267                           fsr1l	equ	0xFE1
  3268                           indf2	equ	0xFDF
  3269                           postinc2	equ	0xFDE
  3270                           postdec2	equ	0xFDD
  3271                           fsr2h	equ	0xFDA
  3272                           fsr2l	equ	0xFD9
  3273                           status	equ	0xFD8
  3274                           
  3275 ;; *************** function ___awmod *****************
  3276 ;; Defined at:
  3277 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;  dividend        2   21[COMRAM] int 
  3280 ;;  divisor         2   23[COMRAM] int 
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;  sign            1   26[COMRAM] unsigned char 
  3283 ;;  counter         1   25[COMRAM] unsigned char 
  3284 ;; Return value:  Size  Location     Type
  3285 ;;                  2   21[COMRAM] int 
  3286 ;; Registers used:
  3287 ;;		wreg, status,2, status,0
  3288 ;; Tracked objects:
  3289 ;;		On entry : 0/0
  3290 ;;		On exit  : 0/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3293 ;;      Params:         4       0       0       0
  3294 ;;      Locals:         2       0       0       0
  3295 ;;      Temps:          0       0       0       0
  3296 ;;      Totals:         6       0       0       0
  3297 ;;Total ram usage:        6 bytes
  3298 ;; Hardware stack levels used:    1
  3299 ;; Hardware stack levels required when called:    3
  3300 ;; This function calls:
  3301 ;;		Nothing
  3302 ;; This function is called by:
  3303 ;;		_ES_EnQueueFIFO
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           	psect	text21
  3308  000A64                     __ptext21:
  3309                           	opt stack 0
  3310  000A64                     ___awmod:
  3311                           	opt stack 21
  3312                           
  3313                           ;incstack = 0
  3314  000A64  0E00               	movlw	0
  3315  000A66  6E1B               	movwf	___awmod@sign,c
  3316  000A68  AE17               	btfss	___awmod@dividend+1,7,c
  3317  000A6A  D006               	goto	l2210
  3318  000A6C  6C16               	negf	___awmod@dividend,c
  3319  000A6E  1E17               	comf	___awmod@dividend+1,f,c
  3320  000A70  B0D8               	btfsc	status,0,c
  3321  000A72  2A17               	incf	___awmod@dividend+1,f,c
  3322  000A74  0E01               	movlw	1
  3323  000A76  6E1B               	movwf	___awmod@sign,c
  3324  000A78                     l2210:
  3325  000A78  AE19               	btfss	___awmod@divisor+1,7,c
  3326  000A7A  D004               	goto	l2214
  3327  000A7C  6C18               	negf	___awmod@divisor,c
  3328  000A7E  1E19               	comf	___awmod@divisor+1,f,c
  3329  000A80  B0D8               	btfsc	status,0,c
  3330  000A82  2A19               	incf	___awmod@divisor+1,f,c
  3331  000A84                     l2214:
  3332  000A84  5018               	movf	___awmod@divisor,w,c
  3333  000A86  1019               	iorwf	___awmod@divisor+1,w,c
  3334  000A88  B4D8               	btfsc	status,2,c
  3335  000A8A  D018               	goto	l2230
  3336  000A8C  0E01               	movlw	1
  3337  000A8E  6E1A               	movwf	___awmod@counter,c
  3338  000A90  D004               	goto	l2220
  3339  000A92                     l2218:
  3340  000A92  90D8               	bcf	status,0,c
  3341  000A94  3618               	rlcf	___awmod@divisor,f,c
  3342  000A96  3619               	rlcf	___awmod@divisor+1,f,c
  3343  000A98  2A1A               	incf	___awmod@counter,f,c
  3344  000A9A                     l2220:
  3345  000A9A  AE19               	btfss	___awmod@divisor+1,7,c
  3346  000A9C  D7FA               	goto	l2218
  3347  000A9E                     l2222:
  3348  000A9E  5018               	movf	___awmod@divisor,w,c
  3349  000AA0  5C16               	subwf	___awmod@dividend,w,c
  3350  000AA2  5019               	movf	___awmod@divisor+1,w,c
  3351  000AA4  5817               	subwfb	___awmod@dividend+1,w,c
  3352  000AA6  A0D8               	btfss	status,0,c
  3353  000AA8  D004               	goto	l2226
  3354  000AAA  5018               	movf	___awmod@divisor,w,c
  3355  000AAC  5E16               	subwf	___awmod@dividend,f,c
  3356  000AAE  5019               	movf	___awmod@divisor+1,w,c
  3357  000AB0  5A17               	subwfb	___awmod@dividend+1,f,c
  3358  000AB2                     l2226:
  3359  000AB2  90D8               	bcf	status,0,c
  3360  000AB4  3219               	rrcf	___awmod@divisor+1,f,c
  3361  000AB6  3218               	rrcf	___awmod@divisor,f,c
  3362  000AB8  2E1A               	decfsz	___awmod@counter,f,c
  3363  000ABA  D7F1               	goto	l2222
  3364  000ABC                     l2230:
  3365  000ABC  501B               	movf	___awmod@sign,w,c
  3366  000ABE  B4D8               	btfsc	status,2,c
  3367  000AC0  D004               	goto	l2234
  3368  000AC2  6C16               	negf	___awmod@dividend,c
  3369  000AC4  1E17               	comf	___awmod@dividend+1,f,c
  3370  000AC6  B0D8               	btfsc	status,0,c
  3371  000AC8  2A17               	incf	___awmod@dividend+1,f,c
  3372  000ACA                     l2234:
  3373  000ACA  C016  F016         	movff	___awmod@dividend,?___awmod
  3374  000ACE  C017  F017         	movff	___awmod@dividend+1,?___awmod+1
  3375  000AD2  0012               	return	
  3376  000AD4                     __end_of___awmod:
  3377                           	opt stack 0
  3378                           tosu	equ	0xFFF
  3379                           tosh	equ	0xFFE
  3380                           tosl	equ	0xFFD
  3381                           pclath	equ	0xFFA
  3382                           tblptru	equ	0xFF8
  3383                           tblptrh	equ	0xFF7
  3384                           tblptrl	equ	0xFF6
  3385                           tablat	equ	0xFF5
  3386                           prodh	equ	0xFF4
  3387                           prodl	equ	0xFF3
  3388                           intcon	equ	0xFF2
  3389                           postinc0	equ	0xFEE
  3390                           wreg	equ	0xFE8
  3391                           indf1	equ	0xFE7
  3392                           postinc1	equ	0xFE6
  3393                           fsr1h	equ	0xFE2
  3394                           fsr1l	equ	0xFE1
  3395                           indf2	equ	0xFDF
  3396                           postinc2	equ	0xFDE
  3397                           postdec2	equ	0xFDD
  3398                           fsr2h	equ	0xFDA
  3399                           fsr2l	equ	0xFD9
  3400                           status	equ	0xFD8
  3401                           
  3402 ;; *************** function _ES_Timer_Init *****************
  3403 ;; Defined at:
  3404 ;;		line 130 in file "ES_Timers.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;  Rate            2   23[COMRAM] enum E15419
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;		None
  3409 ;; Return value:  Size  Location     Type
  3410 ;;                  1    wreg      void 
  3411 ;; Registers used:
  3412 ;;		wreg, status,2, cstack
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3418 ;;      Params:         2       0       0       0
  3419 ;;      Locals:         0       0       0       0
  3420 ;;      Temps:          0       0       0       0
  3421 ;;      Totals:         2       0       0       0
  3422 ;;Total ram usage:        2 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    4
  3425 ;; This function calls:
  3426 ;;		__HW_Timer_Init
  3427 ;; This function is called by:
  3428 ;;		_ES_Initialize
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           	psect	text22
  3433  000DCA                     __ptext22:
  3434                           	opt stack 0
  3435  000DCA                     _ES_Timer_Init:
  3436                           	opt stack 25
  3437                           
  3438                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  3439                           
  3440                           ;incstack = 0
  3441  000DCA  C018  F016         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  3442  000DCE  C019  F017         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  3443  000DD2  ECA4  F006         	call	__HW_Timer_Init	;wreg free
  3444  000DD6  0012               	return		;funcret
  3445  000DD8                     __end_of_ES_Timer_Init:
  3446                           	opt stack 0
  3447                           tosu	equ	0xFFF
  3448                           tosh	equ	0xFFE
  3449                           tosl	equ	0xFFD
  3450                           pclath	equ	0xFFA
  3451                           tblptru	equ	0xFF8
  3452                           tblptrh	equ	0xFF7
  3453                           tblptrl	equ	0xFF6
  3454                           tablat	equ	0xFF5
  3455                           prodh	equ	0xFF4
  3456                           prodl	equ	0xFF3
  3457                           intcon	equ	0xFF2
  3458                           postinc0	equ	0xFEE
  3459                           wreg	equ	0xFE8
  3460                           indf1	equ	0xFE7
  3461                           postinc1	equ	0xFE6
  3462                           fsr1h	equ	0xFE2
  3463                           fsr1l	equ	0xFE1
  3464                           indf2	equ	0xFDF
  3465                           postinc2	equ	0xFDE
  3466                           postdec2	equ	0xFDD
  3467                           fsr2h	equ	0xFDA
  3468                           fsr2l	equ	0xFD9
  3469                           status	equ	0xFD8
  3470                           
  3471 ;; *************** function __HW_Timer_Init *****************
  3472 ;; Defined at:
  3473 ;;		line 72 in file "ES_Port.c"
  3474 ;; Parameters:    Size  Location     Type
  3475 ;;  Rate            2   21[COMRAM] enum E15412
  3476 ;; Auto vars:     Size  Location     Type
  3477 ;;		None
  3478 ;; Return value:  Size  Location     Type
  3479 ;;                  1    wreg      void 
  3480 ;; Registers used:
  3481 ;;		wreg, status,2
  3482 ;; Tracked objects:
  3483 ;;		On entry : 0/0
  3484 ;;		On exit  : 0/0
  3485 ;;		Unchanged: 0/0
  3486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3487 ;;      Params:         2       0       0       0
  3488 ;;      Locals:         0       0       0       0
  3489 ;;      Temps:          0       0       0       0
  3490 ;;      Totals:         2       0       0       0
  3491 ;;Total ram usage:        2 bytes
  3492 ;; Hardware stack levels used:    1
  3493 ;; Hardware stack levels required when called:    3
  3494 ;; This function calls:
  3495 ;;		Nothing
  3496 ;; This function is called by:
  3497 ;;		_ES_Timer_Init
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text23
  3502  000D48                     __ptext23:
  3503                           	opt stack 0
  3504  000D48                     __HW_Timer_Init:
  3505                           	opt stack 25
  3506                           
  3507                           ;ES_Port.c: 80: PIE1 = 0b00000100;
  3508                           
  3509                           ;incstack = 0
  3510  000D48  0E04               	movlw	4
  3511  000D4A  6E9D               	movwf	3997,c	;volatile
  3512                           
  3513                           ;ES_Port.c: 85: INTCON = 0b01000000;
  3514  000D4C  0E40               	movlw	64
  3515  000D4E  6EF2               	movwf	intcon,c	;volatile
  3516                           
  3517                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
  3518  000D50  0E0A               	movlw	10
  3519  000D52  6EBD               	movwf	4029,c	;volatile
  3520                           
  3521                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
  3522  000D54  0E01               	movlw	1
  3523  000D56  6EBE               	movwf	4030,c	;volatile
  3524                           
  3525                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
  3526  000D58  0E00               	movlw	0
  3527  000D5A  6EBF               	movwf	4031,c	;volatile
  3528                           
  3529                           ;ES_Port.c: 107: T1CON = 0b00100001;
  3530  000D5C  0E21               	movlw	33
  3531  000D5E  6ECD               	movwf	4045,c	;volatile
  3532                           
  3533                           ;ES_Port.c: 108: PEIE = 1;
  3534  000D60  8CF2               	bsf	intcon,6,c	;volatile
  3535                           
  3536                           ;ES_Port.c: 109: {GIE = 1;};
  3537  000D62  8EF2               	bsf	intcon,7,c	;volatile
  3538  000D64  0012               	return		;funcret
  3539  000D66                     __end_of__HW_Timer_Init:
  3540                           	opt stack 0
  3541                           tosu	equ	0xFFF
  3542                           tosh	equ	0xFFE
  3543                           tosl	equ	0xFFD
  3544                           pclath	equ	0xFFA
  3545                           tblptru	equ	0xFF8
  3546                           tblptrh	equ	0xFF7
  3547                           tblptrl	equ	0xFF6
  3548                           tablat	equ	0xFF5
  3549                           prodh	equ	0xFF4
  3550                           prodl	equ	0xFF3
  3551                           intcon	equ	0xFF2
  3552                           postinc0	equ	0xFEE
  3553                           wreg	equ	0xFE8
  3554                           indf1	equ	0xFE7
  3555                           postinc1	equ	0xFE6
  3556                           fsr1h	equ	0xFE2
  3557                           fsr1l	equ	0xFE1
  3558                           indf2	equ	0xFDF
  3559                           postinc2	equ	0xFDE
  3560                           postdec2	equ	0xFDD
  3561                           fsr2h	equ	0xFDA
  3562                           fsr2l	equ	0xFD9
  3563                           status	equ	0xFD8
  3564                           
  3565 ;; *************** function _ES_InitQueue *****************
  3566 ;; Defined at:
  3567 ;;		line 58 in file "ES_Queue.c"
  3568 ;; Parameters:    Size  Location     Type
  3569 ;;  pBlock          2   21[COMRAM] PTR struct ES_Event_t
  3570 ;;		 -> Queue0(12), 
  3571 ;;  BlockSize       1   23[COMRAM] unsigned char 
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;  pThisQueue      2   24[COMRAM] PTR struct .
  3574 ;;		 -> Queue0(12), 
  3575 ;; Return value:  Size  Location     Type
  3576 ;;                  1    wreg      unsigned char 
  3577 ;; Registers used:
  3578 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3579 ;; Tracked objects:
  3580 ;;		On entry : 0/0
  3581 ;;		On exit  : 0/0
  3582 ;;		Unchanged: 0/0
  3583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3584 ;;      Params:         3       0       0       0
  3585 ;;      Locals:         2       0       0       0
  3586 ;;      Temps:          0       0       0       0
  3587 ;;      Totals:         5       0       0       0
  3588 ;;Total ram usage:        5 bytes
  3589 ;; Hardware stack levels used:    1
  3590 ;; Hardware stack levels required when called:    3
  3591 ;; This function calls:
  3592 ;;		Nothing
  3593 ;; This function is called by:
  3594 ;;		_ES_Initialize
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           	psect	text24
  3599  000BE4                     __ptext24:
  3600                           	opt stack 0
  3601  000BE4                     _ES_InitQueue:
  3602                           	opt stack 26
  3603                           
  3604                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  3605                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  3606                           
  3607                           ;incstack = 0
  3608  000BE4  C016  F019         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  3609  000BE8  C017  F01A         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  3610                           
  3611                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  3612  000BEC  0418               	decf	ES_InitQueue@BlockSize,w,c
  3613  000BEE  C019  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  3614  000BF2  C01A  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  3615  000BF6  6EDF               	movwf	indf2,c
  3616                           
  3617                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  3618  000BF8  EE20 F001          	lfsr	2,1
  3619  000BFC  5019               	movf	ES_InitQueue@pThisQueue,w,c
  3620  000BFE  26D9               	addwf	fsr2l,f,c
  3621  000C00  501A               	movf	ES_InitQueue@pThisQueue+1,w,c
  3622  000C02  22DA               	addwfc	fsr2h,f,c
  3623  000C04  0E00               	movlw	0
  3624  000C06  6EDF               	movwf	indf2,c
  3625                           
  3626                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  3627  000C08  EE20 F002          	lfsr	2,2
  3628  000C0C  5019               	movf	ES_InitQueue@pThisQueue,w,c
  3629  000C0E  26D9               	addwf	fsr2l,f,c
  3630  000C10  501A               	movf	ES_InitQueue@pThisQueue+1,w,c
  3631  000C12  22DA               	addwfc	fsr2h,f,c
  3632  000C14  0E00               	movlw	0
  3633  000C16  6EDF               	movwf	indf2,c
  3634  000C18  0012               	return	
  3635  000C1A                     __end_of_ES_InitQueue:
  3636                           	opt stack 0
  3637                           tosu	equ	0xFFF
  3638                           tosh	equ	0xFFE
  3639                           tosl	equ	0xFFD
  3640                           pclath	equ	0xFFA
  3641                           tblptru	equ	0xFF8
  3642                           tblptrh	equ	0xFF7
  3643                           tblptrl	equ	0xFF6
  3644                           tablat	equ	0xFF5
  3645                           prodh	equ	0xFF4
  3646                           prodl	equ	0xFF3
  3647                           intcon	equ	0xFF2
  3648                           postinc0	equ	0xFEE
  3649                           wreg	equ	0xFE8
  3650                           indf1	equ	0xFE7
  3651                           postinc1	equ	0xFE6
  3652                           fsr1h	equ	0xFE2
  3653                           fsr1l	equ	0xFE1
  3654                           indf2	equ	0xFDF
  3655                           postinc2	equ	0xFDE
  3656                           postdec2	equ	0xFDD
  3657                           fsr2h	equ	0xFDA
  3658                           fsr2l	equ	0xFD9
  3659                           status	equ	0xFD8
  3660                           
  3661 ;; *************** function _ISR *****************
  3662 ;; Defined at:
  3663 ;;		line 112 in file "ES_Port.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;		None
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;		None
  3668 ;; Return value:  Size  Location     Type
  3669 ;;                  1    wreg      void 
  3670 ;; Registers used:
  3671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 0/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3677 ;;      Params:         0       0       0       0
  3678 ;;      Locals:         0       0       0       0
  3679 ;;      Temps:         16       0       0       0
  3680 ;;      Totals:        16       0       0       0
  3681 ;;Total ram usage:       16 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:    2
  3684 ;; This function calls:
  3685 ;;		_BusErrorResponse
  3686 ;;		_CanErrorResponse
  3687 ;;		_CanRCVResponse
  3688 ;;		_CanXmitResponse
  3689 ;; This function is called by:
  3690 ;;		Interrupt level 2
  3691 ;; This function uses a non-reentrant model
  3692 ;;
  3693                           
  3694                           	psect	intcode
  3695  000008                     __pintcode:
  3696                           	opt stack 0
  3697  000008                     _ISR:
  3698                           	opt stack 21
  3699                           
  3700                           ;incstack = 0
  3701  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3702  00000A  CFFA F008          	movff	pclath,??_ISR+2
  3703  00000E  CFFB F009          	movff	pclatu,??_ISR+3
  3704  000012  EDC0  F003         	call	int_func,f	;refresh shadow registers
  3705                           tosu	equ	0xFFF
  3706                           tosh	equ	0xFFE
  3707                           tosl	equ	0xFFD
  3708                           pclatu	equ	0xFFB
  3709                           pclath	equ	0xFFA
  3710                           tblptru	equ	0xFF8
  3711                           tblptrh	equ	0xFF7
  3712                           tblptrl	equ	0xFF6
  3713                           tablat	equ	0xFF5
  3714                           prodh	equ	0xFF4
  3715                           prodl	equ	0xFF3
  3716                           intcon	equ	0xFF2
  3717                           postinc0	equ	0xFEE
  3718                           wreg	equ	0xFE8
  3719                           indf1	equ	0xFE7
  3720                           postinc1	equ	0xFE6
  3721                           fsr1h	equ	0xFE2
  3722                           fsr1l	equ	0xFE1
  3723                           indf2	equ	0xFDF
  3724                           postinc2	equ	0xFDE
  3725                           postdec2	equ	0xFDD
  3726                           fsr2h	equ	0xFDA
  3727                           fsr2l	equ	0xFD9
  3728                           status	equ	0xFD8
  3729                           
  3730                           	psect	intcode_body
  3731  000780                     __pintcode_body:
  3732                           	opt stack 21
  3733  000780                     int_func:
  3734                           	opt stack 21
  3735  000780  0006               	pop		; remove dummy address from shadow register refresh
  3736  000782  CFE9 F00A          	movff	fsr0l,??_ISR+4
  3737  000786  CFEA F00B          	movff	fsr0h,??_ISR+5
  3738  00078A  CFE1 F00C          	movff	fsr1l,??_ISR+6
  3739  00078E  CFE2 F00D          	movff	fsr1h,??_ISR+7
  3740  000792  CFD9 F00E          	movff	fsr2l,??_ISR+8
  3741  000796  CFDA F00F          	movff	fsr2h,??_ISR+9
  3742  00079A  CFF3 F010          	movff	prodl,??_ISR+10
  3743  00079E  CFF4 F011          	movff	prodh,??_ISR+11
  3744  0007A2  CFF6 F012          	movff	tblptrl,??_ISR+12
  3745  0007A6  CFF7 F013          	movff	tblptrh,??_ISR+13
  3746  0007AA  CFF8 F014          	movff	tblptru,??_ISR+14
  3747  0007AE  CFF5 F015          	movff	tablat,??_ISR+15
  3748                           
  3749                           ;ES_Port.c: 115: static unsigned int LastTime;
  3750                           ;ES_Port.c: 116: static unsigned int NextTime;
  3751                           ;ES_Port.c: 118: if (CCP1IF == 1)
  3752  0007B2  A49E               	btfss	3998,2,c	;volatile
  3753  0007B4  D014               	goto	i2l2108
  3754                           
  3755                           ;ES_Port.c: 119: {
  3756                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  3757  0007B6  50BF               	movf	4031,w,c	;volatile
  3758  0007B8  6E06               	movwf	??_ISR& (0+255),c
  3759  0007BA  50BE               	movf	4030,w,c	;volatile
  3760  0007BC  6E38               	movwf	ISR@LastTime,c
  3761  0007BE  C006  F039         	movff	??_ISR,ISR@LastTime+1
  3762                           
  3763                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
  3764  0007C2  0E20               	movlw	32
  3765  0007C4  2438               	addwf	ISR@LastTime,w,c
  3766  0007C6  6E3A               	movwf	ISR@NextTime,c
  3767  0007C8  0E4E               	movlw	78
  3768  0007CA  2039               	addwfc	ISR@LastTime+1,w,c
  3769  0007CC  6E3B               	movwf	ISR@NextTime+1,c
  3770                           
  3771                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
  3772  0007CE  503B               	movf	ISR@NextTime+1,w,c
  3773  0007D0  6EBF               	movwf	4031,c	;volatile
  3774                           
  3775                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
  3776  0007D2  C03A  FFBE         	movff	ISR@NextTime,4030	;volatile
  3777                           
  3778                           ;ES_Port.c: 124: CCP1IF = 0;
  3779  0007D6  949E               	bcf	3998,2,c	;volatile
  3780                           
  3781                           ;ES_Port.c: 125: TickCount++;
  3782  0007D8  2A46               	incf	_TickCount,f,c	;volatile
  3783                           
  3784                           ;ES_Port.c: 126: SysTickCounter++;
  3785  0007DA  4A3E               	infsnz	_SysTickCounter,f,c	;volatile
  3786  0007DC  2A3F               	incf	_SysTickCounter+1,f,c	;volatile
  3787  0007DE                     i2l2108:
  3788                           
  3789                           ;ES_Port.c: 127: }
  3790                           ;ES_Port.c: 133: if (TXB0IF == 1)
  3791  0007DE  A4A4               	btfss	4004,2,c	;volatile
  3792  0007E0  D003               	goto	i2l2114
  3793                           
  3794                           ;ES_Port.c: 134: {
  3795                           ;ES_Port.c: 135: TXB0IF = 0;
  3796  0007E2  94A4               	bcf	4004,2,c	;volatile
  3797                           
  3798                           ;ES_Port.c: 136: CanXmitResponse();
  3799  0007E4  ECEC  F006         	call	_CanXmitResponse	;wreg free
  3800  0007E8                     i2l2114:
  3801                           
  3802                           ;ES_Port.c: 137: }
  3803                           ;ES_Port.c: 138: if (RXB0IF == 1) {
  3804  0007E8  A0A4               	btfss	4004,0,c	;volatile
  3805  0007EA  D003               	goto	i2l2120
  3806                           
  3807                           ;ES_Port.c: 139: RXB0IF = 0;
  3808  0007EC  90A4               	bcf	4004,0,c	;volatile
  3809                           
  3810                           ;ES_Port.c: 140: CanRCVResponse();
  3811  0007EE  ECB3  F006         	call	_CanRCVResponse	;wreg free
  3812  0007F2                     i2l2120:
  3813                           
  3814                           ;ES_Port.c: 141: }
  3815                           ;ES_Port.c: 142: if (ERRIF == 1) {
  3816  0007F2  AAA4               	btfss	4004,5,c	;volatile
  3817  0007F4  D003               	goto	i2l2126
  3818                           
  3819                           ;ES_Port.c: 143: ERRIF = 0;
  3820  0007F6  9AA4               	bcf	4004,5,c	;volatile
  3821                           
  3822                           ;ES_Port.c: 144: CanErrorResponse();
  3823  0007F8  ECDD  F006         	call	_CanErrorResponse	;wreg free
  3824  0007FC                     i2l2126:
  3825                           
  3826                           ;ES_Port.c: 145: }
  3827                           ;ES_Port.c: 146: if (IRXIF == 1) {
  3828  0007FC  AEA4               	btfss	4004,7,c	;volatile
  3829  0007FE  D003               	goto	i2l160
  3830                           
  3831                           ;ES_Port.c: 147: IRXIF = 0;
  3832  000800  9EA4               	bcf	4004,7,c	;volatile
  3833                           
  3834                           ;ES_Port.c: 148: BusErrorResponse();
  3835  000802  ECF2  F006         	call	_BusErrorResponse	;wreg free
  3836  000806                     i2l160:
  3837  000806  C015  FFF5         	movff	??_ISR+15,tablat
  3838  00080A  C014  FFF8         	movff	??_ISR+14,tblptru
  3839  00080E  C013  FFF7         	movff	??_ISR+13,tblptrh
  3840  000812  C012  FFF6         	movff	??_ISR+12,tblptrl
  3841  000816  C011  FFF4         	movff	??_ISR+11,prodh
  3842  00081A  C010  FFF3         	movff	??_ISR+10,prodl
  3843  00081E  C00F  FFDA         	movff	??_ISR+9,fsr2h
  3844  000822  C00E  FFD9         	movff	??_ISR+8,fsr2l
  3845  000826  C00D  FFE2         	movff	??_ISR+7,fsr1h
  3846  00082A  C00C  FFE1         	movff	??_ISR+6,fsr1l
  3847  00082E  C00B  FFEA         	movff	??_ISR+5,fsr0h
  3848  000832  C00A  FFE9         	movff	??_ISR+4,fsr0l
  3849  000836  C009  FFFB         	movff	??_ISR+3,pclatu
  3850  00083A  C008  FFFA         	movff	??_ISR+2,pclath
  3851  00083E  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3852  000840  0011               	retfie		f
  3853  000842                     __end_of_ISR:
  3854                           	opt stack 0
  3855                           tosu	equ	0xFFF
  3856                           tosh	equ	0xFFE
  3857                           tosl	equ	0xFFD
  3858                           pclatu	equ	0xFFB
  3859                           pclath	equ	0xFFA
  3860                           tblptru	equ	0xFF8
  3861                           tblptrh	equ	0xFF7
  3862                           tblptrl	equ	0xFF6
  3863                           tablat	equ	0xFF5
  3864                           prodh	equ	0xFF4
  3865                           prodl	equ	0xFF3
  3866                           intcon	equ	0xFF2
  3867                           postinc0	equ	0xFEE
  3868                           fsr0h	equ	0xFEA
  3869                           fsr0l	equ	0xFE9
  3870                           wreg	equ	0xFE8
  3871                           indf1	equ	0xFE7
  3872                           postinc1	equ	0xFE6
  3873                           fsr1h	equ	0xFE2
  3874                           fsr1l	equ	0xFE1
  3875                           indf2	equ	0xFDF
  3876                           postinc2	equ	0xFDE
  3877                           postdec2	equ	0xFDD
  3878                           fsr2h	equ	0xFDA
  3879                           fsr2l	equ	0xFD9
  3880                           status	equ	0xFD8
  3881                           
  3882 ;; *************** function _CanXmitResponse *****************
  3883 ;; Defined at:
  3884 ;;		line 183 in file "Can_XmitService.c"
  3885 ;; Parameters:    Size  Location     Type
  3886 ;;		None
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;		None
  3889 ;; Return value:  Size  Location     Type
  3890 ;;                  1    wreg      void 
  3891 ;; Registers used:
  3892 ;;		None
  3893 ;; Tracked objects:
  3894 ;;		On entry : 0/0
  3895 ;;		On exit  : 0/0
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3898 ;;      Params:         0       0       0       0
  3899 ;;      Locals:         0       0       0       0
  3900 ;;      Temps:          0       0       0       0
  3901 ;;      Totals:         0       0       0       0
  3902 ;;Total ram usage:        0 bytes
  3903 ;; Hardware stack levels used:    1
  3904 ;; This function calls:
  3905 ;;		Nothing
  3906 ;; This function is called by:
  3907 ;;		_ISR
  3908 ;; This function uses a non-reentrant model
  3909 ;;
  3910                           
  3911                           	psect	text26
  3912  000DD8                     __ptext26:
  3913                           	opt stack 0
  3914  000DD8                     _CanXmitResponse:
  3915                           	opt stack 22
  3916                           
  3917                           ;Can_XmitService.c: 185: TXB0CONbits.TXREQ = 0;
  3918                           
  3919                           ;incstack = 0
  3920  000DD8  010F               	movlb	15	; () banked
  3921  000DDA  9740               	bcf	64,3,b	;volatile
  3922                           
  3923                           ; BSR set to: 15
  3924  000DDC  0012               	return		;funcret
  3925  000DDE                     __end_of_CanXmitResponse:
  3926                           	opt stack 0
  3927                           tosu	equ	0xFFF
  3928                           tosh	equ	0xFFE
  3929                           tosl	equ	0xFFD
  3930                           pclatu	equ	0xFFB
  3931                           pclath	equ	0xFFA
  3932                           tblptru	equ	0xFF8
  3933                           tblptrh	equ	0xFF7
  3934                           tblptrl	equ	0xFF6
  3935                           tablat	equ	0xFF5
  3936                           prodh	equ	0xFF4
  3937                           prodl	equ	0xFF3
  3938                           intcon	equ	0xFF2
  3939                           postinc0	equ	0xFEE
  3940                           fsr0h	equ	0xFEA
  3941                           fsr0l	equ	0xFE9
  3942                           wreg	equ	0xFE8
  3943                           indf1	equ	0xFE7
  3944                           postinc1	equ	0xFE6
  3945                           fsr1h	equ	0xFE2
  3946                           fsr1l	equ	0xFE1
  3947                           indf2	equ	0xFDF
  3948                           postinc2	equ	0xFDE
  3949                           postdec2	equ	0xFDD
  3950                           fsr2h	equ	0xFDA
  3951                           fsr2l	equ	0xFD9
  3952                           status	equ	0xFD8
  3953                           
  3954 ;; *************** function _CanRCVResponse *****************
  3955 ;; Defined at:
  3956 ;;		line 191 in file "Can_XmitService.c"
  3957 ;; Parameters:    Size  Location     Type
  3958 ;;		None
  3959 ;; Auto vars:     Size  Location     Type
  3960 ;;		None
  3961 ;; Return value:  Size  Location     Type
  3962 ;;                  1    wreg      void 
  3963 ;; Registers used:
  3964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3965 ;; Tracked objects:
  3966 ;;		On entry : 0/0
  3967 ;;		On exit  : 0/0
  3968 ;;		Unchanged: 0/0
  3969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3970 ;;      Params:         0       0       0       0
  3971 ;;      Locals:         0       0       0       0
  3972 ;;      Temps:          0       0       0       0
  3973 ;;      Totals:         0       0       0       0
  3974 ;;Total ram usage:        0 bytes
  3975 ;; Hardware stack levels used:    1
  3976 ;; Hardware stack levels required when called:    1
  3977 ;; This function calls:
  3978 ;;		_ES_Timer_InitTimer
  3979 ;; This function is called by:
  3980 ;;		_ISR
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           	psect	text27
  3985  000D66                     __ptext27:
  3986                           	opt stack 0
  3987  000D66                     _CanRCVResponse:
  3988                           	opt stack 21
  3989                           
  3990                           ;Can_XmitService.c: 193: if (RXB0CONbits.RXFUL == 1) {
  3991                           
  3992                           ; BSR set to: 15
  3993                           ;incstack = 0
  3994  000D66  AE60               	btfss	3936,7,c	;volatile
  3995  000D68  0012               	return	
  3996                           
  3997                           ;Can_XmitService.c: 194: if (RXB0D0 == 0xAA) {
  3998  000D6A  0EAA               	movlw	170
  3999  000D6C  1866               	xorwf	3942,w,c	;volatile
  4000  000D6E  B4D8               	btfsc	status,2,c
  4001                           
  4002                           ;Can_XmitService.c: 195: LATA2 = 1;
  4003  000D70  8489               	bsf	3977,2,c	;volatile
  4004                           
  4005                           ;Can_XmitService.c: 196: }
  4006                           ;Can_XmitService.c: 197: RXB0CONbits.RXFUL = 0;
  4007  000D72  9E60               	bcf	3936,7,c	;volatile
  4008                           
  4009                           ;Can_XmitService.c: 199: ES_Timer_InitTimer(0, 50);
  4010  000D74  0E00               	movlw	0
  4011  000D76  6E02               	movwf	ES_Timer_InitTimer@NewTime+1,c
  4012  000D78  0E32               	movlw	50
  4013  000D7A  6E01               	movwf	ES_Timer_InitTimer@NewTime,c
  4014  000D7C  0E00               	movlw	0
  4015  000D7E  EC6A  F005         	call	_ES_Timer_InitTimer
  4016  000D82  0012               	return	
  4017  000D84                     __end_of_CanRCVResponse:
  4018                           	opt stack 0
  4019                           tosu	equ	0xFFF
  4020                           tosh	equ	0xFFE
  4021                           tosl	equ	0xFFD
  4022                           pclatu	equ	0xFFB
  4023                           pclath	equ	0xFFA
  4024                           tblptru	equ	0xFF8
  4025                           tblptrh	equ	0xFF7
  4026                           tblptrl	equ	0xFF6
  4027                           tablat	equ	0xFF5
  4028                           prodh	equ	0xFF4
  4029                           prodl	equ	0xFF3
  4030                           intcon	equ	0xFF2
  4031                           postinc0	equ	0xFEE
  4032                           fsr0h	equ	0xFEA
  4033                           fsr0l	equ	0xFE9
  4034                           wreg	equ	0xFE8
  4035                           indf1	equ	0xFE7
  4036                           postinc1	equ	0xFE6
  4037                           fsr1h	equ	0xFE2
  4038                           fsr1l	equ	0xFE1
  4039                           indf2	equ	0xFDF
  4040                           postinc2	equ	0xFDE
  4041                           postdec2	equ	0xFDD
  4042                           fsr2h	equ	0xFDA
  4043                           fsr2l	equ	0xFD9
  4044                           status	equ	0xFD8
  4045                           
  4046 ;; *************** function _ES_Timer_InitTimer *****************
  4047 ;; Defined at:
  4048 ;;		line 229 in file "ES_Timers.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;  Num             1    wreg     unsigned char 
  4051 ;;  NewTime         2    0[COMRAM] unsigned int 
  4052 ;; Auto vars:     Size  Location     Type
  4053 ;;  Num             1    4[COMRAM] unsigned char 
  4054 ;; Return value:  Size  Location     Type
  4055 ;;                  1    wreg      enum E15468
  4056 ;; Registers used:
  4057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4058 ;; Tracked objects:
  4059 ;;		On entry : 0/0
  4060 ;;		On exit  : 0/0
  4061 ;;		Unchanged: 0/0
  4062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4063 ;;      Params:         2       0       0       0
  4064 ;;      Locals:         1       0       0       0
  4065 ;;      Temps:          2       0       0       0
  4066 ;;      Totals:         5       0       0       0
  4067 ;;Total ram usage:        5 bytes
  4068 ;; Hardware stack levels used:    1
  4069 ;; This function calls:
  4070 ;;		Nothing
  4071 ;; This function is called by:
  4072 ;;		_CanRCVResponse
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           	psect	text28
  4077  000AD4                     __ptext28:
  4078                           	opt stack 0
  4079  000AD4                     _ES_Timer_InitTimer:
  4080                           	opt stack 21
  4081                           
  4082                           ;incstack = 0
  4083                           ;ES_Timer_InitTimer@Num stored from wreg
  4084  000AD4  6E05               	movwf	ES_Timer_InitTimer@Num,c
  4085                           
  4086                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  4087                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  4088                           ;ES_Timers.c: 236: (NewTime == 0) )
  4089  000AD6  0E10               	movlw	16
  4090  000AD8  6005               	cpfslt	ES_Timer_InitTimer@Num,c
  4091  000ADA  0012               	return	
  4092  000ADC  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4093  000ADE  0D02               	mullw	2
  4094  000AE0  0E21               	movlw	low _Timer2PostFunc
  4095  000AE2  24F3               	addwf	prodl,w,c
  4096  000AE4  6EF6               	movwf	tblptrl,c
  4097  000AE6  0E03               	movlw	high _Timer2PostFunc
  4098  000AE8  20F4               	addwfc	prodh,w,c
  4099  000AEA  6EF7               	movwf	tblptrh,c
  4100  000AEC                     	if	0	;There are less than 3 active tblptr bytes
  4101  000AEC                     	endif
  4102  000AEC  0009               	tblrd		*+
  4103  000AEE  50F5               	movf	tablat,w,c
  4104  000AF0  0009               	tblrd		*+
  4105  000AF2  10F5               	iorwf	tablat,w,c
  4106  000AF4  B4D8               	btfsc	status,2,c
  4107  000AF6  0012               	return	
  4108  000AF8  5001               	movf	ES_Timer_InitTimer@NewTime,w,c
  4109  000AFA  1002               	iorwf	ES_Timer_InitTimer@NewTime+1,w,c
  4110  000AFC  B4D8               	btfsc	status,2,c
  4111  000AFE  0012               	return	
  4112                           
  4113                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  4114                           
  4115                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  4116                           ;	Return value of _ES_Timer_InitTimer is never used
  4117  000B00  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4118  000B02  0D02               	mullw	2
  4119  000B04  0E60               	movlw	low _TMR_TimerArray
  4120  000B06  24F3               	addwf	prodl,w,c
  4121  000B08  6ED9               	movwf	fsr2l,c
  4122  000B0A  0E00               	movlw	high _TMR_TimerArray
  4123  000B0C  20F4               	addwfc	prodh,w,c
  4124  000B0E  6EDA               	movwf	fsr2h,c
  4125  000B10  C001  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  4126  000B14  C002  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  4127                           
  4128                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  4129  000B18  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4130  000B1A  0D02               	mullw	2
  4131  000B1C  0E01               	movlw	low _BitNum2SetMask
  4132  000B1E  24F3               	addwf	prodl,w,c
  4133  000B20  6EF6               	movwf	tblptrl,c
  4134  000B22  0E03               	movlw	high _BitNum2SetMask
  4135  000B24  20F4               	addwfc	prodh,w,c
  4136  000B26  6EF7               	movwf	tblptrh,c
  4137  000B28                     	if	0	;There are less than 3 active tblptr bytes
  4138  000B28                     	endif
  4139  000B28  0009               	tblrd		*+
  4140  000B2A  CFF5 F003          	movff	tablat,??_ES_Timer_InitTimer
  4141  000B2E  0009               	tblrd		*+
  4142  000B30  CFF5 F004          	movff	tablat,??_ES_Timer_InitTimer+1
  4143  000B34  5003               	movf	??_ES_Timer_InitTimer,w,c
  4144  000B36  1240               	iorwf	_TMR_ActiveFlags,f,c
  4145  000B38  5004               	movf	??_ES_Timer_InitTimer+1,w,c
  4146  000B3A  1241               	iorwf	_TMR_ActiveFlags+1,f,c
  4147  000B3C  0012               	return	
  4148  000B3E                     __end_of_ES_Timer_InitTimer:
  4149                           	opt stack 0
  4150                           tosu	equ	0xFFF
  4151                           tosh	equ	0xFFE
  4152                           tosl	equ	0xFFD
  4153                           pclatu	equ	0xFFB
  4154                           pclath	equ	0xFFA
  4155                           tblptru	equ	0xFF8
  4156                           tblptrh	equ	0xFF7
  4157                           tblptrl	equ	0xFF6
  4158                           tablat	equ	0xFF5
  4159                           prodh	equ	0xFF4
  4160                           prodl	equ	0xFF3
  4161                           intcon	equ	0xFF2
  4162                           postinc0	equ	0xFEE
  4163                           fsr0h	equ	0xFEA
  4164                           fsr0l	equ	0xFE9
  4165                           wreg	equ	0xFE8
  4166                           indf1	equ	0xFE7
  4167                           postinc1	equ	0xFE6
  4168                           fsr1h	equ	0xFE2
  4169                           fsr1l	equ	0xFE1
  4170                           indf2	equ	0xFDF
  4171                           postinc2	equ	0xFDE
  4172                           postdec2	equ	0xFDD
  4173                           fsr2h	equ	0xFDA
  4174                           fsr2l	equ	0xFD9
  4175                           status	equ	0xFD8
  4176                           
  4177 ;; *************** function _CanErrorResponse *****************
  4178 ;; Defined at:
  4179 ;;		line 204 in file "Can_XmitService.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;		None
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;		None
  4184 ;; Return value:  Size  Location     Type
  4185 ;;                  1    wreg      void 
  4186 ;; Registers used:
  4187 ;;		None
  4188 ;; Tracked objects:
  4189 ;;		On entry : 0/0
  4190 ;;		On exit  : 0/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4193 ;;      Params:         0       0       0       0
  4194 ;;      Locals:         0       0       0       0
  4195 ;;      Temps:          0       0       0       0
  4196 ;;      Totals:         0       0       0       0
  4197 ;;Total ram usage:        0 bytes
  4198 ;; Hardware stack levels used:    1
  4199 ;; This function calls:
  4200 ;;		Nothing
  4201 ;; This function is called by:
  4202 ;;		_ISR
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           	psect	text29
  4207  000DBA                     __ptext29:
  4208                           	opt stack 0
  4209  000DBA                     _CanErrorResponse:
  4210                           	opt stack 22
  4211                           
  4212                           ;Can_XmitService.c: 206: if (LATA0 == 1) {
  4213                           
  4214                           ;incstack = 0
  4215  000DBA  A089               	btfss	3977,0,c	;volatile
  4216  000DBC  D002               	goto	i2l435
  4217                           
  4218                           ;Can_XmitService.c: 207: LATA0 = 0;
  4219  000DBE  9089               	bcf	3977,0,c	;volatile
  4220                           
  4221                           ;Can_XmitService.c: 208: } else if (LATA0 == 0) {
  4222  000DC0  0012               	return	
  4223  000DC2                     i2l435:
  4224  000DC2  B089               	btfsc	3977,0,c	;volatile
  4225  000DC4  0012               	return	
  4226                           
  4227                           ;Can_XmitService.c: 209: LATA0 = 1;
  4228  000DC6  8089               	bsf	3977,0,c	;volatile
  4229  000DC8  0012               	return	
  4230  000DCA                     __end_of_CanErrorResponse:
  4231                           	opt stack 0
  4232                           tosu	equ	0xFFF
  4233                           tosh	equ	0xFFE
  4234                           tosl	equ	0xFFD
  4235                           pclatu	equ	0xFFB
  4236                           pclath	equ	0xFFA
  4237                           tblptru	equ	0xFF8
  4238                           tblptrh	equ	0xFF7
  4239                           tblptrl	equ	0xFF6
  4240                           tablat	equ	0xFF5
  4241                           prodh	equ	0xFF4
  4242                           prodl	equ	0xFF3
  4243                           intcon	equ	0xFF2
  4244                           postinc0	equ	0xFEE
  4245                           fsr0h	equ	0xFEA
  4246                           fsr0l	equ	0xFE9
  4247                           wreg	equ	0xFE8
  4248                           indf1	equ	0xFE7
  4249                           postinc1	equ	0xFE6
  4250                           fsr1h	equ	0xFE2
  4251                           fsr1l	equ	0xFE1
  4252                           indf2	equ	0xFDF
  4253                           postinc2	equ	0xFDE
  4254                           postdec2	equ	0xFDD
  4255                           fsr2h	equ	0xFDA
  4256                           fsr2l	equ	0xFD9
  4257                           status	equ	0xFD8
  4258                           
  4259 ;; *************** function _BusErrorResponse *****************
  4260 ;; Defined at:
  4261 ;;		line 213 in file "Can_XmitService.c"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;		None
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;		None
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  1    wreg      void 
  4268 ;; Registers used:
  4269 ;;		None
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4275 ;;      Params:         0       0       0       0
  4276 ;;      Locals:         0       0       0       0
  4277 ;;      Temps:          0       0       0       0
  4278 ;;      Totals:         0       0       0       0
  4279 ;;Total ram usage:        0 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; This function calls:
  4282 ;;		Nothing
  4283 ;; This function is called by:
  4284 ;;		_ISR
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           	psect	text30
  4289  000DE4                     __ptext30:
  4290                           	opt stack 0
  4291  000DE4                     _BusErrorResponse:
  4292                           	opt stack 22
  4293                           
  4294                           ;incstack = 0
  4295  000DE4  0012               	return		;funcret
  4296  000DE6                     __end_of_BusErrorResponse:
  4297                           	opt stack 0
  4298                           tosu	equ	0xFFF
  4299                           tosh	equ	0xFFE
  4300                           tosl	equ	0xFFD
  4301                           pclatu	equ	0xFFB
  4302                           pclath	equ	0xFFA
  4303                           tblptru	equ	0xFF8
  4304                           tblptrh	equ	0xFF7
  4305                           tblptrl	equ	0xFF6
  4306                           tablat	equ	0xFF5
  4307                           prodh	equ	0xFF4
  4308                           prodl	equ	0xFF3
  4309                           intcon	equ	0xFF2
  4310                           postinc0	equ	0xFEE
  4311                           fsr0h	equ	0xFEA
  4312                           fsr0l	equ	0xFE9
  4313                           wreg	equ	0xFE8
  4314                           indf1	equ	0xFE7
  4315                           postinc1	equ	0xFE6
  4316                           fsr1h	equ	0xFE2
  4317                           fsr1l	equ	0xFE1
  4318                           indf2	equ	0xFDF
  4319                           postinc2	equ	0xFDE
  4320                           postdec2	equ	0xFDD
  4321                           fsr2h	equ	0xFDA
  4322                           fsr2l	equ	0xFD9
  4323                           status	equ	0xFD8
  4324                           tosu	equ	0xFFF
  4325                           tosh	equ	0xFFE
  4326                           tosl	equ	0xFFD
  4327                           pclatu	equ	0xFFB
  4328                           pclath	equ	0xFFA
  4329                           tblptru	equ	0xFF8
  4330                           tblptrh	equ	0xFF7
  4331                           tblptrl	equ	0xFF6
  4332                           tablat	equ	0xFF5
  4333                           prodh	equ	0xFF4
  4334                           prodl	equ	0xFF3
  4335                           intcon	equ	0xFF2
  4336                           postinc0	equ	0xFEE
  4337                           fsr0h	equ	0xFEA
  4338                           fsr0l	equ	0xFE9
  4339                           wreg	equ	0xFE8
  4340                           indf1	equ	0xFE7
  4341                           postinc1	equ	0xFE6
  4342                           fsr1h	equ	0xFE2
  4343                           fsr1l	equ	0xFE1
  4344                           indf2	equ	0xFDF
  4345                           postinc2	equ	0xFDE
  4346                           postdec2	equ	0xFDD
  4347                           fsr2h	equ	0xFDA
  4348                           fsr2l	equ	0xFD9
  4349                           status	equ	0xFD8
  4350                           
  4351                           	psect	text31
  4352  000000                     __ptext31:
  4353                           	opt stack 0
  4354                           tosu	equ	0xFFF
  4355                           tosh	equ	0xFFE
  4356                           tosl	equ	0xFFD
  4357                           pclatu	equ	0xFFB
  4358                           pclath	equ	0xFFA
  4359                           tblptru	equ	0xFF8
  4360                           tblptrh	equ	0xFF7
  4361                           tblptrl	equ	0xFF6
  4362                           tablat	equ	0xFF5
  4363                           prodh	equ	0xFF4
  4364                           prodl	equ	0xFF3
  4365                           intcon	equ	0xFF2
  4366                           postinc0	equ	0xFEE
  4367                           fsr0h	equ	0xFEA
  4368                           fsr0l	equ	0xFE9
  4369                           wreg	equ	0xFE8
  4370                           indf1	equ	0xFE7
  4371                           postinc1	equ	0xFE6
  4372                           fsr1h	equ	0xFE2
  4373                           fsr1l	equ	0xFE1
  4374                           indf2	equ	0xFDF
  4375                           postinc2	equ	0xFDE
  4376                           postdec2	equ	0xFDD
  4377                           fsr2h	equ	0xFDA
  4378                           fsr2l	equ	0xFD9
  4379                           status	equ	0xFD8
  4380                           
  4381                           	psect	rparam
  4382  0000                     tosu	equ	0xFFF
  4383                           tosh	equ	0xFFE
  4384                           tosl	equ	0xFFD
  4385                           pclatu	equ	0xFFB
  4386                           pclath	equ	0xFFA
  4387                           tblptru	equ	0xFF8
  4388                           tblptrh	equ	0xFF7
  4389                           tblptrl	equ	0xFF6
  4390                           tablat	equ	0xFF5
  4391                           prodh	equ	0xFF4
  4392                           prodl	equ	0xFF3
  4393                           intcon	equ	0xFF2
  4394                           postinc0	equ	0xFEE
  4395                           fsr0h	equ	0xFEA
  4396                           fsr0l	equ	0xFE9
  4397                           wreg	equ	0xFE8
  4398                           indf1	equ	0xFE7
  4399                           postinc1	equ	0xFE6
  4400                           fsr1h	equ	0xFE2
  4401                           fsr1l	equ	0xFE1
  4402                           indf2	equ	0xFDF
  4403                           postinc2	equ	0xFDE
  4404                           postdec2	equ	0xFDD
  4405                           fsr2h	equ	0xFDA
  4406                           fsr2l	equ	0xFD9
  4407                           status	equ	0xFD8
  4408                           
  4409                           	psect	temp
  4410  00004A                     btemp:
  4411                           	opt stack 0
  4412  00004A                     	ds	1
  4413  0000                     int$flags	set	btemp
  4414                           tosu	equ	0xFFF
  4415                           tosh	equ	0xFFE
  4416                           tosl	equ	0xFFD
  4417                           pclatu	equ	0xFFB
  4418                           pclath	equ	0xFFA
  4419                           tblptru	equ	0xFF8
  4420                           tblptrh	equ	0xFF7
  4421                           tblptrl	equ	0xFF6
  4422                           tablat	equ	0xFF5
  4423                           prodh	equ	0xFF4
  4424                           prodl	equ	0xFF3
  4425                           intcon	equ	0xFF2
  4426                           postinc0	equ	0xFEE
  4427                           fsr0h	equ	0xFEA
  4428                           fsr0l	equ	0xFE9
  4429                           wreg	equ	0xFE8
  4430                           indf1	equ	0xFE7
  4431                           postinc1	equ	0xFE6
  4432                           fsr1h	equ	0xFE2
  4433                           fsr1l	equ	0xFE1
  4434                           indf2	equ	0xFDF
  4435                           postinc2	equ	0xFDE
  4436                           postdec2	equ	0xFDD
  4437                           fsr2h	equ	0xFDA
  4438                           fsr2l	equ	0xFD9
  4439                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    90
    Data        0
    BSS         67
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     50      73
    BANK0           160     13      57
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostCan_XmitService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(COMRAM[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [1] size(2) Largest target is 1
		 -> PostCan_XmitService(), 

    S91$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    S70$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCan_XmitService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCan_XmitService(), 

    S70$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCan_XmitService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCan_XmitService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    _PostCan_XmitService->_ES_PostToService
    _ES_DeQueue->___wmul
    _InitCan_XmitService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in COMRAM

    _CanRCVResponse->_ES_Timer_InitTimer

Critical Paths under _main in BANK0

    _main->_ES_Run
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostCan_XmitService
    _ES_Initialize->_InitCan_XmitService

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   11874
                                             12 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     428
                                             21 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0    7263
                                              7 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                 _RunCan_XmitService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    3693
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    3693
                                              3 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
                _PostCan_XmitService *
 ---------------------------------------------------------------------------------
 (4) _PostCan_XmitService                                  3     0      3    3250
                                              0 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     443
                                             21 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                             21 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunCan_XmitService                                   6     3      3     195
                                             21 COMRAM     6     3      3
                    _InitCanHardware
                           _InitPins
                     _ToggleDebugLED
 ---------------------------------------------------------------------------------
 (3) _ToggleDebugLED                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2746
                                             33 COMRAM    10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     292
                                             21 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                             21 COMRAM     1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    4115
                                              4 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                _InitCan_XmitService *
 ---------------------------------------------------------------------------------
 (2) _InitCan_XmitService                                  4     4      0    3184
                                              0 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    3119
                                             44 COMRAM     6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2815
                                             33 COMRAM    11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1586
                                             27 COMRAM     6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     553
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     211
                                             23 COMRAM     2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      90
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     345
                                             21 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 16    16      0     208
                                              5 COMRAM    16    16      0
                   _BusErrorResponse
                   _CanErrorResponse
                     _CanRCVResponse
                    _CanXmitResponse
 ---------------------------------------------------------------------------------
 (9) _CanXmitResponse                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CanRCVResponse                                       0     0      0     208
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (10) _ES_Timer_InitTimer                                  5     3      2     208
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (9) _CanErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _BusErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitCan_XmitService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunCan_XmitService *
       _InitCanHardware
       _InitPins
       _ToggleDebugLED
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostCan_XmitService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _BusErrorResponse
   _CanErrorResponse
   _CanRCVResponse
     _ES_Timer_InitTimer
   _CanXmitResponse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      D      39       4       35.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     32      49       1       77.7%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      82       9        0.0%
DATA                 0      0      82      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Nov 22 22:28:05 2016

                   ??__HW_Timer_Init 0018                  ES_CheckUserEvents@i 0016  
                __HW_Timer_Init@Rate 0016                  ___wmul@multiplicand 001E  
          __size_of_BusErrorResponse 0002                                  l307 0974  
                                l444 097A                                  l447 09DE  
                                l456 0DB2                __end_of_ES_Initialize 0698  
                                _GIE 007F97                                  _ISR 0008  
                       ___awmod@sign 001B              __end_of_Check4Keystroke 0DE2  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 002A  
            ES_EnQueueFIFO@Event2Add 0024                    ?_ES_PostToService 002D  
                               ?_ISR 0001                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 0033                                 l2210 0A78  
                               l2220 0A9A                                 l2222 0A9E  
                               l2230 0ABC                                 l2214 0A84  
                               l2400 0CDC                                 l2320 056A  
                               l2234 0ACA                                 l2226 0AB2  
                               l2218 0A92                                 l2308 04C4  
                               l2254 08F2                                 l2270 0BA0  
                               l2502 0C2A                                 l2318 0532  
                               l2408 0CF4                                 l2530 0610  
                               l2290 0A60                                 l2444 0474  
                               l2508 0C3C                                 l2276 09FA  
                               l2526 060C                                 l2542 0694  
                               l2518 05BE                                 l2454 04B0  
                               l2286 0A5C                                 l2448 048C  
                               l2472 0D9A                                 l2552 0714  
                               l2538 068E                                 l2562 077A  
                               l2546 069A                                 l2570 0CB2  
                               l2476 0DA0                                 l2572 0CB8  
                               l2494 0C78                                 l2558 0768  
                               l2680 0940                                 l2682 094E  
                               l2676 0924                                 l2678 0932  
                               l2686 095C                                 STR_1 035B  
                               STR_2 0376                                 STR_3 038E  
                               STR_4 03A5                                 _LATA 000F89  
                               _LATB 000F8A                                 u1544 0A18  
                               u1545 0A12                                 _PIE1 000F9D  
                               u1808 0668                                 u1809 0684  
                               u1678 0BC2                                 u1598 051A  
                               u1679 0BDA                                 u1848 073E  
                               u1849 0756                                 _PEIE 007F96  
                               _SCS1 007E99                     ?_CanXmitResponse 0001  
                 ??_ES_PostToService 0030                                 _main 08F6  
                        ?_ES_DeQueue 0022                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 indf1 000FE7  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 004A  
                      main@ErrorType 0098                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0016                        __CFG_MCLRE$ON 000000  
       InitCan_XmitService@ThisEvent 008C                         ___param_bank 000010  
            __end_of_InitCanHardware 09F2                                ??_ISR 0006  
                 ES_Run@HighestPrior 0097                                ?_main 0001  
              __end_of_ES_Timer_Init 0DD8                      __end_of___awmod 0AD4  
                    __end_of___lbmod 0CFC                                _T1CON 000FCD  
                         _DistList00 0359                                _LATA0 007C48  
                              _LATA1 007C49                                _LATA2 007C4A  
                              _LATA3 007C4B                                _LATB2 007C52  
                              _IRCF0 007E9C                                _IRCF1 007E9D  
                              _IRCF2 007E9E                                _ERRIE 007D1D  
                              _ERRIF 007D25                                i2l160 0806  
                              i2l435 0DC2                                _IRXIE 007D1F  
                              _IRXIF 007D27                                _PORTA 000F80  
                              _PORTB 000F81                        __CFG_PWRT$OFF 000000  
                              _Ready 003C                                _putch 0DE2  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                                status 000FD8  
                    __initialization 0CFC               ES_GetMSBitSet@LoopCntr 001F  
         __end_of_ES_CheckUserEvents 0BE4                         __end_of_main 0976  
                  ES_Timer_Init@Rate 0018                     __end_of_InitPins 0CA8  
                __end_of_EventQueues 0357                               ??_main 0033  
                      __activetblptr 000002                  __size_of_ES_DeQueue 00FE  
                    _Nybble2MSBitNum 0341     __end_of__HW_Process_Pending_Ints 0DAA  
                   ?_Check4Keystroke 0001                    ?_CanErrorResponse 0001  
                             _ADCON1 000FC1                               _CCP1IF 007CF2  
                             _CANCON 000F6F                               _CCPR1H 000FBF  
                             _CCPR1L 000FBE                   ??_CanErrorResponse 0001  
                             _CIOCON 000F73                           _MyPriority 0045  
                             ?_putch 0001                     ??_ES_GetMSBitSet 0018  
                             i2l2120 07F2                               i2l2114 07E8  
                             i2l2108 07DE                               i2l2126 07FC  
                             _INTCON 000FF2                               _RXB0D0 000F66  
                             _RXB0IE 007D18                               _RXB0IF 007D20  
                             _ES_Run 0698                               _TXB0D0 000F46  
                             _TXB0D1 000F47                               _TXB0IF 007D22  
                   ??_CanRCVResponse 0006                     ??_ES_EnQueueFIFO 0027  
                     _Timer2PostFunc 0321                               _Queue0 0080  
                     _SysTickCounter 003E                               ___wmul 0D22  
                          ??___awmod 001A                            ??___lbmod 0017  
                   ?_InitCanHardware 0001                  _PostCan_XmitService 0D84  
        __size_of_ES_Timer_InitTimer 006A                               clear_0 0D02  
                             clear_1 0D0E                     _BusErrorResponse 0DE4  
                    ___awmod@divisor 0018            ES_Timer_InitTimer@NewTime 0001  
                    ___awmod@counter 001A                               _printf 0CA8  
                        ISR@LastTime 0038               ES_InitQueue@pThisQueue 0019  
                       __mediumconst 0000                          ISR@NextTime 003A  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                               putch@c 0001  
        __size_of_ES_Timer_Tick_Resp 00F8                 ES_DeQueue@pThisQueue 002A  
            ES_GetMSBitSet@Val2Check 0016                 ?_PostCan_XmitService 008C  
        InitCan_XmitService@Priority 008F                      ___lbmod@divisor 0016  
                         __accesstop 0060              __end_of__initialization 0D14  
             __end_of_Timer2PostFunc 0341                      ___lbmod@counter 0018  
                    __CFG_PBADEN$OFF 000000                        ___rparam_used 000001  
                        _EventQueues 0354                       __pcstackCOMRAM 0001  
                      ?_ES_InitQueue 0016              __end_of_Nybble2MSBitNum 0350  
                      __end_of_putch 0DE4                      _TMR_ActiveFlags 0040  
            ES_GetMSBitSet@ReturnVal 001D          __end_of_InitCan_XmitService 0C7C  
                     _TMR_TimerArray 0060                ??_PostCan_XmitService 0033  
           ES_EnQueueFIFO@pThisQueue 002B                              ??_putch 0016  
           __HW_Process_Pending_Ints 0D98                           __pbssBANK0 0060  
                          ?_InitPins 0001                              ?_ES_Run 0001  
                       ??_ES_DeQueue 0026          __size_of_RunCan_XmitService 0034  
          __size_of_ES_PostToService 0066                       ??_ES_InitQueue 0019  
                            ?___wmul 001C                              _CCP1CON 000FBD  
                            _ECANCON 000F77                              ?_printf 0016  
            __size_of_ToggleDebugLED 0010                   __end_of_ES_DeQueue 04B4  
                            _TXB0DLC 000F45                           ??_InitPins 0016  
                    __size_of_ES_Run 00E8               __size_of_ES_Initialize 00EC  
                            __Hparam 0000                              __Lparam 0000  
           __size_of_CanXmitResponse 0006                              ___awmod 0A64  
                            ___lbmod 0CD2                      __size_of___wmul 0026  
                       __psmallconst 0300                ES_Timer_InitTimer@Num 0005  
                            __pcinit 0CFC                              __ramtop 0300  
                            __ptext0 08F6                              __ptext1 0CA8  
                            __ptext2 0DE2                              __ptext3 0698  
                            __ptext4 0D98                              __ptext5 04B4  
                            __ptext6 0D84                              __ptext7 09F2  
                            __ptext8 0C1A                              __ptext9 0DAA  
                    __size_of_printf 002A                         __size_of_ISR 083A  
            __size_of__HW_Timer_Init 001E                     ___awmod@dividend 0016  
                 _ES_CheckUserEvents 0BA4                      ES_Run@ThisEvent 0047  
                     __pintcode_body 0780                 end_of_initialization 0D14  
                ?_ES_CheckUserEvents 0001             __end_of_BusErrorResponse 0DE6  
                      __Lmediumconst 0000                              int_func 0780  
       ES_PostToService@WhichService 0032               __size_of_ES_Timer_Init 000E  
          __size_of_CanErrorResponse 0010                              printf@c 001A  
                            printf@f 0016                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                 ??_ES_CheckUserEvents 0016  
                      _ES_Initialize 05AC                     ___lbmod@dividend 0017  
                          _TRISAbits 000F92                            _TRISBbits 000F93  
               __end_of_ES_EventList 0359                 __end_of_ES_InitQueue 0C1A  
                     ES_Initialize@i 0092                          ___lbmod@rem 0019  
           __size_of_Check4Keystroke 0004                       __end_of_ES_Run 0780  
        RunCan_XmitService@ThisEvent 0016                   __end_of_DistList00 035B  
                   _ES_PostToService 0B3E           __end_of_ES_Timer_InitTimer 0B3E  
               __end_of_ServDescList 0354                       __end_of___wmul 0D48  
                  ??_CanXmitResponse 0001                       _ToggleDebugLED 0DAA  
                     ?_ES_Initialize 0090           ??__HW_Process_Pending_Ints 0033  
                      _ES_Timer_Init 0DCA                       __end_of_printf 0CD2  
           __size_of_InitCanHardware 007C           __end_of_ES_Timer_Tick_Resp 05AC  
                start_initialization 0CFC                          __end_of_ISR 0842  
                        _CANSTATbits 000F6E                             ??_ES_Run 0093  
                   __CFG_OSC$IRCIO67 000000                            _TickCount 0046  
                  __size_of_InitPins 002C              __size_of_ES_GetMSBitSet 0072  
                           ??___wmul 0020               __end_of_ToggleDebugLED 0DBA  
            __size_of_CanRCVResponse 001E              __size_of_ES_EnQueueFIFO 00B4  
                           ??_printf 0018                       ?_ES_Timer_Init 0018  
                     __HW_Timer_Init 0D48          __end_of_PostCan_XmitService 0D98  
                        __pbssCOMRAM 0033                        __pcstackBANK0 008C  
                        _BRGCON1bits 000F70                          _BRGCON2bits 000F71  
                 ES_InitQueue@pBlock 0016                          _BRGCON3bits 000F72  
       __size_of_InitCan_XmitService 002E           __end_of_RunCan_XmitService 0C4E  
                      __PRIMASK_temp 0042                     _CanErrorResponse 0DBA  
                  ??_Check4Keystroke 0016                            __pintcode 0008  
                           ?___awmod 0016                             ?___lbmod 0016  
                    ?_ToggleDebugLED 0001                      ??_ES_Initialize 0033  
           ES_PostToService@TheEvent 002D               __end_of__HW_Timer_Init 0D66  
                        __smallconst 0300                __size_of_ES_InitQueue 0036  
       PostCan_XmitService@ThisEvent 008C                       __size_of_putch 0002  
               ES_Initialize@NewRate 0090                    ??_InitCanHardware 0016  
          ES_GetMSBitSet@Nybble2Test 001E                    ?_BusErrorResponse 0001  
                     ___wmul@product 0020                   ??_BusErrorResponse 0001  
                           _RXF0EIDH 000F02                             _RXF0EIDL 000F03  
                           _RXF0SIDH 000F00                         _ES_EventList 0357  
                           _RXF0SIDL 000F01                             _TXB0EIDH 000F43  
                           _TXB0EIDL 000F44                             _RXM0EIDH 000F1A  
                           _RXM0EIDL 000F1B                             _TXB0SIDH 000F41  
                           _TXB0SIDL 000F42                         _ES_InitQueue 0BE4  
                           _RXM0SIDH 000F18                             _RXM0SIDL 000F19  
                    ??_ES_Timer_Init 001A                      ?__HW_Timer_Init 0016  
                  ___wmul@multiplier 001C                   ES_DeQueue@SaveCrit 0028  
               ES_EnQueueFIFO@pBlock 0022             __end_of_ES_PostToService 0BA4  
                     _BitNum2SetMask 0301                         _ServDescList 0350  
                           _InitPins 0C7C                      _CanXmitResponse 0DD8  
                           __Hrparam 0000                       _ES_GetMSBitSet 09F2  
                           __Lrparam 0000                     __size_of___awmod 0070  
                   __size_of___lbmod 002A          __size_of_ES_CheckUserEvents 0040  
                     _CanRCVResponse 0D66                       _ES_EnQueueFIFO 0842  
                 _ES_Timer_InitTimer 0AD4               __end_of_BitNum2SetMask 0321  
                           __ptext10 0C7C                             __ptext11 0976  
                           __ptext20 0D22                             __ptext12 03B6  
                           __ptext21 0A64                             __ptext13 0CD2  
                           __ptext30 0DE4                             __ptext22 0DCA  
                           __ptext14 0BA4                             __ptext31 0000  
                           __ptext23 0D48                             __ptext15 0DDE  
                           __ptext24 0BE4                             __ptext16 05AC  
                           __ptext17 0C4E                             __ptext26 0DD8  
                           __ptext18 0B3E                             __ptext27 0D66  
                           __ptext19 0842                             __ptext28 0AD4  
                           __ptext29 0DBA    ES_Timer_Tick_Resp@NeedsProcessing 0036  
                ?_ES_Timer_InitTimer 0001                        __size_of_main 0080  
                 _ES_Timer_Tick_Resp 04B4               __end_of_ES_GetMSBitSet 0A64  
                ?_ES_Timer_Tick_Resp 0001               __end_of_CanRCVResponse 0D84  
             __end_of_ES_EnQueueFIFO 08F6                             int$flags 004A  
                _InitCan_XmitService 0C4E                 ??_ES_Timer_InitTimer 0003  
                  ES_DeQueue@NumLeft 0029                          _RXB0CONbits 000F60  
           __end_of_CanErrorResponse 0DCA                 ??_ES_Timer_Tick_Resp 008F  
      RunCan_XmitService@ReturnEvent 0019                 ?_InitCan_XmitService 0001  
            __end_of_CanXmitResponse 0DDE                      _Check4Keystroke 0DDE  
                           intlevel2 0000                           _ES_DeQueue 03B6  
  __size_of__HW_Process_Pending_Ints 0012            ?__HW_Process_Pending_Ints 0001  
                        _TXB0CONbits 000F40                      ?_ES_GetMSBitSet 0016  
                   ??_ToggleDebugLED 0016  ES_Timer_Tick_Resp@NextTimer2Process 0044  
                 _RunCan_XmitService 0C1A                             printf@ap 0018  
                    ?_CanRCVResponse 0001                      ?_ES_EnQueueFIFO 0022  
                   ES_DeQueue@pBlock 0022                  ?_RunCan_XmitService 0016  
                    _InitCanHardware 0976               ES_DeQueue@pReturnEvent 0024  
              ES_InitQueue@BlockSize 0018                ??_InitCan_XmitService 0033  
       __size_of_PostCan_XmitService 0014                 ??_RunCan_XmitService 0019  
