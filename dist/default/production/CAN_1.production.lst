

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Nov 16 14:16:00 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           	psect	smallconst
    49  000300                     __psmallconst:
    50                           	opt stack 0
    51  000300  00                 	db	0
    52  000301                     _BitNum2SetMask:
    53                           	opt stack 0
    54  000301  0001               	dw	1
    55  000303  0002               	dw	2
    56  000305  0004               	dw	4
    57  000307  0008               	dw	8
    58  000309  0010               	dw	16
    59  00030B  0020               	dw	32
    60  00030D  0040               	dw	64
    61  00030F  0080               	dw	128
    62  000311  0100               	dw	256
    63  000313  0200               	dw	512
    64  000315  0400               	dw	1024
    65  000317  0800               	dw	2048
    66  000319  1000               	dw	4096
    67  00031B  2000               	dw	8192
    68  00031D  4000               	dw	16384
    69  00031F  8000               	dw	32768
    70  000321                     __end_of_BitNum2SetMask:
    71                           	opt stack 0
    72  000321                     _Timer2PostFunc:
    73                           	opt stack 0
    74  000321  64                 	db	low _PostCan_XmitService
    75  000322  0D                 	db	high _PostCan_XmitService
    76  000323  00                 	db	0
    77  000324  00                 	db	0
    78  000325  00                 	db	0
    79  000326  00                 	db	0
    80  000327  00                 	db	0
    81  000328  00                 	db	0
    82  000329  00                 	db	0
    83  00032A  00                 	db	0
    84  00032B  00                 	db	0
    85  00032C  00                 	db	0
    86  00032D  00                 	db	0
    87  00032E  00                 	db	0
    88  00032F  00                 	db	0
    89  000330  00                 	db	0
    90  000331  00                 	db	0
    91  000332  00                 	db	0
    92  000333  00                 	db	0
    93  000334  00                 	db	0
    94  000335  00                 	db	0
    95  000336  00                 	db	0
    96  000337  00                 	db	0
    97  000338  00                 	db	0
    98  000339  00                 	db	0
    99  00033A  00                 	db	0
   100  00033B  00                 	db	0
   101  00033C  00                 	db	0
   102  00033D  00                 	db	0
   103  00033E  00                 	db	0
   104  00033F  00                 	db	0
   105  000340  00                 	db	0
   106  000341                     __end_of_Timer2PostFunc:
   107                           	opt stack 0
   108  000341                     _Nybble2MSBitNum:
   109                           	opt stack 0
   110  000341  00                 	db	0
   111  000342  01                 	db	1
   112  000343  01                 	db	1
   113  000344  02                 	db	2
   114  000345  02                 	db	2
   115  000346  02                 	db	2
   116  000347  02                 	db	2
   117  000348  03                 	db	3
   118  000349  03                 	db	3
   119  00034A  03                 	db	3
   120  00034B  03                 	db	3
   121  00034C  03                 	db	3
   122  00034D  03                 	db	3
   123  00034E  03                 	db	3
   124  00034F  03                 	db	3
   125  000350                     __end_of_Nybble2MSBitNum:
   126                           	opt stack 0
   127  000350                     _ServDescList:
   128                           	opt stack 0
   129  000350  36                 	db	low _InitCan_XmitService
   130  000351  0C                 	db	high _InitCan_XmitService
   131  000352  02                 	db	low _RunCan_XmitService
   132  000353  0C                 	db	high _RunCan_XmitService
   133  000354                     __end_of_ServDescList:
   134                           	opt stack 0
   135  000354                     _EventQueues:
   136                           	opt stack 0
   137  000354  80                 	db	low _Queue0
   138  000355  00                 	db	high _Queue0
   139  000356  04                 	db	4
   140  000357                     __end_of_EventQueues:
   141                           	opt stack 0
   142  000357                     _ES_EventList:
   143                           	opt stack 0
   144  000357  CE                 	db	low _Check4Keystroke
   145  000358  0D                 	db	high _Check4Keystroke
   146  000359                     __end_of_ES_EventList:
   147                           	opt stack 0
   148  000359                     _DistList00:
   149                           	opt stack 0
   150  000359  64                 	db	low _PostCan_XmitService
   151  00035A  0D                 	db	high _PostCan_XmitService
   152  00035B                     __end_of_DistList00:
   153                           	opt stack 0
   154  0000                     _RXF0SIDH	set	3840
   155  0000                     _RXF0SIDL	set	3841
   156  0000                     _RXM0SIDH	set	3864
   157  0000                     _RXM0SIDL	set	3865
   158  0000                     _TXB0CONbits	set	3904
   159  0000                     _TXB0D0	set	3910
   160  0000                     _TXB0DLC	set	3909
   161  0000                     _TXB0SIDH	set	3905
   162  0000                     _TXB0SIDL	set	3906
   163  0000                     _ADCON1	set	4033
   164  0000                     _BRGCON1bits	set	3952
   165  0000                     _BRGCON2bits	set	3953
   166  0000                     _BRGCON3bits	set	3954
   167  0000                     _CANCON	set	3951
   168  0000                     _CANSTATbits	set	3950
   169  0000                     _CCP1CON	set	4029
   170  0000                     _CCPR1H	set	4031
   171  0000                     _CCPR1L	set	4030
   172  0000                     _CIOCON	set	3955
   173  0000                     _ECANCON	set	3959
   174  0000                     _INTCON	set	4082
   175  0000                     _LATA	set	3977
   176  0000                     _LATB	set	3978
   177  0000                     _PIE1	set	3997
   178  0000                     _PORTA	set	3968
   179  0000                     _PORTB	set	3969
   180  0000                     _RXB0CONbits	set	3936
   181  0000                     _T1CON	set	4045
   182  0000                     _TRISAbits	set	3986
   183  0000                     _TRISBbits	set	3987
   184  0000                     _CCP1IF	set	31986
   185  0000                     _ERRIE	set	32029
   186  0000                     _ERRIF	set	32037
   187  0000                     _GIE	set	32663
   188  0000                     _IRCF0	set	32412
   189  0000                     _IRCF1	set	32413
   190  0000                     _IRCF2	set	32414
   191  0000                     _IRXIE	set	32031
   192  0000                     _IRXIF	set	32039
   193  0000                     _LATA0	set	31816
   194  0000                     _LATA1	set	31817
   195  0000                     _LATA2	set	31818
   196  0000                     _LATA3	set	31819
   197  0000                     _LATB2	set	31826
   198  0000                     _PEIE	set	32662
   199  0000                     _RXB0IE	set	32024
   200  0000                     _RXB0IF	set	32032
   201  0000                     _SCS1	set	32409
   202  0000                     _TXB0IF	set	32034
   203  00035B                     STR_1:
   204  00035B  46                 	db	70	;'F'
   205  00035C  61                 	db	97	;'a'
   206  00035D  69                 	db	105	;'i'
   207  00035E  6C                 	db	108	;'l'
   208  00035F  65                 	db	101	;'e'
   209  000360  64                 	db	100	;'d'
   210  000361  20                 	db	32
   211  000362  6F                 	db	111	;'o'
   212  000363  6E                 	db	110	;'n'
   213  000364  20                 	db	32
   214  000365  61                 	db	97	;'a'
   215  000366  74                 	db	116	;'t'
   216  000367  74                 	db	116	;'t'
   217  000368  65                 	db	101	;'e'
   218  000369  6D                 	db	109	;'m'
   219  00036A  70                 	db	112	;'p'
   220  00036B  74                 	db	116	;'t'
   221  00036C  20                 	db	32
   222  00036D  74                 	db	116	;'t'
   223  00036E  6F                 	db	111	;'o'
   224  00036F  20                 	db	32
   225  000370  50                 	db	80	;'P'
   226  000371  6F                 	db	111	;'o'
   227  000372  73                 	db	115	;'s'
   228  000373  74                 	db	116	;'t'
   229  000374  0A                 	db	10
   230  000375  00                 	db	0
   231  000376                     STR_2:
   232  000376  46                 	db	70	;'F'
   233  000377  61                 	db	97	;'a'
   234  000378  69                 	db	105	;'i'
   235  000379  6C                 	db	108	;'l'
   236  00037A  65                 	db	101	;'e'
   237  00037B  64                 	db	100	;'d'
   238  00037C  20                 	db	32
   239  00037D  6F                 	db	111	;'o'
   240  00037E  6E                 	db	110	;'n'
   241  00037F  20                 	db	32
   242  000380  4E                 	db	78	;'N'
   243  000381  55                 	db	85	;'U'
   244  000382  4C                 	db	76	;'L'
   245  000383  4C                 	db	76	;'L'
   246  000384  20                 	db	32
   247  000385  70                 	db	112	;'p'
   248  000386  6F                 	db	111	;'o'
   249  000387  69                 	db	105	;'i'
   250  000388  6E                 	db	110	;'n'
   251  000389  74                 	db	116	;'t'
   252  00038A  65                 	db	101	;'e'
   253  00038B  72                 	db	114	;'r'
   254  00038C  0A                 	db	10
   255  00038D  00                 	db	0
   256  00038E                     STR_3:
   257  00038E  46                 	db	70	;'F'
   258  00038F  61                 	db	97	;'a'
   259  000390  69                 	db	105	;'i'
   260  000391  6C                 	db	108	;'l'
   261  000392  65                 	db	101	;'e'
   262  000393  64                 	db	100	;'d'
   263  000394  20                 	db	32
   264  000395  49                 	db	73	;'I'
   265  000396  6E                 	db	110	;'n'
   266  000397  69                 	db	105	;'i'
   267  000398  74                 	db	116	;'t'
   268  000399  69                 	db	105	;'i'
   269  00039A  61                 	db	97	;'a'
   270  00039B  6C                 	db	108	;'l'
   271  00039C  69                 	db	105	;'i'
   272  00039D  7A                 	db	122	;'z'
   273  00039E  61                 	db	97	;'a'
   274  00039F  74                 	db	116	;'t'
   275  0003A0  69                 	db	105	;'i'
   276  0003A1  6F                 	db	111	;'o'
   277  0003A2  6E                 	db	110	;'n'
   278  0003A3  0A                 	db	10
   279  0003A4  00                 	db	0
   280  0003A5                     STR_4:
   281  0003A5  4F                 	db	79	;'O'
   282  0003A6  74                 	db	116	;'t'
   283  0003A7  68                 	db	104	;'h'
   284  0003A8  65                 	db	101	;'e'
   285  0003A9  72                 	db	114	;'r'
   286  0003AA  20                 	db	32
   287  0003AB  46                 	db	70	;'F'
   288  0003AC  61                 	db	97	;'a'
   289  0003AD  69                 	db	105	;'i'
   290  0003AE  6C                 	db	108	;'l'
   291  0003AF  75                 	db	117	;'u'
   292  0003B0  72                 	db	114	;'r'
   293  0003B1  65                 	db	101	;'e'
   294  0003B2  0A                 	db	10
   295  0003B3  00                 	db	0
   296                           
   297                           ; #config settings
   298  0003B4  00                 	db	0	; dummy byte at the end
   299  0000                     
   300                           	psect	cinit
   301  000CE4                     __pcinit:
   302                           	opt stack 0
   303  000CE4                     start_initialization:
   304                           	opt stack 0
   305  000CE4                     __initialization:
   306                           	opt stack 0
   307                           
   308                           ; Clear objects allocated to BANK0 (44 bytes)
   309  000CE4  EE00  F060         	lfsr	0,__pbssBANK0
   310  000CE8  0E2C               	movlw	44
   311  000CEA                     clear_0:
   312  000CEA  6AEE               	clrf	postinc0,c
   313  000CEC  06E8               	decf	wreg,f,c
   314  000CEE  E1FD               	bnz	clear_0
   315                           
   316                           ; Clear objects allocated to COMRAM (23 bytes)
   317  000CF0  EE00  F033         	lfsr	0,__pbssCOMRAM
   318  000CF4  0E17               	movlw	23
   319  000CF6                     clear_1:
   320  000CF6  6AEE               	clrf	postinc0,c
   321  000CF8  06E8               	decf	wreg,f,c
   322  000CFA  E1FD               	bnz	clear_1
   323  000CFC                     end_of_initialization:
   324                           	opt stack 0
   325  000CFC                     __end_of__initialization:
   326                           	opt stack 0
   327  000CFC  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   328  000CFE  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   329  000D00  0E00               	movlw	low (__Lmediumconst shr (0+16))
   330  000D02  6EF8               	movwf	tblptru,c
   331  000D04  0100               	movlb	0
   332  000D06  EF7B  F004         	goto	_main	;jump to C main() function
   333                           tblptru	equ	0xFF8
   334                           postinc0	equ	0xFEE
   335                           wreg	equ	0xFE8
   336                           
   337                           	psect	bssCOMRAM
   338  000033                     __pbssCOMRAM:
   339                           	opt stack 0
   340  000033                     ES_Timer_Tick_Resp@NewEvent:
   341                           	opt stack 0
   342  000033                     	ds	3
   343  000036                     ES_Timer_Tick_Resp@NeedsProcessing:
   344                           	opt stack 0
   345  000036                     	ds	2
   346  000038                     ISR@LastTime:
   347                           	opt stack 0
   348  000038                     	ds	2
   349  00003A                     ISR@NextTime:
   350                           	opt stack 0
   351  00003A                     	ds	2
   352  00003C                     _Ready:
   353                           	opt stack 0
   354  00003C                     	ds	2
   355  00003E                     _SysTickCounter:
   356                           	opt stack 0
   357  00003E                     	ds	2
   358  000040                     _TMR_ActiveFlags:
   359                           	opt stack 0
   360  000040                     	ds	2
   361  000042                     __PRIMASK_temp:
   362                           	opt stack 0
   363  000042                     	ds	2
   364  000044                     ES_Timer_Tick_Resp@NextTimer2Process:
   365                           	opt stack 0
   366  000044                     	ds	1
   367  000045                     _MyPriority:
   368                           	opt stack 0
   369  000045                     	ds	1
   370  000046                     _TickCount:
   371                           	opt stack 0
   372  000046                     	ds	1
   373  000047                     ES_Run@ThisEvent:
   374                           	opt stack 0
   375  000047                     	ds	3
   376                           tblptru	equ	0xFF8
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           
   380                           	psect	bssBANK0
   381  000060                     __pbssBANK0:
   382                           	opt stack 0
   383  000060                     _TMR_TimerArray:
   384                           	opt stack 0
   385  000060                     	ds	32
   386  000080                     _Queue0:
   387                           	opt stack 0
   388  000080                     	ds	12
   389                           tblptru	equ	0xFF8
   390                           postinc0	equ	0xFEE
   391                           wreg	equ	0xFE8
   392                           
   393                           	psect	cstackBANK0
   394  00008C                     __pcstackBANK0:
   395                           	opt stack 0
   396  00008C                     InitCan_XmitService@ThisEvent:
   397                           	opt stack 0
   398  00008C                     PostCan_XmitService@ThisEvent:
   399                           	opt stack 0
   400                           
   401                           ; 3 bytes @ 0x0
   402  00008C                     	ds	3
   403  00008F                     ??_ES_Timer_Tick_Resp:
   404  00008F                     InitCan_XmitService@Priority:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0x3
   408  00008F                     	ds	1
   409  000090                     ES_Initialize@NewRate:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x4
   413  000090                     	ds	2
   414  000092                     ES_Initialize@i:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x6
   418  000092                     	ds	1
   419  000093                     ??_ES_Run:
   420                           
   421                           ; 1 bytes @ 0x7
   422  000093                     	ds	4
   423  000097                     ES_Run@HighestPrior:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0xB
   427  000097                     	ds	1
   428  000098                     main@ErrorType:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0xC
   432  000098                     	ds	1
   433                           tblptru	equ	0xFF8
   434                           postinc0	equ	0xFEE
   435                           wreg	equ	0xFE8
   436                           
   437                           	psect	cstackCOMRAM
   438  000001                     __pcstackCOMRAM:
   439                           	opt stack 0
   440  000001                     ES_Timer_InitTimer@NewTime:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0x0
   444  000001                     	ds	2
   445  000003                     ??_ES_Timer_InitTimer:
   446                           
   447                           ; 1 bytes @ 0x2
   448  000003                     	ds	2
   449  000005                     ES_Timer_InitTimer@Num:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x4
   453  000005                     	ds	1
   454  000006                     ??_ISR:
   455                           
   456                           ; 1 bytes @ 0x5
   457  000006                     	ds	16
   458  000016                     ?_printf:
   459                           	opt stack 0
   460  000016                     ?___awmod:
   461                           	opt stack 0
   462  000016                     ?_RunCan_XmitService:
   463                           	opt stack 0
   464  000016                     ES_CheckUserEvents@i:
   465                           	opt stack 0
   466  000016                     ___lbmod@divisor:
   467                           	opt stack 0
   468  000016                     ES_GetMSBitSet@Val2Check:
   469                           	opt stack 0
   470  000016                     __HW_Timer_Init@Rate:
   471                           	opt stack 0
   472  000016                     ES_InitQueue@pBlock:
   473                           	opt stack 0
   474  000016                     printf@f:
   475                           	opt stack 0
   476  000016                     ___awmod@dividend:
   477                           	opt stack 0
   478  000016                     RunCan_XmitService@ThisEvent:
   479                           	opt stack 0
   480                           
   481                           ; 3 bytes @ 0x15
   482  000016                     	ds	1
   483  000017                     ___lbmod@dividend:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0x16
   487  000017                     	ds	1
   488  000018                     ??_ES_GetMSBitSet:
   489  000018                     ES_InitQueue@BlockSize:
   490                           	opt stack 0
   491  000018                     ___lbmod@counter:
   492                           	opt stack 0
   493  000018                     ES_Timer_Init@Rate:
   494                           	opt stack 0
   495  000018                     printf@ap:
   496                           	opt stack 0
   497  000018                     ___awmod@divisor:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x17
   501  000018                     	ds	1
   502  000019                     ___lbmod@rem:
   503                           	opt stack 0
   504  000019                     ES_InitQueue@pThisQueue:
   505                           	opt stack 0
   506  000019                     RunCan_XmitService@ReturnEvent:
   507                           	opt stack 0
   508                           
   509                           ; 3 bytes @ 0x18
   510  000019                     	ds	1
   511  00001A                     printf@c:
   512                           	opt stack 0
   513  00001A                     ___awmod@counter:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x19
   517  00001A                     	ds	1
   518  00001B                     ___awmod@sign:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x1A
   522  00001B                     	ds	1
   523  00001C                     ?___wmul:
   524                           	opt stack 0
   525  00001C                     ___wmul@multiplier:
   526                           	opt stack 0
   527                           
   528                           ; 2 bytes @ 0x1B
   529  00001C                     	ds	1
   530  00001D                     ES_GetMSBitSet@ReturnVal:
   531                           	opt stack 0
   532                           
   533                           ; 1 bytes @ 0x1C
   534  00001D                     	ds	1
   535  00001E                     ES_GetMSBitSet@Nybble2Test:
   536                           	opt stack 0
   537  00001E                     ___wmul@multiplicand:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x1D
   541  00001E                     	ds	1
   542  00001F                     ES_GetMSBitSet@LoopCntr:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0x1E
   546  00001F                     	ds	1
   547  000020                     ___wmul@product:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x1F
   551  000020                     	ds	2
   552  000022                     ES_EnQueueFIFO@pBlock:
   553                           	opt stack 0
   554  000022                     ES_DeQueue@pBlock:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x21
   558  000022                     	ds	2
   559  000024                     ES_DeQueue@pReturnEvent:
   560                           	opt stack 0
   561  000024                     ES_EnQueueFIFO@Event2Add:
   562                           	opt stack 0
   563                           
   564                           ; 3 bytes @ 0x23
   565  000024                     	ds	2
   566  000026                     ??_ES_DeQueue:
   567                           
   568                           ; 1 bytes @ 0x25
   569  000026                     	ds	1
   570  000027                     ??_ES_EnQueueFIFO:
   571                           
   572                           ; 1 bytes @ 0x26
   573  000027                     	ds	1
   574  000028                     ES_DeQueue@SaveCrit:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x27
   578  000028                     	ds	1
   579  000029                     ES_DeQueue@NumLeft:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x28
   583  000029                     	ds	1
   584  00002A                     ES_EnQueueFIFO@SaveCrit:
   585                           	opt stack 0
   586  00002A                     ES_DeQueue@pThisQueue:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x29
   590  00002A                     	ds	1
   591  00002B                     ES_EnQueueFIFO@pThisQueue:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x2A
   595  00002B                     	ds	2
   596  00002D                     ES_PostToService@TheEvent:
   597                           	opt stack 0
   598                           
   599                           ; 3 bytes @ 0x2C
   600  00002D                     	ds	3
   601  000030                     ??_ES_PostToService:
   602                           
   603                           ; 1 bytes @ 0x2F
   604  000030                     	ds	2
   605  000032                     ES_PostToService@WhichService:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x31
   609  000032                     	ds	1
   610  000033                     tblptru	equ	0xFF8
   611                           postinc0	equ	0xFEE
   612                           wreg	equ	0xFE8
   613                           
   614                           ; 1 bytes @ 0x32
   615 ;;
   616 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   617 ;;
   618 ;; *************** function _main *****************
   619 ;; Defined at:
   620 ;;		line 25 in file "main.c"
   621 ;; Parameters:    Size  Location     Type
   622 ;;		None
   623 ;; Auto vars:     Size  Location     Type
   624 ;;  ErrorType       1   12[BANK0 ] enum E15642
   625 ;; Return value:  Size  Location     Type
   626 ;;                  2  299[None  ] int 
   627 ;; Registers used:
   628 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   629 ;; Tracked objects:
   630 ;;		On entry : 0/0
   631 ;;		On exit  : 0/0
   632 ;;		Unchanged: 0/0
   633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   634 ;;      Params:         0       0       0       0
   635 ;;      Locals:         0       1       0       0
   636 ;;      Temps:          0       0       0       0
   637 ;;      Totals:         0       1       0       0
   638 ;;Total ram usage:        1 bytes
   639 ;; Hardware stack levels required when called:   10
   640 ;; This function calls:
   641 ;;		_ES_Initialize
   642 ;;		_ES_Run
   643 ;;		_printf
   644 ;; This function is called by:
   645 ;;		Startup code after reset
   646 ;; This function uses a non-reentrant model
   647 ;;
   648                           
   649                           	psect	text0
   650  0008F6                     __ptext0:
   651                           	opt stack 0
   652  0008F6                     _main:
   653                           	opt stack 21
   654                           
   655                           ;main.c: 28: IRCF0 = 1;
   656                           
   657                           ;incstack = 0
   658  0008F6  88D3               	bsf	4051,4,c	;volatile
   659                           
   660                           ;main.c: 29: IRCF1 = 1;
   661  0008F8  8AD3               	bsf	4051,5,c	;volatile
   662                           
   663                           ;main.c: 30: IRCF2 = 1;
   664  0008FA  8CD3               	bsf	4051,6,c	;volatile
   665                           
   666                           ;main.c: 31: SCS1 = 1;
   667  0008FC  82D3               	bsf	4051,1,c	;volatile
   668                           
   669                           ;main.c: 39: ES_Return_t ErrorType;
   670                           ;main.c: 55: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
   671  0008FE  0E9C               	movlw	156
   672  000900  0100               	movlb	0	; () banked
   673  000902  6F91               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
   674  000904  0E3F               	movlw	63
   675  000906  6F90               	movwf	ES_Initialize@NewRate& (0+255),b
   676  000908  ECD6  F002         	call	_ES_Initialize	;wreg free
   677  00090C  0100               	movlb	0	; () banked
   678  00090E  6F98               	movwf	main@ErrorType& (0+255),b
   679                           
   680                           ; BSR set to: 0
   681                           ;main.c: 56: if ( ErrorType == Success ) {
   682  000910  0100               	movlb	0	; () banked
   683  000912  5198               	movf	main@ErrorType& (0+255),w,b
   684  000914  0100               	movlb	0	; () banked
   685  000916  A4D8               	btfss	status,2,c
   686  000918  D021               	goto	l2668
   687                           
   688                           ; BSR set to: 0
   689                           ;main.c: 58: ErrorType = ES_Run();
   690  00091A  EC4C  F003         	call	_ES_Run	;wreg free
   691  00091E  0100               	movlb	0	; () banked
   692  000920  6F98               	movwf	main@ErrorType& (0+255),b
   693                           
   694                           ; BSR set to: 0
   695                           ;main.c: 60: }
   696                           ;main.c: 62: switch (ErrorType){
   697  000922  D01C               	goto	l2668
   698  000924                     l2658:
   699                           
   700                           ; BSR set to: 0
   701                           ;main.c: 64: printf("Failed on attempt to Post\n");
   702  000924  0E5B               	movlw	low STR_1
   703  000926  6E16               	movwf	printf@f,c
   704  000928  0E03               	movlw	high STR_1
   705  00092A  6E17               	movwf	printf@f+1,c
   706  00092C  EC48  F006         	call	_printf	;wreg free
   707                           
   708                           ;main.c: 65: break;
   709  000930  D021               	goto	l307
   710  000932                     l2660:
   711                           
   712                           ;main.c: 67: printf("Failed on NULL pointer\n");
   713  000932  0E76               	movlw	low STR_2
   714  000934  6E16               	movwf	printf@f,c
   715  000936  0E03               	movlw	high STR_2
   716  000938  6E17               	movwf	printf@f+1,c
   717  00093A  EC48  F006         	call	_printf	;wreg free
   718                           
   719                           ;main.c: 68: break;
   720  00093E  D01A               	goto	l307
   721  000940                     l2662:
   722                           
   723                           ;main.c: 70: printf("Failed Initialization\n");
   724  000940  0E8E               	movlw	low STR_3
   725  000942  6E16               	movwf	printf@f,c
   726  000944  0E03               	movlw	high STR_3
   727  000946  6E17               	movwf	printf@f+1,c
   728  000948  EC48  F006         	call	_printf	;wreg free
   729                           
   730                           ;main.c: 71: break;
   731  00094C  D013               	goto	l307
   732  00094E                     l2664:
   733                           
   734                           ;main.c: 73: printf("Other Failure\n");
   735  00094E  0EA5               	movlw	low STR_4
   736  000950  6E16               	movwf	printf@f,c
   737  000952  0E03               	movlw	high STR_4
   738  000954  6E17               	movwf	printf@f+1,c
   739  000956  EC48  F006         	call	_printf	;wreg free
   740                           
   741                           ;main.c: 75: }
   742                           
   743                           ;main.c: 74: break;
   744  00095A  D00C               	goto	l307
   745  00095C                     l2668:
   746  00095C  0100               	movlb	0	; () banked
   747  00095E  5198               	movf	main@ErrorType& (0+255),w,b
   748                           
   749                           ; Switch size 1, requested type "space"
   750                           ; Number of cases is 3, Range of values is 1 to 5
   751                           ; switch strategies available:
   752                           ; Name         Instructions Cycles
   753                           ; simple_byte           10     6 (average)
   754                           ;	Chosen strategy is simple_byte
   755  000960  0A01               	xorlw	1	; case 1
   756  000962  B4D8               	btfsc	status,2,c
   757  000964  D7DF               	goto	l2658
   758  000966  0A02               	xorlw	2	; case 3
   759  000968  B4D8               	btfsc	status,2,c
   760  00096A  D7E3               	goto	l2660
   761  00096C  0A06               	xorlw	6	; case 5
   762  00096E  B4D8               	btfsc	status,2,c
   763  000970  D7E7               	goto	l2662
   764  000972  D7ED               	goto	l2664
   765  000974                     l307:
   766                           
   767                           ;main.c: 77: ;
   768  000974  D7FF               	goto	l307
   769  000976                     __end_of_main:
   770                           	opt stack 0
   771                           tblptru	equ	0xFF8
   772                           postinc0	equ	0xFEE
   773                           wreg	equ	0xFE8
   774                           status	equ	0xFD8
   775                           
   776 ;; *************** function _printf *****************
   777 ;; Defined at:
   778 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
   779 ;; Parameters:    Size  Location     Type
   780 ;;  f               2   21[COMRAM] PTR const unsigned char 
   781 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
   782 ;; Auto vars:     Size  Location     Type
   783 ;;  tmpval          4    0        struct .
   784 ;;  cp              3    0        PTR const unsigned char 
   785 ;;  ap              2   23[COMRAM] PTR void [1]
   786 ;;		 -> ?_printf(2), 
   787 ;;  len             2    0        unsigned int 
   788 ;;  val             2    0        unsigned int 
   789 ;;  c               1   25[COMRAM] char 
   790 ;;  flag            1    0        unsigned char 
   791 ;;  prec            1    0        char 
   792 ;; Return value:  Size  Location     Type
   793 ;;                  2   21[COMRAM] int 
   794 ;; Registers used:
   795 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   796 ;; Tracked objects:
   797 ;;		On entry : 0/0
   798 ;;		On exit  : 0/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   801 ;;      Params:         2       0       0       0
   802 ;;      Locals:         3       0       0       0
   803 ;;      Temps:          0       0       0       0
   804 ;;      Totals:         5       0       0       0
   805 ;;Total ram usage:        5 bytes
   806 ;; Hardware stack levels used:    1
   807 ;; Hardware stack levels required when called:    4
   808 ;; This function calls:
   809 ;;		_putch
   810 ;; This function is called by:
   811 ;;		_main
   812 ;; This function uses a non-reentrant model
   813 ;;
   814                           
   815                           	psect	text1
   816  000C90                     __ptext1:
   817                           	opt stack 0
   818  000C90                     _printf:
   819                           	opt stack 26
   820                           
   821                           ;doprnt.c: 466: va_list ap;
   822                           ;doprnt.c: 499: signed char c;
   823                           ;doprnt.c: 506: signed char prec;
   824                           ;doprnt.c: 508: unsigned char flag;
   825                           ;doprnt.c: 523: union {
   826                           ;doprnt.c: 524: unsigned long vd;
   827                           ;doprnt.c: 525: double integ;
   828                           ;doprnt.c: 526: } tmpval;
   829                           ;doprnt.c: 528: unsigned int val;
   830                           ;doprnt.c: 529: unsigned len;
   831                           ;doprnt.c: 530: const char * cp;
   832                           ;doprnt.c: 533: *ap = __va_start();
   833                           
   834                           ;incstack = 0
   835  000C90  0E18               	movlw	low (?_printf+2)
   836  000C92  6E18               	movwf	printf@ap,c
   837  000C94  0E00               	movlw	high (?_printf+2)
   838  000C96  6E19               	movwf	printf@ap+1,c
   839                           
   840                           ;doprnt.c: 536: while(c = *f++) {
   841  000C98  D003               	goto	l2554
   842  000C9A                     l2552:
   843                           
   844                           ;doprnt.c: 540: {
   845                           ;doprnt.c: 541: (putch(c) );
   846  000C9A  501A               	movf	printf@c,w,c
   847  000C9C  ECE9  F006         	call	_putch
   848  000CA0                     l2554:
   849  000CA0  C016  FFF6         	movff	printf@f,tblptrl
   850  000CA4  C017  FFF7         	movff	printf@f+1,tblptrh
   851  000CA8  4A16               	infsnz	printf@f,f,c
   852  000CAA  2A17               	incf	printf@f+1,f,c
   853  000CAC                     	if	0	;tblptru may be non-zero
   854  000CAC                     	endif
   855  000CAC                     	if	0	;tblptru may be non-zero
   856  000CAC                     	endif
   857  000CAC  0008               	tblrd		*
   858  000CAE  CFF5 F01A          	movff	tablat,printf@c
   859  000CB2  501A               	movf	printf@c,w,c
   860  000CB4  B4D8               	btfsc	status,2,c
   861  000CB6  0012               	return	
   862  000CB8  D7F0               	goto	l2552
   863  000CBA                     __end_of_printf:
   864                           	opt stack 0
   865                           tblptru	equ	0xFF8
   866                           tblptrh	equ	0xFF7
   867                           tblptrl	equ	0xFF6
   868                           tablat	equ	0xFF5
   869                           postinc0	equ	0xFEE
   870                           wreg	equ	0xFE8
   871                           status	equ	0xFD8
   872                           
   873 ;; *************** function _putch *****************
   874 ;; Defined at:
   875 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
   876 ;; Parameters:    Size  Location     Type
   877 ;;  c               1    wreg     unsigned char 
   878 ;; Auto vars:     Size  Location     Type
   879 ;;  c               1    0[COMRAM] unsigned char 
   880 ;; Return value:  Size  Location     Type
   881 ;;                  1    wreg      void 
   882 ;; Registers used:
   883 ;;		wreg
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   889 ;;      Params:         0       0       0       0
   890 ;;      Locals:         0       0       0       0
   891 ;;      Temps:          0       0       0       0
   892 ;;      Totals:         0       0       0       0
   893 ;;Total ram usage:        0 bytes
   894 ;; Hardware stack levels used:    1
   895 ;; Hardware stack levels required when called:    3
   896 ;; This function calls:
   897 ;;		Nothing
   898 ;; This function is called by:
   899 ;;		_printf
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           	psect	text2
   904  000DD2                     __ptext2:
   905                           	opt stack 0
   906  000DD2                     _putch:
   907                           	opt stack 26
   908                           
   909                           ;incstack = 0
   910  000DD2  0012               	return		;funcret
   911  000DD4                     __end_of_putch:
   912                           	opt stack 0
   913                           tblptru	equ	0xFF8
   914                           tblptrh	equ	0xFF7
   915                           tblptrl	equ	0xFF6
   916                           tablat	equ	0xFF5
   917                           postinc0	equ	0xFEE
   918                           wreg	equ	0xFE8
   919                           status	equ	0xFD8
   920                           
   921 ;; *************** function _ES_Run *****************
   922 ;; Defined at:
   923 ;;		line 277 in file "ES_Framework.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;		None
   926 ;; Auto vars:     Size  Location     Type
   927 ;;  HighestPrior    1   11[BANK0 ] unsigned char 
   928 ;; Return value:  Size  Location     Type
   929 ;;                  1    wreg      enum E15490
   930 ;; Registers used:
   931 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   932 ;; Tracked objects:
   933 ;;		On entry : 0/0
   934 ;;		On exit  : 0/0
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   937 ;;      Params:         0       0       0       0
   938 ;;      Locals:         0       1       0       0
   939 ;;      Temps:          0       4       0       0
   940 ;;      Totals:         0       5       0       0
   941 ;;Total ram usage:        5 bytes
   942 ;; Hardware stack levels used:    1
   943 ;; Hardware stack levels required when called:    9
   944 ;; This function calls:
   945 ;;		_ES_CheckUserEvents
   946 ;;		_ES_DeQueue
   947 ;;		_ES_GetMSBitSet
   948 ;;		_RunCan_XmitService
   949 ;;		__HW_Process_Pending_Ints
   950 ;; This function is called by:
   951 ;;		_main
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955                           	psect	text3
   956  000698                     __ptext3:
   957                           	opt stack 0
   958  000698                     _ES_Run:
   959                           	opt stack 21
   960                           
   961                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
   962                           
   963                           ;incstack = 0
   964                           ;ES_Framework.c: 279: uint8_t HighestPrior;
   965                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
   966                           ;ES_Framework.c: 282: while(1){
   967  000698  D067               	goto	l2540
   968  00069A                     l2528:
   969                           
   970                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
   971  00069A  C03C  F016         	movff	_Ready,ES_GetMSBitSet@Val2Check
   972  00069E  C03D  F017         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
   973  0006A2  ECBB  F004         	call	_ES_GetMSBitSet	;wreg free
   974  0006A6  0100               	movlb	0	; () banked
   975  0006A8  6F97               	movwf	ES_Run@HighestPrior& (0+255),b
   976                           
   977                           ; BSR set to: 0
   978                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
   979  0006AA  0100               	movlb	0	; () banked
   980  0006AC  5197               	movf	ES_Run@HighestPrior& (0+255),w,b
   981  0006AE  0D03               	mullw	3
   982  0006B0  0E54               	movlw	low _EventQueues
   983  0006B2  24F3               	addwf	prodl,w,c
   984  0006B4  6EF6               	movwf	tblptrl,c
   985  0006B6  0E03               	movlw	high _EventQueues
   986  0006B8  20F4               	addwfc	prodh,w,c
   987  0006BA  6EF7               	movwf	tblptrh,c
   988  0006BC                     	if	0	;There are less than 3 active tblptr bytes
   989  0006BC                     	endif
   990  0006BC  0009               	tblrd		*+
   991  0006BE  CFF5 F022          	movff	tablat,ES_DeQueue@pBlock
   992  0006C2  000A               	tblrd		*-
   993  0006C4  CFF5 F023          	movff	tablat,ES_DeQueue@pBlock+1
   994  0006C8  0E47               	movlw	low ES_Run@ThisEvent
   995  0006CA  6E24               	movwf	ES_DeQueue@pReturnEvent,c
   996  0006CC  0E00               	movlw	high ES_Run@ThisEvent
   997  0006CE  6E25               	movwf	ES_DeQueue@pReturnEvent+1,c
   998  0006D0  ECDB  F001         	call	_ES_DeQueue	;wreg free
   999  0006D4  0900               	iorlw	0
  1000  0006D6  A4D8               	btfss	status,2,c
  1001  0006D8  D01D               	goto	l2534
  1002                           
  1003                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1004  0006DA  0100               	movlb	0	; () banked
  1005  0006DC  5197               	movf	ES_Run@HighestPrior& (0+255),w,b
  1006  0006DE  0D02               	mullw	2
  1007  0006E0  0E01               	movlw	low _BitNum2SetMask
  1008  0006E2  24F3               	addwf	prodl,w,c
  1009  0006E4  6EF6               	movwf	tblptrl,c
  1010  0006E6  0E03               	movlw	high _BitNum2SetMask
  1011  0006E8  20F4               	addwfc	prodh,w,c
  1012  0006EA  6EF7               	movwf	tblptrh,c
  1013  0006EC                     	if	0	;There are less than 3 active tblptr bytes
  1014  0006EC                     	endif
  1015  0006EC  0009               	tblrd		*+
  1016  0006EE  CFF5 F093          	movff	tablat,??_ES_Run
  1017  0006F2  0009               	tblrd		*+
  1018  0006F4  CFF5 F094          	movff	tablat,??_ES_Run+1
  1019  0006F8  0100               	movlb	0	; () banked
  1020  0006FA  1D93               	comf	??_ES_Run& (0+255),w,b
  1021  0006FC  0100               	movlb	0	; () banked
  1022  0006FE  6F95               	movwf	(??_ES_Run+2)& (0+255),b
  1023  000700  0100               	movlb	0	; () banked
  1024  000702  1D94               	comf	(??_ES_Run+1)& (0+255),w,b
  1025  000704  0100               	movlb	0	; () banked
  1026  000706  6F96               	movwf	(??_ES_Run+3)& (0+255),b
  1027  000708  0100               	movlb	0	; () banked
  1028  00070A  5195               	movf	(??_ES_Run+2)& (0+255),w,b
  1029  00070C  163C               	andwf	_Ready,f,c
  1030  00070E  0100               	movlb	0	; () banked
  1031  000710  5196               	movf	(??_ES_Run+3)& (0+255),w,b
  1032  000712  163D               	andwf	_Ready+1,f,c
  1033  000714                     l2534:
  1034                           
  1035                           ;ES_Framework.c: 291: }
  1036                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1037  000714  C047  F016         	movff	ES_Run@ThisEvent,RunCan_XmitService@ThisEvent
  1038  000718  C048  F017         	movff	ES_Run@ThisEvent+1,RunCan_XmitService@ThisEvent+1
  1039  00071C  C049  F018         	movff	ES_Run@ThisEvent+2,RunCan_XmitService@ThisEvent+2
  1040  000720  0100               	movlb	0	; () banked
  1041  000722  5197               	movf	ES_Run@HighestPrior& (0+255),w,b
  1042  000724  0D04               	mullw	4
  1043  000726  0E02               	movlw	2
  1044  000728  26F3               	addwf	prodl,f,c
  1045  00072A  0E00               	movlw	0
  1046  00072C  22F4               	addwfc	prodh,f,c
  1047  00072E  0E50               	movlw	low _ServDescList
  1048  000730  24F3               	addwf	prodl,w,c
  1049  000732  6EF6               	movwf	tblptrl,c
  1050  000734  0E03               	movlw	high _ServDescList
  1051  000736  20F4               	addwfc	prodh,w,c
  1052  000738  6EF7               	movwf	tblptrh,c
  1053  00073A                     	if	0	;There are less than 3 active tblptr bytes
  1054  00073A                     	endif
  1055  00073A  D801               	call	u1848
  1056  00073C  D00C               	goto	u1849
  1057  00073E                     u1848:
  1058  00073E  0005               	push	
  1059  000740  6EFA               	movwf	pclath,c
  1060  000742  0009               	tblrd		*+
  1061  000744  50F5               	movf	tablat,w,c
  1062  000746  6EFD               	movwf	tosl,c
  1063  000748  0009               	tblrd		*+
  1064  00074A  50F5               	movf	tablat,w,c
  1065  00074C  6EFE               	movwf	tosh,c
  1066  00074E  50F8               	movf	tblptru,w,c
  1067  000750  6EFF               	movwf	tosu,c
  1068  000752  50FA               	movf	pclath,w,c
  1069  000754  0012               	return		;indir
  1070  000756                     u1849:
  1071  000756  0E16               	movlw	low ?_RunCan_XmitService
  1072  000758  6ED9               	movwf	fsr2l,c
  1073  00075A  0E00               	movlw	high ?_RunCan_XmitService
  1074  00075C  6EDA               	movwf	fsr2h,c
  1075  00075E  50DF               	movf	indf2,w,c
  1076  000760  B4D8               	btfsc	status,2,c
  1077  000762  D002               	goto	l2540
  1078                           
  1079                           ;ES_Framework.c: 293: return FailedRun;
  1080  000764  0E02               	movlw	2
  1081  000766  0012               	return	
  1082  000768                     l2540:
  1083  000768  ECBC  F006         	call	__HW_Process_Pending_Ints	;wreg free
  1084  00076C  0900               	iorlw	0
  1085  00076E  B4D8               	btfsc	status,2,c
  1086  000770  D004               	goto	l2544
  1087  000772  503C               	movf	_Ready,w,c
  1088  000774  103D               	iorwf	_Ready+1,w,c
  1089  000776  A4D8               	btfss	status,2,c
  1090  000778  D790               	goto	l2528
  1091  00077A                     l2544:
  1092                           
  1093                           ;ES_Framework.c: 294: }
  1094                           ;ES_Framework.c: 295: }
  1095                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1096  00077A  ECC6  F005         	call	_ES_CheckUserEvents	;wreg free
  1097  00077E  D7F4               	goto	l2540
  1098  000780                     __end_of_ES_Run:
  1099                           	opt stack 0
  1100                           tosu	equ	0xFFF
  1101                           tosh	equ	0xFFE
  1102                           tosl	equ	0xFFD
  1103                           pclath	equ	0xFFA
  1104                           tblptru	equ	0xFF8
  1105                           tblptrh	equ	0xFF7
  1106                           tblptrl	equ	0xFF6
  1107                           tablat	equ	0xFF5
  1108                           prodh	equ	0xFF4
  1109                           prodl	equ	0xFF3
  1110                           postinc0	equ	0xFEE
  1111                           wreg	equ	0xFE8
  1112                           indf2	equ	0xFDF
  1113                           fsr2h	equ	0xFDA
  1114                           fsr2l	equ	0xFD9
  1115                           status	equ	0xFD8
  1116                           
  1117 ;; *************** function __HW_Process_Pending_Ints *****************
  1118 ;; Defined at:
  1119 ;;		line 225 in file "ES_Port.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;		None
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;		None
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  1    wreg      unsigned char 
  1126 ;; Registers used:
  1127 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1133 ;;      Params:         0       0       0       0
  1134 ;;      Locals:         0       0       0       0
  1135 ;;      Temps:          0       0       0       0
  1136 ;;      Totals:         0       0       0       0
  1137 ;;Total ram usage:        0 bytes
  1138 ;; Hardware stack levels used:    1
  1139 ;; Hardware stack levels required when called:    8
  1140 ;; This function calls:
  1141 ;;		_ES_Timer_Tick_Resp
  1142 ;; This function is called by:
  1143 ;;		_ES_Run
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           	psect	text4
  1148  000D78                     __ptext4:
  1149                           	opt stack 0
  1150  000D78                     __HW_Process_Pending_Ints:
  1151                           	opt stack 21
  1152                           
  1153                           ;ES_Port.c: 227: while (TickCount > 0)
  1154                           
  1155                           ;incstack = 0
  1156  000D78  D003               	goto	l2458
  1157  000D7A                     l2454:
  1158                           
  1159                           ;ES_Port.c: 228: {
  1160                           ;ES_Port.c: 230: ES_Timer_Tick_Resp();
  1161  000D7A  EC5A  F002         	call	_ES_Timer_Tick_Resp	;wreg free
  1162                           
  1163                           ;ES_Port.c: 231: TickCount--;
  1164  000D7E  0646               	decf	_TickCount,f,c	;volatile
  1165  000D80                     l2458:
  1166  000D80  5046               	movf	_TickCount,w,c	;volatile
  1167  000D82  A4D8               	btfss	status,2,c
  1168  000D84  D7FA               	goto	l2454
  1169                           
  1170                           ;ES_Port.c: 232: }
  1171                           ;ES_Port.c: 234: return 1;
  1172  000D86  0E01               	movlw	1
  1173  000D88  0012               	return	
  1174  000D8A                     __end_of__HW_Process_Pending_Ints:
  1175                           	opt stack 0
  1176                           tosu	equ	0xFFF
  1177                           tosh	equ	0xFFE
  1178                           tosl	equ	0xFFD
  1179                           pclath	equ	0xFFA
  1180                           tblptru	equ	0xFF8
  1181                           tblptrh	equ	0xFF7
  1182                           tblptrl	equ	0xFF6
  1183                           tablat	equ	0xFF5
  1184                           prodh	equ	0xFF4
  1185                           prodl	equ	0xFF3
  1186                           postinc0	equ	0xFEE
  1187                           wreg	equ	0xFE8
  1188                           indf2	equ	0xFDF
  1189                           fsr2h	equ	0xFDA
  1190                           fsr2l	equ	0xFD9
  1191                           status	equ	0xFD8
  1192                           
  1193 ;; *************** function _ES_Timer_Tick_Resp *****************
  1194 ;; Defined at:
  1195 ;;		line 284 in file "ES_Timers.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;		None
  1198 ;; Auto vars:     Size  Location     Type
  1199 ;;		None
  1200 ;; Return value:  Size  Location     Type
  1201 ;;                  1    wreg      void 
  1202 ;; Registers used:
  1203 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1204 ;; Tracked objects:
  1205 ;;		On entry : 0/0
  1206 ;;		On exit  : 0/0
  1207 ;;		Unchanged: 0/0
  1208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1209 ;;      Params:         0       0       0       0
  1210 ;;      Locals:         0       0       0       0
  1211 ;;      Temps:          0       4       0       0
  1212 ;;      Totals:         0       4       0       0
  1213 ;;Total ram usage:        4 bytes
  1214 ;; Hardware stack levels used:    1
  1215 ;; Hardware stack levels required when called:    7
  1216 ;; This function calls:
  1217 ;;		Absolute function
  1218 ;;		_ES_GetMSBitSet
  1219 ;;		_PostCan_XmitService
  1220 ;; This function is called by:
  1221 ;;		__HW_Process_Pending_Ints
  1222 ;; This function uses a non-reentrant model
  1223 ;;
  1224                           
  1225                           	psect	text5
  1226  0004B4                     __ptext5:
  1227                           	opt stack 0
  1228  0004B4                     _ES_Timer_Tick_Resp:
  1229                           	opt stack 21
  1230                           
  1231                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1232                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1233                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1234                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1235                           
  1236                           ;incstack = 0
  1237  0004B4  5040               	movf	_TMR_ActiveFlags,w,c
  1238  0004B6  1041               	iorwf	_TMR_ActiveFlags+1,w,c
  1239  0004B8  B4D8               	btfsc	status,2,c
  1240  0004BA  0012               	return	
  1241                           
  1242                           ;ES_Timers.c: 291: {
  1243                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1244  0004BC  C040  F036         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1245  0004C0  C041  F037         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1246  0004C4                     l2290:
  1247                           
  1248                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1249  0004C4  C036  F016         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1250  0004C8  C037  F017         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1251  0004CC  ECBB  F004         	call	_ES_GetMSBitSet	;wreg free
  1252  0004D0  6E44               	movwf	ES_Timer_Tick_Resp@NextTimer2Process,c
  1253                           
  1254                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1255  0004D2  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1256  0004D4  0D02               	mullw	2
  1257  0004D6  0E60               	movlw	low _TMR_TimerArray
  1258  0004D8  24F3               	addwf	prodl,w,c
  1259  0004DA  6ED9               	movwf	fsr2l,c
  1260  0004DC  0E00               	movlw	high _TMR_TimerArray
  1261  0004DE  20F4               	addwfc	prodh,w,c
  1262  0004E0  6EDA               	movwf	fsr2h,c
  1263  0004E2  06DE               	decf	postinc2,f,c
  1264  0004E4  0E00               	movlw	0
  1265  0004E6  5ADD               	subwfb	postdec2,f,c
  1266  0004E8  50DE               	movf	postinc2,w,c
  1267  0004EA  10DE               	iorwf	postinc2,w,c
  1268  0004EC  A4D8               	btfss	status,2,c
  1269  0004EE  D03D               	goto	l2302
  1270                           
  1271                           ;ES_Timers.c: 299: {
  1272                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1273  0004F0  0E03               	movlw	3
  1274  0004F2  6E33               	movwf	ES_Timer_Tick_Resp@NewEvent,c
  1275                           
  1276                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1277  0004F4  C044  F034         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1278  0004F8  6A35               	clrf	ES_Timer_Tick_Resp@NewEvent+2,c
  1279                           
  1280                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1281  0004FA  C033  F08C         	movff	ES_Timer_Tick_Resp@NewEvent,PostCan_XmitService@ThisEvent
  1282  0004FE  C034  F08D         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostCan_XmitService@ThisEvent+1
  1283  000502  C035  F08E         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostCan_XmitService@ThisEvent+2
  1284  000506  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1285  000508  0D02               	mullw	2
  1286  00050A  0E21               	movlw	low _Timer2PostFunc
  1287  00050C  24F3               	addwf	prodl,w,c
  1288  00050E  6EF6               	movwf	tblptrl,c
  1289  000510  0E03               	movlw	high _Timer2PostFunc
  1290  000512  20F4               	addwfc	prodh,w,c
  1291  000514  6EF7               	movwf	tblptrh,c
  1292  000516                     	if	0	;There are less than 3 active tblptr bytes
  1293  000516                     	endif
  1294  000516  D801               	call	u1598
  1295  000518  D00C               	goto	l2300
  1296  00051A                     u1598:
  1297  00051A  0005               	push	
  1298  00051C  6EFA               	movwf	pclath,c
  1299  00051E  0009               	tblrd		*+
  1300  000520  50F5               	movf	tablat,w,c
  1301  000522  6EFD               	movwf	tosl,c
  1302  000524  0009               	tblrd		*+
  1303  000526  50F5               	movf	tablat,w,c
  1304  000528  6EFE               	movwf	tosh,c
  1305  00052A  50F8               	movf	tblptru,w,c
  1306  00052C  6EFF               	movwf	tosu,c
  1307  00052E  50FA               	movf	pclath,w,c
  1308  000530  0012               	return		;indir
  1309  000532                     l2300:
  1310                           
  1311                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1312  000532  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1313  000534  0D02               	mullw	2
  1314  000536  0E01               	movlw	low _BitNum2SetMask
  1315  000538  24F3               	addwf	prodl,w,c
  1316  00053A  6EF6               	movwf	tblptrl,c
  1317  00053C  0E03               	movlw	high _BitNum2SetMask
  1318  00053E  20F4               	addwfc	prodh,w,c
  1319  000540  6EF7               	movwf	tblptrh,c
  1320  000542                     	if	0	;There are less than 3 active tblptr bytes
  1321  000542                     	endif
  1322  000542  0009               	tblrd		*+
  1323  000544  CFF5 F08F          	movff	tablat,??_ES_Timer_Tick_Resp
  1324  000548  0009               	tblrd		*+
  1325  00054A  CFF5 F090          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1326  00054E  0100               	movlb	0	; () banked
  1327  000550  1D8F               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1328  000552  0100               	movlb	0	; () banked
  1329  000554  6F91               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1330  000556  0100               	movlb	0	; () banked
  1331  000558  1D90               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1332  00055A  0100               	movlb	0	; () banked
  1333  00055C  6F92               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1334  00055E  0100               	movlb	0	; () banked
  1335  000560  5191               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1336  000562  1640               	andwf	_TMR_ActiveFlags,f,c
  1337  000564  0100               	movlb	0	; () banked
  1338  000566  5192               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1339  000568  1641               	andwf	_TMR_ActiveFlags+1,f,c
  1340  00056A                     l2302:
  1341                           
  1342                           ;ES_Timers.c: 306: }
  1343                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1344  00056A  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1345  00056C  0D02               	mullw	2
  1346  00056E  0E01               	movlw	low _BitNum2SetMask
  1347  000570  24F3               	addwf	prodl,w,c
  1348  000572  6EF6               	movwf	tblptrl,c
  1349  000574  0E03               	movlw	high _BitNum2SetMask
  1350  000576  20F4               	addwfc	prodh,w,c
  1351  000578  6EF7               	movwf	tblptrh,c
  1352  00057A                     	if	0	;There are less than 3 active tblptr bytes
  1353  00057A                     	endif
  1354  00057A  0009               	tblrd		*+
  1355  00057C  CFF5 F08F          	movff	tablat,??_ES_Timer_Tick_Resp
  1356  000580  0009               	tblrd		*+
  1357  000582  CFF5 F090          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1358  000586  0100               	movlb	0	; () banked
  1359  000588  1D8F               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1360  00058A  0100               	movlb	0	; () banked
  1361  00058C  6F91               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1362  00058E  0100               	movlb	0	; () banked
  1363  000590  1D90               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1364  000592  0100               	movlb	0	; () banked
  1365  000594  6F92               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1366  000596  0100               	movlb	0	; () banked
  1367  000598  5191               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1368  00059A  1636               	andwf	ES_Timer_Tick_Resp@NeedsProcessing,f,c
  1369  00059C  0100               	movlb	0	; () banked
  1370  00059E  5192               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1371  0005A0  1637               	andwf	ES_Timer_Tick_Resp@NeedsProcessing+1,f,c
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1375  0005A2  5036               	movf	ES_Timer_Tick_Resp@NeedsProcessing,w,c
  1376  0005A4  1037               	iorwf	ES_Timer_Tick_Resp@NeedsProcessing+1,w,c
  1377  0005A6  B4D8               	btfsc	status,2,c
  1378  0005A8  0012               	return	
  1379  0005AA  D78C               	goto	l2290
  1380  0005AC                     __end_of_ES_Timer_Tick_Resp:
  1381                           	opt stack 0
  1382                           tosu	equ	0xFFF
  1383                           tosh	equ	0xFFE
  1384                           tosl	equ	0xFFD
  1385                           pclath	equ	0xFFA
  1386                           tblptru	equ	0xFF8
  1387                           tblptrh	equ	0xFF7
  1388                           tblptrl	equ	0xFF6
  1389                           tablat	equ	0xFF5
  1390                           prodh	equ	0xFF4
  1391                           prodl	equ	0xFF3
  1392                           postinc0	equ	0xFEE
  1393                           wreg	equ	0xFE8
  1394                           indf2	equ	0xFDF
  1395                           postinc2	equ	0xFDE
  1396                           postdec2	equ	0xFDD
  1397                           fsr2h	equ	0xFDA
  1398                           fsr2l	equ	0xFD9
  1399                           status	equ	0xFD8
  1400                           
  1401 ;; *************** function _PostCan_XmitService *****************
  1402 ;; Defined at:
  1403 ;;		line 114 in file "Can_XmitService.c"
  1404 ;; Parameters:    Size  Location     Type
  1405 ;;  ThisEvent       3    0[BANK0 ] struct ES_Event_t
  1406 ;; Auto vars:     Size  Location     Type
  1407 ;;		None
  1408 ;; Return value:  Size  Location     Type
  1409 ;;                  1    wreg      unsigned char 
  1410 ;; Registers used:
  1411 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1412 ;; Tracked objects:
  1413 ;;		On entry : 0/0
  1414 ;;		On exit  : 0/0
  1415 ;;		Unchanged: 0/0
  1416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1417 ;;      Params:         0       3       0       0
  1418 ;;      Locals:         0       0       0       0
  1419 ;;      Temps:          0       0       0       0
  1420 ;;      Totals:         0       3       0       0
  1421 ;;Total ram usage:        3 bytes
  1422 ;; Hardware stack levels used:    1
  1423 ;; Hardware stack levels required when called:    6
  1424 ;; This function calls:
  1425 ;;		_ES_PostToService
  1426 ;; This function is called by:
  1427 ;;		_ES_Timer_Tick_Resp
  1428 ;;		_PostToList
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text6
  1433  000D64                     __ptext6:
  1434                           	opt stack 0
  1435  000D64                     _PostCan_XmitService:
  1436                           	opt stack 21
  1437                           
  1438                           ;Can_XmitService.c: 116: return ES_PostToService( MyPriority, ThisEvent);
  1439                           
  1440                           ;incstack = 0
  1441  000D64  C08C  F02D         	movff	PostCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  1442  000D68  C08D  F02E         	movff	PostCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  1443  000D6C  C08E  F02F         	movff	PostCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  1444  000D70  5045               	movf	_MyPriority,w,c
  1445  000D72  EC61  F005         	call	_ES_PostToService
  1446  000D76  0012               	return	
  1447  000D78                     __end_of_PostCan_XmitService:
  1448                           	opt stack 0
  1449                           tosu	equ	0xFFF
  1450                           tosh	equ	0xFFE
  1451                           tosl	equ	0xFFD
  1452                           pclath	equ	0xFFA
  1453                           tblptru	equ	0xFF8
  1454                           tblptrh	equ	0xFF7
  1455                           tblptrl	equ	0xFF6
  1456                           tablat	equ	0xFF5
  1457                           prodh	equ	0xFF4
  1458                           prodl	equ	0xFF3
  1459                           postinc0	equ	0xFEE
  1460                           wreg	equ	0xFE8
  1461                           indf2	equ	0xFDF
  1462                           postinc2	equ	0xFDE
  1463                           postdec2	equ	0xFDD
  1464                           fsr2h	equ	0xFDA
  1465                           fsr2l	equ	0xFD9
  1466                           status	equ	0xFD8
  1467                           
  1468 ;; *************** function _ES_GetMSBitSet *****************
  1469 ;; Defined at:
  1470 ;;		line 79 in file "ES_LookupTables.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;  Val2Check       2   21[COMRAM] unsigned int 
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;  LoopCntr        1   30[COMRAM] char 
  1475 ;;  Nybble2Test     1   29[COMRAM] unsigned char 
  1476 ;;  ReturnVal       1   28[COMRAM] unsigned char 
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  1    wreg      unsigned char 
  1479 ;; Registers used:
  1480 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1486 ;;      Params:         2       0       0       0
  1487 ;;      Locals:         3       0       0       0
  1488 ;;      Temps:          5       0       0       0
  1489 ;;      Totals:        10       0       0       0
  1490 ;;Total ram usage:       10 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; Hardware stack levels required when called:    3
  1493 ;; This function calls:
  1494 ;;		Nothing
  1495 ;; This function is called by:
  1496 ;;		_ES_Run
  1497 ;;		_ES_Timer_Tick_Resp
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           	psect	text7
  1502  000976                     __ptext7:
  1503                           	opt stack 0
  1504  000976                     _ES_GetMSBitSet:
  1505                           	opt stack 24
  1506                           
  1507                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1508                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1509                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1510                           
  1511                           ;incstack = 0
  1512  000976  0E80               	movlw	128
  1513  000978  6E1D               	movwf	ES_GetMSBitSet@ReturnVal,c
  1514                           
  1515                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1516  00097A  0E03               	movlw	3
  1517  00097C  6E1F               	movwf	ES_GetMSBitSet@LoopCntr,c
  1518  00097E                     l2258:
  1519                           
  1520                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1521  00097E  BE1F               	btfsc	ES_GetMSBitSet@LoopCntr,7,c
  1522  000980  D031               	goto	l2272
  1523                           
  1524                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1525                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1526                           ;ES_LookupTables.c: 91: 0x0F);
  1527  000982  501F               	movf	ES_GetMSBitSet@LoopCntr,w,c
  1528  000984  0D04               	mullw	4
  1529  000986  CFF3 F018          	movff	prodl,??_ES_GetMSBitSet
  1530  00098A  C016  F019         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1531  00098E  C017  F01A         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1532  000992  2A18               	incf	??_ES_GetMSBitSet,f,c
  1533  000994  D003               	goto	u1544
  1534  000996                     u1545:
  1535  000996  90D8               	bcf	status,0,c
  1536  000998  321A               	rrcf	??_ES_GetMSBitSet+2,f,c
  1537  00099A  3219               	rrcf	??_ES_GetMSBitSet+1,f,c
  1538  00099C                     u1544:
  1539  00099C  2E18               	decfsz	??_ES_GetMSBitSet,f,c
  1540  00099E  D7FB               	goto	u1545
  1541  0009A0  5019               	movf	??_ES_GetMSBitSet+1,w,c
  1542  0009A2  0B0F               	andlw	15
  1543  0009A4  6E1E               	movwf	ES_GetMSBitSet@Nybble2Test,c
  1544                           
  1545                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1546  0009A6  501E               	movf	ES_GetMSBitSet@Nybble2Test,w,c
  1547  0009A8  B4D8               	btfsc	status,2,c
  1548  0009AA  D01A               	goto	l2268
  1549                           
  1550                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  1551                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  1552  0009AC  0EFF               	movlw	255
  1553  0009AE  6E18               	movwf	??_ES_GetMSBitSet& (0+255),c
  1554  0009B0  0EFF               	movlw	255
  1555  0009B2  6E19               	movwf	(??_ES_GetMSBitSet+1)& (0+255),c
  1556  0009B4  501E               	movf	ES_GetMSBitSet@Nybble2Test,w,c
  1557  0009B6  6E1A               	movwf	(??_ES_GetMSBitSet+2)& (0+255),c
  1558  0009B8  6A1B               	clrf	(??_ES_GetMSBitSet+3)& (0+255),c
  1559  0009BA  5018               	movf	??_ES_GetMSBitSet,w,c
  1560  0009BC  261A               	addwf	??_ES_GetMSBitSet+2,f,c
  1561  0009BE  5019               	movf	??_ES_GetMSBitSet+1,w,c
  1562  0009C0  221B               	addwfc	??_ES_GetMSBitSet+3,f,c
  1563  0009C2  0E41               	movlw	low _Nybble2MSBitNum
  1564  0009C4  241A               	addwf	??_ES_GetMSBitSet+2,w,c
  1565  0009C6  6EF6               	movwf	tblptrl,c
  1566  0009C8  0E03               	movlw	high _Nybble2MSBitNum
  1567  0009CA  201B               	addwfc	??_ES_GetMSBitSet+3,w,c
  1568  0009CC  6EF7               	movwf	tblptrh,c
  1569  0009CE                     	if	0	;There are less than 3 active tblptr bytes
  1570  0009CE                     	endif
  1571  0009CE  0008               	tblrd		*
  1572  0009D0  CFF5 F01C          	movff	tablat,??_ES_GetMSBitSet+4
  1573  0009D4  501F               	movf	ES_GetMSBitSet@LoopCntr,w,c
  1574  0009D6  0D04               	mullw	4
  1575  0009D8  50F3               	movf	prodl,w,c
  1576  0009DA  241C               	addwf	??_ES_GetMSBitSet+4,w,c
  1577  0009DC  6E1D               	movwf	ES_GetMSBitSet@ReturnVal,c
  1578                           
  1579                           ;ES_LookupTables.c: 96: break;
  1580  0009DE  D002               	goto	l2272
  1581  0009E0                     l2268:
  1582  0009E0  061F               	decf	ES_GetMSBitSet@LoopCntr,f,c
  1583  0009E2  D7CD               	goto	l2258
  1584  0009E4                     l2272:
  1585                           
  1586                           ;ES_LookupTables.c: 97: }
  1587                           ;ES_LookupTables.c: 98: }
  1588                           ;ES_LookupTables.c: 99: return ReturnVal;
  1589  0009E4  501D               	movf	ES_GetMSBitSet@ReturnVal,w,c
  1590  0009E6  0012               	return	
  1591  0009E8                     __end_of_ES_GetMSBitSet:
  1592                           	opt stack 0
  1593                           tosu	equ	0xFFF
  1594                           tosh	equ	0xFFE
  1595                           tosl	equ	0xFFD
  1596                           pclath	equ	0xFFA
  1597                           tblptru	equ	0xFF8
  1598                           tblptrh	equ	0xFF7
  1599                           tblptrl	equ	0xFF6
  1600                           tablat	equ	0xFF5
  1601                           prodh	equ	0xFF4
  1602                           prodl	equ	0xFF3
  1603                           postinc0	equ	0xFEE
  1604                           wreg	equ	0xFE8
  1605                           indf2	equ	0xFDF
  1606                           postinc2	equ	0xFDE
  1607                           postdec2	equ	0xFDD
  1608                           fsr2h	equ	0xFDA
  1609                           fsr2l	equ	0xFD9
  1610                           status	equ	0xFD8
  1611                           
  1612 ;; *************** function _RunCan_XmitService *****************
  1613 ;; Defined at:
  1614 ;;		line 137 in file "Can_XmitService.c"
  1615 ;; Parameters:    Size  Location     Type
  1616 ;;  ThisEvent       3   21[COMRAM] struct ES_Event_t
  1617 ;; Auto vars:     Size  Location     Type
  1618 ;;  ReturnEvent     3   24[COMRAM] struct ES_Event_t
  1619 ;; Return value:  Size  Location     Type
  1620 ;;                  3   21[COMRAM] struct ES_Event_t
  1621 ;; Registers used:
  1622 ;;		wreg, status,2, status,0, cstack
  1623 ;; Tracked objects:
  1624 ;;		On entry : 0/0
  1625 ;;		On exit  : 0/0
  1626 ;;		Unchanged: 0/0
  1627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1628 ;;      Params:         3       0       0       0
  1629 ;;      Locals:         3       0       0       0
  1630 ;;      Temps:          0       0       0       0
  1631 ;;      Totals:         6       0       0       0
  1632 ;;Total ram usage:        6 bytes
  1633 ;; Hardware stack levels used:    1
  1634 ;; Hardware stack levels required when called:    4
  1635 ;; This function calls:
  1636 ;;		_InitCanHardware
  1637 ;;		_InitPins
  1638 ;;		_ToggleDebugLED
  1639 ;; This function is called by:
  1640 ;;		_ES_Run
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           	psect	text8
  1645  000C02                     __ptext8:
  1646                           	opt stack 0
  1647  000C02                     _RunCan_XmitService:
  1648                           	opt stack 25
  1649                           
  1650                           ;Can_XmitService.c: 139: ES_Event ReturnEvent;
  1651                           ;Can_XmitService.c: 141: if (ThisEvent.EventType == ES_INIT) {
  1652                           
  1653                           ;incstack = 0
  1654  000C02  0E02               	movlw	2
  1655  000C04  1816               	xorwf	RunCan_XmitService@ThisEvent,w,c
  1656  000C06  A4D8               	btfss	status,2,c
  1657  000C08  D004               	goto	l2484
  1658                           
  1659                           ;Can_XmitService.c: 142: InitPins();
  1660  000C0A  EC32  F006         	call	_InitPins	;wreg free
  1661                           
  1662                           ;Can_XmitService.c: 143: InitCanHardware();
  1663  000C0E  EC94  F005         	call	_InitCanHardware	;wreg free
  1664  000C12                     l2484:
  1665                           
  1666                           ;Can_XmitService.c: 147: }
  1667                           ;Can_XmitService.c: 148: if (ThisEvent.EventType == ES_TIMEOUT) {
  1668  000C12  0E03               	movlw	3
  1669  000C14  1816               	xorwf	RunCan_XmitService@ThisEvent,w,c
  1670  000C16  A4D8               	btfss	status,2,c
  1671  000C18  D005               	goto	l2490
  1672                           
  1673                           ;Can_XmitService.c: 149: if (ThisEvent.EventParam == 0) {
  1674  000C1A  5017               	movf	RunCan_XmitService@ThisEvent+1,w,c
  1675  000C1C  1018               	iorwf	RunCan_XmitService@ThisEvent+2,w,c
  1676  000C1E  B4D8               	btfsc	status,2,c
  1677                           
  1678                           ;Can_XmitService.c: 151: ToggleDebugLED();
  1679  000C20  ECC5  F006         	call	_ToggleDebugLED	;wreg free
  1680  000C24                     l2490:
  1681                           
  1682                           ;Can_XmitService.c: 156: }
  1683                           ;Can_XmitService.c: 157: }
  1684                           ;Can_XmitService.c: 158: ReturnEvent.EventType = ES_NO_EVENT;
  1685  000C24  0E00               	movlw	0
  1686  000C26  6E19               	movwf	RunCan_XmitService@ReturnEvent,c
  1687                           
  1688                           ;Can_XmitService.c: 159: return ReturnEvent;
  1689  000C28  C019  F016         	movff	RunCan_XmitService@ReturnEvent,?_RunCan_XmitService
  1690  000C2C  C01A  F017         	movff	RunCan_XmitService@ReturnEvent+1,?_RunCan_XmitService+1
  1691  000C30  C01B  F018         	movff	RunCan_XmitService@ReturnEvent+2,?_RunCan_XmitService+2
  1692  000C34  0012               	return	
  1693  000C36                     __end_of_RunCan_XmitService:
  1694                           	opt stack 0
  1695                           tosu	equ	0xFFF
  1696                           tosh	equ	0xFFE
  1697                           tosl	equ	0xFFD
  1698                           pclath	equ	0xFFA
  1699                           tblptru	equ	0xFF8
  1700                           tblptrh	equ	0xFF7
  1701                           tblptrl	equ	0xFF6
  1702                           tablat	equ	0xFF5
  1703                           prodh	equ	0xFF4
  1704                           prodl	equ	0xFF3
  1705                           postinc0	equ	0xFEE
  1706                           wreg	equ	0xFE8
  1707                           indf2	equ	0xFDF
  1708                           postinc2	equ	0xFDE
  1709                           postdec2	equ	0xFDD
  1710                           fsr2h	equ	0xFDA
  1711                           fsr2l	equ	0xFD9
  1712                           status	equ	0xFD8
  1713                           
  1714 ;; *************** function _ToggleDebugLED *****************
  1715 ;; Defined at:
  1716 ;;		line 334 in file "Can_XmitService.c"
  1717 ;; Parameters:    Size  Location     Type
  1718 ;;		None
  1719 ;; Auto vars:     Size  Location     Type
  1720 ;;		None
  1721 ;; Return value:  Size  Location     Type
  1722 ;;                  1    wreg      void 
  1723 ;; Registers used:
  1724 ;;		None
  1725 ;; Tracked objects:
  1726 ;;		On entry : 0/0
  1727 ;;		On exit  : 0/0
  1728 ;;		Unchanged: 0/0
  1729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1730 ;;      Params:         0       0       0       0
  1731 ;;      Locals:         0       0       0       0
  1732 ;;      Temps:          0       0       0       0
  1733 ;;      Totals:         0       0       0       0
  1734 ;;Total ram usage:        0 bytes
  1735 ;; Hardware stack levels used:    1
  1736 ;; Hardware stack levels required when called:    3
  1737 ;; This function calls:
  1738 ;;		Nothing
  1739 ;; This function is called by:
  1740 ;;		_RunCan_XmitService
  1741 ;; This function uses a non-reentrant model
  1742 ;;
  1743                           
  1744                           	psect	text9
  1745  000D8A                     __ptext9:
  1746                           	opt stack 0
  1747  000D8A                     _ToggleDebugLED:
  1748                           	opt stack 25
  1749                           
  1750                           ;Can_XmitService.c: 336: if (LATA1 == 1) {
  1751                           
  1752                           ;incstack = 0
  1753  000D8A  A289               	btfss	3977,1,c	;volatile
  1754  000D8C  D002               	goto	l442
  1755                           
  1756                           ;Can_XmitService.c: 337: LATA1 = 0;
  1757  000D8E  9289               	bcf	3977,1,c	;volatile
  1758                           
  1759                           ;Can_XmitService.c: 338: } else if (LATA1 == 0) {
  1760  000D90  0012               	return	
  1761  000D92                     l442:
  1762  000D92  B289               	btfsc	3977,1,c	;volatile
  1763  000D94  0012               	return	
  1764                           
  1765                           ;Can_XmitService.c: 339: LATA1 = 1;
  1766  000D96  8289               	bsf	3977,1,c	;volatile
  1767  000D98  0012               	return	
  1768  000D9A                     __end_of_ToggleDebugLED:
  1769                           	opt stack 0
  1770                           tosu	equ	0xFFF
  1771                           tosh	equ	0xFFE
  1772                           tosl	equ	0xFFD
  1773                           pclath	equ	0xFFA
  1774                           tblptru	equ	0xFF8
  1775                           tblptrh	equ	0xFF7
  1776                           tblptrl	equ	0xFF6
  1777                           tablat	equ	0xFF5
  1778                           prodh	equ	0xFF4
  1779                           prodl	equ	0xFF3
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           indf2	equ	0xFDF
  1783                           postinc2	equ	0xFDE
  1784                           postdec2	equ	0xFDD
  1785                           fsr2h	equ	0xFDA
  1786                           fsr2l	equ	0xFD9
  1787                           status	equ	0xFD8
  1788                           
  1789 ;; *************** function _InitPins *****************
  1790 ;; Defined at:
  1791 ;;		line 313 in file "Can_XmitService.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;		None
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;		None
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      void 
  1798 ;; Registers used:
  1799 ;;		wreg, status,2
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1805 ;;      Params:         0       0       0       0
  1806 ;;      Locals:         0       0       0       0
  1807 ;;      Temps:          0       0       0       0
  1808 ;;      Totals:         0       0       0       0
  1809 ;;Total ram usage:        0 bytes
  1810 ;; Hardware stack levels used:    1
  1811 ;; Hardware stack levels required when called:    3
  1812 ;; This function calls:
  1813 ;;		Nothing
  1814 ;; This function is called by:
  1815 ;;		_RunCan_XmitService
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819                           	psect	text10
  1820  000C64                     __ptext10:
  1821                           	opt stack 0
  1822  000C64                     _InitPins:
  1823                           	opt stack 25
  1824                           
  1825                           ;Can_XmitService.c: 316: PORTB = 0x00;
  1826                           
  1827                           ;incstack = 0
  1828  000C64  0E00               	movlw	0
  1829  000C66  6E81               	movwf	3969,c	;volatile
  1830                           
  1831                           ;Can_XmitService.c: 317: LATB = 0x00;
  1832  000C68  0E00               	movlw	0
  1833  000C6A  6E8A               	movwf	3978,c	;volatile
  1834                           
  1835                           ;Can_XmitService.c: 318: PORTA = 0x00;
  1836  000C6C  0E00               	movlw	0
  1837  000C6E  6E80               	movwf	3968,c	;volatile
  1838                           
  1839                           ;Can_XmitService.c: 319: LATA = 0x00;
  1840  000C70  0E00               	movlw	0
  1841  000C72  6E89               	movwf	3977,c	;volatile
  1842                           
  1843                           ;Can_XmitService.c: 320: ADCON1 = 0x0F;
  1844  000C74  0E0F               	movlw	15
  1845  000C76  6EC1               	movwf	4033,c	;volatile
  1846                           
  1847                           ;Can_XmitService.c: 321: TRISAbits.TRISA0 = 0;
  1848  000C78  9092               	bcf	3986,0,c	;volatile
  1849                           
  1850                           ;Can_XmitService.c: 322: TRISAbits.TRISA1 = 0;
  1851  000C7A  9292               	bcf	3986,1,c	;volatile
  1852                           
  1853                           ;Can_XmitService.c: 323: TRISAbits.TRISA2 = 0;
  1854  000C7C  9492               	bcf	3986,2,c	;volatile
  1855                           
  1856                           ;Can_XmitService.c: 324: TRISAbits.TRISA3 = 0;
  1857  000C7E  9692               	bcf	3986,3,c	;volatile
  1858                           
  1859                           ;Can_XmitService.c: 325: TRISBbits.TRISB2 = 0;
  1860  000C80  9493               	bcf	3987,2,c	;volatile
  1861                           
  1862                           ;Can_XmitService.c: 326: TRISBbits.TRISB3 = 1;
  1863  000C82  8693               	bsf	3987,3,c	;volatile
  1864                           
  1865                           ;Can_XmitService.c: 327: LATA1 = 0;
  1866  000C84  9289               	bcf	3977,1,c	;volatile
  1867                           
  1868                           ;Can_XmitService.c: 328: LATA0 = 0;
  1869  000C86  9089               	bcf	3977,0,c	;volatile
  1870                           
  1871                           ;Can_XmitService.c: 329: LATA2 = 0;
  1872  000C88  9489               	bcf	3977,2,c	;volatile
  1873                           
  1874                           ;Can_XmitService.c: 330: LATA3 = 1;
  1875  000C8A  8689               	bsf	3977,3,c	;volatile
  1876                           
  1877                           ;Can_XmitService.c: 331: LATB2 = 0;
  1878  000C8C  948A               	bcf	3978,2,c	;volatile
  1879  000C8E  0012               	return		;funcret
  1880  000C90                     __end_of_InitPins:
  1881                           	opt stack 0
  1882                           tosu	equ	0xFFF
  1883                           tosh	equ	0xFFE
  1884                           tosl	equ	0xFFD
  1885                           pclath	equ	0xFFA
  1886                           tblptru	equ	0xFF8
  1887                           tblptrh	equ	0xFF7
  1888                           tblptrl	equ	0xFF6
  1889                           tablat	equ	0xFF5
  1890                           prodh	equ	0xFF4
  1891                           prodl	equ	0xFF3
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           indf2	equ	0xFDF
  1895                           postinc2	equ	0xFDE
  1896                           postdec2	equ	0xFDD
  1897                           fsr2h	equ	0xFDA
  1898                           fsr2l	equ	0xFD9
  1899                           status	equ	0xFD8
  1900                           
  1901 ;; *************** function _InitCanHardware *****************
  1902 ;; Defined at:
  1903 ;;		line 219 in file "Can_XmitService.c"
  1904 ;; Parameters:    Size  Location     Type
  1905 ;;		None
  1906 ;; Auto vars:     Size  Location     Type
  1907 ;;		None
  1908 ;; Return value:  Size  Location     Type
  1909 ;;                  1    wreg      void 
  1910 ;; Registers used:
  1911 ;;		wreg, status,2
  1912 ;; Tracked objects:
  1913 ;;		On entry : 0/0
  1914 ;;		On exit  : 0/0
  1915 ;;		Unchanged: 0/0
  1916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1917 ;;      Params:         0       0       0       0
  1918 ;;      Locals:         0       0       0       0
  1919 ;;      Temps:          0       0       0       0
  1920 ;;      Totals:         0       0       0       0
  1921 ;;Total ram usage:        0 bytes
  1922 ;; Hardware stack levels used:    1
  1923 ;; Hardware stack levels required when called:    3
  1924 ;; This function calls:
  1925 ;;		Nothing
  1926 ;; This function is called by:
  1927 ;;		_RunCan_XmitService
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           	psect	text11
  1932  000B28                     __ptext11:
  1933                           	opt stack 0
  1934  000B28                     _InitCanHardware:
  1935                           	opt stack 25
  1936                           
  1937                           ;Can_XmitService.c: 223: CANCON = 0x80;
  1938                           
  1939                           ;incstack = 0
  1940  000B28  0E80               	movlw	128
  1941  000B2A  6E6F               	movwf	3951,c	;volatile
  1942  000B2C                     l430:
  1943  000B2C  AE6E               	btfss	3950,7,c	;volatile
  1944  000B2E  D7FE               	goto	l430
  1945                           
  1946                           ;Can_XmitService.c: 226: CIOCON = 0x20;
  1947  000B30  0E20               	movlw	32
  1948  000B32  6E73               	movwf	3955,c	;volatile
  1949                           
  1950                           ;Can_XmitService.c: 243: BRGCON2bits.SEG2PHTS = 1;
  1951  000B34  8E71               	bsf	3953,7,c	;volatile
  1952                           
  1953                           ;Can_XmitService.c: 245: BRGCON1bits.BRP0 = 0;
  1954  000B36  9070               	bcf	3952,0,c	;volatile
  1955                           
  1956                           ;Can_XmitService.c: 246: BRGCON1bits.BRP1 = 1;
  1957  000B38  8270               	bsf	3952,1,c	;volatile
  1958                           
  1959                           ;Can_XmitService.c: 247: BRGCON1bits.BRP2 = 1;
  1960  000B3A  8470               	bsf	3952,2,c	;volatile
  1961                           
  1962                           ;Can_XmitService.c: 248: BRGCON1bits.BRP3 = 0;
  1963  000B3C  9670               	bcf	3952,3,c	;volatile
  1964                           
  1965                           ;Can_XmitService.c: 250: BRGCON2bits.PRSEG0 = 0;
  1966  000B3E  9071               	bcf	3953,0,c	;volatile
  1967                           
  1968                           ;Can_XmitService.c: 251: BRGCON2bits.PRSEG1 = 0;
  1969  000B40  9271               	bcf	3953,1,c	;volatile
  1970                           
  1971                           ;Can_XmitService.c: 252: BRGCON2bits.PRSEG2 = 0;
  1972  000B42  9471               	bcf	3953,2,c	;volatile
  1973                           
  1974                           ;Can_XmitService.c: 254: BRGCON2bits.SEG1PH0 = 0;
  1975  000B44  9671               	bcf	3953,3,c	;volatile
  1976                           
  1977                           ;Can_XmitService.c: 255: BRGCON2bits.SEG1PH1 = 0;
  1978  000B46  9871               	bcf	3953,4,c	;volatile
  1979                           
  1980                           ;Can_XmitService.c: 256: BRGCON2bits.SEG1PH2 = 0;
  1981  000B48  9A71               	bcf	3953,5,c	;volatile
  1982                           
  1983                           ;Can_XmitService.c: 258: BRGCON3bits.SEG2PH0 = 1;
  1984  000B4A  8072               	bsf	3954,0,c	;volatile
  1985                           
  1986                           ;Can_XmitService.c: 259: BRGCON3bits.SEG2PH1 = 0;
  1987  000B4C  9272               	bcf	3954,1,c	;volatile
  1988                           
  1989                           ;Can_XmitService.c: 260: BRGCON3bits.SEG2PH2 = 0;
  1990  000B4E  9472               	bcf	3954,2,c	;volatile
  1991                           
  1992                           ;Can_XmitService.c: 262: BRGCON1bits.SJW0 = 0;
  1993  000B50  9C70               	bcf	3952,6,c	;volatile
  1994                           
  1995                           ;Can_XmitService.c: 269: RXB0CONbits.RXB0DBEN = 0;
  1996  000B52  9460               	bcf	3936,2,c	;volatile
  1997                           
  1998                           ;Can_XmitService.c: 272: RXB0CONbits.RXM0 = 1;
  1999  000B54  8A60               	bsf	3936,5,c	;volatile
  2000                           
  2001                           ;Can_XmitService.c: 273: RXB0CONbits.RXM1 = 1;
  2002  000B56  8C60               	bsf	3936,6,c	;volatile
  2003                           
  2004                           ;Can_XmitService.c: 276: RXF0SIDH = 0x10101010;
  2005  000B58  0E10               	movlw	16
  2006  000B5A  010F               	movlb	15	; () banked
  2007  000B5C  6F00               	movwf	0,b	;volatile
  2008                           
  2009                           ;Can_XmitService.c: 277: RXF0SIDL = 0b10100000;
  2010  000B5E  0EA0               	movlw	160
  2011  000B60  010F               	movlb	15	; () banked
  2012  000B62  6F01               	movwf	1,b	;volatile
  2013                           
  2014                           ;Can_XmitService.c: 278: RXM0SIDH = 0x00;
  2015  000B64  0E00               	movlw	0
  2016  000B66  010F               	movlb	15	; () banked
  2017  000B68  6F18               	movwf	24,b	;volatile
  2018                           
  2019                           ;Can_XmitService.c: 279: RXM0SIDL = 0b00000000;
  2020  000B6A  0E00               	movlw	0
  2021  000B6C  010F               	movlb	15	; () banked
  2022  000B6E  6F19               	movwf	25,b	;volatile
  2023                           
  2024                           ;Can_XmitService.c: 291: ECANCON = 0x00;
  2025  000B70  0E00               	movlw	0
  2026  000B72  6E77               	movwf	3959,c	;volatile
  2027                           
  2028                           ;Can_XmitService.c: 292: CANCON = 0b00010000;
  2029  000B74  0E10               	movlw	16
  2030  000B76  6E6F               	movwf	3951,c	;volatile
  2031  000B78                     l433:
  2032  000B78  BE6E               	btfsc	3950,7,c	;volatile
  2033  000B7A  D7FE               	goto	l433
  2034                           
  2035                           ;Can_XmitService.c: 296: RXB0IE = 1;
  2036  000B7C  80A3               	bsf	4003,0,c	;volatile
  2037                           
  2038                           ;Can_XmitService.c: 297: ERRIE = 1;
  2039  000B7E  8AA3               	bsf	4003,5,c	;volatile
  2040                           
  2041                           ;Can_XmitService.c: 298: IRXIE = 1;
  2042  000B80  8EA3               	bsf	4003,7,c	;volatile
  2043                           
  2044                           ;Can_XmitService.c: 302: RXB0IF = 0;
  2045  000B82  90A4               	bcf	4004,0,c	;volatile
  2046                           
  2047                           ;Can_XmitService.c: 303: ERRIF = 0;
  2048  000B84  9AA4               	bcf	4004,5,c	;volatile
  2049                           
  2050                           ;Can_XmitService.c: 304: IRXIF = 0;
  2051  000B86  9EA4               	bcf	4004,7,c	;volatile
  2052                           
  2053                           ;Can_XmitService.c: 310: RXB0CONbits.RXFUL = 0;
  2054  000B88  9E60               	bcf	3936,7,c	;volatile
  2055  000B8A  0012               	return		;funcret
  2056  000B8C                     __end_of_InitCanHardware:
  2057                           	opt stack 0
  2058                           tosu	equ	0xFFF
  2059                           tosh	equ	0xFFE
  2060                           tosl	equ	0xFFD
  2061                           pclath	equ	0xFFA
  2062                           tblptru	equ	0xFF8
  2063                           tblptrh	equ	0xFF7
  2064                           tblptrl	equ	0xFF6
  2065                           tablat	equ	0xFF5
  2066                           prodh	equ	0xFF4
  2067                           prodl	equ	0xFF3
  2068                           postinc0	equ	0xFEE
  2069                           wreg	equ	0xFE8
  2070                           indf2	equ	0xFDF
  2071                           postinc2	equ	0xFDE
  2072                           postdec2	equ	0xFDD
  2073                           fsr2h	equ	0xFDA
  2074                           fsr2l	equ	0xFD9
  2075                           status	equ	0xFD8
  2076                           
  2077 ;; *************** function _ES_DeQueue *****************
  2078 ;; Defined at:
  2079 ;;		line 164 in file "ES_Queue.c"
  2080 ;; Parameters:    Size  Location     Type
  2081 ;;  pBlock          2   33[COMRAM] PTR struct ES_Event_t
  2082 ;;		 -> Queue0(12), 
  2083 ;;  pReturnEvent    2   35[COMRAM] PTR struct ES_Event_t
  2084 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;  pThisQueue      2   41[COMRAM] PTR struct .
  2087 ;;		 -> Queue0(12), 
  2088 ;;  NumLeft         1   40[COMRAM] unsigned char 
  2089 ;;  SaveCrit        1   39[COMRAM] unsigned char 
  2090 ;; Return value:  Size  Location     Type
  2091 ;;                  1    wreg      unsigned char 
  2092 ;; Registers used:
  2093 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2094 ;; Tracked objects:
  2095 ;;		On entry : 0/0
  2096 ;;		On exit  : 0/0
  2097 ;;		Unchanged: 0/0
  2098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2099 ;;      Params:         4       0       0       0
  2100 ;;      Locals:         4       0       0       0
  2101 ;;      Temps:          2       0       0       0
  2102 ;;      Totals:        10       0       0       0
  2103 ;;Total ram usage:       10 bytes
  2104 ;; Hardware stack levels used:    1
  2105 ;; Hardware stack levels required when called:    4
  2106 ;; This function calls:
  2107 ;;		___lbmod
  2108 ;;		___wmul
  2109 ;; This function is called by:
  2110 ;;		_ES_Run
  2111 ;;		_ES_RecallEvents
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           	psect	text12
  2116  0003B6                     __ptext12:
  2117                           	opt stack 0
  2118  0003B6                     _ES_DeQueue:
  2119                           	opt stack 25
  2120                           
  2121                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  2122                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  2123                           ;ES_Queue.c: 168: uint8_t NumLeft;
  2124                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  2125                           
  2126                           ;incstack = 0
  2127  0003B6  C022  F02A         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  2128  0003BA  C023  F02B         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  2129                           
  2130                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  2131  0003BE  EE20 F002          	lfsr	2,2
  2132  0003C2  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2133  0003C4  26D9               	addwf	fsr2l,f,c
  2134  0003C6  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2135  0003C8  22DA               	addwfc	fsr2h,f,c
  2136  0003CA  50DF               	movf	indf2,w,c
  2137  0003CC  B4D8               	btfsc	status,2,c
  2138  0003CE  D05E               	goto	l2430
  2139                           
  2140                           ;ES_Queue.c: 172: {
  2141                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  2142  0003D0  CFF2 F028          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  2143  0003D4  9EF2               	bcf	intcon,7,c	;volatile
  2144                           
  2145                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  2146  0003D6  EE20 F001          	lfsr	2,1
  2147  0003DA  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2148  0003DC  26D9               	addwf	fsr2l,f,c
  2149  0003DE  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2150  0003E0  22DA               	addwfc	fsr2h,f,c
  2151  0003E2  50DF               	movf	indf2,w,c
  2152  0003E4  6E26               	movwf	??_ES_DeQueue& (0+255),c
  2153  0003E6  0E01               	movlw	1
  2154  0003E8  2426               	addwf	??_ES_DeQueue,w,c
  2155  0003EA  6E1C               	movwf	___wmul@multiplier,c
  2156  0003EC  6A1D               	clrf	___wmul@multiplier+1,c
  2157  0003EE  0E00               	movlw	0
  2158  0003F0  221D               	addwfc	___wmul@multiplier+1,f,c
  2159  0003F2  0E00               	movlw	0
  2160  0003F4  6E1F               	movwf	___wmul@multiplicand+1,c
  2161  0003F6  0E03               	movlw	3
  2162  0003F8  6E1E               	movwf	___wmul@multiplicand,c
  2163  0003FA  EC85  F006         	call	___wmul	;wreg free
  2164  0003FE  501C               	movf	?___wmul,w,c
  2165  000400  2422               	addwf	ES_DeQueue@pBlock,w,c
  2166  000402  6ED9               	movwf	fsr2l,c
  2167  000404  501D               	movf	?___wmul+1,w,c
  2168  000406  2023               	addwfc	ES_DeQueue@pBlock+1,w,c
  2169  000408  6EDA               	movwf	fsr2h,c
  2170  00040A  C024  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  2171  00040E  C025  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  2172  000412  CFDE FFE6          	movff	postinc2,postinc1
  2173  000416  CFDE FFE6          	movff	postinc2,postinc1
  2174  00041A  CFDE FFE6          	movff	postinc2,postinc1
  2175                           
  2176                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  2177  00041E  EE20 F001          	lfsr	2,1
  2178  000422  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2179  000424  26D9               	addwf	fsr2l,f,c
  2180  000426  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2181  000428  22DA               	addwfc	fsr2h,f,c
  2182  00042A  2ADF               	incf	indf2,f,c
  2183                           
  2184                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  2185  00042C  C02A  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  2186  000430  C02B  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  2187  000434  EE10 F001          	lfsr	1,1
  2188  000438  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2189  00043A  26E1               	addwf	fsr1l,f,c
  2190  00043C  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2191  00043E  22E2               	addwfc	fsr1h,f,c
  2192  000440  50DE               	movf	postinc2,w,c
  2193  000442  5CE6               	subwf	postinc1,w,c
  2194  000444  A0D8               	btfss	status,0,c
  2195  000446  D016               	goto	l2426
  2196                           
  2197                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  2198  000448  EE20 F001          	lfsr	2,1
  2199  00044C  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2200  00044E  26D9               	addwf	fsr2l,f,c
  2201  000450  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2202  000452  22DA               	addwfc	fsr2h,f,c
  2203  000454  C02A  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  2204  000458  C02B  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  2205  00045C  50E7               	movf	indf1,w,c
  2206  00045E  6E16               	movwf	___lbmod@divisor,c
  2207  000460  EE10 F001          	lfsr	1,1
  2208  000464  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2209  000466  26E1               	addwf	fsr1l,f,c
  2210  000468  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2211  00046A  22E2               	addwfc	fsr1h,f,c
  2212  00046C  50E7               	movf	indf1,w,c
  2213  00046E  EC5D  F006         	call	___lbmod
  2214  000472  6EDF               	movwf	indf2,c
  2215  000474                     l2426:
  2216                           
  2217                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  2218  000474  EE20 F002          	lfsr	2,2
  2219  000478  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2220  00047A  26D9               	addwf	fsr2l,f,c
  2221  00047C  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2222  00047E  22DA               	addwfc	fsr2h,f,c
  2223  000480  06DF               	decf	indf2,f,c
  2224  000482  50DF               	movf	indf2,w,c
  2225  000484  6E29               	movwf	ES_DeQueue@NumLeft,c
  2226                           
  2227                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  2228  000486  C028  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  2229                           
  2230                           ;ES_Queue.c: 183: }else {
  2231  00048A  D012               	goto	l2436
  2232  00048C                     l2430:
  2233                           
  2234                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  2235  00048C  C024  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  2236  000490  C025  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  2237  000494  0E00               	movlw	0
  2238  000496  6EDF               	movwf	indf2,c
  2239                           
  2240                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  2241  000498  EE20 F001          	lfsr	2,1
  2242  00049C  5024               	movf	ES_DeQueue@pReturnEvent,w,c
  2243  00049E  26D9               	addwf	fsr2l,f,c
  2244  0004A0  5025               	movf	ES_DeQueue@pReturnEvent+1,w,c
  2245  0004A2  22DA               	addwfc	fsr2h,f,c
  2246  0004A4  0E00               	movlw	0
  2247  0004A6  6EDE               	movwf	postinc2,c
  2248  0004A8  0E00               	movlw	0
  2249  0004AA  6EDD               	movwf	postdec2,c
  2250                           
  2251                           ;ES_Queue.c: 186: NumLeft = 0;
  2252  0004AC  0E00               	movlw	0
  2253  0004AE  6E29               	movwf	ES_DeQueue@NumLeft,c
  2254  0004B0                     l2436:
  2255                           
  2256                           ;ES_Queue.c: 187: }
  2257                           ;ES_Queue.c: 188: return NumLeft;
  2258  0004B0  5029               	movf	ES_DeQueue@NumLeft,w,c
  2259  0004B2  0012               	return	
  2260  0004B4                     __end_of_ES_DeQueue:
  2261                           	opt stack 0
  2262                           tosu	equ	0xFFF
  2263                           tosh	equ	0xFFE
  2264                           tosl	equ	0xFFD
  2265                           pclath	equ	0xFFA
  2266                           tblptru	equ	0xFF8
  2267                           tblptrh	equ	0xFF7
  2268                           tblptrl	equ	0xFF6
  2269                           tablat	equ	0xFF5
  2270                           prodh	equ	0xFF4
  2271                           prodl	equ	0xFF3
  2272                           intcon	equ	0xFF2
  2273                           postinc0	equ	0xFEE
  2274                           wreg	equ	0xFE8
  2275                           indf1	equ	0xFE7
  2276                           postinc1	equ	0xFE6
  2277                           fsr1h	equ	0xFE2
  2278                           fsr1l	equ	0xFE1
  2279                           indf2	equ	0xFDF
  2280                           postinc2	equ	0xFDE
  2281                           postdec2	equ	0xFDD
  2282                           fsr2h	equ	0xFDA
  2283                           fsr2l	equ	0xFD9
  2284                           status	equ	0xFD8
  2285                           
  2286 ;; *************** function ___lbmod *****************
  2287 ;; Defined at:
  2288 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;  dividend        1    wreg     unsigned char 
  2291 ;;  divisor         1   21[COMRAM] unsigned char 
  2292 ;; Auto vars:     Size  Location     Type
  2293 ;;  dividend        1   22[COMRAM] unsigned char 
  2294 ;;  rem             1   24[COMRAM] unsigned char 
  2295 ;;  counter         1   23[COMRAM] unsigned char 
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      unsigned char 
  2298 ;; Registers used:
  2299 ;;		wreg, status,2, status,0
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2305 ;;      Params:         1       0       0       0
  2306 ;;      Locals:         3       0       0       0
  2307 ;;      Temps:          0       0       0       0
  2308 ;;      Totals:         4       0       0       0
  2309 ;;Total ram usage:        4 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    3
  2312 ;; This function calls:
  2313 ;;		Nothing
  2314 ;; This function is called by:
  2315 ;;		_ES_DeQueue
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           	psect	text13
  2320  000CBA                     __ptext13:
  2321                           	opt stack 0
  2322  000CBA                     ___lbmod:
  2323                           	opt stack 25
  2324                           
  2325                           ;incstack = 0
  2326                           ;___lbmod@dividend stored from wreg
  2327  000CBA  6E17               	movwf	___lbmod@dividend,c
  2328  000CBC  0E08               	movlw	8
  2329  000CBE  6E18               	movwf	___lbmod@counter,c
  2330  000CC0  0E00               	movlw	0
  2331  000CC2  6E19               	movwf	___lbmod@rem,c
  2332  000CC4                     l2382:
  2333  000CC4  90D8               	bcf	status,0,c
  2334  000CC6  3417               	rlcf	___lbmod@dividend,w,c
  2335  000CC8  3419               	rlcf	___lbmod@rem,w,c
  2336  000CCA  6E19               	movwf	___lbmod@rem,c
  2337  000CCC  90D8               	bcf	status,0,c
  2338  000CCE  3617               	rlcf	___lbmod@dividend,f,c
  2339  000CD0  5016               	movf	___lbmod@divisor,w,c
  2340  000CD2  5C19               	subwf	___lbmod@rem,w,c
  2341  000CD4  A0D8               	btfss	status,0,c
  2342  000CD6  D002               	goto	l2390
  2343  000CD8  5016               	movf	___lbmod@divisor,w,c
  2344  000CDA  5E19               	subwf	___lbmod@rem,f,c
  2345  000CDC                     l2390:
  2346  000CDC  2E18               	decfsz	___lbmod@counter,f,c
  2347  000CDE  D7F2               	goto	l2382
  2348  000CE0  5019               	movf	___lbmod@rem,w,c
  2349  000CE2  0012               	return	
  2350  000CE4                     __end_of___lbmod:
  2351                           	opt stack 0
  2352                           tosu	equ	0xFFF
  2353                           tosh	equ	0xFFE
  2354                           tosl	equ	0xFFD
  2355                           pclath	equ	0xFFA
  2356                           tblptru	equ	0xFF8
  2357                           tblptrh	equ	0xFF7
  2358                           tblptrl	equ	0xFF6
  2359                           tablat	equ	0xFF5
  2360                           prodh	equ	0xFF4
  2361                           prodl	equ	0xFF3
  2362                           intcon	equ	0xFF2
  2363                           postinc0	equ	0xFEE
  2364                           wreg	equ	0xFE8
  2365                           indf1	equ	0xFE7
  2366                           postinc1	equ	0xFE6
  2367                           fsr1h	equ	0xFE2
  2368                           fsr1l	equ	0xFE1
  2369                           indf2	equ	0xFDF
  2370                           postinc2	equ	0xFDE
  2371                           postdec2	equ	0xFDD
  2372                           fsr2h	equ	0xFDA
  2373                           fsr2l	equ	0xFD9
  2374                           status	equ	0xFD8
  2375                           
  2376 ;; *************** function _ES_CheckUserEvents *****************
  2377 ;; Defined at:
  2378 ;;		line 46 in file "ES_CheckEvents.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;		None
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;  i               1   21[COMRAM] unsigned char 
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  1    wreg      unsigned char 
  2385 ;; Registers used:
  2386 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2392 ;;      Params:         0       0       0       0
  2393 ;;      Locals:         1       0       0       0
  2394 ;;      Temps:          0       0       0       0
  2395 ;;      Totals:         1       0       0       0
  2396 ;;Total ram usage:        1 bytes
  2397 ;; Hardware stack levels used:    1
  2398 ;; Hardware stack levels required when called:    4
  2399 ;; This function calls:
  2400 ;;		_Check4Keystroke
  2401 ;; This function is called by:
  2402 ;;		_ES_Run
  2403 ;; This function uses a non-reentrant model
  2404 ;;
  2405                           
  2406                           	psect	text14
  2407  000B8C                     __ptext14:
  2408                           	opt stack 0
  2409  000B8C                     _ES_CheckUserEvents:
  2410                           	opt stack 25
  2411                           
  2412                           ;ES_CheckEvents.c: 48: uint8_t i;
  2413                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  2414                           
  2415                           ;incstack = 0
  2416  000B8C  0E00               	movlw	0
  2417  000B8E  6E16               	movwf	ES_CheckUserEvents@i,c
  2418  000B90  5016               	movf	ES_CheckUserEvents@i,w,c
  2419  000B92  A4D8               	btfss	status,2,c
  2420  000B94  0012               	return	
  2421                           
  2422                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  2423  000B96  5016               	movf	ES_CheckUserEvents@i,w,c
  2424  000B98  0D02               	mullw	2
  2425  000B9A  0E57               	movlw	low _ES_EventList
  2426  000B9C  24F3               	addwf	prodl,w,c
  2427  000B9E  6EF6               	movwf	tblptrl,c
  2428  000BA0  0E03               	movlw	high _ES_EventList
  2429  000BA2  20F4               	addwfc	prodh,w,c
  2430  000BA4  6EF7               	movwf	tblptrh,c
  2431  000BA6                     	if	0	;There are less than 3 active tblptr bytes
  2432  000BA6                     	endif
  2433  000BA6  D801               	call	u1678
  2434  000BA8  D00C               	goto	u1679
  2435  000BAA                     u1678:
  2436  000BAA  0005               	push	
  2437  000BAC  6EFA               	movwf	pclath,c
  2438  000BAE  0009               	tblrd		*+
  2439  000BB0  50F5               	movf	tablat,w,c
  2440  000BB2  6EFD               	movwf	tosl,c
  2441  000BB4  0009               	tblrd		*+
  2442  000BB6  50F5               	movf	tablat,w,c
  2443  000BB8  6EFE               	movwf	tosh,c
  2444  000BBA  50F8               	movf	tblptru,w,c
  2445  000BBC  6EFF               	movwf	tosu,c
  2446  000BBE  50FA               	movf	pclath,w,c
  2447  000BC0  0012               	return		;indir
  2448  000BC2                     u1679:
  2449  000BC2  06E8               	decf	wreg,f,c
  2450  000BC4  B4D8               	btfsc	status,2,c
  2451  000BC6  0012               	return	
  2452                           
  2453                           ;ES_CheckEvents.c: 52: break;
  2454  000BC8  2A16               	incf	ES_CheckUserEvents@i,f,c
  2455  000BCA  D7E2               	goto	L1
  2456  000BCC                     __end_of_ES_CheckUserEvents:
  2457                           	opt stack 0
  2458                           tosu	equ	0xFFF
  2459                           tosh	equ	0xFFE
  2460                           tosl	equ	0xFFD
  2461                           pclath	equ	0xFFA
  2462                           tblptru	equ	0xFF8
  2463                           tblptrh	equ	0xFF7
  2464                           tblptrl	equ	0xFF6
  2465                           tablat	equ	0xFF5
  2466                           prodh	equ	0xFF4
  2467                           prodl	equ	0xFF3
  2468                           intcon	equ	0xFF2
  2469                           postinc0	equ	0xFEE
  2470                           wreg	equ	0xFE8
  2471                           indf1	equ	0xFE7
  2472                           postinc1	equ	0xFE6
  2473                           fsr1h	equ	0xFE2
  2474                           fsr1l	equ	0xFE1
  2475                           indf2	equ	0xFDF
  2476                           postinc2	equ	0xFDE
  2477                           postdec2	equ	0xFDD
  2478                           fsr2h	equ	0xFDA
  2479                           fsr2l	equ	0xFD9
  2480                           status	equ	0xFD8
  2481                           
  2482 ;; *************** function _Check4Keystroke *****************
  2483 ;; Defined at:
  2484 ;;		line 62 in file "EventCheckers.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;		None
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      unsigned char 
  2491 ;; Registers used:
  2492 ;;		wreg
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2498 ;;      Params:         0       0       0       0
  2499 ;;      Locals:         0       0       0       0
  2500 ;;      Temps:          0       0       0       0
  2501 ;;      Totals:         0       0       0       0
  2502 ;;Total ram usage:        0 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:    3
  2505 ;; This function calls:
  2506 ;;		Nothing
  2507 ;; This function is called by:
  2508 ;;		_ES_CheckUserEvents
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text15
  2513  000DCE                     __ptext15:
  2514                           	opt stack 0
  2515  000DCE                     _Check4Keystroke:
  2516                           	opt stack 25
  2517                           
  2518                           ;EventCheckers.c: 78: return 0;
  2519                           
  2520                           ;incstack = 0
  2521  000DCE  0E00               	movlw	0
  2522  000DD0  0012               	return	
  2523  000DD2                     __end_of_Check4Keystroke:
  2524                           	opt stack 0
  2525                           tosu	equ	0xFFF
  2526                           tosh	equ	0xFFE
  2527                           tosl	equ	0xFFD
  2528                           pclath	equ	0xFFA
  2529                           tblptru	equ	0xFF8
  2530                           tblptrh	equ	0xFF7
  2531                           tblptrl	equ	0xFF6
  2532                           tablat	equ	0xFF5
  2533                           prodh	equ	0xFF4
  2534                           prodl	equ	0xFF3
  2535                           intcon	equ	0xFF2
  2536                           postinc0	equ	0xFEE
  2537                           wreg	equ	0xFE8
  2538                           indf1	equ	0xFE7
  2539                           postinc1	equ	0xFE6
  2540                           fsr1h	equ	0xFE2
  2541                           fsr1l	equ	0xFE1
  2542                           indf2	equ	0xFDF
  2543                           postinc2	equ	0xFDE
  2544                           postdec2	equ	0xFDD
  2545                           fsr2h	equ	0xFDA
  2546                           fsr2l	equ	0xFD9
  2547                           status	equ	0xFD8
  2548                           
  2549 ;; *************** function _ES_Initialize *****************
  2550 ;; Defined at:
  2551 ;;		line 242 in file "ES_Framework.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;  NewRate         2    4[BANK0 ] enum E15419
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;  i               1    6[BANK0 ] unsigned char 
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      enum E15490
  2558 ;; Registers used:
  2559 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2565 ;;      Params:         0       2       0       0
  2566 ;;      Locals:         0       1       0       0
  2567 ;;      Temps:          0       0       0       0
  2568 ;;      Totals:         0       3       0       0
  2569 ;;Total ram usage:        3 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    7
  2572 ;; This function calls:
  2573 ;;		_ES_InitQueue
  2574 ;;		_ES_Timer_Init
  2575 ;;		_InitCan_XmitService
  2576 ;; This function is called by:
  2577 ;;		_main
  2578 ;; This function uses a non-reentrant model
  2579 ;;
  2580                           
  2581                           	psect	text16
  2582  0005AC                     __ptext16:
  2583                           	opt stack 0
  2584  0005AC                     _ES_Initialize:
  2585                           	opt stack 23
  2586                           
  2587                           ;ES_Framework.c: 243: uint8_t i;
  2588                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  2589                           
  2590                           ;incstack = 0
  2591  0005AC  C090  F018         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  2592  0005B0  C091  F019         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  2593  0005B4  ECDD  F006         	call	_ES_Timer_Init	;wreg free
  2594                           
  2595                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  2596  0005B8  0E00               	movlw	0
  2597  0005BA  0100               	movlb	0	; () banked
  2598  0005BC  6F92               	movwf	ES_Initialize@i& (0+255),b
  2599  0005BE                     l2500:
  2600                           
  2601                           ; BSR set to: 0
  2602  0005BE  0100               	movlb	0	; () banked
  2603  0005C0  5192               	movf	ES_Initialize@i& (0+255),w,b
  2604  0005C2  0100               	movlb	0	; () banked
  2605  0005C4  A4D8               	btfss	status,2,c
  2606  0005C6  D066               	goto	l2524
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  2610                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  2611                           
  2612                           ; BSR set to: 0
  2613                           
  2614                           ; BSR set to: 0
  2615  0005C8  0100               	movlb	0	; () banked
  2616  0005CA  5192               	movf	ES_Initialize@i& (0+255),w,b
  2617  0005CC  0D04               	mullw	4
  2618  0005CE  0E50               	movlw	low _ServDescList
  2619  0005D0  24F3               	addwf	prodl,w,c
  2620  0005D2  6EF6               	movwf	tblptrl,c
  2621  0005D4  0E03               	movlw	high _ServDescList
  2622  0005D6  20F4               	addwfc	prodh,w,c
  2623  0005D8  6EF7               	movwf	tblptrh,c
  2624  0005DA                     	if	0	;There are less than 3 active tblptr bytes
  2625  0005DA                     	endif
  2626  0005DA  0009               	tblrd		*+
  2627  0005DC  50F5               	movf	tablat,w,c
  2628  0005DE  0009               	tblrd		*+
  2629  0005E0  10F5               	iorwf	tablat,w,c
  2630  0005E2  B4D8               	btfsc	status,2,c
  2631  0005E4  D013               	goto	l2508
  2632                           
  2633                           ; BSR set to: 0
  2634  0005E6  0100               	movlb	0	; () banked
  2635  0005E8  5192               	movf	ES_Initialize@i& (0+255),w,b
  2636  0005EA  0D04               	mullw	4
  2637  0005EC  0E02               	movlw	2
  2638  0005EE  26F3               	addwf	prodl,f,c
  2639  0005F0  0E00               	movlw	0
  2640  0005F2  22F4               	addwfc	prodh,f,c
  2641  0005F4  0E50               	movlw	low _ServDescList
  2642  0005F6  24F3               	addwf	prodl,w,c
  2643  0005F8  6EF6               	movwf	tblptrl,c
  2644  0005FA  0E03               	movlw	high _ServDescList
  2645  0005FC  20F4               	addwfc	prodh,w,c
  2646  0005FE  6EF7               	movwf	tblptrh,c
  2647  000600                     	if	0	;There are less than 3 active tblptr bytes
  2648  000600                     	endif
  2649  000600  0009               	tblrd		*+
  2650  000602  50F5               	movf	tablat,w,c
  2651  000604  0009               	tblrd		*+
  2652  000606  10F5               	iorwf	tablat,w,c
  2653  000608  A4D8               	btfss	status,2,c
  2654  00060A  D002               	goto	l2512
  2655  00060C                     l2508:
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;ES_Framework.c: 249: return FailedPointer;
  2659  00060C  0E03               	movlw	3
  2660                           
  2661                           ; BSR set to: 0
  2662  00060E  0012               	return	
  2663  000610                     l2512:
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  2667  000610  0100               	movlb	0	; () banked
  2668  000612  5192               	movf	ES_Initialize@i& (0+255),w,b
  2669  000614  0D03               	mullw	3
  2670  000616  0E54               	movlw	low _EventQueues
  2671  000618  24F3               	addwf	prodl,w,c
  2672  00061A  6EF6               	movwf	tblptrl,c
  2673  00061C  0E03               	movlw	high _EventQueues
  2674  00061E  20F4               	addwfc	prodh,w,c
  2675  000620  6EF7               	movwf	tblptrh,c
  2676  000622                     	if	0	;There are less than 3 active tblptr bytes
  2677  000622                     	endif
  2678  000622  0009               	tblrd		*+
  2679  000624  CFF5 F016          	movff	tablat,ES_InitQueue@pBlock
  2680  000628  000A               	tblrd		*-
  2681  00062A  CFF5 F017          	movff	tablat,ES_InitQueue@pBlock+1
  2682  00062E  0100               	movlb	0	; () banked
  2683  000630  5192               	movf	ES_Initialize@i& (0+255),w,b
  2684  000632  0D03               	mullw	3
  2685  000634  0E02               	movlw	2
  2686  000636  26F3               	addwf	prodl,f,c
  2687  000638  0E00               	movlw	0
  2688  00063A  22F4               	addwfc	prodh,f,c
  2689  00063C  0E54               	movlw	low _EventQueues
  2690  00063E  24F3               	addwf	prodl,w,c
  2691  000640  6EF6               	movwf	tblptrl,c
  2692  000642  0E03               	movlw	high _EventQueues
  2693  000644  20F4               	addwfc	prodh,w,c
  2694  000646  6EF7               	movwf	tblptrh,c
  2695  000648                     	if	0	;There are less than 3 active tblptr bytes
  2696  000648                     	endif
  2697  000648  0008               	tblrd		*
  2698  00064A  CFF5 F018          	movff	tablat,ES_InitQueue@BlockSize
  2699  00064E  ECE6  F005         	call	_ES_InitQueue	;wreg free
  2700                           
  2701                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  2702  000652  0100               	movlb	0	; () banked
  2703  000654  5192               	movf	ES_Initialize@i& (0+255),w,b
  2704  000656  0D04               	mullw	4
  2705  000658  0E50               	movlw	low _ServDescList
  2706  00065A  24F3               	addwf	prodl,w,c
  2707  00065C  6EF6               	movwf	tblptrl,c
  2708  00065E  0E03               	movlw	high _ServDescList
  2709  000660  20F4               	addwfc	prodh,w,c
  2710  000662  6EF7               	movwf	tblptrh,c
  2711  000664                     	if	0	;There are less than 3 active tblptr bytes
  2712  000664                     	endif
  2713  000664  D801               	call	u1808
  2714  000666  D00E               	goto	u1809
  2715  000668                     u1808:
  2716  000668  0005               	push	
  2717  00066A  6EFA               	movwf	pclath,c
  2718  00066C  0009               	tblrd		*+
  2719  00066E  50F5               	movf	tablat,w,c
  2720  000670  6EFD               	movwf	tosl,c
  2721  000672  0009               	tblrd		*+
  2722  000674  50F5               	movf	tablat,w,c
  2723  000676  6EFE               	movwf	tosh,c
  2724  000678  50F8               	movf	tblptru,w,c
  2725  00067A  6EFF               	movwf	tosu,c
  2726  00067C  50FA               	movf	pclath,w,c
  2727  00067E  0100               	movlb	0	; () banked
  2728  000680  5192               	movf	ES_Initialize@i& (0+255),w,b
  2729  000682  0012               	return		;indir
  2730  000684                     u1809:
  2731  000684  06E8               	decf	wreg,f,c
  2732  000686  B4D8               	btfsc	status,2,c
  2733  000688  D002               	goto	l2520
  2734                           
  2735                           ;ES_Framework.c: 254: return FailedInit;
  2736  00068A  0E05               	movlw	5
  2737  00068C  0012               	return	
  2738  00068E                     l2520:
  2739  00068E  0100               	movlb	0	; () banked
  2740  000690  2B92               	incf	ES_Initialize@i& (0+255),f,b
  2741  000692  D795               	goto	l2500
  2742  000694                     l2524:
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;ES_Framework.c: 255: }
  2746                           ;ES_Framework.c: 256: return Success;
  2747  000694  0E00               	movlw	0
  2748  000696  0012               	return	
  2749  000698                     __end_of_ES_Initialize:
  2750                           	opt stack 0
  2751                           tosu	equ	0xFFF
  2752                           tosh	equ	0xFFE
  2753                           tosl	equ	0xFFD
  2754                           pclath	equ	0xFFA
  2755                           tblptru	equ	0xFF8
  2756                           tblptrh	equ	0xFF7
  2757                           tblptrl	equ	0xFF6
  2758                           tablat	equ	0xFF5
  2759                           prodh	equ	0xFF4
  2760                           prodl	equ	0xFF3
  2761                           intcon	equ	0xFF2
  2762                           postinc0	equ	0xFEE
  2763                           wreg	equ	0xFE8
  2764                           indf1	equ	0xFE7
  2765                           postinc1	equ	0xFE6
  2766                           fsr1h	equ	0xFE2
  2767                           fsr1l	equ	0xFE1
  2768                           indf2	equ	0xFDF
  2769                           postinc2	equ	0xFDE
  2770                           postdec2	equ	0xFDD
  2771                           fsr2h	equ	0xFDA
  2772                           fsr2l	equ	0xFD9
  2773                           status	equ	0xFD8
  2774                           
  2775 ;; *************** function _InitCan_XmitService *****************
  2776 ;; Defined at:
  2777 ;;		line 80 in file "Can_XmitService.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;  Priority        1    wreg     unsigned char 
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  Priority        1    3[BANK0 ] unsigned char 
  2782 ;;  ThisEvent       3    0[BANK0 ] struct ES_Event_t
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  1    wreg      unsigned char 
  2785 ;; Registers used:
  2786 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2792 ;;      Params:         0       0       0       0
  2793 ;;      Locals:         0       4       0       0
  2794 ;;      Temps:          0       0       0       0
  2795 ;;      Totals:         0       4       0       0
  2796 ;;Total ram usage:        4 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    6
  2799 ;; This function calls:
  2800 ;;		_ES_PostToService
  2801 ;; This function is called by:
  2802 ;;		_ES_Initialize
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           	psect	text17
  2807  000C36                     __ptext17:
  2808                           	opt stack 0
  2809  000C36                     _InitCan_XmitService:
  2810                           	opt stack 23
  2811                           
  2812                           ;incstack = 0
  2813                           ;InitCan_XmitService@Priority stored from wreg
  2814  000C36  0100               	movlb	0	; () banked
  2815  000C38  6F8F               	movwf	InitCan_XmitService@Priority& (0+255),b
  2816                           
  2817                           ;Can_XmitService.c: 82: ES_Event ThisEvent;
  2818                           ;Can_XmitService.c: 84: MyPriority = Priority;
  2819  000C3A  C08F  F045         	movff	InitCan_XmitService@Priority,_MyPriority
  2820                           
  2821                           ;Can_XmitService.c: 87: ThisEvent.EventType = ES_INIT;
  2822  000C3E  0E02               	movlw	2
  2823  000C40  0100               	movlb	0	; () banked
  2824  000C42  6F8C               	movwf	InitCan_XmitService@ThisEvent& (0+255),b
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;Can_XmitService.c: 88: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  2828  000C44  C08C  F02D         	movff	InitCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  2829  000C48  C08D  F02E         	movff	InitCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  2830  000C4C  C08E  F02F         	movff	InitCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  2831  000C50  5045               	movf	_MyPriority,w,c
  2832  000C52  EC61  F005         	call	_ES_PostToService
  2833  000C56  06E8               	decf	wreg,f,c
  2834  000C58  A4D8               	btfss	status,2,c
  2835  000C5A  D002               	goto	l2476
  2836                           
  2837                           ;Can_XmitService.c: 89: {
  2838                           ;Can_XmitService.c: 90: return 1;
  2839  000C5C  0E01               	movlw	1
  2840                           
  2841                           ;Can_XmitService.c: 91: }else
  2842  000C5E  0012               	return	
  2843  000C60                     l2476:
  2844                           
  2845                           ;Can_XmitService.c: 92: {
  2846                           ;Can_XmitService.c: 93: return 0;
  2847  000C60  0E00               	movlw	0
  2848  000C62  0012               	return	
  2849  000C64                     __end_of_InitCan_XmitService:
  2850                           	opt stack 0
  2851                           tosu	equ	0xFFF
  2852                           tosh	equ	0xFFE
  2853                           tosl	equ	0xFFD
  2854                           pclath	equ	0xFFA
  2855                           tblptru	equ	0xFF8
  2856                           tblptrh	equ	0xFF7
  2857                           tblptrl	equ	0xFF6
  2858                           tablat	equ	0xFF5
  2859                           prodh	equ	0xFF4
  2860                           prodl	equ	0xFF3
  2861                           intcon	equ	0xFF2
  2862                           postinc0	equ	0xFEE
  2863                           wreg	equ	0xFE8
  2864                           indf1	equ	0xFE7
  2865                           postinc1	equ	0xFE6
  2866                           fsr1h	equ	0xFE2
  2867                           fsr1l	equ	0xFE1
  2868                           indf2	equ	0xFDF
  2869                           postinc2	equ	0xFDE
  2870                           postdec2	equ	0xFDD
  2871                           fsr2h	equ	0xFDA
  2872                           fsr2l	equ	0xFD9
  2873                           status	equ	0xFD8
  2874                           
  2875 ;; *************** function _ES_PostToService *****************
  2876 ;; Defined at:
  2877 ;;		line 351 in file "ES_Framework.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  WhichService    1    wreg     unsigned char 
  2880 ;;  TheEvent        3   44[COMRAM] struct ES_Event_t
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;  WhichService    1   49[COMRAM] unsigned char 
  2883 ;; Return value:  Size  Location     Type
  2884 ;;                  1    wreg      unsigned char 
  2885 ;; Registers used:
  2886 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2887 ;; Tracked objects:
  2888 ;;		On entry : 0/0
  2889 ;;		On exit  : 0/0
  2890 ;;		Unchanged: 0/0
  2891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2892 ;;      Params:         3       0       0       0
  2893 ;;      Locals:         1       0       0       0
  2894 ;;      Temps:          2       0       0       0
  2895 ;;      Totals:         6       0       0       0
  2896 ;;Total ram usage:        6 bytes
  2897 ;; Hardware stack levels used:    1
  2898 ;; Hardware stack levels required when called:    5
  2899 ;; This function calls:
  2900 ;;		_ES_EnQueueFIFO
  2901 ;; This function is called by:
  2902 ;;		_InitCan_XmitService
  2903 ;;		_PostCan_XmitService
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           	psect	text18
  2908  000AC2                     __ptext18:
  2909                           	opt stack 0
  2910  000AC2                     _ES_PostToService:
  2911                           	opt stack 21
  2912                           
  2913                           ;incstack = 0
  2914                           ;ES_PostToService@WhichService stored from wreg
  2915  000AC2  6E32               	movwf	ES_PostToService@WhichService,c
  2916                           
  2917                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  2918                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  2919                           ;ES_Framework.c: 354: 1 )){
  2920  000AC4  5032               	movf	ES_PostToService@WhichService,w,c
  2921  000AC6  A4D8               	btfss	status,2,c
  2922  000AC8  D02D               	goto	l2252
  2923  000ACA  5032               	movf	ES_PostToService@WhichService,w,c
  2924  000ACC  0D03               	mullw	3
  2925  000ACE  0E54               	movlw	low _EventQueues
  2926  000AD0  24F3               	addwf	prodl,w,c
  2927  000AD2  6EF6               	movwf	tblptrl,c
  2928  000AD4  0E03               	movlw	high _EventQueues
  2929  000AD6  20F4               	addwfc	prodh,w,c
  2930  000AD8  6EF7               	movwf	tblptrh,c
  2931  000ADA                     	if	0	;There are less than 3 active tblptr bytes
  2932  000ADA                     	endif
  2933  000ADA  0009               	tblrd		*+
  2934  000ADC  CFF5 F022          	movff	tablat,ES_EnQueueFIFO@pBlock
  2935  000AE0  000A               	tblrd		*-
  2936  000AE2  CFF5 F023          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  2937  000AE6  C02D  F024         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  2938  000AEA  C02E  F025         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  2939  000AEE  C02F  F026         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  2940  000AF2  EC21  F004         	call	_ES_EnQueueFIFO	;wreg free
  2941  000AF6  06E8               	decf	wreg,f,c
  2942  000AF8  A4D8               	btfss	status,2,c
  2943  000AFA  D014               	goto	l2252
  2944                           
  2945                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  2946  000AFC  5032               	movf	ES_PostToService@WhichService,w,c
  2947  000AFE  0D02               	mullw	2
  2948  000B00  0E01               	movlw	low _BitNum2SetMask
  2949  000B02  24F3               	addwf	prodl,w,c
  2950  000B04  6EF6               	movwf	tblptrl,c
  2951  000B06  0E03               	movlw	high _BitNum2SetMask
  2952  000B08  20F4               	addwfc	prodh,w,c
  2953  000B0A  6EF7               	movwf	tblptrh,c
  2954  000B0C                     	if	0	;There are less than 3 active tblptr bytes
  2955  000B0C                     	endif
  2956  000B0C  0009               	tblrd		*+
  2957  000B0E  CFF5 F030          	movff	tablat,??_ES_PostToService
  2958  000B12  0009               	tblrd		*+
  2959  000B14  CFF5 F031          	movff	tablat,??_ES_PostToService+1
  2960  000B18  5030               	movf	??_ES_PostToService,w,c
  2961  000B1A  123C               	iorwf	_Ready,f,c
  2962  000B1C  5031               	movf	??_ES_PostToService+1,w,c
  2963  000B1E  123D               	iorwf	_Ready+1,f,c
  2964                           
  2965                           ;ES_Framework.c: 356: return 1;
  2966  000B20  0E01               	movlw	1
  2967                           
  2968                           ;ES_Framework.c: 357: } else
  2969  000B22  0012               	return	
  2970  000B24                     l2252:
  2971                           
  2972                           ;ES_Framework.c: 358: return 0;
  2973  000B24  0E00               	movlw	0
  2974  000B26  0012               	return	
  2975  000B28                     __end_of_ES_PostToService:
  2976                           	opt stack 0
  2977                           tosu	equ	0xFFF
  2978                           tosh	equ	0xFFE
  2979                           tosl	equ	0xFFD
  2980                           pclath	equ	0xFFA
  2981                           tblptru	equ	0xFF8
  2982                           tblptrh	equ	0xFF7
  2983                           tblptrl	equ	0xFF6
  2984                           tablat	equ	0xFF5
  2985                           prodh	equ	0xFF4
  2986                           prodl	equ	0xFF3
  2987                           intcon	equ	0xFF2
  2988                           postinc0	equ	0xFEE
  2989                           wreg	equ	0xFE8
  2990                           indf1	equ	0xFE7
  2991                           postinc1	equ	0xFE6
  2992                           fsr1h	equ	0xFE2
  2993                           fsr1l	equ	0xFE1
  2994                           indf2	equ	0xFDF
  2995                           postinc2	equ	0xFDE
  2996                           postdec2	equ	0xFDD
  2997                           fsr2h	equ	0xFDA
  2998                           fsr2l	equ	0xFD9
  2999                           status	equ	0xFD8
  3000                           
  3001 ;; *************** function _ES_EnQueueFIFO *****************
  3002 ;; Defined at:
  3003 ;;		line 85 in file "ES_Queue.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;  pBlock          2   33[COMRAM] PTR struct ES_Event_t
  3006 ;;		 -> Queue0(12), 
  3007 ;;  Event2Add       3   35[COMRAM] struct ES_Event_t
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;  pThisQueue      2   42[COMRAM] PTR struct .
  3010 ;;		 -> Queue0(12), 
  3011 ;;  SaveCrit        1   41[COMRAM] unsigned char 
  3012 ;; Return value:  Size  Location     Type
  3013 ;;                  1    wreg      unsigned char 
  3014 ;; Registers used:
  3015 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3016 ;; Tracked objects:
  3017 ;;		On entry : 0/0
  3018 ;;		On exit  : 0/0
  3019 ;;		Unchanged: 0/0
  3020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3021 ;;      Params:         5       0       0       0
  3022 ;;      Locals:         3       0       0       0
  3023 ;;      Temps:          3       0       0       0
  3024 ;;      Totals:        11       0       0       0
  3025 ;;Total ram usage:       11 bytes
  3026 ;; Hardware stack levels used:    1
  3027 ;; Hardware stack levels required when called:    4
  3028 ;; This function calls:
  3029 ;;		___awmod
  3030 ;;		___wmul
  3031 ;; This function is called by:
  3032 ;;		_ES_PostToService
  3033 ;;		_ES_PostAll
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           	psect	text19
  3038  000842                     __ptext19:
  3039                           	opt stack 0
  3040  000842                     _ES_EnQueueFIFO:
  3041                           	opt stack 21
  3042                           
  3043                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  3044                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  3045                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  3046                           
  3047                           ;incstack = 0
  3048  000842  C022  F02B         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  3049  000846  C023  F02C         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  3050                           
  3051                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  3052  00084A  C02B  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3053  00084E  C02C  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3054  000852  EE10 F002          	lfsr	1,2
  3055  000856  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3056  000858  26E1               	addwf	fsr1l,f,c
  3057  00085A  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3058  00085C  22E2               	addwfc	fsr1h,f,c
  3059  00085E  50DE               	movf	postinc2,w,c
  3060  000860  5CE6               	subwf	postinc1,w,c
  3061  000862  B0D8               	btfsc	status,0,c
  3062  000864  D046               	goto	l2236
  3063                           
  3064                           ;ES_Queue.c: 92: {
  3065                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  3066  000866  CFF2 F02A          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  3067  00086A  9EF2               	bcf	intcon,7,c	;volatile
  3068                           
  3069                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  3070                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  3071  00086C  C02B  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3072  000870  C02C  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3073  000874  50DF               	movf	indf2,w,c
  3074  000876  6E27               	movwf	??_ES_EnQueueFIFO& (0+255),c
  3075  000878  5027               	movf	??_ES_EnQueueFIFO,w,c
  3076  00087A  6E18               	movwf	___awmod@divisor,c
  3077  00087C  6A19               	clrf	___awmod@divisor+1,c
  3078  00087E  EE20 F002          	lfsr	2,2
  3079  000882  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3080  000884  26D9               	addwf	fsr2l,f,c
  3081  000886  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3082  000888  22DA               	addwfc	fsr2h,f,c
  3083  00088A  50DF               	movf	indf2,w,c
  3084  00088C  6E28               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),c
  3085  00088E  EE20 F001          	lfsr	2,1
  3086  000892  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3087  000894  26D9               	addwf	fsr2l,f,c
  3088  000896  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3089  000898  22DA               	addwfc	fsr2h,f,c
  3090  00089A  50DF               	movf	indf2,w,c
  3091  00089C  6E29               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),c
  3092  00089E  5029               	movf	??_ES_EnQueueFIFO+2,w,c
  3093  0008A0  2428               	addwf	??_ES_EnQueueFIFO+1,w,c
  3094  0008A2  6E16               	movwf	___awmod@dividend,c
  3095  0008A4  6A17               	clrf	___awmod@dividend+1,c
  3096  0008A6  3617               	rlcf	___awmod@dividend+1,f,c
  3097  0008A8  ECF4  F004         	call	___awmod	;wreg free
  3098  0008AC  0E01               	movlw	1
  3099  0008AE  2416               	addwf	?___awmod,w,c
  3100  0008B0  6E1C               	movwf	___wmul@multiplier,c
  3101  0008B2  0E00               	movlw	0
  3102  0008B4  2017               	addwfc	?___awmod+1,w,c
  3103  0008B6  6E1D               	movwf	___wmul@multiplier+1,c
  3104  0008B8  0E00               	movlw	0
  3105  0008BA  6E1F               	movwf	___wmul@multiplicand+1,c
  3106  0008BC  0E03               	movlw	3
  3107  0008BE  6E1E               	movwf	___wmul@multiplicand,c
  3108  0008C0  EC85  F006         	call	___wmul	;wreg free
  3109  0008C4  501C               	movf	?___wmul,w,c
  3110  0008C6  2422               	addwf	ES_EnQueueFIFO@pBlock,w,c
  3111  0008C8  6ED9               	movwf	fsr2l,c
  3112  0008CA  501D               	movf	?___wmul+1,w,c
  3113  0008CC  2023               	addwfc	ES_EnQueueFIFO@pBlock+1,w,c
  3114  0008CE  6EDA               	movwf	fsr2h,c
  3115  0008D0  C024  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  3116  0008D4  C025  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  3117  0008D8  C026  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  3118                           
  3119                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  3120  0008DC  EE20 F002          	lfsr	2,2
  3121  0008E0  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3122  0008E2  26D9               	addwf	fsr2l,f,c
  3123  0008E4  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3124  0008E6  22DA               	addwfc	fsr2h,f,c
  3125  0008E8  2ADF               	incf	indf2,f,c
  3126                           
  3127                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  3128  0008EA  C02A  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  3129                           
  3130                           ;ES_Queue.c: 101: return(1);
  3131  0008EE  0E01               	movlw	1
  3132                           
  3133                           ;ES_Queue.c: 102: }else
  3134  0008F0  0012               	return	
  3135  0008F2                     l2236:
  3136                           
  3137                           ;ES_Queue.c: 103: return(0);
  3138  0008F2  0E00               	movlw	0
  3139  0008F4  0012               	return	
  3140  0008F6                     __end_of_ES_EnQueueFIFO:
  3141                           	opt stack 0
  3142                           tosu	equ	0xFFF
  3143                           tosh	equ	0xFFE
  3144                           tosl	equ	0xFFD
  3145                           pclath	equ	0xFFA
  3146                           tblptru	equ	0xFF8
  3147                           tblptrh	equ	0xFF7
  3148                           tblptrl	equ	0xFF6
  3149                           tablat	equ	0xFF5
  3150                           prodh	equ	0xFF4
  3151                           prodl	equ	0xFF3
  3152                           intcon	equ	0xFF2
  3153                           postinc0	equ	0xFEE
  3154                           wreg	equ	0xFE8
  3155                           indf1	equ	0xFE7
  3156                           postinc1	equ	0xFE6
  3157                           fsr1h	equ	0xFE2
  3158                           fsr1l	equ	0xFE1
  3159                           indf2	equ	0xFDF
  3160                           postinc2	equ	0xFDE
  3161                           postdec2	equ	0xFDD
  3162                           fsr2h	equ	0xFDA
  3163                           fsr2l	equ	0xFD9
  3164                           status	equ	0xFD8
  3165                           
  3166 ;; *************** function ___wmul *****************
  3167 ;; Defined at:
  3168 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;  multiplier      2   27[COMRAM] unsigned int 
  3171 ;;  multiplicand    2   29[COMRAM] unsigned int 
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;  product         2   31[COMRAM] unsigned int 
  3174 ;; Return value:  Size  Location     Type
  3175 ;;                  2   27[COMRAM] unsigned int 
  3176 ;; Registers used:
  3177 ;;		wreg, status,2, status,0, prodl, prodh
  3178 ;; Tracked objects:
  3179 ;;		On entry : 0/0
  3180 ;;		On exit  : 0/0
  3181 ;;		Unchanged: 0/0
  3182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3183 ;;      Params:         4       0       0       0
  3184 ;;      Locals:         2       0       0       0
  3185 ;;      Temps:          0       0       0       0
  3186 ;;      Totals:         6       0       0       0
  3187 ;;Total ram usage:        6 bytes
  3188 ;; Hardware stack levels used:    1
  3189 ;; Hardware stack levels required when called:    3
  3190 ;; This function calls:
  3191 ;;		Nothing
  3192 ;; This function is called by:
  3193 ;;		_ES_EnQueueFIFO
  3194 ;;		_ES_DeQueue
  3195 ;;		_ES_EnQueueLIFO
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           	psect	text20
  3200  000D0A                     __ptext20:
  3201                           	opt stack 0
  3202  000D0A                     ___wmul:
  3203                           	opt stack 21
  3204                           
  3205                           ;incstack = 0
  3206  000D0A  501C               	movf	___wmul@multiplier,w,c
  3207  000D0C  021E               	mulwf	___wmul@multiplicand,c
  3208  000D0E  CFF3 F020          	movff	prodl,___wmul@product
  3209  000D12  CFF4 F021          	movff	prodh,___wmul@product+1
  3210  000D16  501C               	movf	___wmul@multiplier,w,c
  3211  000D18  021F               	mulwf	___wmul@multiplicand+1,c
  3212  000D1A  50F3               	movf	prodl,w,c
  3213  000D1C  2621               	addwf	___wmul@product+1,f,c
  3214  000D1E  501D               	movf	___wmul@multiplier+1,w,c
  3215  000D20  021E               	mulwf	___wmul@multiplicand,c
  3216  000D22  50F3               	movf	prodl,w,c
  3217  000D24  2621               	addwf	___wmul@product+1,f,c
  3218  000D26  C020  F01C         	movff	___wmul@product,?___wmul
  3219  000D2A  C021  F01D         	movff	___wmul@product+1,?___wmul+1
  3220  000D2E  0012               	return	
  3221  000D30                     __end_of___wmul:
  3222                           	opt stack 0
  3223                           tosu	equ	0xFFF
  3224                           tosh	equ	0xFFE
  3225                           tosl	equ	0xFFD
  3226                           pclath	equ	0xFFA
  3227                           tblptru	equ	0xFF8
  3228                           tblptrh	equ	0xFF7
  3229                           tblptrl	equ	0xFF6
  3230                           tablat	equ	0xFF5
  3231                           prodh	equ	0xFF4
  3232                           prodl	equ	0xFF3
  3233                           intcon	equ	0xFF2
  3234                           postinc0	equ	0xFEE
  3235                           wreg	equ	0xFE8
  3236                           indf1	equ	0xFE7
  3237                           postinc1	equ	0xFE6
  3238                           fsr1h	equ	0xFE2
  3239                           fsr1l	equ	0xFE1
  3240                           indf2	equ	0xFDF
  3241                           postinc2	equ	0xFDE
  3242                           postdec2	equ	0xFDD
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function ___awmod *****************
  3248 ;; Defined at:
  3249 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;  dividend        2   21[COMRAM] int 
  3252 ;;  divisor         2   23[COMRAM] int 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;  sign            1   26[COMRAM] unsigned char 
  3255 ;;  counter         1   25[COMRAM] unsigned char 
  3256 ;; Return value:  Size  Location     Type
  3257 ;;                  2   21[COMRAM] int 
  3258 ;; Registers used:
  3259 ;;		wreg, status,2, status,0
  3260 ;; Tracked objects:
  3261 ;;		On entry : 0/0
  3262 ;;		On exit  : 0/0
  3263 ;;		Unchanged: 0/0
  3264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3265 ;;      Params:         4       0       0       0
  3266 ;;      Locals:         2       0       0       0
  3267 ;;      Temps:          0       0       0       0
  3268 ;;      Totals:         6       0       0       0
  3269 ;;Total ram usage:        6 bytes
  3270 ;; Hardware stack levels used:    1
  3271 ;; Hardware stack levels required when called:    3
  3272 ;; This function calls:
  3273 ;;		Nothing
  3274 ;; This function is called by:
  3275 ;;		_ES_EnQueueFIFO
  3276 ;; This function uses a non-reentrant model
  3277 ;;
  3278                           
  3279                           	psect	text21
  3280  0009E8                     __ptext21:
  3281                           	opt stack 0
  3282  0009E8                     ___awmod:
  3283                           	opt stack 21
  3284                           
  3285                           ;incstack = 0
  3286  0009E8  0E00               	movlw	0
  3287  0009EA  6E1B               	movwf	___awmod@sign,c
  3288  0009EC  AE17               	btfss	___awmod@dividend+1,7,c
  3289  0009EE  D006               	goto	l2192
  3290  0009F0  6C16               	negf	___awmod@dividend,c
  3291  0009F2  1E17               	comf	___awmod@dividend+1,f,c
  3292  0009F4  B0D8               	btfsc	status,0,c
  3293  0009F6  2A17               	incf	___awmod@dividend+1,f,c
  3294  0009F8  0E01               	movlw	1
  3295  0009FA  6E1B               	movwf	___awmod@sign,c
  3296  0009FC                     l2192:
  3297  0009FC  AE19               	btfss	___awmod@divisor+1,7,c
  3298  0009FE  D004               	goto	l2196
  3299  000A00  6C18               	negf	___awmod@divisor,c
  3300  000A02  1E19               	comf	___awmod@divisor+1,f,c
  3301  000A04  B0D8               	btfsc	status,0,c
  3302  000A06  2A19               	incf	___awmod@divisor+1,f,c
  3303  000A08                     l2196:
  3304  000A08  5018               	movf	___awmod@divisor,w,c
  3305  000A0A  1019               	iorwf	___awmod@divisor+1,w,c
  3306  000A0C  B4D8               	btfsc	status,2,c
  3307  000A0E  D018               	goto	l2212
  3308  000A10  0E01               	movlw	1
  3309  000A12  6E1A               	movwf	___awmod@counter,c
  3310  000A14  D004               	goto	l2202
  3311  000A16                     l2200:
  3312  000A16  90D8               	bcf	status,0,c
  3313  000A18  3618               	rlcf	___awmod@divisor,f,c
  3314  000A1A  3619               	rlcf	___awmod@divisor+1,f,c
  3315  000A1C  2A1A               	incf	___awmod@counter,f,c
  3316  000A1E                     l2202:
  3317  000A1E  AE19               	btfss	___awmod@divisor+1,7,c
  3318  000A20  D7FA               	goto	l2200
  3319  000A22                     l2204:
  3320  000A22  5018               	movf	___awmod@divisor,w,c
  3321  000A24  5C16               	subwf	___awmod@dividend,w,c
  3322  000A26  5019               	movf	___awmod@divisor+1,w,c
  3323  000A28  5817               	subwfb	___awmod@dividend+1,w,c
  3324  000A2A  A0D8               	btfss	status,0,c
  3325  000A2C  D004               	goto	l2208
  3326  000A2E  5018               	movf	___awmod@divisor,w,c
  3327  000A30  5E16               	subwf	___awmod@dividend,f,c
  3328  000A32  5019               	movf	___awmod@divisor+1,w,c
  3329  000A34  5A17               	subwfb	___awmod@dividend+1,f,c
  3330  000A36                     l2208:
  3331  000A36  90D8               	bcf	status,0,c
  3332  000A38  3219               	rrcf	___awmod@divisor+1,f,c
  3333  000A3A  3218               	rrcf	___awmod@divisor,f,c
  3334  000A3C  2E1A               	decfsz	___awmod@counter,f,c
  3335  000A3E  D7F1               	goto	l2204
  3336  000A40                     l2212:
  3337  000A40  501B               	movf	___awmod@sign,w,c
  3338  000A42  B4D8               	btfsc	status,2,c
  3339  000A44  D004               	goto	l2216
  3340  000A46  6C16               	negf	___awmod@dividend,c
  3341  000A48  1E17               	comf	___awmod@dividend+1,f,c
  3342  000A4A  B0D8               	btfsc	status,0,c
  3343  000A4C  2A17               	incf	___awmod@dividend+1,f,c
  3344  000A4E                     l2216:
  3345  000A4E  C016  F016         	movff	___awmod@dividend,?___awmod
  3346  000A52  C017  F017         	movff	___awmod@dividend+1,?___awmod+1
  3347  000A56  0012               	return	
  3348  000A58                     __end_of___awmod:
  3349                           	opt stack 0
  3350                           tosu	equ	0xFFF
  3351                           tosh	equ	0xFFE
  3352                           tosl	equ	0xFFD
  3353                           pclath	equ	0xFFA
  3354                           tblptru	equ	0xFF8
  3355                           tblptrh	equ	0xFF7
  3356                           tblptrl	equ	0xFF6
  3357                           tablat	equ	0xFF5
  3358                           prodh	equ	0xFF4
  3359                           prodl	equ	0xFF3
  3360                           intcon	equ	0xFF2
  3361                           postinc0	equ	0xFEE
  3362                           wreg	equ	0xFE8
  3363                           indf1	equ	0xFE7
  3364                           postinc1	equ	0xFE6
  3365                           fsr1h	equ	0xFE2
  3366                           fsr1l	equ	0xFE1
  3367                           indf2	equ	0xFDF
  3368                           postinc2	equ	0xFDE
  3369                           postdec2	equ	0xFDD
  3370                           fsr2h	equ	0xFDA
  3371                           fsr2l	equ	0xFD9
  3372                           status	equ	0xFD8
  3373                           
  3374 ;; *************** function _ES_Timer_Init *****************
  3375 ;; Defined at:
  3376 ;;		line 130 in file "ES_Timers.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;  Rate            2   23[COMRAM] enum E15419
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;		None
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  1    wreg      void 
  3383 ;; Registers used:
  3384 ;;		wreg, status,2, cstack
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3390 ;;      Params:         2       0       0       0
  3391 ;;      Locals:         0       0       0       0
  3392 ;;      Temps:          0       0       0       0
  3393 ;;      Totals:         2       0       0       0
  3394 ;;Total ram usage:        2 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    4
  3397 ;; This function calls:
  3398 ;;		__HW_Timer_Init
  3399 ;; This function is called by:
  3400 ;;		_ES_Initialize
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           	psect	text22
  3405  000DBA                     __ptext22:
  3406                           	opt stack 0
  3407  000DBA                     _ES_Timer_Init:
  3408                           	opt stack 25
  3409                           
  3410                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  3411                           
  3412                           ;incstack = 0
  3413  000DBA  C018  F016         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  3414  000DBE  C019  F017         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  3415  000DC2  EC98  F006         	call	__HW_Timer_Init	;wreg free
  3416  000DC6  0012               	return		;funcret
  3417  000DC8                     __end_of_ES_Timer_Init:
  3418                           	opt stack 0
  3419                           tosu	equ	0xFFF
  3420                           tosh	equ	0xFFE
  3421                           tosl	equ	0xFFD
  3422                           pclath	equ	0xFFA
  3423                           tblptru	equ	0xFF8
  3424                           tblptrh	equ	0xFF7
  3425                           tblptrl	equ	0xFF6
  3426                           tablat	equ	0xFF5
  3427                           prodh	equ	0xFF4
  3428                           prodl	equ	0xFF3
  3429                           intcon	equ	0xFF2
  3430                           postinc0	equ	0xFEE
  3431                           wreg	equ	0xFE8
  3432                           indf1	equ	0xFE7
  3433                           postinc1	equ	0xFE6
  3434                           fsr1h	equ	0xFE2
  3435                           fsr1l	equ	0xFE1
  3436                           indf2	equ	0xFDF
  3437                           postinc2	equ	0xFDE
  3438                           postdec2	equ	0xFDD
  3439                           fsr2h	equ	0xFDA
  3440                           fsr2l	equ	0xFD9
  3441                           status	equ	0xFD8
  3442                           
  3443 ;; *************** function __HW_Timer_Init *****************
  3444 ;; Defined at:
  3445 ;;		line 72 in file "ES_Port.c"
  3446 ;; Parameters:    Size  Location     Type
  3447 ;;  Rate            2   21[COMRAM] enum E15412
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;		None
  3450 ;; Return value:  Size  Location     Type
  3451 ;;                  1    wreg      void 
  3452 ;; Registers used:
  3453 ;;		wreg, status,2
  3454 ;; Tracked objects:
  3455 ;;		On entry : 0/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3459 ;;      Params:         2       0       0       0
  3460 ;;      Locals:         0       0       0       0
  3461 ;;      Temps:          0       0       0       0
  3462 ;;      Totals:         2       0       0       0
  3463 ;;Total ram usage:        2 bytes
  3464 ;; Hardware stack levels used:    1
  3465 ;; Hardware stack levels required when called:    3
  3466 ;; This function calls:
  3467 ;;		Nothing
  3468 ;; This function is called by:
  3469 ;;		_ES_Timer_Init
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           	psect	text23
  3474  000D30                     __ptext23:
  3475                           	opt stack 0
  3476  000D30                     __HW_Timer_Init:
  3477                           	opt stack 25
  3478                           
  3479                           ;ES_Port.c: 80: PIE1 = 0b00000100;
  3480                           
  3481                           ;incstack = 0
  3482  000D30  0E04               	movlw	4
  3483  000D32  6E9D               	movwf	3997,c	;volatile
  3484                           
  3485                           ;ES_Port.c: 85: INTCON = 0b01000000;
  3486  000D34  0E40               	movlw	64
  3487  000D36  6EF2               	movwf	intcon,c	;volatile
  3488                           
  3489                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
  3490  000D38  0E0A               	movlw	10
  3491  000D3A  6EBD               	movwf	4029,c	;volatile
  3492                           
  3493                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
  3494  000D3C  0E01               	movlw	1
  3495  000D3E  6EBE               	movwf	4030,c	;volatile
  3496                           
  3497                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
  3498  000D40  0E00               	movlw	0
  3499  000D42  6EBF               	movwf	4031,c	;volatile
  3500                           
  3501                           ;ES_Port.c: 107: T1CON = 0b00100001;
  3502  000D44  0E21               	movlw	33
  3503  000D46  6ECD               	movwf	4045,c	;volatile
  3504                           
  3505                           ;ES_Port.c: 108: PEIE = 1;
  3506  000D48  8CF2               	bsf	intcon,6,c	;volatile
  3507                           
  3508                           ;ES_Port.c: 109: {GIE = 1;};
  3509  000D4A  8EF2               	bsf	intcon,7,c	;volatile
  3510  000D4C  0012               	return		;funcret
  3511  000D4E                     __end_of__HW_Timer_Init:
  3512                           	opt stack 0
  3513                           tosu	equ	0xFFF
  3514                           tosh	equ	0xFFE
  3515                           tosl	equ	0xFFD
  3516                           pclath	equ	0xFFA
  3517                           tblptru	equ	0xFF8
  3518                           tblptrh	equ	0xFF7
  3519                           tblptrl	equ	0xFF6
  3520                           tablat	equ	0xFF5
  3521                           prodh	equ	0xFF4
  3522                           prodl	equ	0xFF3
  3523                           intcon	equ	0xFF2
  3524                           postinc0	equ	0xFEE
  3525                           wreg	equ	0xFE8
  3526                           indf1	equ	0xFE7
  3527                           postinc1	equ	0xFE6
  3528                           fsr1h	equ	0xFE2
  3529                           fsr1l	equ	0xFE1
  3530                           indf2	equ	0xFDF
  3531                           postinc2	equ	0xFDE
  3532                           postdec2	equ	0xFDD
  3533                           fsr2h	equ	0xFDA
  3534                           fsr2l	equ	0xFD9
  3535                           status	equ	0xFD8
  3536                           
  3537 ;; *************** function _ES_InitQueue *****************
  3538 ;; Defined at:
  3539 ;;		line 58 in file "ES_Queue.c"
  3540 ;; Parameters:    Size  Location     Type
  3541 ;;  pBlock          2   21[COMRAM] PTR struct ES_Event_t
  3542 ;;		 -> Queue0(12), 
  3543 ;;  BlockSize       1   23[COMRAM] unsigned char 
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;  pThisQueue      2   24[COMRAM] PTR struct .
  3546 ;;		 -> Queue0(12), 
  3547 ;; Return value:  Size  Location     Type
  3548 ;;                  1    wreg      unsigned char 
  3549 ;; Registers used:
  3550 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3551 ;; Tracked objects:
  3552 ;;		On entry : 0/0
  3553 ;;		On exit  : 0/0
  3554 ;;		Unchanged: 0/0
  3555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3556 ;;      Params:         3       0       0       0
  3557 ;;      Locals:         2       0       0       0
  3558 ;;      Temps:          0       0       0       0
  3559 ;;      Totals:         5       0       0       0
  3560 ;;Total ram usage:        5 bytes
  3561 ;; Hardware stack levels used:    1
  3562 ;; Hardware stack levels required when called:    3
  3563 ;; This function calls:
  3564 ;;		Nothing
  3565 ;; This function is called by:
  3566 ;;		_ES_Initialize
  3567 ;; This function uses a non-reentrant model
  3568 ;;
  3569                           
  3570                           	psect	text24
  3571  000BCC                     __ptext24:
  3572                           	opt stack 0
  3573  000BCC                     _ES_InitQueue:
  3574                           	opt stack 26
  3575                           
  3576                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  3577                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  3578                           
  3579                           ;incstack = 0
  3580  000BCC  C016  F019         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  3581  000BD0  C017  F01A         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  3582                           
  3583                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  3584  000BD4  0418               	decf	ES_InitQueue@BlockSize,w,c
  3585  000BD6  C019  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  3586  000BDA  C01A  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  3587  000BDE  6EDF               	movwf	indf2,c
  3588                           
  3589                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  3590  000BE0  EE20 F001          	lfsr	2,1
  3591  000BE4  5019               	movf	ES_InitQueue@pThisQueue,w,c
  3592  000BE6  26D9               	addwf	fsr2l,f,c
  3593  000BE8  501A               	movf	ES_InitQueue@pThisQueue+1,w,c
  3594  000BEA  22DA               	addwfc	fsr2h,f,c
  3595  000BEC  0E00               	movlw	0
  3596  000BEE  6EDF               	movwf	indf2,c
  3597                           
  3598                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  3599  000BF0  EE20 F002          	lfsr	2,2
  3600  000BF4  5019               	movf	ES_InitQueue@pThisQueue,w,c
  3601  000BF6  26D9               	addwf	fsr2l,f,c
  3602  000BF8  501A               	movf	ES_InitQueue@pThisQueue+1,w,c
  3603  000BFA  22DA               	addwfc	fsr2h,f,c
  3604  000BFC  0E00               	movlw	0
  3605  000BFE  6EDF               	movwf	indf2,c
  3606  000C00  0012               	return	
  3607  000C02                     __end_of_ES_InitQueue:
  3608                           	opt stack 0
  3609                           tosu	equ	0xFFF
  3610                           tosh	equ	0xFFE
  3611                           tosl	equ	0xFFD
  3612                           pclath	equ	0xFFA
  3613                           tblptru	equ	0xFF8
  3614                           tblptrh	equ	0xFF7
  3615                           tblptrl	equ	0xFF6
  3616                           tablat	equ	0xFF5
  3617                           prodh	equ	0xFF4
  3618                           prodl	equ	0xFF3
  3619                           intcon	equ	0xFF2
  3620                           postinc0	equ	0xFEE
  3621                           wreg	equ	0xFE8
  3622                           indf1	equ	0xFE7
  3623                           postinc1	equ	0xFE6
  3624                           fsr1h	equ	0xFE2
  3625                           fsr1l	equ	0xFE1
  3626                           indf2	equ	0xFDF
  3627                           postinc2	equ	0xFDE
  3628                           postdec2	equ	0xFDD
  3629                           fsr2h	equ	0xFDA
  3630                           fsr2l	equ	0xFD9
  3631                           status	equ	0xFD8
  3632                           
  3633 ;; *************** function _ISR *****************
  3634 ;; Defined at:
  3635 ;;		line 112 in file "ES_Port.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;		None
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;		None
  3640 ;; Return value:  Size  Location     Type
  3641 ;;                  1    wreg      void 
  3642 ;; Registers used:
  3643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3649 ;;      Params:         0       0       0       0
  3650 ;;      Locals:         0       0       0       0
  3651 ;;      Temps:         16       0       0       0
  3652 ;;      Totals:        16       0       0       0
  3653 ;;Total ram usage:       16 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; Hardware stack levels required when called:    2
  3656 ;; This function calls:
  3657 ;;		_BusErrorResponse
  3658 ;;		_CanErrorResponse
  3659 ;;		_CanRCVResponse
  3660 ;;		_CanXmitResponse
  3661 ;; This function is called by:
  3662 ;;		Interrupt level 2
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           	psect	intcode
  3667  000008                     __pintcode:
  3668                           	opt stack 0
  3669  000008                     _ISR:
  3670                           	opt stack 21
  3671                           
  3672                           ;incstack = 0
  3673  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3674  00000A  CFFA F008          	movff	pclath,??_ISR+2
  3675  00000E  CFFB F009          	movff	pclatu,??_ISR+3
  3676  000012  EDC0  F003         	call	int_func,f	;refresh shadow registers
  3677                           tosu	equ	0xFFF
  3678                           tosh	equ	0xFFE
  3679                           tosl	equ	0xFFD
  3680                           pclatu	equ	0xFFB
  3681                           pclath	equ	0xFFA
  3682                           tblptru	equ	0xFF8
  3683                           tblptrh	equ	0xFF7
  3684                           tblptrl	equ	0xFF6
  3685                           tablat	equ	0xFF5
  3686                           prodh	equ	0xFF4
  3687                           prodl	equ	0xFF3
  3688                           intcon	equ	0xFF2
  3689                           postinc0	equ	0xFEE
  3690                           wreg	equ	0xFE8
  3691                           indf1	equ	0xFE7
  3692                           postinc1	equ	0xFE6
  3693                           fsr1h	equ	0xFE2
  3694                           fsr1l	equ	0xFE1
  3695                           indf2	equ	0xFDF
  3696                           postinc2	equ	0xFDE
  3697                           postdec2	equ	0xFDD
  3698                           fsr2h	equ	0xFDA
  3699                           fsr2l	equ	0xFD9
  3700                           status	equ	0xFD8
  3701                           
  3702                           	psect	intcode_body
  3703  000780                     __pintcode_body:
  3704                           	opt stack 21
  3705  000780                     int_func:
  3706                           	opt stack 21
  3707  000780  0006               	pop		; remove dummy address from shadow register refresh
  3708  000782  CFE9 F00A          	movff	fsr0l,??_ISR+4
  3709  000786  CFEA F00B          	movff	fsr0h,??_ISR+5
  3710  00078A  CFE1 F00C          	movff	fsr1l,??_ISR+6
  3711  00078E  CFE2 F00D          	movff	fsr1h,??_ISR+7
  3712  000792  CFD9 F00E          	movff	fsr2l,??_ISR+8
  3713  000796  CFDA F00F          	movff	fsr2h,??_ISR+9
  3714  00079A  CFF3 F010          	movff	prodl,??_ISR+10
  3715  00079E  CFF4 F011          	movff	prodh,??_ISR+11
  3716  0007A2  CFF6 F012          	movff	tblptrl,??_ISR+12
  3717  0007A6  CFF7 F013          	movff	tblptrh,??_ISR+13
  3718  0007AA  CFF8 F014          	movff	tblptru,??_ISR+14
  3719  0007AE  CFF5 F015          	movff	tablat,??_ISR+15
  3720                           
  3721                           ;ES_Port.c: 115: static unsigned int LastTime;
  3722                           ;ES_Port.c: 116: static unsigned int NextTime;
  3723                           ;ES_Port.c: 118: if (CCP1IF == 1)
  3724  0007B2  A49E               	btfss	3998,2,c	;volatile
  3725  0007B4  D014               	goto	i2l2090
  3726                           
  3727                           ;ES_Port.c: 119: {
  3728                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  3729  0007B6  50BF               	movf	4031,w,c	;volatile
  3730  0007B8  6E06               	movwf	??_ISR& (0+255),c
  3731  0007BA  50BE               	movf	4030,w,c	;volatile
  3732  0007BC  6E38               	movwf	ISR@LastTime,c
  3733  0007BE  C006  F039         	movff	??_ISR,ISR@LastTime+1
  3734                           
  3735                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
  3736  0007C2  0E20               	movlw	32
  3737  0007C4  2438               	addwf	ISR@LastTime,w,c
  3738  0007C6  6E3A               	movwf	ISR@NextTime,c
  3739  0007C8  0E4E               	movlw	78
  3740  0007CA  2039               	addwfc	ISR@LastTime+1,w,c
  3741  0007CC  6E3B               	movwf	ISR@NextTime+1,c
  3742                           
  3743                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
  3744  0007CE  503B               	movf	ISR@NextTime+1,w,c
  3745  0007D0  6EBF               	movwf	4031,c	;volatile
  3746                           
  3747                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
  3748  0007D2  C03A  FFBE         	movff	ISR@NextTime,4030	;volatile
  3749                           
  3750                           ;ES_Port.c: 124: CCP1IF = 0;
  3751  0007D6  949E               	bcf	3998,2,c	;volatile
  3752                           
  3753                           ;ES_Port.c: 125: TickCount++;
  3754  0007D8  2A46               	incf	_TickCount,f,c	;volatile
  3755                           
  3756                           ;ES_Port.c: 126: SysTickCounter++;
  3757  0007DA  4A3E               	infsnz	_SysTickCounter,f,c	;volatile
  3758  0007DC  2A3F               	incf	_SysTickCounter+1,f,c	;volatile
  3759  0007DE                     i2l2090:
  3760                           
  3761                           ;ES_Port.c: 127: }
  3762                           ;ES_Port.c: 133: if (TXB0IF == 1)
  3763  0007DE  A4A4               	btfss	4004,2,c	;volatile
  3764  0007E0  D003               	goto	i2l2096
  3765                           
  3766                           ;ES_Port.c: 134: {
  3767                           ;ES_Port.c: 135: TXB0IF = 0;
  3768  0007E2  94A4               	bcf	4004,2,c	;volatile
  3769                           
  3770                           ;ES_Port.c: 136: CanXmitResponse();
  3771  0007E4  ECE4  F006         	call	_CanXmitResponse	;wreg free
  3772  0007E8                     i2l2096:
  3773                           
  3774                           ;ES_Port.c: 137: }
  3775                           ;ES_Port.c: 138: if (RXB0IF == 1) {
  3776  0007E8  A0A4               	btfss	4004,0,c	;volatile
  3777  0007EA  D003               	goto	i2l2102
  3778                           
  3779                           ;ES_Port.c: 139: RXB0IF = 0;
  3780  0007EC  90A4               	bcf	4004,0,c	;volatile
  3781                           
  3782                           ;ES_Port.c: 140: CanRCVResponse();
  3783  0007EE  ECA7  F006         	call	_CanRCVResponse	;wreg free
  3784  0007F2                     i2l2102:
  3785                           
  3786                           ;ES_Port.c: 141: }
  3787                           ;ES_Port.c: 142: if (ERRIF == 1) {
  3788  0007F2  AAA4               	btfss	4004,5,c	;volatile
  3789  0007F4  D003               	goto	i2l2108
  3790                           
  3791                           ;ES_Port.c: 143: ERRIF = 0;
  3792  0007F6  9AA4               	bcf	4004,5,c	;volatile
  3793                           
  3794                           ;ES_Port.c: 144: CanErrorResponse();
  3795  0007F8  ECCD  F006         	call	_CanErrorResponse	;wreg free
  3796  0007FC                     i2l2108:
  3797                           
  3798                           ;ES_Port.c: 145: }
  3799                           ;ES_Port.c: 146: if (IRXIF == 1) {
  3800  0007FC  AEA4               	btfss	4004,7,c	;volatile
  3801  0007FE  D003               	goto	i2l160
  3802                           
  3803                           ;ES_Port.c: 147: IRXIF = 0;
  3804  000800  9EA4               	bcf	4004,7,c	;volatile
  3805                           
  3806                           ;ES_Port.c: 148: BusErrorResponse();
  3807  000802  ECD5  F006         	call	_BusErrorResponse	;wreg free
  3808  000806                     i2l160:
  3809  000806  C015  FFF5         	movff	??_ISR+15,tablat
  3810  00080A  C014  FFF8         	movff	??_ISR+14,tblptru
  3811  00080E  C013  FFF7         	movff	??_ISR+13,tblptrh
  3812  000812  C012  FFF6         	movff	??_ISR+12,tblptrl
  3813  000816  C011  FFF4         	movff	??_ISR+11,prodh
  3814  00081A  C010  FFF3         	movff	??_ISR+10,prodl
  3815  00081E  C00F  FFDA         	movff	??_ISR+9,fsr2h
  3816  000822  C00E  FFD9         	movff	??_ISR+8,fsr2l
  3817  000826  C00D  FFE2         	movff	??_ISR+7,fsr1h
  3818  00082A  C00C  FFE1         	movff	??_ISR+6,fsr1l
  3819  00082E  C00B  FFEA         	movff	??_ISR+5,fsr0h
  3820  000832  C00A  FFE9         	movff	??_ISR+4,fsr0l
  3821  000836  C009  FFFB         	movff	??_ISR+3,pclatu
  3822  00083A  C008  FFFA         	movff	??_ISR+2,pclath
  3823  00083E  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3824  000840  0011               	retfie		f
  3825  000842                     __end_of_ISR:
  3826                           	opt stack 0
  3827                           tosu	equ	0xFFF
  3828                           tosh	equ	0xFFE
  3829                           tosl	equ	0xFFD
  3830                           pclatu	equ	0xFFB
  3831                           pclath	equ	0xFFA
  3832                           tblptru	equ	0xFF8
  3833                           tblptrh	equ	0xFF7
  3834                           tblptrl	equ	0xFF6
  3835                           tablat	equ	0xFF5
  3836                           prodh	equ	0xFF4
  3837                           prodl	equ	0xFF3
  3838                           intcon	equ	0xFF2
  3839                           postinc0	equ	0xFEE
  3840                           fsr0h	equ	0xFEA
  3841                           fsr0l	equ	0xFE9
  3842                           wreg	equ	0xFE8
  3843                           indf1	equ	0xFE7
  3844                           postinc1	equ	0xFE6
  3845                           fsr1h	equ	0xFE2
  3846                           fsr1l	equ	0xFE1
  3847                           indf2	equ	0xFDF
  3848                           postinc2	equ	0xFDE
  3849                           postdec2	equ	0xFDD
  3850                           fsr2h	equ	0xFDA
  3851                           fsr2l	equ	0xFD9
  3852                           status	equ	0xFD8
  3853                           
  3854 ;; *************** function _CanXmitResponse *****************
  3855 ;; Defined at:
  3856 ;;		line 180 in file "Can_XmitService.c"
  3857 ;; Parameters:    Size  Location     Type
  3858 ;;		None
  3859 ;; Auto vars:     Size  Location     Type
  3860 ;;		None
  3861 ;; Return value:  Size  Location     Type
  3862 ;;                  1    wreg      void 
  3863 ;; Registers used:
  3864 ;;		None
  3865 ;; Tracked objects:
  3866 ;;		On entry : 0/0
  3867 ;;		On exit  : 0/0
  3868 ;;		Unchanged: 0/0
  3869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3870 ;;      Params:         0       0       0       0
  3871 ;;      Locals:         0       0       0       0
  3872 ;;      Temps:          0       0       0       0
  3873 ;;      Totals:         0       0       0       0
  3874 ;;Total ram usage:        0 bytes
  3875 ;; Hardware stack levels used:    1
  3876 ;; This function calls:
  3877 ;;		Nothing
  3878 ;; This function is called by:
  3879 ;;		_ISR
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           
  3883                           	psect	text26
  3884  000DC8                     __ptext26:
  3885                           	opt stack 0
  3886  000DC8                     _CanXmitResponse:
  3887                           	opt stack 22
  3888                           
  3889                           ;Can_XmitService.c: 182: TXB0CONbits.TXREQ = 0;
  3890                           
  3891                           ;incstack = 0
  3892  000DC8  010F               	movlb	15	; () banked
  3893  000DCA  9740               	bcf	64,3,b	;volatile
  3894                           
  3895                           ; BSR set to: 15
  3896  000DCC  0012               	return		;funcret
  3897  000DCE                     __end_of_CanXmitResponse:
  3898                           	opt stack 0
  3899                           tosu	equ	0xFFF
  3900                           tosh	equ	0xFFE
  3901                           tosl	equ	0xFFD
  3902                           pclatu	equ	0xFFB
  3903                           pclath	equ	0xFFA
  3904                           tblptru	equ	0xFF8
  3905                           tblptrh	equ	0xFF7
  3906                           tblptrl	equ	0xFF6
  3907                           tablat	equ	0xFF5
  3908                           prodh	equ	0xFF4
  3909                           prodl	equ	0xFF3
  3910                           intcon	equ	0xFF2
  3911                           postinc0	equ	0xFEE
  3912                           fsr0h	equ	0xFEA
  3913                           fsr0l	equ	0xFE9
  3914                           wreg	equ	0xFE8
  3915                           indf1	equ	0xFE7
  3916                           postinc1	equ	0xFE6
  3917                           fsr1h	equ	0xFE2
  3918                           fsr1l	equ	0xFE1
  3919                           indf2	equ	0xFDF
  3920                           postinc2	equ	0xFDE
  3921                           postdec2	equ	0xFDD
  3922                           fsr2h	equ	0xFDA
  3923                           fsr2l	equ	0xFD9
  3924                           status	equ	0xFD8
  3925                           
  3926 ;; *************** function _CanRCVResponse *****************
  3927 ;; Defined at:
  3928 ;;		line 188 in file "Can_XmitService.c"
  3929 ;; Parameters:    Size  Location     Type
  3930 ;;		None
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;		None
  3933 ;; Return value:  Size  Location     Type
  3934 ;;                  1    wreg      void 
  3935 ;; Registers used:
  3936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3937 ;; Tracked objects:
  3938 ;;		On entry : 0/0
  3939 ;;		On exit  : 0/0
  3940 ;;		Unchanged: 0/0
  3941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3942 ;;      Params:         0       0       0       0
  3943 ;;      Locals:         0       0       0       0
  3944 ;;      Temps:          0       0       0       0
  3945 ;;      Totals:         0       0       0       0
  3946 ;;Total ram usage:        0 bytes
  3947 ;; Hardware stack levels used:    1
  3948 ;; Hardware stack levels required when called:    1
  3949 ;; This function calls:
  3950 ;;		_ES_Timer_InitTimer
  3951 ;; This function is called by:
  3952 ;;		_ISR
  3953 ;; This function uses a non-reentrant model
  3954 ;;
  3955                           
  3956                           	psect	text27
  3957  000D4E                     __ptext27:
  3958                           	opt stack 0
  3959  000D4E                     _CanRCVResponse:
  3960                           	opt stack 21
  3961                           
  3962                           ;Can_XmitService.c: 190: if (RXB0CONbits.RXFUL == 1) {
  3963                           
  3964                           ; BSR set to: 15
  3965                           ;incstack = 0
  3966  000D4E  AE60               	btfss	3936,7,c	;volatile
  3967  000D50  0012               	return	
  3968                           
  3969                           ;Can_XmitService.c: 191: RXB0CONbits.RXFUL = 0;
  3970  000D52  9E60               	bcf	3936,7,c	;volatile
  3971                           
  3972                           ;Can_XmitService.c: 193: ES_Timer_InitTimer(0, 50);
  3973  000D54  0E00               	movlw	0
  3974  000D56  6E02               	movwf	ES_Timer_InitTimer@NewTime+1,c
  3975  000D58  0E32               	movlw	50
  3976  000D5A  6E01               	movwf	ES_Timer_InitTimer@NewTime,c
  3977  000D5C  0E00               	movlw	0
  3978  000D5E  EC2C  F005         	call	_ES_Timer_InitTimer
  3979  000D62  0012               	return	
  3980  000D64                     __end_of_CanRCVResponse:
  3981                           	opt stack 0
  3982                           tosu	equ	0xFFF
  3983                           tosh	equ	0xFFE
  3984                           tosl	equ	0xFFD
  3985                           pclatu	equ	0xFFB
  3986                           pclath	equ	0xFFA
  3987                           tblptru	equ	0xFF8
  3988                           tblptrh	equ	0xFF7
  3989                           tblptrl	equ	0xFF6
  3990                           tablat	equ	0xFF5
  3991                           prodh	equ	0xFF4
  3992                           prodl	equ	0xFF3
  3993                           intcon	equ	0xFF2
  3994                           postinc0	equ	0xFEE
  3995                           fsr0h	equ	0xFEA
  3996                           fsr0l	equ	0xFE9
  3997                           wreg	equ	0xFE8
  3998                           indf1	equ	0xFE7
  3999                           postinc1	equ	0xFE6
  4000                           fsr1h	equ	0xFE2
  4001                           fsr1l	equ	0xFE1
  4002                           indf2	equ	0xFDF
  4003                           postinc2	equ	0xFDE
  4004                           postdec2	equ	0xFDD
  4005                           fsr2h	equ	0xFDA
  4006                           fsr2l	equ	0xFD9
  4007                           status	equ	0xFD8
  4008                           
  4009 ;; *************** function _ES_Timer_InitTimer *****************
  4010 ;; Defined at:
  4011 ;;		line 229 in file "ES_Timers.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;  Num             1    wreg     unsigned char 
  4014 ;;  NewTime         2    0[COMRAM] unsigned int 
  4015 ;; Auto vars:     Size  Location     Type
  4016 ;;  Num             1    4[COMRAM] unsigned char 
  4017 ;; Return value:  Size  Location     Type
  4018 ;;                  1    wreg      enum E15468
  4019 ;; Registers used:
  4020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4021 ;; Tracked objects:
  4022 ;;		On entry : 0/0
  4023 ;;		On exit  : 0/0
  4024 ;;		Unchanged: 0/0
  4025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4026 ;;      Params:         2       0       0       0
  4027 ;;      Locals:         1       0       0       0
  4028 ;;      Temps:          2       0       0       0
  4029 ;;      Totals:         5       0       0       0
  4030 ;;Total ram usage:        5 bytes
  4031 ;; Hardware stack levels used:    1
  4032 ;; This function calls:
  4033 ;;		Nothing
  4034 ;; This function is called by:
  4035 ;;		_CanRCVResponse
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           	psect	text28
  4040  000A58                     __ptext28:
  4041                           	opt stack 0
  4042  000A58                     _ES_Timer_InitTimer:
  4043                           	opt stack 21
  4044                           
  4045                           ;incstack = 0
  4046                           ;ES_Timer_InitTimer@Num stored from wreg
  4047  000A58  6E05               	movwf	ES_Timer_InitTimer@Num,c
  4048                           
  4049                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  4050                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  4051                           ;ES_Timers.c: 236: (NewTime == 0) )
  4052  000A5A  0E10               	movlw	16
  4053  000A5C  6005               	cpfslt	ES_Timer_InitTimer@Num,c
  4054  000A5E  0012               	return	
  4055  000A60  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4056  000A62  0D02               	mullw	2
  4057  000A64  0E21               	movlw	low _Timer2PostFunc
  4058  000A66  24F3               	addwf	prodl,w,c
  4059  000A68  6EF6               	movwf	tblptrl,c
  4060  000A6A  0E03               	movlw	high _Timer2PostFunc
  4061  000A6C  20F4               	addwfc	prodh,w,c
  4062  000A6E  6EF7               	movwf	tblptrh,c
  4063  000A70                     	if	0	;There are less than 3 active tblptr bytes
  4064  000A70                     	endif
  4065  000A70  0009               	tblrd		*+
  4066  000A72  50F5               	movf	tablat,w,c
  4067  000A74  0009               	tblrd		*+
  4068  000A76  10F5               	iorwf	tablat,w,c
  4069  000A78  B4D8               	btfsc	status,2,c
  4070  000A7A  0012               	return	
  4071  000A7C  5001               	movf	ES_Timer_InitTimer@NewTime,w,c
  4072  000A7E  1002               	iorwf	ES_Timer_InitTimer@NewTime+1,w,c
  4073  000A80  B4D8               	btfsc	status,2,c
  4074  000A82  0012               	return	
  4075                           
  4076                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  4077                           
  4078                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  4079                           ;	Return value of _ES_Timer_InitTimer is never used
  4080  000A84  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4081  000A86  0D02               	mullw	2
  4082  000A88  0E60               	movlw	low _TMR_TimerArray
  4083  000A8A  24F3               	addwf	prodl,w,c
  4084  000A8C  6ED9               	movwf	fsr2l,c
  4085  000A8E  0E00               	movlw	high _TMR_TimerArray
  4086  000A90  20F4               	addwfc	prodh,w,c
  4087  000A92  6EDA               	movwf	fsr2h,c
  4088  000A94  C001  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  4089  000A98  C002  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  4090                           
  4091                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  4092  000A9C  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4093  000A9E  0D02               	mullw	2
  4094  000AA0  0E01               	movlw	low _BitNum2SetMask
  4095  000AA2  24F3               	addwf	prodl,w,c
  4096  000AA4  6EF6               	movwf	tblptrl,c
  4097  000AA6  0E03               	movlw	high _BitNum2SetMask
  4098  000AA8  20F4               	addwfc	prodh,w,c
  4099  000AAA  6EF7               	movwf	tblptrh,c
  4100  000AAC                     	if	0	;There are less than 3 active tblptr bytes
  4101  000AAC                     	endif
  4102  000AAC  0009               	tblrd		*+
  4103  000AAE  CFF5 F003          	movff	tablat,??_ES_Timer_InitTimer
  4104  000AB2  0009               	tblrd		*+
  4105  000AB4  CFF5 F004          	movff	tablat,??_ES_Timer_InitTimer+1
  4106  000AB8  5003               	movf	??_ES_Timer_InitTimer,w,c
  4107  000ABA  1240               	iorwf	_TMR_ActiveFlags,f,c
  4108  000ABC  5004               	movf	??_ES_Timer_InitTimer+1,w,c
  4109  000ABE  1241               	iorwf	_TMR_ActiveFlags+1,f,c
  4110  000AC0  0012               	return	
  4111  000AC2                     __end_of_ES_Timer_InitTimer:
  4112                           	opt stack 0
  4113                           tosu	equ	0xFFF
  4114                           tosh	equ	0xFFE
  4115                           tosl	equ	0xFFD
  4116                           pclatu	equ	0xFFB
  4117                           pclath	equ	0xFFA
  4118                           tblptru	equ	0xFF8
  4119                           tblptrh	equ	0xFF7
  4120                           tblptrl	equ	0xFF6
  4121                           tablat	equ	0xFF5
  4122                           prodh	equ	0xFF4
  4123                           prodl	equ	0xFF3
  4124                           intcon	equ	0xFF2
  4125                           postinc0	equ	0xFEE
  4126                           fsr0h	equ	0xFEA
  4127                           fsr0l	equ	0xFE9
  4128                           wreg	equ	0xFE8
  4129                           indf1	equ	0xFE7
  4130                           postinc1	equ	0xFE6
  4131                           fsr1h	equ	0xFE2
  4132                           fsr1l	equ	0xFE1
  4133                           indf2	equ	0xFDF
  4134                           postinc2	equ	0xFDE
  4135                           postdec2	equ	0xFDD
  4136                           fsr2h	equ	0xFDA
  4137                           fsr2l	equ	0xFD9
  4138                           status	equ	0xFD8
  4139                           
  4140 ;; *************** function _CanErrorResponse *****************
  4141 ;; Defined at:
  4142 ;;		line 198 in file "Can_XmitService.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;		None
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;		None
  4147 ;; Return value:  Size  Location     Type
  4148 ;;                  1    wreg      void 
  4149 ;; Registers used:
  4150 ;;		None
  4151 ;; Tracked objects:
  4152 ;;		On entry : 0/0
  4153 ;;		On exit  : 0/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4156 ;;      Params:         0       0       0       0
  4157 ;;      Locals:         0       0       0       0
  4158 ;;      Temps:          0       0       0       0
  4159 ;;      Totals:         0       0       0       0
  4160 ;;Total ram usage:        0 bytes
  4161 ;; Hardware stack levels used:    1
  4162 ;; This function calls:
  4163 ;;		Nothing
  4164 ;; This function is called by:
  4165 ;;		_ISR
  4166 ;; This function uses a non-reentrant model
  4167 ;;
  4168                           
  4169                           	psect	text29
  4170  000D9A                     __ptext29:
  4171                           	opt stack 0
  4172  000D9A                     _CanErrorResponse:
  4173                           	opt stack 22
  4174                           
  4175                           ;Can_XmitService.c: 200: if (LATA0 == 1) {
  4176                           
  4177                           ;incstack = 0
  4178  000D9A  A089               	btfss	3977,0,c	;volatile
  4179  000D9C  D002               	goto	i2l418
  4180                           
  4181                           ;Can_XmitService.c: 201: LATA0 = 0;
  4182  000D9E  9089               	bcf	3977,0,c	;volatile
  4183                           
  4184                           ;Can_XmitService.c: 202: } else if (LATA0 == 0) {
  4185  000DA0  0012               	return	
  4186  000DA2                     i2l418:
  4187  000DA2  B089               	btfsc	3977,0,c	;volatile
  4188  000DA4  0012               	return	
  4189                           
  4190                           ;Can_XmitService.c: 203: LATA0 = 1;
  4191  000DA6  8089               	bsf	3977,0,c	;volatile
  4192  000DA8  0012               	return	
  4193  000DAA                     __end_of_CanErrorResponse:
  4194                           	opt stack 0
  4195                           tosu	equ	0xFFF
  4196                           tosh	equ	0xFFE
  4197                           tosl	equ	0xFFD
  4198                           pclatu	equ	0xFFB
  4199                           pclath	equ	0xFFA
  4200                           tblptru	equ	0xFF8
  4201                           tblptrh	equ	0xFF7
  4202                           tblptrl	equ	0xFF6
  4203                           tablat	equ	0xFF5
  4204                           prodh	equ	0xFF4
  4205                           prodl	equ	0xFF3
  4206                           intcon	equ	0xFF2
  4207                           postinc0	equ	0xFEE
  4208                           fsr0h	equ	0xFEA
  4209                           fsr0l	equ	0xFE9
  4210                           wreg	equ	0xFE8
  4211                           indf1	equ	0xFE7
  4212                           postinc1	equ	0xFE6
  4213                           fsr1h	equ	0xFE2
  4214                           fsr1l	equ	0xFE1
  4215                           indf2	equ	0xFDF
  4216                           postinc2	equ	0xFDE
  4217                           postdec2	equ	0xFDD
  4218                           fsr2h	equ	0xFDA
  4219                           fsr2l	equ	0xFD9
  4220                           status	equ	0xFD8
  4221                           
  4222 ;; *************** function _BusErrorResponse *****************
  4223 ;; Defined at:
  4224 ;;		line 207 in file "Can_XmitService.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;		None
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;		None
  4229 ;; Return value:  Size  Location     Type
  4230 ;;                  1    wreg      void 
  4231 ;; Registers used:
  4232 ;;		None
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4238 ;;      Params:         0       0       0       0
  4239 ;;      Locals:         0       0       0       0
  4240 ;;      Temps:          0       0       0       0
  4241 ;;      Totals:         0       0       0       0
  4242 ;;Total ram usage:        0 bytes
  4243 ;; Hardware stack levels used:    1
  4244 ;; This function calls:
  4245 ;;		Nothing
  4246 ;; This function is called by:
  4247 ;;		_ISR
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           	psect	text30
  4252  000DAA                     __ptext30:
  4253                           	opt stack 0
  4254  000DAA                     _BusErrorResponse:
  4255                           	opt stack 22
  4256                           
  4257                           ;Can_XmitService.c: 209: if (LATA2 == 1) {
  4258                           
  4259                           ;incstack = 0
  4260  000DAA  A489               	btfss	3977,2,c	;volatile
  4261  000DAC  D002               	goto	i2l424
  4262                           
  4263                           ;Can_XmitService.c: 210: LATA2 = 0;
  4264  000DAE  9489               	bcf	3977,2,c	;volatile
  4265                           
  4266                           ;Can_XmitService.c: 211: } else if (LATA2 == 0) {
  4267  000DB0  0012               	return	
  4268  000DB2                     i2l424:
  4269  000DB2  B489               	btfsc	3977,2,c	;volatile
  4270  000DB4  0012               	return	
  4271                           
  4272                           ;Can_XmitService.c: 212: LATA2 = 1;
  4273  000DB6  8489               	bsf	3977,2,c	;volatile
  4274  000DB8  0012               	return	
  4275  000DBA                     __end_of_BusErrorResponse:
  4276                           	opt stack 0
  4277                           tosu	equ	0xFFF
  4278                           tosh	equ	0xFFE
  4279                           tosl	equ	0xFFD
  4280                           pclatu	equ	0xFFB
  4281                           pclath	equ	0xFFA
  4282                           tblptru	equ	0xFF8
  4283                           tblptrh	equ	0xFF7
  4284                           tblptrl	equ	0xFF6
  4285                           tablat	equ	0xFF5
  4286                           prodh	equ	0xFF4
  4287                           prodl	equ	0xFF3
  4288                           intcon	equ	0xFF2
  4289                           postinc0	equ	0xFEE
  4290                           fsr0h	equ	0xFEA
  4291                           fsr0l	equ	0xFE9
  4292                           wreg	equ	0xFE8
  4293                           indf1	equ	0xFE7
  4294                           postinc1	equ	0xFE6
  4295                           fsr1h	equ	0xFE2
  4296                           fsr1l	equ	0xFE1
  4297                           indf2	equ	0xFDF
  4298                           postinc2	equ	0xFDE
  4299                           postdec2	equ	0xFDD
  4300                           fsr2h	equ	0xFDA
  4301                           fsr2l	equ	0xFD9
  4302                           status	equ	0xFD8
  4303                           tosu	equ	0xFFF
  4304                           tosh	equ	0xFFE
  4305                           tosl	equ	0xFFD
  4306                           pclatu	equ	0xFFB
  4307                           pclath	equ	0xFFA
  4308                           tblptru	equ	0xFF8
  4309                           tblptrh	equ	0xFF7
  4310                           tblptrl	equ	0xFF6
  4311                           tablat	equ	0xFF5
  4312                           prodh	equ	0xFF4
  4313                           prodl	equ	0xFF3
  4314                           intcon	equ	0xFF2
  4315                           postinc0	equ	0xFEE
  4316                           fsr0h	equ	0xFEA
  4317                           fsr0l	equ	0xFE9
  4318                           wreg	equ	0xFE8
  4319                           indf1	equ	0xFE7
  4320                           postinc1	equ	0xFE6
  4321                           fsr1h	equ	0xFE2
  4322                           fsr1l	equ	0xFE1
  4323                           indf2	equ	0xFDF
  4324                           postinc2	equ	0xFDE
  4325                           postdec2	equ	0xFDD
  4326                           fsr2h	equ	0xFDA
  4327                           fsr2l	equ	0xFD9
  4328                           status	equ	0xFD8
  4329                           
  4330                           	psect	text31
  4331  000000                     __ptext31:
  4332                           	opt stack 0
  4333                           tosu	equ	0xFFF
  4334                           tosh	equ	0xFFE
  4335                           tosl	equ	0xFFD
  4336                           pclatu	equ	0xFFB
  4337                           pclath	equ	0xFFA
  4338                           tblptru	equ	0xFF8
  4339                           tblptrh	equ	0xFF7
  4340                           tblptrl	equ	0xFF6
  4341                           tablat	equ	0xFF5
  4342                           prodh	equ	0xFF4
  4343                           prodl	equ	0xFF3
  4344                           intcon	equ	0xFF2
  4345                           postinc0	equ	0xFEE
  4346                           fsr0h	equ	0xFEA
  4347                           fsr0l	equ	0xFE9
  4348                           wreg	equ	0xFE8
  4349                           indf1	equ	0xFE7
  4350                           postinc1	equ	0xFE6
  4351                           fsr1h	equ	0xFE2
  4352                           fsr1l	equ	0xFE1
  4353                           indf2	equ	0xFDF
  4354                           postinc2	equ	0xFDE
  4355                           postdec2	equ	0xFDD
  4356                           fsr2h	equ	0xFDA
  4357                           fsr2l	equ	0xFD9
  4358                           status	equ	0xFD8
  4359                           
  4360                           	psect	rparam
  4361  0000                     tosu	equ	0xFFF
  4362                           tosh	equ	0xFFE
  4363                           tosl	equ	0xFFD
  4364                           pclatu	equ	0xFFB
  4365                           pclath	equ	0xFFA
  4366                           tblptru	equ	0xFF8
  4367                           tblptrh	equ	0xFF7
  4368                           tblptrl	equ	0xFF6
  4369                           tablat	equ	0xFF5
  4370                           prodh	equ	0xFF4
  4371                           prodl	equ	0xFF3
  4372                           intcon	equ	0xFF2
  4373                           postinc0	equ	0xFEE
  4374                           fsr0h	equ	0xFEA
  4375                           fsr0l	equ	0xFE9
  4376                           wreg	equ	0xFE8
  4377                           indf1	equ	0xFE7
  4378                           postinc1	equ	0xFE6
  4379                           fsr1h	equ	0xFE2
  4380                           fsr1l	equ	0xFE1
  4381                           indf2	equ	0xFDF
  4382                           postinc2	equ	0xFDE
  4383                           postdec2	equ	0xFDD
  4384                           fsr2h	equ	0xFDA
  4385                           fsr2l	equ	0xFD9
  4386                           status	equ	0xFD8
  4387                           
  4388                           	psect	temp
  4389  00004A                     btemp:
  4390                           	opt stack 0
  4391  00004A                     	ds	1
  4392  0000                     int$flags	set	btemp
  4393                           tosu	equ	0xFFF
  4394                           tosh	equ	0xFFE
  4395                           tosl	equ	0xFFD
  4396                           pclatu	equ	0xFFB
  4397                           pclath	equ	0xFFA
  4398                           tblptru	equ	0xFF8
  4399                           tblptrh	equ	0xFF7
  4400                           tblptrl	equ	0xFF6
  4401                           tablat	equ	0xFF5
  4402                           prodh	equ	0xFF4
  4403                           prodl	equ	0xFF3
  4404                           intcon	equ	0xFF2
  4405                           postinc0	equ	0xFEE
  4406                           fsr0h	equ	0xFEA
  4407                           fsr0l	equ	0xFE9
  4408                           wreg	equ	0xFE8
  4409                           indf1	equ	0xFE7
  4410                           postinc1	equ	0xFE6
  4411                           fsr1h	equ	0xFE2
  4412                           fsr1l	equ	0xFE1
  4413                           indf2	equ	0xFDF
  4414                           postinc2	equ	0xFDE
  4415                           postdec2	equ	0xFDD
  4416                           fsr2h	equ	0xFDA
  4417                           fsr2l	equ	0xFD9
  4418                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    90
    Data        0
    BSS         67
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     50      73
    BANK0           160     13      57
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostCan_XmitService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(COMRAM[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [1] size(2) Largest target is 1
		 -> PostCan_XmitService(), 

    S91$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    S70$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCan_XmitService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCan_XmitService(), 

    S70$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCan_XmitService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCan_XmitService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    _PostCan_XmitService->_ES_PostToService
    _ES_DeQueue->___wmul
    _InitCan_XmitService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in COMRAM

    _CanRCVResponse->_ES_Timer_InitTimer

Critical Paths under _main in BANK0

    _main->_ES_Run
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostCan_XmitService
    _ES_Initialize->_InitCan_XmitService

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   11874
                                             12 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     428
                                             21 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0    7263
                                              7 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                 _RunCan_XmitService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    3693
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    3693
                                              3 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
                _PostCan_XmitService *
 ---------------------------------------------------------------------------------
 (4) _PostCan_XmitService                                  3     0      3    3250
                                              0 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     443
                                             21 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                             21 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunCan_XmitService                                   6     3      3     195
                                             21 COMRAM     6     3      3
                    _InitCanHardware
                           _InitPins
                     _ToggleDebugLED
 ---------------------------------------------------------------------------------
 (3) _ToggleDebugLED                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2746
                                             33 COMRAM    10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     292
                                             21 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                             21 COMRAM     1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    4115
                                              4 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                _InitCan_XmitService *
 ---------------------------------------------------------------------------------
 (2) _InitCan_XmitService                                  4     4      0    3184
                                              0 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    3119
                                             44 COMRAM     6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2815
                                             33 COMRAM    11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1586
                                             27 COMRAM     6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     553
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     211
                                             23 COMRAM     2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      90
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     345
                                             21 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 16    16      0     208
                                              5 COMRAM    16    16      0
                   _BusErrorResponse
                   _CanErrorResponse
                     _CanRCVResponse
                    _CanXmitResponse
 ---------------------------------------------------------------------------------
 (9) _CanXmitResponse                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CanRCVResponse                                       0     0      0     208
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (10) _ES_Timer_InitTimer                                  5     3      2     208
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (9) _CanErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _BusErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitCan_XmitService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunCan_XmitService *
       _InitCanHardware
       _InitPins
       _ToggleDebugLED
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostCan_XmitService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _BusErrorResponse
   _CanErrorResponse
   _CanRCVResponse
     _ES_Timer_InitTimer
   _CanXmitResponse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      D      39       4       35.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     32      49       1       77.7%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      82       9        0.0%
DATA                 0      0      82      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Nov 16 14:16:00 2016

                   ??__HW_Timer_Init 0018                  ES_CheckUserEvents@i 0016  
                __HW_Timer_Init@Rate 0016                  ___wmul@multiplicand 001E  
          __size_of_BusErrorResponse 0010                                  l307 0974  
                                l430 0B2C                                  l433 0B78  
                                l442 0D92                __end_of_ES_Initialize 0698  
                                _GIE 007F97                                  _ISR 0008  
                       ___awmod@sign 001B              __end_of_Check4Keystroke 0DD2  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 002A  
            ES_EnQueueFIFO@Event2Add 0024                    ?_ES_PostToService 002D  
                               ?_ISR 0001                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 0033                                 l2200 0A16  
                               l2202 0A1E                                 l2204 0A22  
                               l2212 0A40                                 l2300 0532  
                               l2302 056A                                 l2216 0A4E  
                               l2208 0A36                                 l2236 08F2  
                               l2252 0B24                                 l2500 05BE  
                               l2430 048C                                 l2192 09FC  
                               l2520 068E                                 l2512 0610  
                               l2272 09E4                                 l2426 0474  
                               l2258 097E                                 l2290 04C4  
                               l2196 0A08                                 l2508 060C  
                               l2524 0694                                 l2436 04B0  
                               l2268 09E0                                 l2540 0768  
                               l2390 0CDC                                 l2382 0CC4  
                               l2454 0D7A                                 l2534 0714  
                               l2544 077A                                 l2528 069A  
                               l2552 0C9A                                 l2490 0C24  
                               l2458 0D80                                 l2554 0CA0  
                               l2476 0C60                                 l2484 0C12  
                               l2660 0932                                 l2662 0940  
                               l2664 094E                                 l2658 0924  
                               l2668 095C                                 STR_1 035B  
                               STR_2 0376                                 STR_3 038E  
                               STR_4 03A5                                 _LATA 000F89  
                               _LATB 000F8A                                 u1544 099C  
                               u1545 0996                                 _PIE1 000F9D  
                               u1808 0668                                 u1809 0684  
                               u1678 0BAA                                 u1598 051A  
                               u1679 0BC2                                 u1848 073E  
                               u1849 0756                                 _PEIE 007F96  
                               _SCS1 007E99                     ?_CanXmitResponse 0001  
                 ??_ES_PostToService 0030                                 _main 08F6  
                        ?_ES_DeQueue 0022                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 indf1 000FE7  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 004A  
                      main@ErrorType 0098                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0016                        __CFG_MCLRE$ON 000000  
       InitCan_XmitService@ThisEvent 008C                         ___param_bank 000010  
            __end_of_InitCanHardware 0B8C                                ??_ISR 0006  
                 ES_Run@HighestPrior 0097                                ?_main 0001  
              __end_of_ES_Timer_Init 0DC8                      __end_of___awmod 0A58  
                    __end_of___lbmod 0CE4                                _T1CON 000FCD  
                         _DistList00 0359                                _LATA0 007C48  
                              _LATA1 007C49                                _LATA2 007C4A  
                              _LATA3 007C4B                                _LATB2 007C52  
                              _IRCF0 007E9C                                _IRCF1 007E9D  
                              _IRCF2 007E9E                                _ERRIE 007D1D  
                              _ERRIF 007D25                                i2l160 0806  
                              i2l424 0DB2                                i2l418 0DA2  
                              _IRXIE 007D1F                                _IRXIF 007D27  
                              _PORTA 000F80                                _PORTB 000F81  
                      __CFG_PWRT$OFF 000000                                _Ready 003C  
                              _putch 0DD2                       __CFG_BOREN$OFF 000000  
                              pclath 000FFA                                tablat 000FF5  
                              status 000FD8                      __initialization 0CE4  
             ES_GetMSBitSet@LoopCntr 001F           __end_of_ES_CheckUserEvents 0BCC  
                       __end_of_main 0976                    ES_Timer_Init@Rate 0018  
                   __end_of_InitPins 0C90                  __end_of_EventQueues 0357  
                             ??_main 0033                        __activetblptr 000002  
                __size_of_ES_DeQueue 00FE                      _Nybble2MSBitNum 0341  
   __end_of__HW_Process_Pending_Ints 0D8A                     ?_Check4Keystroke 0001  
                  ?_CanErrorResponse 0001                               _ADCON1 000FC1  
                             _CCP1IF 007CF2                               _CANCON 000F6F  
                             _CCPR1H 000FBF                               _CCPR1L 000FBE  
                 ??_CanErrorResponse 0001                               _CIOCON 000F73  
                         _MyPriority 0045                               ?_putch 0001  
                   ??_ES_GetMSBitSet 0018                               i2l2102 07F2  
                             i2l2108 07FC                               i2l2090 07DE  
                             i2l2096 07E8                               _INTCON 000FF2  
                             _RXB0IE 007D18                               _RXB0IF 007D20  
                             _ES_Run 0698                               _TXB0D0 000F46  
                             _TXB0IF 007D22                     ??_CanRCVResponse 0006  
                   ??_ES_EnQueueFIFO 0027                       _Timer2PostFunc 0321  
                             _Queue0 0080                       _SysTickCounter 003E  
                             ___wmul 0D0A                            ??___awmod 001A  
                          ??___lbmod 0017                     ?_InitCanHardware 0001  
                _PostCan_XmitService 0D64          __size_of_ES_Timer_InitTimer 006A  
                             clear_0 0CEA                               clear_1 0CF6  
                   _BusErrorResponse 0DAA                      ___awmod@divisor 0018  
          ES_Timer_InitTimer@NewTime 0001                      ___awmod@counter 001A  
                             _printf 0C90                          ISR@LastTime 0038  
             ES_InitQueue@pThisQueue 0019                         __mediumconst 0000  
                        ISR@NextTime 003A                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                             putch@c 0001          __size_of_ES_Timer_Tick_Resp 00F8  
               ES_DeQueue@pThisQueue 002A              ES_GetMSBitSet@Val2Check 0016  
               ?_PostCan_XmitService 008C          InitCan_XmitService@Priority 008F  
                    ___lbmod@divisor 0016                           __accesstop 0060  
            __end_of__initialization 0CFC               __end_of_Timer2PostFunc 0341  
                    ___lbmod@counter 0018                      __CFG_PBADEN$OFF 000000  
                      ___rparam_used 000001                          _EventQueues 0354  
                     __pcstackCOMRAM 0001                        ?_ES_InitQueue 0016  
            __end_of_Nybble2MSBitNum 0350                        __end_of_putch 0DD4  
                    _TMR_ActiveFlags 0040              ES_GetMSBitSet@ReturnVal 001D  
        __end_of_InitCan_XmitService 0C64                       _TMR_TimerArray 0060  
              ??_PostCan_XmitService 0033             ES_EnQueueFIFO@pThisQueue 002B  
                            ??_putch 0016             __HW_Process_Pending_Ints 0D78  
                         __pbssBANK0 0060                            ?_InitPins 0001  
                            ?_ES_Run 0001                         ??_ES_DeQueue 0026  
        __size_of_RunCan_XmitService 0034            __size_of_ES_PostToService 0066  
                     ??_ES_InitQueue 0019                              ?___wmul 001C  
                            _CCP1CON 000FBD                              _ECANCON 000F77  
                            ?_printf 0016              __size_of_ToggleDebugLED 0010  
                 __end_of_ES_DeQueue 04B4                              _TXB0DLC 000F45  
                         ??_InitPins 0016                      __size_of_ES_Run 00E8  
             __size_of_ES_Initialize 00EC                              __Hparam 0000  
                            __Lparam 0000             __size_of_CanXmitResponse 0006  
                            ___awmod 09E8                              ___lbmod 0CBA  
                    __size_of___wmul 0026                         __psmallconst 0300  
              ES_Timer_InitTimer@Num 0005                              __pcinit 0CE4  
                            __ramtop 0300                              __ptext0 08F6  
                            __ptext1 0C90                              __ptext2 0DD2  
                            __ptext3 0698                              __ptext4 0D78  
                            __ptext5 04B4                              __ptext6 0D64  
                            __ptext7 0976                              __ptext8 0C02  
                            __ptext9 0D8A                      __size_of_printf 002A  
                       __size_of_ISR 083A              __size_of__HW_Timer_Init 001E  
                   ___awmod@dividend 0016                   _ES_CheckUserEvents 0B8C  
                    ES_Run@ThisEvent 0047                       __pintcode_body 0780  
               end_of_initialization 0CFC                  ?_ES_CheckUserEvents 0001  
           __end_of_BusErrorResponse 0DBA                        __Lmediumconst 0000  
                            int_func 0780         ES_PostToService@WhichService 0032  
             __size_of_ES_Timer_Init 000E            __size_of_CanErrorResponse 0010  
                            printf@c 001A                              printf@f 0016  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
               ??_ES_CheckUserEvents 0016                        _ES_Initialize 05AC  
                   ___lbmod@dividend 0017                            _TRISAbits 000F92  
                          _TRISBbits 000F93                 __end_of_ES_EventList 0359  
               __end_of_ES_InitQueue 0C02                       ES_Initialize@i 0092  
                        ___lbmod@rem 0019             __size_of_Check4Keystroke 0004  
                     __end_of_ES_Run 0780          RunCan_XmitService@ThisEvent 0016  
                 __end_of_DistList00 035B                     _ES_PostToService 0AC2  
         __end_of_ES_Timer_InitTimer 0AC2                 __end_of_ServDescList 0354  
                     __end_of___wmul 0D30                    ??_CanXmitResponse 0001  
                     _ToggleDebugLED 0D8A                       ?_ES_Initialize 0090  
         ??__HW_Process_Pending_Ints 0033                        _ES_Timer_Init 0DBA  
                     __end_of_printf 0CBA             __size_of_InitCanHardware 0064  
         __end_of_ES_Timer_Tick_Resp 05AC                  start_initialization 0CE4  
                        __end_of_ISR 0842                          _CANSTATbits 000F6E  
                           ??_ES_Run 0093                     __CFG_OSC$IRCIO67 000000  
                          _TickCount 0046                    __size_of_InitPins 002C  
            __size_of_ES_GetMSBitSet 0072                             ??___wmul 0020  
             __end_of_ToggleDebugLED 0D9A              __size_of_CanRCVResponse 0016  
            __size_of_ES_EnQueueFIFO 00B4                             ??_printf 0018  
                     ?_ES_Timer_Init 0018                       __HW_Timer_Init 0D30  
        __end_of_PostCan_XmitService 0D78                          __pbssCOMRAM 0033  
                      __pcstackBANK0 008C                          _BRGCON1bits 000F70  
                        _BRGCON2bits 000F71                   ES_InitQueue@pBlock 0016  
                        _BRGCON3bits 000F72         __size_of_InitCan_XmitService 002E  
         __end_of_RunCan_XmitService 0C36                        __PRIMASK_temp 0042  
                   _CanErrorResponse 0D9A                    ??_Check4Keystroke 0016  
                          __pintcode 0008                             ?___awmod 0016  
                           ?___lbmod 0016                      ?_ToggleDebugLED 0001  
                    ??_ES_Initialize 0033             ES_PostToService@TheEvent 002D  
             __end_of__HW_Timer_Init 0D4E                          __smallconst 0300  
              __size_of_ES_InitQueue 0036         PostCan_XmitService@ThisEvent 008C  
                     __size_of_putch 0002                 ES_Initialize@NewRate 0090  
                  ??_InitCanHardware 0016            ES_GetMSBitSet@Nybble2Test 001E  
                  ?_BusErrorResponse 0001                       ___wmul@product 0020  
                 ??_BusErrorResponse 0001                             _RXF0SIDH 000F00  
                       _ES_EventList 0357                             _RXF0SIDL 000F01  
                           _TXB0SIDH 000F41                             _TXB0SIDL 000F42  
                       _ES_InitQueue 0BCC                             _RXM0SIDH 000F18  
                           _RXM0SIDL 000F19                      ??_ES_Timer_Init 001A  
                    ?__HW_Timer_Init 0016                    ___wmul@multiplier 001C  
                 ES_DeQueue@SaveCrit 0028                 ES_EnQueueFIFO@pBlock 0022  
           __end_of_ES_PostToService 0B28                       _BitNum2SetMask 0301  
                       _ServDescList 0350                             _InitPins 0C64  
                    _CanXmitResponse 0DC8                             __Hrparam 0000  
                     _ES_GetMSBitSet 0976                             __Lrparam 0000  
                   __size_of___awmod 0070                     __size_of___lbmod 002A  
        __size_of_ES_CheckUserEvents 0040                       _CanRCVResponse 0D4E  
                     _ES_EnQueueFIFO 0842                   _ES_Timer_InitTimer 0A58  
             __end_of_BitNum2SetMask 0321                             __ptext10 0C64  
                           __ptext11 0B28                             __ptext20 0D0A  
                           __ptext12 03B6                             __ptext21 09E8  
                           __ptext13 0CBA                             __ptext30 0DAA  
                           __ptext22 0DBA                             __ptext14 0B8C  
                           __ptext31 0000                             __ptext23 0D30  
                           __ptext15 0DCE                             __ptext24 0BCC  
                           __ptext16 05AC                             __ptext17 0C36  
                           __ptext26 0DC8                             __ptext18 0AC2  
                           __ptext27 0D4E                             __ptext19 0842  
                           __ptext28 0A58                             __ptext29 0D9A  
  ES_Timer_Tick_Resp@NeedsProcessing 0036                  ?_ES_Timer_InitTimer 0001  
                      __size_of_main 0080                   _ES_Timer_Tick_Resp 04B4  
             __end_of_ES_GetMSBitSet 09E8                  ?_ES_Timer_Tick_Resp 0001  
             __end_of_CanRCVResponse 0D64               __end_of_ES_EnQueueFIFO 08F6  
                           int$flags 004A                  _InitCan_XmitService 0C36  
               ??_ES_Timer_InitTimer 0003                    ES_DeQueue@NumLeft 0029  
                        _RXB0CONbits 000F60             __end_of_CanErrorResponse 0DAA  
               ??_ES_Timer_Tick_Resp 008F        RunCan_XmitService@ReturnEvent 0019  
               ?_InitCan_XmitService 0001              __end_of_CanXmitResponse 0DCE  
                    _Check4Keystroke 0DCE                             intlevel2 0000  
                         _ES_DeQueue 03B6    __size_of__HW_Process_Pending_Ints 0012  
          ?__HW_Process_Pending_Ints 0001                          _TXB0CONbits 000F40  
                    ?_ES_GetMSBitSet 0016                     ??_ToggleDebugLED 0016  
ES_Timer_Tick_Resp@NextTimer2Process 0044                   _RunCan_XmitService 0C02  
                           printf@ap 0018                      ?_CanRCVResponse 0001  
                    ?_ES_EnQueueFIFO 0022                     ES_DeQueue@pBlock 0022  
                ?_RunCan_XmitService 0016                      _InitCanHardware 0B28  
             ES_DeQueue@pReturnEvent 0024                ES_InitQueue@BlockSize 0018  
              ??_InitCan_XmitService 0033         __size_of_PostCan_XmitService 0014  
               ??_RunCan_XmitService 0019  
