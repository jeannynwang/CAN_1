

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Nov 14 03:06:47 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           	psect	smallconst
    48  000300                     __psmallconst:
    49                           	opt stack 0
    50  000300  00                 	db	0
    51  000301                     _BitNum2SetMask:
    52                           	opt stack 0
    53  000301  0001               	dw	1
    54  000303  0002               	dw	2
    55  000305  0004               	dw	4
    56  000307  0008               	dw	8
    57  000309  0010               	dw	16
    58  00030B  0020               	dw	32
    59  00030D  0040               	dw	64
    60  00030F  0080               	dw	128
    61  000311  0100               	dw	256
    62  000313  0200               	dw	512
    63  000315  0400               	dw	1024
    64  000317  0800               	dw	2048
    65  000319  1000               	dw	4096
    66  00031B  2000               	dw	8192
    67  00031D  4000               	dw	16384
    68  00031F  8000               	dw	32768
    69  000321                     __end_of_BitNum2SetMask:
    70                           	opt stack 0
    71  000321                     _Timer2PostFunc:
    72                           	opt stack 0
    73  000321  4E                 	db	low _PostCan_XmitService
    74  000322  0D                 	db	high _PostCan_XmitService
    75  000323  00                 	db	0
    76  000324  00                 	db	0
    77  000325  00                 	db	0
    78  000326  00                 	db	0
    79  000327  00                 	db	0
    80  000328  00                 	db	0
    81  000329  00                 	db	0
    82  00032A  00                 	db	0
    83  00032B  00                 	db	0
    84  00032C  00                 	db	0
    85  00032D  00                 	db	0
    86  00032E  00                 	db	0
    87  00032F  00                 	db	0
    88  000330  00                 	db	0
    89  000331  00                 	db	0
    90  000332  00                 	db	0
    91  000333  00                 	db	0
    92  000334  00                 	db	0
    93  000335  00                 	db	0
    94  000336  00                 	db	0
    95  000337  00                 	db	0
    96  000338  00                 	db	0
    97  000339  00                 	db	0
    98  00033A  00                 	db	0
    99  00033B  00                 	db	0
   100  00033C  00                 	db	0
   101  00033D  00                 	db	0
   102  00033E  00                 	db	0
   103  00033F  00                 	db	0
   104  000340  00                 	db	0
   105  000341                     __end_of_Timer2PostFunc:
   106                           	opt stack 0
   107  000341                     _Nybble2MSBitNum:
   108                           	opt stack 0
   109  000341  00                 	db	0
   110  000342  01                 	db	1
   111  000343  01                 	db	1
   112  000344  02                 	db	2
   113  000345  02                 	db	2
   114  000346  02                 	db	2
   115  000347  02                 	db	2
   116  000348  03                 	db	3
   117  000349  03                 	db	3
   118  00034A  03                 	db	3
   119  00034B  03                 	db	3
   120  00034C  03                 	db	3
   121  00034D  03                 	db	3
   122  00034E  03                 	db	3
   123  00034F  03                 	db	3
   124  000350                     __end_of_Nybble2MSBitNum:
   125                           	opt stack 0
   126  000350                     _ServDescList:
   127                           	opt stack 0
   128  000350  1C                 	db	low _InitCan_XmitService
   129  000351  0C                 	db	high _InitCan_XmitService
   130  000352  AA                 	db	low _RunCan_XmitService
   131  000353  0B                 	db	high _RunCan_XmitService
   132  000354                     __end_of_ServDescList:
   133                           	opt stack 0
   134  000354                     _EventQueues:
   135                           	opt stack 0
   136  000354  80                 	db	low _Queue0
   137  000355  00                 	db	high _Queue0
   138  000356  04                 	db	4
   139  000357                     __end_of_EventQueues:
   140                           	opt stack 0
   141  000357                     _ES_EventList:
   142                           	opt stack 0
   143  000357  AE                 	db	low _Check4Keystroke
   144  000358  0D                 	db	high _Check4Keystroke
   145  000359                     __end_of_ES_EventList:
   146                           	opt stack 0
   147  0000                     _RXF0SIDH	set	3840
   148  0000                     _RXF0SIDL	set	3841
   149  0000                     _RXM0SIDH	set	3864
   150  0000                     _RXM0SIDL	set	3865
   151  0000                     _TXB0CONbits	set	3904
   152  0000                     _TXB0D0	set	3910
   153  0000                     _TXB0DLC	set	3909
   154  0000                     _TXB0SIDH	set	3905
   155  0000                     _TXB0SIDL	set	3906
   156  0000                     _ADCON1	set	4033
   157  0000                     _BRGCON1bits	set	3952
   158  0000                     _BRGCON2bits	set	3953
   159  0000                     _BRGCON3bits	set	3954
   160  0000                     _CANCON	set	3951
   161  0000                     _CANSTATbits	set	3950
   162  0000                     _CCP1CON	set	4029
   163  0000                     _CCPR1H	set	4031
   164  0000                     _CCPR1L	set	4030
   165  0000                     _ECANCON	set	3959
   166  0000                     _INTCON	set	4082
   167  0000                     _LATA	set	3977
   168  0000                     _LATB	set	3978
   169  0000                     _PIE1	set	3997
   170  0000                     _PIE3	set	4003
   171  0000                     _PORTA	set	3968
   172  0000                     _PORTB	set	3969
   173  0000                     _RXB0CONbits	set	3936
   174  0000                     _T1CON	set	4045
   175  0000                     _TRISAbits	set	3986
   176  0000                     _TRISBbits	set	3987
   177  0000                     _CCP1IF	set	31986
   178  0000                     _GIE	set	32663
   179  0000                     _IRCF0	set	32412
   180  0000                     _IRCF1	set	32413
   181  0000                     _IRCF2	set	32414
   182  0000                     _LATA0	set	31816
   183  0000                     _LATA1	set	31817
   184  0000                     _RXB0IE	set	32024
   185  0000                     _RXB0IF	set	32032
   186  0000                     _SCS1	set	32409
   187  0000                     _TXB0IE	set	32026
   188  0000                     _TXB0IF	set	32034
   189  000359                     STR_1:
   190  000359  46                 	db	70	;'F'
   191  00035A  61                 	db	97	;'a'
   192  00035B  69                 	db	105	;'i'
   193  00035C  6C                 	db	108	;'l'
   194  00035D  65                 	db	101	;'e'
   195  00035E  64                 	db	100	;'d'
   196  00035F  20                 	db	32
   197  000360  6F                 	db	111	;'o'
   198  000361  6E                 	db	110	;'n'
   199  000362  20                 	db	32
   200  000363  61                 	db	97	;'a'
   201  000364  74                 	db	116	;'t'
   202  000365  74                 	db	116	;'t'
   203  000366  65                 	db	101	;'e'
   204  000367  6D                 	db	109	;'m'
   205  000368  70                 	db	112	;'p'
   206  000369  74                 	db	116	;'t'
   207  00036A  20                 	db	32
   208  00036B  74                 	db	116	;'t'
   209  00036C  6F                 	db	111	;'o'
   210  00036D  20                 	db	32
   211  00036E  50                 	db	80	;'P'
   212  00036F  6F                 	db	111	;'o'
   213  000370  73                 	db	115	;'s'
   214  000371  74                 	db	116	;'t'
   215  000372  0A                 	db	10
   216  000373  00                 	db	0
   217  000374                     STR_2:
   218  000374  46                 	db	70	;'F'
   219  000375  61                 	db	97	;'a'
   220  000376  69                 	db	105	;'i'
   221  000377  6C                 	db	108	;'l'
   222  000378  65                 	db	101	;'e'
   223  000379  64                 	db	100	;'d'
   224  00037A  20                 	db	32
   225  00037B  6F                 	db	111	;'o'
   226  00037C  6E                 	db	110	;'n'
   227  00037D  20                 	db	32
   228  00037E  4E                 	db	78	;'N'
   229  00037F  55                 	db	85	;'U'
   230  000380  4C                 	db	76	;'L'
   231  000381  4C                 	db	76	;'L'
   232  000382  20                 	db	32
   233  000383  70                 	db	112	;'p'
   234  000384  6F                 	db	111	;'o'
   235  000385  69                 	db	105	;'i'
   236  000386  6E                 	db	110	;'n'
   237  000387  74                 	db	116	;'t'
   238  000388  65                 	db	101	;'e'
   239  000389  72                 	db	114	;'r'
   240  00038A  0A                 	db	10
   241  00038B  00                 	db	0
   242  00038C                     STR_3:
   243  00038C  46                 	db	70	;'F'
   244  00038D  61                 	db	97	;'a'
   245  00038E  69                 	db	105	;'i'
   246  00038F  6C                 	db	108	;'l'
   247  000390  65                 	db	101	;'e'
   248  000391  64                 	db	100	;'d'
   249  000392  20                 	db	32
   250  000393  49                 	db	73	;'I'
   251  000394  6E                 	db	110	;'n'
   252  000395  69                 	db	105	;'i'
   253  000396  74                 	db	116	;'t'
   254  000397  69                 	db	105	;'i'
   255  000398  61                 	db	97	;'a'
   256  000399  6C                 	db	108	;'l'
   257  00039A  69                 	db	105	;'i'
   258  00039B  7A                 	db	122	;'z'
   259  00039C  61                 	db	97	;'a'
   260  00039D  74                 	db	116	;'t'
   261  00039E  69                 	db	105	;'i'
   262  00039F  6F                 	db	111	;'o'
   263  0003A0  6E                 	db	110	;'n'
   264  0003A1  0A                 	db	10
   265  0003A2  00                 	db	0
   266  0003A3                     STR_4:
   267  0003A3  4F                 	db	79	;'O'
   268  0003A4  74                 	db	116	;'t'
   269  0003A5  68                 	db	104	;'h'
   270  0003A6  65                 	db	101	;'e'
   271  0003A7  72                 	db	114	;'r'
   272  0003A8  20                 	db	32
   273  0003A9  46                 	db	70	;'F'
   274  0003AA  61                 	db	97	;'a'
   275  0003AB  69                 	db	105	;'i'
   276  0003AC  6C                 	db	108	;'l'
   277  0003AD  75                 	db	117	;'u'
   278  0003AE  72                 	db	114	;'r'
   279  0003AF  65                 	db	101	;'e'
   280  0003B0  0A                 	db	10
   281  0003B1  00                 	db	0
   282                           
   283                           ; #config settings
   284  0003B2  00                 	db	0	; dummy byte at the end
   285  0000                     
   286                           	psect	cinit
   287  000C9E                     __pcinit:
   288                           	opt stack 0
   289  000C9E                     start_initialization:
   290                           	opt stack 0
   291  000C9E                     __initialization:
   292                           	opt stack 0
   293                           
   294                           ; Clear objects allocated to BANK0 (44 bytes)
   295  000C9E  EE00  F060         	lfsr	0,__pbssBANK0
   296  000CA2  0E2C               	movlw	44
   297  000CA4                     clear_0:
   298  000CA4  6AEE               	clrf	postinc0,c
   299  000CA6  06E8               	decf	wreg,f,c
   300  000CA8  E1FD               	bnz	clear_0
   301                           
   302                           ; Clear objects allocated to COMRAM (23 bytes)
   303  000CAA  EE00  F033         	lfsr	0,__pbssCOMRAM
   304  000CAE  0E17               	movlw	23
   305  000CB0                     clear_1:
   306  000CB0  6AEE               	clrf	postinc0,c
   307  000CB2  06E8               	decf	wreg,f,c
   308  000CB4  E1FD               	bnz	clear_1
   309  000CB6                     end_of_initialization:
   310                           	opt stack 0
   311  000CB6                     __end_of__initialization:
   312                           	opt stack 0
   313  000CB6  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   314  000CB8  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   315  000CBA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   316  000CBC  6EF8               	movwf	tblptru,c
   317  000CBE  0100               	movlb	0
   318  000CC0  EF70  F004         	goto	_main	;jump to C main() function
   319                           tblptru	equ	0xFF8
   320                           postinc0	equ	0xFEE
   321                           wreg	equ	0xFE8
   322                           
   323                           	psect	bssCOMRAM
   324  000033                     __pbssCOMRAM:
   325                           	opt stack 0
   326  000033                     ES_Timer_Tick_Resp@NewEvent:
   327                           	opt stack 0
   328  000033                     	ds	3
   329  000036                     ES_Timer_Tick_Resp@NeedsProcessing:
   330                           	opt stack 0
   331  000036                     	ds	2
   332  000038                     ISR@LastTime:
   333                           	opt stack 0
   334  000038                     	ds	2
   335  00003A                     ISR@NextTime:
   336                           	opt stack 0
   337  00003A                     	ds	2
   338  00003C                     _Ready:
   339                           	opt stack 0
   340  00003C                     	ds	2
   341  00003E                     _SysTickCounter:
   342                           	opt stack 0
   343  00003E                     	ds	2
   344  000040                     _TMR_ActiveFlags:
   345                           	opt stack 0
   346  000040                     	ds	2
   347  000042                     __PRIMASK_temp:
   348                           	opt stack 0
   349  000042                     	ds	2
   350  000044                     ES_Timer_Tick_Resp@NextTimer2Process:
   351                           	opt stack 0
   352  000044                     	ds	1
   353  000045                     _MyPriority:
   354                           	opt stack 0
   355  000045                     	ds	1
   356  000046                     _TickCount:
   357                           	opt stack 0
   358  000046                     	ds	1
   359  000047                     ES_Run@ThisEvent:
   360                           	opt stack 0
   361  000047                     	ds	3
   362                           tblptru	equ	0xFF8
   363                           postinc0	equ	0xFEE
   364                           wreg	equ	0xFE8
   365                           
   366                           	psect	bssBANK0
   367  000060                     __pbssBANK0:
   368                           	opt stack 0
   369  000060                     _TMR_TimerArray:
   370                           	opt stack 0
   371  000060                     	ds	32
   372  000080                     _Queue0:
   373                           	opt stack 0
   374  000080                     	ds	12
   375                           tblptru	equ	0xFF8
   376                           postinc0	equ	0xFEE
   377                           wreg	equ	0xFE8
   378                           
   379                           	psect	cstackBANK0
   380  00008C                     __pcstackBANK0:
   381                           	opt stack 0
   382  00008C                     InitCan_XmitService@ThisEvent:
   383                           	opt stack 0
   384  00008C                     PostCan_XmitService@ThisEvent:
   385                           	opt stack 0
   386                           
   387                           ; 3 bytes @ 0x0
   388  00008C                     	ds	3
   389  00008F                     ??_ES_Timer_Tick_Resp:
   390  00008F                     InitCan_XmitService@Priority:
   391                           	opt stack 0
   392                           
   393                           ; 1 bytes @ 0x3
   394  00008F                     	ds	1
   395  000090                     ES_Initialize@NewRate:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x4
   399  000090                     	ds	2
   400  000092                     ES_Initialize@i:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x6
   404  000092                     	ds	1
   405  000093                     ??_ES_Run:
   406                           
   407                           ; 1 bytes @ 0x7
   408  000093                     	ds	4
   409  000097                     ES_Run@HighestPrior:
   410                           	opt stack 0
   411                           
   412                           ; 1 bytes @ 0xB
   413  000097                     	ds	1
   414  000098                     main@ErrorType:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0xC
   418  000098                     	ds	1
   419                           tblptru	equ	0xFF8
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           
   423                           	psect	cstackCOMRAM
   424  000001                     __pcstackCOMRAM:
   425                           	opt stack 0
   426  000001                     ES_Timer_InitTimer@NewTime:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x0
   430  000001                     	ds	2
   431  000003                     ??_ES_Timer_InitTimer:
   432                           
   433                           ; 1 bytes @ 0x2
   434  000003                     	ds	2
   435  000005                     ES_Timer_InitTimer@Num:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x4
   439  000005                     	ds	1
   440  000006                     ??_ISR:
   441                           
   442                           ; 1 bytes @ 0x5
   443  000006                     	ds	16
   444  000016                     ?_printf:
   445                           	opt stack 0
   446  000016                     ?___awmod:
   447                           	opt stack 0
   448  000016                     ES_CheckUserEvents@i:
   449                           	opt stack 0
   450  000016                     XmitData@DataByte:
   451                           	opt stack 0
   452  000016                     ___lbmod@divisor:
   453                           	opt stack 0
   454  000016                     ES_GetMSBitSet@Val2Check:
   455                           	opt stack 0
   456  000016                     __HW_Timer_Init@Rate:
   457                           	opt stack 0
   458  000016                     ES_InitQueue@pBlock:
   459                           	opt stack 0
   460  000016                     printf@f:
   461                           	opt stack 0
   462  000016                     ___awmod@dividend:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x15
   466  000016                     	ds	1
   467  000017                     ?_RunCan_XmitService:
   468                           	opt stack 0
   469  000017                     ___lbmod@dividend:
   470                           	opt stack 0
   471  000017                     RunCan_XmitService@ThisEvent:
   472                           	opt stack 0
   473                           
   474                           ; 3 bytes @ 0x16
   475  000017                     	ds	1
   476  000018                     ??_ES_GetMSBitSet:
   477  000018                     ES_InitQueue@BlockSize:
   478                           	opt stack 0
   479  000018                     ___lbmod@counter:
   480                           	opt stack 0
   481  000018                     ES_Timer_Init@Rate:
   482                           	opt stack 0
   483  000018                     printf@ap:
   484                           	opt stack 0
   485  000018                     ___awmod@divisor:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x17
   489  000018                     	ds	1
   490  000019                     ___lbmod@rem:
   491                           	opt stack 0
   492  000019                     ES_InitQueue@pThisQueue:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x18
   496  000019                     	ds	1
   497  00001A                     printf@c:
   498                           	opt stack 0
   499  00001A                     ___awmod@counter:
   500                           	opt stack 0
   501  00001A                     RunCan_XmitService@ReturnEvent:
   502                           	opt stack 0
   503                           
   504                           ; 3 bytes @ 0x19
   505  00001A                     	ds	1
   506  00001B                     ___awmod@sign:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x1A
   510  00001B                     	ds	1
   511  00001C                     ?___wmul:
   512                           	opt stack 0
   513  00001C                     ___wmul@multiplier:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x1B
   517  00001C                     	ds	1
   518  00001D                     ES_GetMSBitSet@ReturnVal:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x1C
   522  00001D                     	ds	1
   523  00001E                     ES_GetMSBitSet@Nybble2Test:
   524                           	opt stack 0
   525  00001E                     ___wmul@multiplicand:
   526                           	opt stack 0
   527                           
   528                           ; 2 bytes @ 0x1D
   529  00001E                     	ds	1
   530  00001F                     ES_GetMSBitSet@LoopCntr:
   531                           	opt stack 0
   532                           
   533                           ; 1 bytes @ 0x1E
   534  00001F                     	ds	1
   535  000020                     ___wmul@product:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x1F
   539  000020                     	ds	2
   540  000022                     ES_EnQueueFIFO@pBlock:
   541                           	opt stack 0
   542  000022                     ES_DeQueue@pBlock:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x21
   546  000022                     	ds	2
   547  000024                     ES_DeQueue@pReturnEvent:
   548                           	opt stack 0
   549  000024                     ES_EnQueueFIFO@Event2Add:
   550                           	opt stack 0
   551                           
   552                           ; 3 bytes @ 0x23
   553  000024                     	ds	2
   554  000026                     ??_ES_DeQueue:
   555                           
   556                           ; 1 bytes @ 0x25
   557  000026                     	ds	1
   558  000027                     ??_ES_EnQueueFIFO:
   559                           
   560                           ; 1 bytes @ 0x26
   561  000027                     	ds	1
   562  000028                     ES_DeQueue@SaveCrit:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x27
   566  000028                     	ds	1
   567  000029                     ES_DeQueue@NumLeft:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x28
   571  000029                     	ds	1
   572  00002A                     ES_EnQueueFIFO@SaveCrit:
   573                           	opt stack 0
   574  00002A                     ES_DeQueue@pThisQueue:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x29
   578  00002A                     	ds	1
   579  00002B                     ES_EnQueueFIFO@pThisQueue:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x2A
   583  00002B                     	ds	2
   584  00002D                     ES_PostToService@TheEvent:
   585                           	opt stack 0
   586                           
   587                           ; 3 bytes @ 0x2C
   588  00002D                     	ds	3
   589  000030                     ??_ES_PostToService:
   590                           
   591                           ; 1 bytes @ 0x2F
   592  000030                     	ds	2
   593  000032                     ES_PostToService@WhichService:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x31
   597  000032                     	ds	1
   598  000033                     tblptru	equ	0xFF8
   599                           postinc0	equ	0xFEE
   600                           wreg	equ	0xFE8
   601                           
   602                           ; 1 bytes @ 0x32
   603 ;;
   604 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   605 ;;
   606 ;; *************** function _main *****************
   607 ;; Defined at:
   608 ;;		line 25 in file "main.c"
   609 ;; Parameters:    Size  Location     Type
   610 ;;		None
   611 ;; Auto vars:     Size  Location     Type
   612 ;;  ErrorType       1   12[BANK0 ] enum E15642
   613 ;; Return value:  Size  Location     Type
   614 ;;                  2  269[None  ] int 
   615 ;; Registers used:
   616 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   622 ;;      Params:         0       0       0       0
   623 ;;      Locals:         0       1       0       0
   624 ;;      Temps:          0       0       0       0
   625 ;;      Totals:         0       1       0       0
   626 ;;Total ram usage:        1 bytes
   627 ;; Hardware stack levels required when called:   10
   628 ;; This function calls:
   629 ;;		_ES_Initialize
   630 ;;		_ES_Run
   631 ;;		_printf
   632 ;; This function is called by:
   633 ;;		Startup code after reset
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637                           	psect	text0
   638  0008E0                     __ptext0:
   639                           	opt stack 0
   640  0008E0                     _main:
   641                           	opt stack 21
   642                           
   643                           ;main.c: 28: IRCF0 = 1;
   644                           
   645                           ;incstack = 0
   646  0008E0  88D3               	bsf	4051,4,c	;volatile
   647                           
   648                           ;main.c: 29: IRCF1 = 1;
   649  0008E2  8AD3               	bsf	4051,5,c	;volatile
   650                           
   651                           ;main.c: 30: IRCF2 = 1;
   652  0008E4  8CD3               	bsf	4051,6,c	;volatile
   653                           
   654                           ;main.c: 31: SCS1 = 1;
   655  0008E6  82D3               	bsf	4051,1,c	;volatile
   656                           
   657                           ;main.c: 39: ES_Return_t ErrorType;
   658                           ;main.c: 55: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
   659  0008E8  0E9C               	movlw	156
   660  0008EA  0100               	movlb	0	; () banked
   661  0008EC  6F91               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
   662  0008EE  0E3F               	movlw	63
   663  0008F0  6F90               	movwf	ES_Initialize@NewRate& (0+255),b
   664  0008F2  ECD5  F002         	call	_ES_Initialize	;wreg free
   665  0008F6  0100               	movlb	0	; () banked
   666  0008F8  6F98               	movwf	main@ErrorType& (0+255),b
   667                           
   668                           ; BSR set to: 0
   669                           ;main.c: 56: if ( ErrorType == Success ) {
   670  0008FA  0100               	movlb	0	; () banked
   671  0008FC  5198               	movf	main@ErrorType& (0+255),w,b
   672  0008FE  0100               	movlb	0	; () banked
   673  000900  A4D8               	btfss	status,2,c
   674  000902  D021               	goto	l2444
   675                           
   676                           ; BSR set to: 0
   677                           ;main.c: 58: ErrorType = ES_Run();
   678  000904  EC4B  F003         	call	_ES_Run	;wreg free
   679  000908  0100               	movlb	0	; () banked
   680  00090A  6F98               	movwf	main@ErrorType& (0+255),b
   681                           
   682                           ; BSR set to: 0
   683                           ;main.c: 60: }
   684                           ;main.c: 62: switch (ErrorType){
   685  00090C  D01C               	goto	l2444
   686  00090E                     l2434:
   687                           
   688                           ; BSR set to: 0
   689                           ;main.c: 64: printf("Failed on attempt to Post\n");
   690  00090E  0E59               	movlw	low STR_1
   691  000910  6E16               	movwf	printf@f,c
   692  000912  0E03               	movlw	high STR_1
   693  000914  6E17               	movwf	printf@f+1,c
   694  000916  EC25  F006         	call	_printf	;wreg free
   695                           
   696                           ;main.c: 65: break;
   697  00091A  D021               	goto	l277
   698  00091C                     l2436:
   699                           
   700                           ;main.c: 67: printf("Failed on NULL pointer\n");
   701  00091C  0E74               	movlw	low STR_2
   702  00091E  6E16               	movwf	printf@f,c
   703  000920  0E03               	movlw	high STR_2
   704  000922  6E17               	movwf	printf@f+1,c
   705  000924  EC25  F006         	call	_printf	;wreg free
   706                           
   707                           ;main.c: 68: break;
   708  000928  D01A               	goto	l277
   709  00092A                     l2438:
   710                           
   711                           ;main.c: 70: printf("Failed Initialization\n");
   712  00092A  0E8C               	movlw	low STR_3
   713  00092C  6E16               	movwf	printf@f,c
   714  00092E  0E03               	movlw	high STR_3
   715  000930  6E17               	movwf	printf@f+1,c
   716  000932  EC25  F006         	call	_printf	;wreg free
   717                           
   718                           ;main.c: 71: break;
   719  000936  D013               	goto	l277
   720  000938                     l2440:
   721                           
   722                           ;main.c: 73: printf("Other Failure\n");
   723  000938  0EA3               	movlw	low STR_4
   724  00093A  6E16               	movwf	printf@f,c
   725  00093C  0E03               	movlw	high STR_4
   726  00093E  6E17               	movwf	printf@f+1,c
   727  000940  EC25  F006         	call	_printf	;wreg free
   728                           
   729                           ;main.c: 75: }
   730                           
   731                           ;main.c: 74: break;
   732  000944  D00C               	goto	l277
   733  000946                     l2444:
   734  000946  0100               	movlb	0	; () banked
   735  000948  5198               	movf	main@ErrorType& (0+255),w,b
   736                           
   737                           ; Switch size 1, requested type "space"
   738                           ; Number of cases is 3, Range of values is 1 to 5
   739                           ; switch strategies available:
   740                           ; Name         Instructions Cycles
   741                           ; simple_byte           10     6 (average)
   742                           ;	Chosen strategy is simple_byte
   743  00094A  0A01               	xorlw	1	; case 1
   744  00094C  B4D8               	btfsc	status,2,c
   745  00094E  D7DF               	goto	l2434
   746  000950  0A02               	xorlw	2	; case 3
   747  000952  B4D8               	btfsc	status,2,c
   748  000954  D7E3               	goto	l2436
   749  000956  0A06               	xorlw	6	; case 5
   750  000958  B4D8               	btfsc	status,2,c
   751  00095A  D7E7               	goto	l2438
   752  00095C  D7ED               	goto	l2440
   753  00095E                     l277:
   754                           
   755                           ;main.c: 77: ;
   756  00095E  D7FF               	goto	l277
   757  000960                     __end_of_main:
   758                           	opt stack 0
   759                           tblptru	equ	0xFF8
   760                           postinc0	equ	0xFEE
   761                           wreg	equ	0xFE8
   762                           status	equ	0xFD8
   763                           
   764 ;; *************** function _printf *****************
   765 ;; Defined at:
   766 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
   767 ;; Parameters:    Size  Location     Type
   768 ;;  f               2   21[COMRAM] PTR const unsigned char 
   769 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
   770 ;; Auto vars:     Size  Location     Type
   771 ;;  tmpval          4    0        struct .
   772 ;;  cp              3    0        PTR const unsigned char 
   773 ;;  ap              2   23[COMRAM] PTR void [1]
   774 ;;		 -> ?_printf(2), 
   775 ;;  len             2    0        unsigned int 
   776 ;;  val             2    0        unsigned int 
   777 ;;  c               1   25[COMRAM] char 
   778 ;;  flag            1    0        unsigned char 
   779 ;;  prec            1    0        char 
   780 ;; Return value:  Size  Location     Type
   781 ;;                  2   21[COMRAM] int 
   782 ;; Registers used:
   783 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   784 ;; Tracked objects:
   785 ;;		On entry : 0/0
   786 ;;		On exit  : 0/0
   787 ;;		Unchanged: 0/0
   788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   789 ;;      Params:         2       0       0       0
   790 ;;      Locals:         3       0       0       0
   791 ;;      Temps:          0       0       0       0
   792 ;;      Totals:         5       0       0       0
   793 ;;Total ram usage:        5 bytes
   794 ;; Hardware stack levels used:    1
   795 ;; Hardware stack levels required when called:    4
   796 ;; This function calls:
   797 ;;		_putch
   798 ;; This function is called by:
   799 ;;		_main
   800 ;; This function uses a non-reentrant model
   801 ;;
   802                           
   803                           	psect	text1
   804  000C4A                     __ptext1:
   805                           	opt stack 0
   806  000C4A                     _printf:
   807                           	opt stack 26
   808                           
   809                           ;doprnt.c: 466: va_list ap;
   810                           ;doprnt.c: 499: signed char c;
   811                           ;doprnt.c: 506: signed char prec;
   812                           ;doprnt.c: 508: unsigned char flag;
   813                           ;doprnt.c: 523: union {
   814                           ;doprnt.c: 524: unsigned long vd;
   815                           ;doprnt.c: 525: double integ;
   816                           ;doprnt.c: 526: } tmpval;
   817                           ;doprnt.c: 528: unsigned int val;
   818                           ;doprnt.c: 529: unsigned len;
   819                           ;doprnt.c: 530: const char * cp;
   820                           ;doprnt.c: 533: *ap = __va_start();
   821                           
   822                           ;incstack = 0
   823  000C4A  0E18               	movlw	low (?_printf+2)
   824  000C4C  6E18               	movwf	printf@ap,c
   825  000C4E  0E00               	movlw	high (?_printf+2)
   826  000C50  6E19               	movwf	printf@ap+1,c
   827                           
   828                           ;doprnt.c: 536: while(c = *f++) {
   829  000C52  D003               	goto	l2356
   830  000C54                     l2354:
   831                           
   832                           ;doprnt.c: 540: {
   833                           ;doprnt.c: 541: (putch(c) );
   834  000C54  501A               	movf	printf@c,w,c
   835  000C56  ECD9  F006         	call	_putch
   836  000C5A                     l2356:
   837  000C5A  C016  FFF6         	movff	printf@f,tblptrl
   838  000C5E  C017  FFF7         	movff	printf@f+1,tblptrh
   839  000C62  4A16               	infsnz	printf@f,f,c
   840  000C64  2A17               	incf	printf@f+1,f,c
   841  000C66                     	if	0	;tblptru may be non-zero
   842  000C66                     	endif
   843  000C66                     	if	0	;tblptru may be non-zero
   844  000C66                     	endif
   845  000C66  0008               	tblrd		*
   846  000C68  CFF5 F01A          	movff	tablat,printf@c
   847  000C6C  501A               	movf	printf@c,w,c
   848  000C6E  B4D8               	btfsc	status,2,c
   849  000C70  0012               	return	
   850  000C72  D7F0               	goto	l2354
   851  000C74                     __end_of_printf:
   852                           	opt stack 0
   853                           tblptru	equ	0xFF8
   854                           tblptrh	equ	0xFF7
   855                           tblptrl	equ	0xFF6
   856                           tablat	equ	0xFF5
   857                           postinc0	equ	0xFEE
   858                           wreg	equ	0xFE8
   859                           status	equ	0xFD8
   860                           
   861 ;; *************** function _putch *****************
   862 ;; Defined at:
   863 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;  c               1    wreg     unsigned char 
   866 ;; Auto vars:     Size  Location     Type
   867 ;;  c               1    0[COMRAM] unsigned char 
   868 ;; Return value:  Size  Location     Type
   869 ;;                  1    wreg      void 
   870 ;; Registers used:
   871 ;;		wreg
   872 ;; Tracked objects:
   873 ;;		On entry : 0/0
   874 ;;		On exit  : 0/0
   875 ;;		Unchanged: 0/0
   876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   877 ;;      Params:         0       0       0       0
   878 ;;      Locals:         0       0       0       0
   879 ;;      Temps:          0       0       0       0
   880 ;;      Totals:         0       0       0       0
   881 ;;Total ram usage:        0 bytes
   882 ;; Hardware stack levels used:    1
   883 ;; Hardware stack levels required when called:    3
   884 ;; This function calls:
   885 ;;		Nothing
   886 ;; This function is called by:
   887 ;;		_printf
   888 ;; This function uses a non-reentrant model
   889 ;;
   890                           
   891                           	psect	text2
   892  000DB2                     __ptext2:
   893                           	opt stack 0
   894  000DB2                     _putch:
   895                           	opt stack 26
   896                           
   897                           ;incstack = 0
   898  000DB2  0012               	return		;funcret
   899  000DB4                     __end_of_putch:
   900                           	opt stack 0
   901                           tblptru	equ	0xFF8
   902                           tblptrh	equ	0xFF7
   903                           tblptrl	equ	0xFF6
   904                           tablat	equ	0xFF5
   905                           postinc0	equ	0xFEE
   906                           wreg	equ	0xFE8
   907                           status	equ	0xFD8
   908                           
   909 ;; *************** function _ES_Run *****************
   910 ;; Defined at:
   911 ;;		line 277 in file "ES_Framework.c"
   912 ;; Parameters:    Size  Location     Type
   913 ;;		None
   914 ;; Auto vars:     Size  Location     Type
   915 ;;  HighestPrior    1   11[BANK0 ] unsigned char 
   916 ;; Return value:  Size  Location     Type
   917 ;;                  1    wreg      enum E15490
   918 ;; Registers used:
   919 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   920 ;; Tracked objects:
   921 ;;		On entry : 0/0
   922 ;;		On exit  : 0/0
   923 ;;		Unchanged: 0/0
   924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   925 ;;      Params:         0       0       0       0
   926 ;;      Locals:         0       1       0       0
   927 ;;      Temps:          0       4       0       0
   928 ;;      Totals:         0       5       0       0
   929 ;;Total ram usage:        5 bytes
   930 ;; Hardware stack levels used:    1
   931 ;; Hardware stack levels required when called:    9
   932 ;; This function calls:
   933 ;;		_ES_CheckUserEvents
   934 ;;		_ES_DeQueue
   935 ;;		_ES_GetMSBitSet
   936 ;;		_RunCan_XmitService
   937 ;;		__HW_Process_Pending_Ints
   938 ;; This function is called by:
   939 ;;		_main
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           	psect	text3
   944  000696                     __ptext3:
   945                           	opt stack 0
   946  000696                     _ES_Run:
   947                           	opt stack 21
   948                           
   949                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
   950                           
   951                           ;incstack = 0
   952                           ;ES_Framework.c: 279: uint8_t HighestPrior;
   953                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
   954                           ;ES_Framework.c: 282: while(1){
   955  000696  D067               	goto	l2342
   956  000698                     l2330:
   957                           
   958                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
   959  000698  C03C  F016         	movff	_Ready,ES_GetMSBitSet@Val2Check
   960  00069C  C03D  F017         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
   961  0006A0  ECB0  F004         	call	_ES_GetMSBitSet	;wreg free
   962  0006A4  0100               	movlb	0	; () banked
   963  0006A6  6F97               	movwf	ES_Run@HighestPrior& (0+255),b
   964                           
   965                           ; BSR set to: 0
   966                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
   967  0006A8  0100               	movlb	0	; () banked
   968  0006AA  5197               	movf	ES_Run@HighestPrior& (0+255),w,b
   969  0006AC  0D03               	mullw	3
   970  0006AE  0E54               	movlw	low _EventQueues
   971  0006B0  24F3               	addwf	prodl,w,c
   972  0006B2  6EF6               	movwf	tblptrl,c
   973  0006B4  0E03               	movlw	high _EventQueues
   974  0006B6  20F4               	addwfc	prodh,w,c
   975  0006B8  6EF7               	movwf	tblptrh,c
   976  0006BA                     	if	0	;There are less than 3 active tblptr bytes
   977  0006BA                     	endif
   978  0006BA  0009               	tblrd		*+
   979  0006BC  CFF5 F022          	movff	tablat,ES_DeQueue@pBlock
   980  0006C0  000A               	tblrd		*-
   981  0006C2  CFF5 F023          	movff	tablat,ES_DeQueue@pBlock+1
   982  0006C6  0E47               	movlw	low ES_Run@ThisEvent
   983  0006C8  6E24               	movwf	ES_DeQueue@pReturnEvent,c
   984  0006CA  0E00               	movlw	high ES_Run@ThisEvent
   985  0006CC  6E25               	movwf	ES_DeQueue@pReturnEvent+1,c
   986  0006CE  ECDA  F001         	call	_ES_DeQueue	;wreg free
   987  0006D2  0900               	iorlw	0
   988  0006D4  A4D8               	btfss	status,2,c
   989  0006D6  D01D               	goto	l2336
   990                           
   991                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
   992  0006D8  0100               	movlb	0	; () banked
   993  0006DA  5197               	movf	ES_Run@HighestPrior& (0+255),w,b
   994  0006DC  0D02               	mullw	2
   995  0006DE  0E01               	movlw	low _BitNum2SetMask
   996  0006E0  24F3               	addwf	prodl,w,c
   997  0006E2  6EF6               	movwf	tblptrl,c
   998  0006E4  0E03               	movlw	high _BitNum2SetMask
   999  0006E6  20F4               	addwfc	prodh,w,c
  1000  0006E8  6EF7               	movwf	tblptrh,c
  1001  0006EA                     	if	0	;There are less than 3 active tblptr bytes
  1002  0006EA                     	endif
  1003  0006EA  0009               	tblrd		*+
  1004  0006EC  CFF5 F093          	movff	tablat,??_ES_Run
  1005  0006F0  0009               	tblrd		*+
  1006  0006F2  CFF5 F094          	movff	tablat,??_ES_Run+1
  1007  0006F6  0100               	movlb	0	; () banked
  1008  0006F8  1D93               	comf	??_ES_Run& (0+255),w,b
  1009  0006FA  0100               	movlb	0	; () banked
  1010  0006FC  6F95               	movwf	(??_ES_Run+2)& (0+255),b
  1011  0006FE  0100               	movlb	0	; () banked
  1012  000700  1D94               	comf	(??_ES_Run+1)& (0+255),w,b
  1013  000702  0100               	movlb	0	; () banked
  1014  000704  6F96               	movwf	(??_ES_Run+3)& (0+255),b
  1015  000706  0100               	movlb	0	; () banked
  1016  000708  5195               	movf	(??_ES_Run+2)& (0+255),w,b
  1017  00070A  163C               	andwf	_Ready,f,c
  1018  00070C  0100               	movlb	0	; () banked
  1019  00070E  5196               	movf	(??_ES_Run+3)& (0+255),w,b
  1020  000710  163D               	andwf	_Ready+1,f,c
  1021  000712                     l2336:
  1022                           
  1023                           ;ES_Framework.c: 291: }
  1024                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1025  000712  C047  F017         	movff	ES_Run@ThisEvent,RunCan_XmitService@ThisEvent
  1026  000716  C048  F018         	movff	ES_Run@ThisEvent+1,RunCan_XmitService@ThisEvent+1
  1027  00071A  C049  F019         	movff	ES_Run@ThisEvent+2,RunCan_XmitService@ThisEvent+2
  1028  00071E  0100               	movlb	0	; () banked
  1029  000720  5197               	movf	ES_Run@HighestPrior& (0+255),w,b
  1030  000722  0D04               	mullw	4
  1031  000724  0E02               	movlw	2
  1032  000726  26F3               	addwf	prodl,f,c
  1033  000728  0E00               	movlw	0
  1034  00072A  22F4               	addwfc	prodh,f,c
  1035  00072C  0E50               	movlw	low _ServDescList
  1036  00072E  24F3               	addwf	prodl,w,c
  1037  000730  6EF6               	movwf	tblptrl,c
  1038  000732  0E03               	movlw	high _ServDescList
  1039  000734  20F4               	addwfc	prodh,w,c
  1040  000736  6EF7               	movwf	tblptrh,c
  1041  000738                     	if	0	;There are less than 3 active tblptr bytes
  1042  000738                     	endif
  1043  000738  D801               	call	u1678
  1044  00073A  D00C               	goto	u1679
  1045  00073C                     u1678:
  1046  00073C  0005               	push	
  1047  00073E  6EFA               	movwf	pclath,c
  1048  000740  0009               	tblrd		*+
  1049  000742  50F5               	movf	tablat,w,c
  1050  000744  6EFD               	movwf	tosl,c
  1051  000746  0009               	tblrd		*+
  1052  000748  50F5               	movf	tablat,w,c
  1053  00074A  6EFE               	movwf	tosh,c
  1054  00074C  50F8               	movf	tblptru,w,c
  1055  00074E  6EFF               	movwf	tosu,c
  1056  000750  50FA               	movf	pclath,w,c
  1057  000752  0012               	return		;indir
  1058  000754                     u1679:
  1059  000754  0E17               	movlw	low ?_RunCan_XmitService
  1060  000756  6ED9               	movwf	fsr2l,c
  1061  000758  0E00               	movlw	high ?_RunCan_XmitService
  1062  00075A  6EDA               	movwf	fsr2h,c
  1063  00075C  50DF               	movf	indf2,w,c
  1064  00075E  B4D8               	btfsc	status,2,c
  1065  000760  D002               	goto	l2342
  1066                           
  1067                           ;ES_Framework.c: 293: return FailedRun;
  1068  000762  0E02               	movlw	2
  1069  000764  0012               	return	
  1070  000766                     l2342:
  1071  000766  ECBB  F006         	call	__HW_Process_Pending_Ints	;wreg free
  1072  00076A  0900               	iorlw	0
  1073  00076C  B4D8               	btfsc	status,2,c
  1074  00076E  D004               	goto	l2346
  1075  000770  503C               	movf	_Ready,w,c
  1076  000772  103D               	iorwf	_Ready+1,w,c
  1077  000774  A4D8               	btfss	status,2,c
  1078  000776  D790               	goto	l2330
  1079  000778                     l2346:
  1080                           
  1081                           ;ES_Framework.c: 294: }
  1082                           ;ES_Framework.c: 295: }
  1083                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1084  000778  ECB5  F005         	call	_ES_CheckUserEvents	;wreg free
  1085  00077C  D7F4               	goto	l2342
  1086  00077E                     __end_of_ES_Run:
  1087                           	opt stack 0
  1088                           tosu	equ	0xFFF
  1089                           tosh	equ	0xFFE
  1090                           tosl	equ	0xFFD
  1091                           pclath	equ	0xFFA
  1092                           tblptru	equ	0xFF8
  1093                           tblptrh	equ	0xFF7
  1094                           tblptrl	equ	0xFF6
  1095                           tablat	equ	0xFF5
  1096                           prodh	equ	0xFF4
  1097                           prodl	equ	0xFF3
  1098                           postinc0	equ	0xFEE
  1099                           wreg	equ	0xFE8
  1100                           indf2	equ	0xFDF
  1101                           fsr2h	equ	0xFDA
  1102                           fsr2l	equ	0xFD9
  1103                           status	equ	0xFD8
  1104                           
  1105 ;; *************** function __HW_Process_Pending_Ints *****************
  1106 ;; Defined at:
  1107 ;;		line 217 in file "ES_Port.c"
  1108 ;; Parameters:    Size  Location     Type
  1109 ;;		None
  1110 ;; Auto vars:     Size  Location     Type
  1111 ;;		None
  1112 ;; Return value:  Size  Location     Type
  1113 ;;                  1    wreg      unsigned char 
  1114 ;; Registers used:
  1115 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1116 ;; Tracked objects:
  1117 ;;		On entry : 0/0
  1118 ;;		On exit  : 0/0
  1119 ;;		Unchanged: 0/0
  1120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1121 ;;      Params:         0       0       0       0
  1122 ;;      Locals:         0       0       0       0
  1123 ;;      Temps:          0       0       0       0
  1124 ;;      Totals:         0       0       0       0
  1125 ;;Total ram usage:        0 bytes
  1126 ;; Hardware stack levels used:    1
  1127 ;; Hardware stack levels required when called:    8
  1128 ;; This function calls:
  1129 ;;		_ES_Timer_Tick_Resp
  1130 ;; This function is called by:
  1131 ;;		_ES_Run
  1132 ;; This function uses a non-reentrant model
  1133 ;;
  1134                           
  1135                           	psect	text4
  1136  000D76                     __ptext4:
  1137                           	opt stack 0
  1138  000D76                     __HW_Process_Pending_Ints:
  1139                           	opt stack 21
  1140                           
  1141                           ;ES_Port.c: 219: while (TickCount > 0)
  1142                           
  1143                           ;incstack = 0
  1144  000D76  D003               	goto	l2260
  1145  000D78                     l2256:
  1146                           
  1147                           ;ES_Port.c: 220: {
  1148                           ;ES_Port.c: 222: ES_Timer_Tick_Resp();
  1149  000D78  EC59  F002         	call	_ES_Timer_Tick_Resp	;wreg free
  1150                           
  1151                           ;ES_Port.c: 223: TickCount--;
  1152  000D7C  0646               	decf	_TickCount,f,c	;volatile
  1153  000D7E                     l2260:
  1154  000D7E  5046               	movf	_TickCount,w,c	;volatile
  1155  000D80  A4D8               	btfss	status,2,c
  1156  000D82  D7FA               	goto	l2256
  1157                           
  1158                           ;ES_Port.c: 224: }
  1159                           ;ES_Port.c: 226: return 1;
  1160  000D84  0E01               	movlw	1
  1161  000D86  0012               	return	
  1162  000D88                     __end_of__HW_Process_Pending_Ints:
  1163                           	opt stack 0
  1164                           tosu	equ	0xFFF
  1165                           tosh	equ	0xFFE
  1166                           tosl	equ	0xFFD
  1167                           pclath	equ	0xFFA
  1168                           tblptru	equ	0xFF8
  1169                           tblptrh	equ	0xFF7
  1170                           tblptrl	equ	0xFF6
  1171                           tablat	equ	0xFF5
  1172                           prodh	equ	0xFF4
  1173                           prodl	equ	0xFF3
  1174                           postinc0	equ	0xFEE
  1175                           wreg	equ	0xFE8
  1176                           indf2	equ	0xFDF
  1177                           fsr2h	equ	0xFDA
  1178                           fsr2l	equ	0xFD9
  1179                           status	equ	0xFD8
  1180                           
  1181 ;; *************** function _ES_Timer_Tick_Resp *****************
  1182 ;; Defined at:
  1183 ;;		line 284 in file "ES_Timers.c"
  1184 ;; Parameters:    Size  Location     Type
  1185 ;;		None
  1186 ;; Auto vars:     Size  Location     Type
  1187 ;;		None
  1188 ;; Return value:  Size  Location     Type
  1189 ;;                  1    wreg      void 
  1190 ;; Registers used:
  1191 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1192 ;; Tracked objects:
  1193 ;;		On entry : 0/0
  1194 ;;		On exit  : 0/0
  1195 ;;		Unchanged: 0/0
  1196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1197 ;;      Params:         0       0       0       0
  1198 ;;      Locals:         0       0       0       0
  1199 ;;      Temps:          0       4       0       0
  1200 ;;      Totals:         0       4       0       0
  1201 ;;Total ram usage:        4 bytes
  1202 ;; Hardware stack levels used:    1
  1203 ;; Hardware stack levels required when called:    7
  1204 ;; This function calls:
  1205 ;;		Absolute function
  1206 ;;		_ES_GetMSBitSet
  1207 ;;		_PostCan_XmitService
  1208 ;; This function is called by:
  1209 ;;		__HW_Process_Pending_Ints
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213                           	psect	text5
  1214  0004B2                     __ptext5:
  1215                           	opt stack 0
  1216  0004B2                     _ES_Timer_Tick_Resp:
  1217                           	opt stack 21
  1218                           
  1219                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1220                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1221                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1222                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1223                           
  1224                           ;incstack = 0
  1225  0004B2  5040               	movf	_TMR_ActiveFlags,w,c
  1226  0004B4  1041               	iorwf	_TMR_ActiveFlags+1,w,c
  1227  0004B6  B4D8               	btfsc	status,2,c
  1228  0004B8  0012               	return	
  1229                           
  1230                           ;ES_Timers.c: 291: {
  1231                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1232  0004BA  C040  F036         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1233  0004BE  C041  F037         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1234  0004C2                     l2110:
  1235                           
  1236                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1237  0004C2  C036  F016         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1238  0004C6  C037  F017         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1239  0004CA  ECB0  F004         	call	_ES_GetMSBitSet	;wreg free
  1240  0004CE  6E44               	movwf	ES_Timer_Tick_Resp@NextTimer2Process,c
  1241                           
  1242                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1243  0004D0  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1244  0004D2  0D02               	mullw	2
  1245  0004D4  0E60               	movlw	low _TMR_TimerArray
  1246  0004D6  24F3               	addwf	prodl,w,c
  1247  0004D8  6ED9               	movwf	fsr2l,c
  1248  0004DA  0E00               	movlw	high _TMR_TimerArray
  1249  0004DC  20F4               	addwfc	prodh,w,c
  1250  0004DE  6EDA               	movwf	fsr2h,c
  1251  0004E0  06DE               	decf	postinc2,f,c
  1252  0004E2  0E00               	movlw	0
  1253  0004E4  5ADD               	subwfb	postdec2,f,c
  1254  0004E6  50DE               	movf	postinc2,w,c
  1255  0004E8  10DE               	iorwf	postinc2,w,c
  1256  0004EA  A4D8               	btfss	status,2,c
  1257  0004EC  D03D               	goto	l2122
  1258                           
  1259                           ;ES_Timers.c: 299: {
  1260                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1261  0004EE  0E03               	movlw	3
  1262  0004F0  6E33               	movwf	ES_Timer_Tick_Resp@NewEvent,c
  1263                           
  1264                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1265  0004F2  C044  F034         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1266  0004F6  6A35               	clrf	ES_Timer_Tick_Resp@NewEvent+2,c
  1267                           
  1268                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1269  0004F8  C033  F08C         	movff	ES_Timer_Tick_Resp@NewEvent,PostCan_XmitService@ThisEvent
  1270  0004FC  C034  F08D         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostCan_XmitService@ThisEvent+1
  1271  000500  C035  F08E         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostCan_XmitService@ThisEvent+2
  1272  000504  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1273  000506  0D02               	mullw	2
  1274  000508  0E21               	movlw	low _Timer2PostFunc
  1275  00050A  24F3               	addwf	prodl,w,c
  1276  00050C  6EF6               	movwf	tblptrl,c
  1277  00050E  0E03               	movlw	high _Timer2PostFunc
  1278  000510  20F4               	addwfc	prodh,w,c
  1279  000512  6EF7               	movwf	tblptrh,c
  1280  000514                     	if	0	;There are less than 3 active tblptr bytes
  1281  000514                     	endif
  1282  000514  D801               	call	u1428
  1283  000516  D00C               	goto	l2120
  1284  000518                     u1428:
  1285  000518  0005               	push	
  1286  00051A  6EFA               	movwf	pclath,c
  1287  00051C  0009               	tblrd		*+
  1288  00051E  50F5               	movf	tablat,w,c
  1289  000520  6EFD               	movwf	tosl,c
  1290  000522  0009               	tblrd		*+
  1291  000524  50F5               	movf	tablat,w,c
  1292  000526  6EFE               	movwf	tosh,c
  1293  000528  50F8               	movf	tblptru,w,c
  1294  00052A  6EFF               	movwf	tosu,c
  1295  00052C  50FA               	movf	pclath,w,c
  1296  00052E  0012               	return		;indir
  1297  000530                     l2120:
  1298                           
  1299                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1300  000530  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1301  000532  0D02               	mullw	2
  1302  000534  0E01               	movlw	low _BitNum2SetMask
  1303  000536  24F3               	addwf	prodl,w,c
  1304  000538  6EF6               	movwf	tblptrl,c
  1305  00053A  0E03               	movlw	high _BitNum2SetMask
  1306  00053C  20F4               	addwfc	prodh,w,c
  1307  00053E  6EF7               	movwf	tblptrh,c
  1308  000540                     	if	0	;There are less than 3 active tblptr bytes
  1309  000540                     	endif
  1310  000540  0009               	tblrd		*+
  1311  000542  CFF5 F08F          	movff	tablat,??_ES_Timer_Tick_Resp
  1312  000546  0009               	tblrd		*+
  1313  000548  CFF5 F090          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1314  00054C  0100               	movlb	0	; () banked
  1315  00054E  1D8F               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1316  000550  0100               	movlb	0	; () banked
  1317  000552  6F91               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1318  000554  0100               	movlb	0	; () banked
  1319  000556  1D90               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1320  000558  0100               	movlb	0	; () banked
  1321  00055A  6F92               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1322  00055C  0100               	movlb	0	; () banked
  1323  00055E  5191               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1324  000560  1640               	andwf	_TMR_ActiveFlags,f,c
  1325  000562  0100               	movlb	0	; () banked
  1326  000564  5192               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1327  000566  1641               	andwf	_TMR_ActiveFlags+1,f,c
  1328  000568                     l2122:
  1329                           
  1330                           ;ES_Timers.c: 306: }
  1331                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1332  000568  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1333  00056A  0D02               	mullw	2
  1334  00056C  0E01               	movlw	low _BitNum2SetMask
  1335  00056E  24F3               	addwf	prodl,w,c
  1336  000570  6EF6               	movwf	tblptrl,c
  1337  000572  0E03               	movlw	high _BitNum2SetMask
  1338  000574  20F4               	addwfc	prodh,w,c
  1339  000576  6EF7               	movwf	tblptrh,c
  1340  000578                     	if	0	;There are less than 3 active tblptr bytes
  1341  000578                     	endif
  1342  000578  0009               	tblrd		*+
  1343  00057A  CFF5 F08F          	movff	tablat,??_ES_Timer_Tick_Resp
  1344  00057E  0009               	tblrd		*+
  1345  000580  CFF5 F090          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1346  000584  0100               	movlb	0	; () banked
  1347  000586  1D8F               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1348  000588  0100               	movlb	0	; () banked
  1349  00058A  6F91               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1350  00058C  0100               	movlb	0	; () banked
  1351  00058E  1D90               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1352  000590  0100               	movlb	0	; () banked
  1353  000592  6F92               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1354  000594  0100               	movlb	0	; () banked
  1355  000596  5191               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1356  000598  1636               	andwf	ES_Timer_Tick_Resp@NeedsProcessing,f,c
  1357  00059A  0100               	movlb	0	; () banked
  1358  00059C  5192               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1359  00059E  1637               	andwf	ES_Timer_Tick_Resp@NeedsProcessing+1,f,c
  1360                           
  1361                           ; BSR set to: 0
  1362                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1363  0005A0  5036               	movf	ES_Timer_Tick_Resp@NeedsProcessing,w,c
  1364  0005A2  1037               	iorwf	ES_Timer_Tick_Resp@NeedsProcessing+1,w,c
  1365  0005A4  B4D8               	btfsc	status,2,c
  1366  0005A6  0012               	return	
  1367  0005A8  D78C               	goto	l2110
  1368  0005AA                     __end_of_ES_Timer_Tick_Resp:
  1369                           	opt stack 0
  1370                           tosu	equ	0xFFF
  1371                           tosh	equ	0xFFE
  1372                           tosl	equ	0xFFD
  1373                           pclath	equ	0xFFA
  1374                           tblptru	equ	0xFF8
  1375                           tblptrh	equ	0xFF7
  1376                           tblptrl	equ	0xFF6
  1377                           tablat	equ	0xFF5
  1378                           prodh	equ	0xFF4
  1379                           prodl	equ	0xFF3
  1380                           postinc0	equ	0xFEE
  1381                           wreg	equ	0xFE8
  1382                           indf2	equ	0xFDF
  1383                           postinc2	equ	0xFDE
  1384                           postdec2	equ	0xFDD
  1385                           fsr2h	equ	0xFDA
  1386                           fsr2l	equ	0xFD9
  1387                           status	equ	0xFD8
  1388                           
  1389 ;; *************** function _PostCan_XmitService *****************
  1390 ;; Defined at:
  1391 ;;		line 112 in file "Can_XmitService.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;  ThisEvent       3    0[BANK0 ] struct ES_Event_t
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;		None
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      unsigned char 
  1398 ;; Registers used:
  1399 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1405 ;;      Params:         0       3       0       0
  1406 ;;      Locals:         0       0       0       0
  1407 ;;      Temps:          0       0       0       0
  1408 ;;      Totals:         0       3       0       0
  1409 ;;Total ram usage:        3 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; Hardware stack levels required when called:    6
  1412 ;; This function calls:
  1413 ;;		_ES_PostToService
  1414 ;; This function is called by:
  1415 ;;		_ES_Timer_Tick_Resp
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           	psect	text6
  1420  000D4E                     __ptext6:
  1421                           	opt stack 0
  1422  000D4E                     _PostCan_XmitService:
  1423                           	opt stack 21
  1424                           
  1425                           ;Can_XmitService.c: 114: return ES_PostToService( MyPriority, ThisEvent);
  1426                           ;	Return value of _PostCan_XmitService is never used
  1427                           
  1428                           ;incstack = 0
  1429  000D4E  C08C  F02D         	movff	PostCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  1430  000D52  C08D  F02E         	movff	PostCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  1431  000D56  C08E  F02F         	movff	PostCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  1432  000D5A  5045               	movf	_MyPriority,w,c
  1433  000D5C  EC56  F005         	call	_ES_PostToService
  1434  000D60  0012               	return	
  1435  000D62                     __end_of_PostCan_XmitService:
  1436                           	opt stack 0
  1437                           tosu	equ	0xFFF
  1438                           tosh	equ	0xFFE
  1439                           tosl	equ	0xFFD
  1440                           pclath	equ	0xFFA
  1441                           tblptru	equ	0xFF8
  1442                           tblptrh	equ	0xFF7
  1443                           tblptrl	equ	0xFF6
  1444                           tablat	equ	0xFF5
  1445                           prodh	equ	0xFF4
  1446                           prodl	equ	0xFF3
  1447                           postinc0	equ	0xFEE
  1448                           wreg	equ	0xFE8
  1449                           indf2	equ	0xFDF
  1450                           postinc2	equ	0xFDE
  1451                           postdec2	equ	0xFDD
  1452                           fsr2h	equ	0xFDA
  1453                           fsr2l	equ	0xFD9
  1454                           status	equ	0xFD8
  1455                           
  1456 ;; *************** function _ES_GetMSBitSet *****************
  1457 ;; Defined at:
  1458 ;;		line 79 in file "ES_LookupTables.c"
  1459 ;; Parameters:    Size  Location     Type
  1460 ;;  Val2Check       2   21[COMRAM] unsigned int 
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;  LoopCntr        1   30[COMRAM] char 
  1463 ;;  Nybble2Test     1   29[COMRAM] unsigned char 
  1464 ;;  ReturnVal       1   28[COMRAM] unsigned char 
  1465 ;; Return value:  Size  Location     Type
  1466 ;;                  1    wreg      unsigned char 
  1467 ;; Registers used:
  1468 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1474 ;;      Params:         2       0       0       0
  1475 ;;      Locals:         3       0       0       0
  1476 ;;      Temps:          5       0       0       0
  1477 ;;      Totals:        10       0       0       0
  1478 ;;Total ram usage:       10 bytes
  1479 ;; Hardware stack levels used:    1
  1480 ;; Hardware stack levels required when called:    3
  1481 ;; This function calls:
  1482 ;;		Nothing
  1483 ;; This function is called by:
  1484 ;;		_ES_Run
  1485 ;;		_ES_Timer_Tick_Resp
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           	psect	text7
  1490  000960                     __ptext7:
  1491                           	opt stack 0
  1492  000960                     _ES_GetMSBitSet:
  1493                           	opt stack 24
  1494                           
  1495                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1496                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1497                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1498                           
  1499                           ;incstack = 0
  1500  000960  0E80               	movlw	128
  1501  000962  6E1D               	movwf	ES_GetMSBitSet@ReturnVal,c
  1502                           
  1503                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1504  000964  0E03               	movlw	3
  1505  000966  6E1F               	movwf	ES_GetMSBitSet@LoopCntr,c
  1506  000968                     l2080:
  1507                           
  1508                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1509  000968  BE1F               	btfsc	ES_GetMSBitSet@LoopCntr,7,c
  1510  00096A  D031               	goto	l2094
  1511                           
  1512                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1513                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1514                           ;ES_LookupTables.c: 91: 0x0F);
  1515  00096C  501F               	movf	ES_GetMSBitSet@LoopCntr,w,c
  1516  00096E  0D04               	mullw	4
  1517  000970  CFF3 F018          	movff	prodl,??_ES_GetMSBitSet
  1518  000974  C016  F019         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1519  000978  C017  F01A         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1520  00097C  2A18               	incf	??_ES_GetMSBitSet,f,c
  1521  00097E  D003               	goto	u1374
  1522  000980                     u1375:
  1523  000980  90D8               	bcf	status,0,c
  1524  000982  321A               	rrcf	??_ES_GetMSBitSet+2,f,c
  1525  000984  3219               	rrcf	??_ES_GetMSBitSet+1,f,c
  1526  000986                     u1374:
  1527  000986  2E18               	decfsz	??_ES_GetMSBitSet,f,c
  1528  000988  D7FB               	goto	u1375
  1529  00098A  5019               	movf	??_ES_GetMSBitSet+1,w,c
  1530  00098C  0B0F               	andlw	15
  1531  00098E  6E1E               	movwf	ES_GetMSBitSet@Nybble2Test,c
  1532                           
  1533                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1534  000990  501E               	movf	ES_GetMSBitSet@Nybble2Test,w,c
  1535  000992  B4D8               	btfsc	status,2,c
  1536  000994  D01A               	goto	l2090
  1537                           
  1538                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  1539                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  1540  000996  0EFF               	movlw	255
  1541  000998  6E18               	movwf	??_ES_GetMSBitSet& (0+255),c
  1542  00099A  0EFF               	movlw	255
  1543  00099C  6E19               	movwf	(??_ES_GetMSBitSet+1)& (0+255),c
  1544  00099E  501E               	movf	ES_GetMSBitSet@Nybble2Test,w,c
  1545  0009A0  6E1A               	movwf	(??_ES_GetMSBitSet+2)& (0+255),c
  1546  0009A2  6A1B               	clrf	(??_ES_GetMSBitSet+3)& (0+255),c
  1547  0009A4  5018               	movf	??_ES_GetMSBitSet,w,c
  1548  0009A6  261A               	addwf	??_ES_GetMSBitSet+2,f,c
  1549  0009A8  5019               	movf	??_ES_GetMSBitSet+1,w,c
  1550  0009AA  221B               	addwfc	??_ES_GetMSBitSet+3,f,c
  1551  0009AC  0E41               	movlw	low _Nybble2MSBitNum
  1552  0009AE  241A               	addwf	??_ES_GetMSBitSet+2,w,c
  1553  0009B0  6EF6               	movwf	tblptrl,c
  1554  0009B2  0E03               	movlw	high _Nybble2MSBitNum
  1555  0009B4  201B               	addwfc	??_ES_GetMSBitSet+3,w,c
  1556  0009B6  6EF7               	movwf	tblptrh,c
  1557  0009B8                     	if	0	;There are less than 3 active tblptr bytes
  1558  0009B8                     	endif
  1559  0009B8  0008               	tblrd		*
  1560  0009BA  CFF5 F01C          	movff	tablat,??_ES_GetMSBitSet+4
  1561  0009BE  501F               	movf	ES_GetMSBitSet@LoopCntr,w,c
  1562  0009C0  0D04               	mullw	4
  1563  0009C2  50F3               	movf	prodl,w,c
  1564  0009C4  241C               	addwf	??_ES_GetMSBitSet+4,w,c
  1565  0009C6  6E1D               	movwf	ES_GetMSBitSet@ReturnVal,c
  1566                           
  1567                           ;ES_LookupTables.c: 96: break;
  1568  0009C8  D002               	goto	l2094
  1569  0009CA                     l2090:
  1570  0009CA  061F               	decf	ES_GetMSBitSet@LoopCntr,f,c
  1571  0009CC  D7CD               	goto	l2080
  1572  0009CE                     l2094:
  1573                           
  1574                           ;ES_LookupTables.c: 97: }
  1575                           ;ES_LookupTables.c: 98: }
  1576                           ;ES_LookupTables.c: 99: return ReturnVal;
  1577  0009CE  501D               	movf	ES_GetMSBitSet@ReturnVal,w,c
  1578  0009D0  0012               	return	
  1579  0009D2                     __end_of_ES_GetMSBitSet:
  1580                           	opt stack 0
  1581                           tosu	equ	0xFFF
  1582                           tosh	equ	0xFFE
  1583                           tosl	equ	0xFFD
  1584                           pclath	equ	0xFFA
  1585                           tblptru	equ	0xFF8
  1586                           tblptrh	equ	0xFF7
  1587                           tblptrl	equ	0xFF6
  1588                           tablat	equ	0xFF5
  1589                           prodh	equ	0xFF4
  1590                           prodl	equ	0xFF3
  1591                           postinc0	equ	0xFEE
  1592                           wreg	equ	0xFE8
  1593                           indf2	equ	0xFDF
  1594                           postinc2	equ	0xFDE
  1595                           postdec2	equ	0xFDD
  1596                           fsr2h	equ	0xFDA
  1597                           fsr2l	equ	0xFD9
  1598                           status	equ	0xFD8
  1599                           
  1600 ;; *************** function _RunCan_XmitService *****************
  1601 ;; Defined at:
  1602 ;;		line 135 in file "Can_XmitService.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;  ThisEvent       3   22[COMRAM] struct ES_Event_t
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;  ReturnEvent     3   25[COMRAM] struct ES_Event_t
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  3   22[COMRAM] struct ES_Event_t
  1609 ;; Registers used:
  1610 ;;		wreg, status,2, status,0, cstack
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1616 ;;      Params:         3       0       0       0
  1617 ;;      Locals:         3       0       0       0
  1618 ;;      Temps:          0       0       0       0
  1619 ;;      Totals:         6       0       0       0
  1620 ;;Total ram usage:        6 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    4
  1623 ;; This function calls:
  1624 ;;		_InitCanHardware
  1625 ;;		_InitPins
  1626 ;;		_ToggleDebugLED
  1627 ;;		_XmitData
  1628 ;; This function is called by:
  1629 ;;		_ES_Run
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           	psect	text8
  1634  000BAA                     __ptext8:
  1635                           	opt stack 0
  1636  000BAA                     _RunCan_XmitService:
  1637                           	opt stack 25
  1638                           
  1639                           ;Can_XmitService.c: 137: ES_Event ReturnEvent;
  1640                           ;Can_XmitService.c: 139: if (ThisEvent.EventType == ES_INIT) {
  1641                           
  1642                           ;incstack = 0
  1643  000BAA  0E02               	movlw	2
  1644  000BAC  1817               	xorwf	RunCan_XmitService@ThisEvent,w,c
  1645  000BAE  A4D8               	btfss	status,2,c
  1646  000BB0  D004               	goto	l2286
  1647                           
  1648                           ;Can_XmitService.c: 140: InitPins();
  1649  000BB2  EC88  F006         	call	_InitPins	;wreg free
  1650                           
  1651                           ;Can_XmitService.c: 141: InitCanHardware();
  1652  000BB6  EC89  F005         	call	_InitCanHardware	;wreg free
  1653  000BBA                     l2286:
  1654                           
  1655                           ;Can_XmitService.c: 142: }
  1656                           ;Can_XmitService.c: 143: if (ThisEvent.EventType == ES_TIMEOUT) {
  1657  000BBA  0E03               	movlw	3
  1658  000BBC  1817               	xorwf	RunCan_XmitService@ThisEvent,w,c
  1659  000BBE  A4D8               	btfss	status,2,c
  1660  000BC0  D009               	goto	l365
  1661                           
  1662                           ;Can_XmitService.c: 144: if (ThisEvent.EventParam == 0) {
  1663  000BC2  5018               	movf	RunCan_XmitService@ThisEvent+1,w,c
  1664  000BC4  1019               	iorwf	RunCan_XmitService@ThisEvent+2,w,c
  1665  000BC6  A4D8               	btfss	status,2,c
  1666  000BC8  D005               	goto	l365
  1667                           
  1668                           ;Can_XmitService.c: 145: ToggleDebugLED();
  1669  000BCA  ECC4  F006         	call	_ToggleDebugLED	;wreg free
  1670                           
  1671                           ;Can_XmitService.c: 146: XmitData(0xAA);
  1672  000BCE  0EAA               	movlw	170
  1673  000BD0  EC62  F006         	call	_XmitData
  1674  000BD4                     l365:
  1675                           
  1676                           ;Can_XmitService.c: 147: }
  1677                           ;Can_XmitService.c: 148: }
  1678                           ;Can_XmitService.c: 149: ReturnEvent.EventType = ES_NO_EVENT;
  1679  000BD4  0E00               	movlw	0
  1680  000BD6  6E1A               	movwf	RunCan_XmitService@ReturnEvent,c
  1681                           
  1682                           ;Can_XmitService.c: 150: return ReturnEvent;
  1683  000BD8  C01A  F017         	movff	RunCan_XmitService@ReturnEvent,?_RunCan_XmitService
  1684  000BDC  C01B  F018         	movff	RunCan_XmitService@ReturnEvent+1,?_RunCan_XmitService+1
  1685  000BE0  C01C  F019         	movff	RunCan_XmitService@ReturnEvent+2,?_RunCan_XmitService+2
  1686  000BE4  0012               	return	
  1687  000BE6                     __end_of_RunCan_XmitService:
  1688                           	opt stack 0
  1689                           tosu	equ	0xFFF
  1690                           tosh	equ	0xFFE
  1691                           tosl	equ	0xFFD
  1692                           pclath	equ	0xFFA
  1693                           tblptru	equ	0xFF8
  1694                           tblptrh	equ	0xFF7
  1695                           tblptrl	equ	0xFF6
  1696                           tablat	equ	0xFF5
  1697                           prodh	equ	0xFF4
  1698                           prodl	equ	0xFF3
  1699                           postinc0	equ	0xFEE
  1700                           wreg	equ	0xFE8
  1701                           indf2	equ	0xFDF
  1702                           postinc2	equ	0xFDE
  1703                           postdec2	equ	0xFDD
  1704                           fsr2h	equ	0xFDA
  1705                           fsr2l	equ	0xFD9
  1706                           status	equ	0xFD8
  1707                           
  1708 ;; *************** function _XmitData *****************
  1709 ;; Defined at:
  1710 ;;		line 153 in file "Can_XmitService.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;  DataByte        1    wreg     unsigned char 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  DataByte        1   21[COMRAM] unsigned char 
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  1    wreg      void 
  1717 ;; Registers used:
  1718 ;;		wreg, status,2
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1724 ;;      Params:         0       0       0       0
  1725 ;;      Locals:         1       0       0       0
  1726 ;;      Temps:          0       0       0       0
  1727 ;;      Totals:         1       0       0       0
  1728 ;;Total ram usage:        1 bytes
  1729 ;; Hardware stack levels used:    1
  1730 ;; Hardware stack levels required when called:    3
  1731 ;; This function calls:
  1732 ;;		Nothing
  1733 ;; This function is called by:
  1734 ;;		_RunCan_XmitService
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text9
  1739  000CC4                     __ptext9:
  1740                           	opt stack 0
  1741  000CC4                     _XmitData:
  1742                           	opt stack 25
  1743                           
  1744                           ;incstack = 0
  1745                           ;XmitData@DataByte stored from wreg
  1746  000CC4  6E16               	movwf	XmitData@DataByte,c
  1747                           
  1748                           ;Can_XmitService.c: 155: TXB0D0 = DataByte;
  1749  000CC6  C016  FF46         	movff	XmitData@DataByte,3910	;volatile
  1750                           
  1751                           ;Can_XmitService.c: 157: TXB0SIDL = 0b01100000;
  1752  000CCA  0E60               	movlw	96
  1753  000CCC  010F               	movlb	15	; () banked
  1754  000CCE  6F42               	movwf	66,b	;volatile
  1755                           
  1756                           ; BSR set to: 15
  1757                           ;Can_XmitService.c: 158: TXB0SIDH = 0b00100100;
  1758  000CD0  0E24               	movlw	36
  1759  000CD2  010F               	movlb	15	; () banked
  1760  000CD4  6F41               	movwf	65,b	;volatile
  1761                           
  1762                           ; BSR set to: 15
  1763                           ;Can_XmitService.c: 160: TXB0DLC = 0b00000001;
  1764  000CD6  0E01               	movlw	1
  1765  000CD8  010F               	movlb	15	; () banked
  1766  000CDA  6F45               	movwf	69,b	;volatile
  1767                           
  1768                           ; BSR set to: 15
  1769                           ;Can_XmitService.c: 161: TXB0CONbits.TXPRI0 = 1;
  1770  000CDC  010F               	movlb	15	; () banked
  1771  000CDE  8140               	bsf	64,0,b	;volatile
  1772                           
  1773                           ; BSR set to: 15
  1774                           ;Can_XmitService.c: 162: TXB0CONbits.TXPRI1 = 1;
  1775  000CE0  010F               	movlb	15	; () banked
  1776  000CE2  8340               	bsf	64,1,b	;volatile
  1777                           
  1778                           ; BSR set to: 15
  1779                           ;Can_XmitService.c: 164: TXB0CONbits.TXREQ = 1;
  1780  000CE4  010F               	movlb	15	; () banked
  1781  000CE6  8740               	bsf	64,3,b	;volatile
  1782                           
  1783                           ; BSR set to: 15
  1784  000CE8  0012               	return		;funcret
  1785  000CEA                     __end_of_XmitData:
  1786                           	opt stack 0
  1787                           tosu	equ	0xFFF
  1788                           tosh	equ	0xFFE
  1789                           tosl	equ	0xFFD
  1790                           pclath	equ	0xFFA
  1791                           tblptru	equ	0xFF8
  1792                           tblptrh	equ	0xFF7
  1793                           tblptrl	equ	0xFF6
  1794                           tablat	equ	0xFF5
  1795                           prodh	equ	0xFF4
  1796                           prodl	equ	0xFF3
  1797                           postinc0	equ	0xFEE
  1798                           wreg	equ	0xFE8
  1799                           indf2	equ	0xFDF
  1800                           postinc2	equ	0xFDE
  1801                           postdec2	equ	0xFDD
  1802                           fsr2h	equ	0xFDA
  1803                           fsr2l	equ	0xFD9
  1804                           status	equ	0xFD8
  1805                           
  1806 ;; *************** function _ToggleDebugLED *****************
  1807 ;; Defined at:
  1808 ;;		line 251 in file "Can_XmitService.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;		None
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;		None
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  1    wreg      void 
  1815 ;; Registers used:
  1816 ;;		None
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1822 ;;      Params:         0       0       0       0
  1823 ;;      Locals:         0       0       0       0
  1824 ;;      Temps:          0       0       0       0
  1825 ;;      Totals:         0       0       0       0
  1826 ;;Total ram usage:        0 bytes
  1827 ;; Hardware stack levels used:    1
  1828 ;; Hardware stack levels required when called:    3
  1829 ;; This function calls:
  1830 ;;		Nothing
  1831 ;; This function is called by:
  1832 ;;		_RunCan_XmitService
  1833 ;; This function uses a non-reentrant model
  1834 ;;
  1835                           
  1836                           	psect	text10
  1837  000D88                     __ptext10:
  1838                           	opt stack 0
  1839  000D88                     _ToggleDebugLED:
  1840                           	opt stack 25
  1841                           
  1842                           ;Can_XmitService.c: 253: if (LATA1 == 1) {
  1843                           
  1844                           ; BSR set to: 15
  1845                           ;incstack = 0
  1846  000D88  A289               	btfss	3977,1,c	;volatile
  1847  000D8A  D002               	goto	l392
  1848                           
  1849                           ;Can_XmitService.c: 254: LATA1 = 0;
  1850  000D8C  9289               	bcf	3977,1,c	;volatile
  1851                           
  1852                           ;Can_XmitService.c: 255: } else if (LATA1 == 0) {
  1853  000D8E  0012               	return	
  1854  000D90                     l392:
  1855  000D90  B289               	btfsc	3977,1,c	;volatile
  1856  000D92  0012               	return	
  1857                           
  1858                           ;Can_XmitService.c: 256: LATA1 = 1;
  1859  000D94  8289               	bsf	3977,1,c	;volatile
  1860  000D96  0012               	return	
  1861  000D98                     __end_of_ToggleDebugLED:
  1862                           	opt stack 0
  1863                           tosu	equ	0xFFF
  1864                           tosh	equ	0xFFE
  1865                           tosl	equ	0xFFD
  1866                           pclath	equ	0xFFA
  1867                           tblptru	equ	0xFF8
  1868                           tblptrh	equ	0xFF7
  1869                           tblptrl	equ	0xFF6
  1870                           tablat	equ	0xFF5
  1871                           prodh	equ	0xFF4
  1872                           prodl	equ	0xFF3
  1873                           postinc0	equ	0xFEE
  1874                           wreg	equ	0xFE8
  1875                           indf2	equ	0xFDF
  1876                           postinc2	equ	0xFDE
  1877                           postdec2	equ	0xFDD
  1878                           fsr2h	equ	0xFDA
  1879                           fsr2l	equ	0xFD9
  1880                           status	equ	0xFD8
  1881                           
  1882 ;; *************** function _InitPins *****************
  1883 ;; Defined at:
  1884 ;;		line 235 in file "Can_XmitService.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;		None
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;		None
  1889 ;; Return value:  Size  Location     Type
  1890 ;;                  1    wreg      void 
  1891 ;; Registers used:
  1892 ;;		wreg, status,2
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1898 ;;      Params:         0       0       0       0
  1899 ;;      Locals:         0       0       0       0
  1900 ;;      Temps:          0       0       0       0
  1901 ;;      Totals:         0       0       0       0
  1902 ;;Total ram usage:        0 bytes
  1903 ;; Hardware stack levels used:    1
  1904 ;; Hardware stack levels required when called:    3
  1905 ;; This function calls:
  1906 ;;		Nothing
  1907 ;; This function is called by:
  1908 ;;		_RunCan_XmitService
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           	psect	text11
  1913  000D10                     __ptext11:
  1914                           	opt stack 0
  1915  000D10                     _InitPins:
  1916                           	opt stack 25
  1917                           
  1918                           ;Can_XmitService.c: 238: PORTB = 0x00;
  1919                           
  1920                           ;incstack = 0
  1921  000D10  0E00               	movlw	0
  1922  000D12  6E81               	movwf	3969,c	;volatile
  1923                           
  1924                           ;Can_XmitService.c: 239: LATB = 0x00;
  1925  000D14  0E00               	movlw	0
  1926  000D16  6E8A               	movwf	3978,c	;volatile
  1927                           
  1928                           ;Can_XmitService.c: 240: PORTA = 0x00;
  1929  000D18  0E00               	movlw	0
  1930  000D1A  6E80               	movwf	3968,c	;volatile
  1931                           
  1932                           ;Can_XmitService.c: 241: LATA = 0x00;
  1933  000D1C  0E00               	movlw	0
  1934  000D1E  6E89               	movwf	3977,c	;volatile
  1935                           
  1936                           ;Can_XmitService.c: 242: ADCON1 = 0x0F;
  1937  000D20  0E0F               	movlw	15
  1938  000D22  6EC1               	movwf	4033,c	;volatile
  1939                           
  1940                           ;Can_XmitService.c: 243: TRISAbits.TRISA0 = 0;
  1941  000D24  9092               	bcf	3986,0,c	;volatile
  1942                           
  1943                           ;Can_XmitService.c: 244: TRISAbits.TRISA1 = 0;
  1944  000D26  9292               	bcf	3986,1,c	;volatile
  1945                           
  1946                           ;Can_XmitService.c: 245: TRISBbits.TRISB2 = 0;
  1947  000D28  9493               	bcf	3987,2,c	;volatile
  1948                           
  1949                           ;Can_XmitService.c: 246: TRISBbits.TRISB3 = 1;
  1950  000D2A  8693               	bsf	3987,3,c	;volatile
  1951                           
  1952                           ;Can_XmitService.c: 247: LATA1 = 0;
  1953  000D2C  9289               	bcf	3977,1,c	;volatile
  1954                           
  1955                           ;Can_XmitService.c: 248: LATA0 = 1;
  1956  000D2E  8089               	bsf	3977,0,c	;volatile
  1957  000D30  0012               	return		;funcret
  1958  000D32                     __end_of_InitPins:
  1959                           	opt stack 0
  1960                           tosu	equ	0xFFF
  1961                           tosh	equ	0xFFE
  1962                           tosl	equ	0xFFD
  1963                           pclath	equ	0xFFA
  1964                           tblptru	equ	0xFF8
  1965                           tblptrh	equ	0xFF7
  1966                           tblptrl	equ	0xFF6
  1967                           tablat	equ	0xFF5
  1968                           prodh	equ	0xFF4
  1969                           prodl	equ	0xFF3
  1970                           postinc0	equ	0xFEE
  1971                           wreg	equ	0xFE8
  1972                           indf2	equ	0xFDF
  1973                           postinc2	equ	0xFDE
  1974                           postdec2	equ	0xFDD
  1975                           fsr2h	equ	0xFDA
  1976                           fsr2l	equ	0xFD9
  1977                           status	equ	0xFD8
  1978                           
  1979 ;; *************** function _InitCanHardware *****************
  1980 ;; Defined at:
  1981 ;;		line 183 in file "Can_XmitService.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;		None
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;		None
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  1    wreg      void 
  1988 ;; Registers used:
  1989 ;;		wreg, status,2
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1995 ;;      Params:         0       0       0       0
  1996 ;;      Locals:         0       0       0       0
  1997 ;;      Temps:          0       0       0       0
  1998 ;;      Totals:         0       0       0       0
  1999 ;;Total ram usage:        0 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; Hardware stack levels required when called:    3
  2002 ;; This function calls:
  2003 ;;		Nothing
  2004 ;; This function is called by:
  2005 ;;		_RunCan_XmitService
  2006 ;; This function uses a non-reentrant model
  2007 ;;
  2008                           
  2009                           	psect	text12
  2010  000B12                     __ptext12:
  2011                           	opt stack 0
  2012  000B12                     _InitCanHardware:
  2013                           	opt stack 25
  2014                           
  2015                           ;Can_XmitService.c: 189: CANCON = 0x80;
  2016                           
  2017                           ;incstack = 0
  2018  000B12  0E80               	movlw	128
  2019  000B14  6E6F               	movwf	3951,c	;volatile
  2020  000B16                     l380:
  2021  000B16  AE6E               	btfss	3950,7,c	;volatile
  2022  000B18  D7FE               	goto	l380
  2023                           
  2024                           ;Can_XmitService.c: 194: BRGCON1bits.SJW0 = 1;
  2025  000B1A  8C70               	bsf	3952,6,c	;volatile
  2026                           
  2027                           ;Can_XmitService.c: 195: BRGCON2bits.SAM = 1;
  2028  000B1C  8C71               	bsf	3953,6,c	;volatile
  2029                           
  2030                           ;Can_XmitService.c: 196: BRGCON2bits.SEG2PHTS = 1;
  2031  000B1E  8E71               	bsf	3953,7,c	;volatile
  2032                           
  2033                           ;Can_XmitService.c: 197: BRGCON2bits.PRSEG1 = 1;
  2034  000B20  8271               	bsf	3953,1,c	;volatile
  2035                           
  2036                           ;Can_XmitService.c: 198: BRGCON2bits.SEG1PH0 = 1;
  2037  000B22  8671               	bsf	3953,3,c	;volatile
  2038                           
  2039                           ;Can_XmitService.c: 199: BRGCON2bits.SEG1PH1 = 1;
  2040  000B24  8871               	bsf	3953,4,c	;volatile
  2041                           
  2042                           ;Can_XmitService.c: 200: BRGCON2bits.SEG1PH2 = 1;
  2043  000B26  8A71               	bsf	3953,5,c	;volatile
  2044                           
  2045                           ;Can_XmitService.c: 201: BRGCON3bits.SEG2PH0 = 1;
  2046  000B28  8072               	bsf	3954,0,c	;volatile
  2047                           
  2048                           ;Can_XmitService.c: 202: BRGCON3bits.SEG2PH1 = 1;
  2049  000B2A  8272               	bsf	3954,1,c	;volatile
  2050                           
  2051                           ;Can_XmitService.c: 203: BRGCON1bits.BRP0 = 1;
  2052  000B2C  8070               	bsf	3952,0,c	;volatile
  2053                           
  2054                           ;Can_XmitService.c: 204: BRGCON1bits.BRP1 = 1;
  2055  000B2E  8270               	bsf	3952,1,c	;volatile
  2056                           
  2057                           ;Can_XmitService.c: 209: RXB0CONbits.RXM0 = 1;
  2058  000B30  8A60               	bsf	3936,5,c	;volatile
  2059                           
  2060                           ;Can_XmitService.c: 210: RXB0CONbits.RXM1 = 1;
  2061  000B32  8C60               	bsf	3936,6,c	;volatile
  2062                           
  2063                           ;Can_XmitService.c: 211: RXF0SIDH = 0x20;
  2064  000B34  0E20               	movlw	32
  2065  000B36  010F               	movlb	15	; () banked
  2066  000B38  6F00               	movwf	0,b	;volatile
  2067                           
  2068                           ;Can_XmitService.c: 212: RXF0SIDL = 0x60;
  2069  000B3A  0E60               	movlw	96
  2070  000B3C  010F               	movlb	15	; () banked
  2071  000B3E  6F01               	movwf	1,b	;volatile
  2072                           
  2073                           ;Can_XmitService.c: 213: RXM0SIDH = 0x00;
  2074  000B40  0E00               	movlw	0
  2075  000B42  010F               	movlb	15	; () banked
  2076  000B44  6F18               	movwf	24,b	;volatile
  2077                           
  2078                           ;Can_XmitService.c: 214: RXM0SIDL = 0x00;
  2079  000B46  0E00               	movlw	0
  2080  000B48  010F               	movlb	15	; () banked
  2081  000B4A  6F19               	movwf	25,b	;volatile
  2082                           
  2083                           ; BSR set to: 15
  2084                           ;Can_XmitService.c: 216: TXB0IE = 1;
  2085  000B4C  84A3               	bsf	4003,2,c	;volatile
  2086                           
  2087                           ; BSR set to: 15
  2088                           ;Can_XmitService.c: 217: RXB0IE = 1;
  2089  000B4E  80A3               	bsf	4003,0,c	;volatile
  2090                           
  2091                           ; BSR set to: 15
  2092                           ;Can_XmitService.c: 218: PIE3 = 0xff;
  2093  000B50  68A3               	setf	4003,c	;volatile
  2094                           
  2095                           ; BSR set to: 15
  2096                           ;Can_XmitService.c: 221: TXB0IF = 0;
  2097  000B52  94A4               	bcf	4004,2,c	;volatile
  2098                           
  2099                           ; BSR set to: 15
  2100                           ;Can_XmitService.c: 222: RXB0IF = 0;
  2101  000B54  90A4               	bcf	4004,0,c	;volatile
  2102                           
  2103                           ; BSR set to: 15
  2104                           ;Can_XmitService.c: 223: TXB0CONbits.TXREQ = 0;
  2105  000B56  010F               	movlb	15	; () banked
  2106  000B58  9740               	bcf	64,3,b	;volatile
  2107                           
  2108                           ; BSR set to: 15
  2109                           ;Can_XmitService.c: 224: RXB0CONbits.RXFUL = 0;
  2110  000B5A  9E60               	bcf	3936,7,c	;volatile
  2111                           
  2112                           ;Can_XmitService.c: 229: ECANCON = 0x00;
  2113  000B5C  0E00               	movlw	0
  2114  000B5E  6E77               	movwf	3959,c	;volatile
  2115                           
  2116                           ;Can_XmitService.c: 230: CANCON = 0x00;
  2117  000B60  0E00               	movlw	0
  2118  000B62  6E6F               	movwf	3951,c	;volatile
  2119  000B64                     l383:
  2120  000B64  AE6E               	btfss	3950,7,c	;volatile
  2121  000B66  0012               	return	
  2122  000B68  D7FD               	goto	l383
  2123  000B6A                     __end_of_InitCanHardware:
  2124                           	opt stack 0
  2125                           tosu	equ	0xFFF
  2126                           tosh	equ	0xFFE
  2127                           tosl	equ	0xFFD
  2128                           pclath	equ	0xFFA
  2129                           tblptru	equ	0xFF8
  2130                           tblptrh	equ	0xFF7
  2131                           tblptrl	equ	0xFF6
  2132                           tablat	equ	0xFF5
  2133                           prodh	equ	0xFF4
  2134                           prodl	equ	0xFF3
  2135                           postinc0	equ	0xFEE
  2136                           wreg	equ	0xFE8
  2137                           indf2	equ	0xFDF
  2138                           postinc2	equ	0xFDE
  2139                           postdec2	equ	0xFDD
  2140                           fsr2h	equ	0xFDA
  2141                           fsr2l	equ	0xFD9
  2142                           status	equ	0xFD8
  2143                           
  2144 ;; *************** function _ES_DeQueue *****************
  2145 ;; Defined at:
  2146 ;;		line 164 in file "ES_Queue.c"
  2147 ;; Parameters:    Size  Location     Type
  2148 ;;  pBlock          2   33[COMRAM] PTR struct ES_Event_t
  2149 ;;		 -> Queue0(12), 
  2150 ;;  pReturnEvent    2   35[COMRAM] PTR struct ES_Event_t
  2151 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;  pThisQueue      2   41[COMRAM] PTR struct .
  2154 ;;		 -> Queue0(12), 
  2155 ;;  NumLeft         1   40[COMRAM] unsigned char 
  2156 ;;  SaveCrit        1   39[COMRAM] unsigned char 
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  1    wreg      unsigned char 
  2159 ;; Registers used:
  2160 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2166 ;;      Params:         4       0       0       0
  2167 ;;      Locals:         4       0       0       0
  2168 ;;      Temps:          2       0       0       0
  2169 ;;      Totals:        10       0       0       0
  2170 ;;Total ram usage:       10 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    4
  2173 ;; This function calls:
  2174 ;;		___lbmod
  2175 ;;		___wmul
  2176 ;; This function is called by:
  2177 ;;		_ES_Run
  2178 ;;		_ES_RecallEvents
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text13
  2183  0003B4                     __ptext13:
  2184                           	opt stack 0
  2185  0003B4                     _ES_DeQueue:
  2186                           	opt stack 25
  2187                           
  2188                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  2189                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  2190                           ;ES_Queue.c: 168: uint8_t NumLeft;
  2191                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  2192                           
  2193                           ;incstack = 0
  2194  0003B4  C022  F02A         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  2195  0003B8  C023  F02B         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  2196                           
  2197                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  2198  0003BC  EE20 F002          	lfsr	2,2
  2199  0003C0  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2200  0003C2  26D9               	addwf	fsr2l,f,c
  2201  0003C4  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2202  0003C6  22DA               	addwfc	fsr2h,f,c
  2203  0003C8  50DF               	movf	indf2,w,c
  2204  0003CA  B4D8               	btfsc	status,2,c
  2205  0003CC  D05E               	goto	l2232
  2206                           
  2207                           ;ES_Queue.c: 172: {
  2208                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  2209  0003CE  CFF2 F028          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  2210  0003D2  9EF2               	bcf	intcon,7,c	;volatile
  2211                           
  2212                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  2213  0003D4  EE20 F001          	lfsr	2,1
  2214  0003D8  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2215  0003DA  26D9               	addwf	fsr2l,f,c
  2216  0003DC  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2217  0003DE  22DA               	addwfc	fsr2h,f,c
  2218  0003E0  50DF               	movf	indf2,w,c
  2219  0003E2  6E26               	movwf	??_ES_DeQueue& (0+255),c
  2220  0003E4  0E01               	movlw	1
  2221  0003E6  2426               	addwf	??_ES_DeQueue,w,c
  2222  0003E8  6E1C               	movwf	___wmul@multiplier,c
  2223  0003EA  6A1D               	clrf	___wmul@multiplier+1,c
  2224  0003EC  0E00               	movlw	0
  2225  0003EE  221D               	addwfc	___wmul@multiplier+1,f,c
  2226  0003F0  0E00               	movlw	0
  2227  0003F2  6E1F               	movwf	___wmul@multiplicand+1,c
  2228  0003F4  0E03               	movlw	3
  2229  0003F6  6E1E               	movwf	___wmul@multiplicand,c
  2230  0003F8  EC75  F006         	call	___wmul	;wreg free
  2231  0003FC  501C               	movf	?___wmul,w,c
  2232  0003FE  2422               	addwf	ES_DeQueue@pBlock,w,c
  2233  000400  6ED9               	movwf	fsr2l,c
  2234  000402  501D               	movf	?___wmul+1,w,c
  2235  000404  2023               	addwfc	ES_DeQueue@pBlock+1,w,c
  2236  000406  6EDA               	movwf	fsr2h,c
  2237  000408  C024  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  2238  00040C  C025  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  2239  000410  CFDE FFE6          	movff	postinc2,postinc1
  2240  000414  CFDE FFE6          	movff	postinc2,postinc1
  2241  000418  CFDE FFE6          	movff	postinc2,postinc1
  2242                           
  2243                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  2244  00041C  EE20 F001          	lfsr	2,1
  2245  000420  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2246  000422  26D9               	addwf	fsr2l,f,c
  2247  000424  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2248  000426  22DA               	addwfc	fsr2h,f,c
  2249  000428  2ADF               	incf	indf2,f,c
  2250                           
  2251                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  2252  00042A  C02A  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  2253  00042E  C02B  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  2254  000432  EE10 F001          	lfsr	1,1
  2255  000436  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2256  000438  26E1               	addwf	fsr1l,f,c
  2257  00043A  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2258  00043C  22E2               	addwfc	fsr1h,f,c
  2259  00043E  50DE               	movf	postinc2,w,c
  2260  000440  5CE6               	subwf	postinc1,w,c
  2261  000442  A0D8               	btfss	status,0,c
  2262  000444  D016               	goto	l2228
  2263                           
  2264                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  2265  000446  EE20 F001          	lfsr	2,1
  2266  00044A  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2267  00044C  26D9               	addwf	fsr2l,f,c
  2268  00044E  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2269  000450  22DA               	addwfc	fsr2h,f,c
  2270  000452  C02A  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  2271  000456  C02B  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  2272  00045A  50E7               	movf	indf1,w,c
  2273  00045C  6E16               	movwf	___lbmod@divisor,c
  2274  00045E  EE10 F001          	lfsr	1,1
  2275  000462  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2276  000464  26E1               	addwf	fsr1l,f,c
  2277  000466  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2278  000468  22E2               	addwfc	fsr1h,f,c
  2279  00046A  50E7               	movf	indf1,w,c
  2280  00046C  EC3A  F006         	call	___lbmod
  2281  000470  6EDF               	movwf	indf2,c
  2282  000472                     l2228:
  2283                           
  2284                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  2285  000472  EE20 F002          	lfsr	2,2
  2286  000476  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2287  000478  26D9               	addwf	fsr2l,f,c
  2288  00047A  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2289  00047C  22DA               	addwfc	fsr2h,f,c
  2290  00047E  06DF               	decf	indf2,f,c
  2291  000480  50DF               	movf	indf2,w,c
  2292  000482  6E29               	movwf	ES_DeQueue@NumLeft,c
  2293                           
  2294                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  2295  000484  C028  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  2296                           
  2297                           ;ES_Queue.c: 183: }else {
  2298  000488  D012               	goto	l2238
  2299  00048A                     l2232:
  2300                           
  2301                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  2302  00048A  C024  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  2303  00048E  C025  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  2304  000492  0E00               	movlw	0
  2305  000494  6EDF               	movwf	indf2,c
  2306                           
  2307                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  2308  000496  EE20 F001          	lfsr	2,1
  2309  00049A  5024               	movf	ES_DeQueue@pReturnEvent,w,c
  2310  00049C  26D9               	addwf	fsr2l,f,c
  2311  00049E  5025               	movf	ES_DeQueue@pReturnEvent+1,w,c
  2312  0004A0  22DA               	addwfc	fsr2h,f,c
  2313  0004A2  0E00               	movlw	0
  2314  0004A4  6EDE               	movwf	postinc2,c
  2315  0004A6  0E00               	movlw	0
  2316  0004A8  6EDD               	movwf	postdec2,c
  2317                           
  2318                           ;ES_Queue.c: 186: NumLeft = 0;
  2319  0004AA  0E00               	movlw	0
  2320  0004AC  6E29               	movwf	ES_DeQueue@NumLeft,c
  2321  0004AE                     l2238:
  2322                           
  2323                           ;ES_Queue.c: 187: }
  2324                           ;ES_Queue.c: 188: return NumLeft;
  2325  0004AE  5029               	movf	ES_DeQueue@NumLeft,w,c
  2326  0004B0  0012               	return	
  2327  0004B2                     __end_of_ES_DeQueue:
  2328                           	opt stack 0
  2329                           tosu	equ	0xFFF
  2330                           tosh	equ	0xFFE
  2331                           tosl	equ	0xFFD
  2332                           pclath	equ	0xFFA
  2333                           tblptru	equ	0xFF8
  2334                           tblptrh	equ	0xFF7
  2335                           tblptrl	equ	0xFF6
  2336                           tablat	equ	0xFF5
  2337                           prodh	equ	0xFF4
  2338                           prodl	equ	0xFF3
  2339                           intcon	equ	0xFF2
  2340                           postinc0	equ	0xFEE
  2341                           wreg	equ	0xFE8
  2342                           indf1	equ	0xFE7
  2343                           postinc1	equ	0xFE6
  2344                           fsr1h	equ	0xFE2
  2345                           fsr1l	equ	0xFE1
  2346                           indf2	equ	0xFDF
  2347                           postinc2	equ	0xFDE
  2348                           postdec2	equ	0xFDD
  2349                           fsr2h	equ	0xFDA
  2350                           fsr2l	equ	0xFD9
  2351                           status	equ	0xFD8
  2352                           
  2353 ;; *************** function ___lbmod *****************
  2354 ;; Defined at:
  2355 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;  dividend        1    wreg     unsigned char 
  2358 ;;  divisor         1   21[COMRAM] unsigned char 
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;  dividend        1   22[COMRAM] unsigned char 
  2361 ;;  rem             1   24[COMRAM] unsigned char 
  2362 ;;  counter         1   23[COMRAM] unsigned char 
  2363 ;; Return value:  Size  Location     Type
  2364 ;;                  1    wreg      unsigned char 
  2365 ;; Registers used:
  2366 ;;		wreg, status,2, status,0
  2367 ;; Tracked objects:
  2368 ;;		On entry : 0/0
  2369 ;;		On exit  : 0/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2372 ;;      Params:         1       0       0       0
  2373 ;;      Locals:         3       0       0       0
  2374 ;;      Temps:          0       0       0       0
  2375 ;;      Totals:         4       0       0       0
  2376 ;;Total ram usage:        4 bytes
  2377 ;; Hardware stack levels used:    1
  2378 ;; Hardware stack levels required when called:    3
  2379 ;; This function calls:
  2380 ;;		Nothing
  2381 ;; This function is called by:
  2382 ;;		_ES_DeQueue
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           	psect	text14
  2387  000C74                     __ptext14:
  2388                           	opt stack 0
  2389  000C74                     ___lbmod:
  2390                           	opt stack 25
  2391                           
  2392                           ;incstack = 0
  2393                           ;___lbmod@dividend stored from wreg
  2394  000C74  6E17               	movwf	___lbmod@dividend,c
  2395  000C76  0E08               	movlw	8
  2396  000C78  6E18               	movwf	___lbmod@counter,c
  2397  000C7A  0E00               	movlw	0
  2398  000C7C  6E19               	movwf	___lbmod@rem,c
  2399  000C7E                     l2184:
  2400  000C7E  90D8               	bcf	status,0,c
  2401  000C80  3417               	rlcf	___lbmod@dividend,w,c
  2402  000C82  3419               	rlcf	___lbmod@rem,w,c
  2403  000C84  6E19               	movwf	___lbmod@rem,c
  2404  000C86  90D8               	bcf	status,0,c
  2405  000C88  3617               	rlcf	___lbmod@dividend,f,c
  2406  000C8A  5016               	movf	___lbmod@divisor,w,c
  2407  000C8C  5C19               	subwf	___lbmod@rem,w,c
  2408  000C8E  A0D8               	btfss	status,0,c
  2409  000C90  D002               	goto	l2192
  2410  000C92  5016               	movf	___lbmod@divisor,w,c
  2411  000C94  5E19               	subwf	___lbmod@rem,f,c
  2412  000C96                     l2192:
  2413  000C96  2E18               	decfsz	___lbmod@counter,f,c
  2414  000C98  D7F2               	goto	l2184
  2415  000C9A  5019               	movf	___lbmod@rem,w,c
  2416  000C9C  0012               	return	
  2417  000C9E                     __end_of___lbmod:
  2418                           	opt stack 0
  2419                           tosu	equ	0xFFF
  2420                           tosh	equ	0xFFE
  2421                           tosl	equ	0xFFD
  2422                           pclath	equ	0xFFA
  2423                           tblptru	equ	0xFF8
  2424                           tblptrh	equ	0xFF7
  2425                           tblptrl	equ	0xFF6
  2426                           tablat	equ	0xFF5
  2427                           prodh	equ	0xFF4
  2428                           prodl	equ	0xFF3
  2429                           intcon	equ	0xFF2
  2430                           postinc0	equ	0xFEE
  2431                           wreg	equ	0xFE8
  2432                           indf1	equ	0xFE7
  2433                           postinc1	equ	0xFE6
  2434                           fsr1h	equ	0xFE2
  2435                           fsr1l	equ	0xFE1
  2436                           indf2	equ	0xFDF
  2437                           postinc2	equ	0xFDE
  2438                           postdec2	equ	0xFDD
  2439                           fsr2h	equ	0xFDA
  2440                           fsr2l	equ	0xFD9
  2441                           status	equ	0xFD8
  2442                           
  2443 ;; *************** function _ES_CheckUserEvents *****************
  2444 ;; Defined at:
  2445 ;;		line 46 in file "ES_CheckEvents.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;		None
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;  i               1   21[COMRAM] unsigned char 
  2450 ;; Return value:  Size  Location     Type
  2451 ;;                  1    wreg      unsigned char 
  2452 ;; Registers used:
  2453 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2459 ;;      Params:         0       0       0       0
  2460 ;;      Locals:         1       0       0       0
  2461 ;;      Temps:          0       0       0       0
  2462 ;;      Totals:         1       0       0       0
  2463 ;;Total ram usage:        1 bytes
  2464 ;; Hardware stack levels used:    1
  2465 ;; Hardware stack levels required when called:    4
  2466 ;; This function calls:
  2467 ;;		_Check4Keystroke
  2468 ;; This function is called by:
  2469 ;;		_ES_Run
  2470 ;; This function uses a non-reentrant model
  2471 ;;
  2472                           
  2473                           	psect	text15
  2474  000B6A                     __ptext15:
  2475                           	opt stack 0
  2476  000B6A                     _ES_CheckUserEvents:
  2477                           	opt stack 25
  2478                           
  2479                           ;ES_CheckEvents.c: 48: uint8_t i;
  2480                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  2481                           
  2482                           ;incstack = 0
  2483  000B6A  0E00               	movlw	0
  2484  000B6C  6E16               	movwf	ES_CheckUserEvents@i,c
  2485  000B6E  5016               	movf	ES_CheckUserEvents@i,w,c
  2486  000B70  A4D8               	btfss	status,2,c
  2487  000B72  0012               	return	
  2488                           
  2489                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  2490  000B74  5016               	movf	ES_CheckUserEvents@i,w,c
  2491  000B76  0D02               	mullw	2
  2492  000B78  0E57               	movlw	low _ES_EventList
  2493  000B7A  24F3               	addwf	prodl,w,c
  2494  000B7C  6EF6               	movwf	tblptrl,c
  2495  000B7E  0E03               	movlw	high _ES_EventList
  2496  000B80  20F4               	addwfc	prodh,w,c
  2497  000B82  6EF7               	movwf	tblptrh,c
  2498  000B84                     	if	0	;There are less than 3 active tblptr bytes
  2499  000B84                     	endif
  2500  000B84  D801               	call	u1508
  2501  000B86  D00C               	goto	u1509
  2502  000B88                     u1508:
  2503  000B88  0005               	push	
  2504  000B8A  6EFA               	movwf	pclath,c
  2505  000B8C  0009               	tblrd		*+
  2506  000B8E  50F5               	movf	tablat,w,c
  2507  000B90  6EFD               	movwf	tosl,c
  2508  000B92  0009               	tblrd		*+
  2509  000B94  50F5               	movf	tablat,w,c
  2510  000B96  6EFE               	movwf	tosh,c
  2511  000B98  50F8               	movf	tblptru,w,c
  2512  000B9A  6EFF               	movwf	tosu,c
  2513  000B9C  50FA               	movf	pclath,w,c
  2514  000B9E  0012               	return		;indir
  2515  000BA0                     u1509:
  2516  000BA0  06E8               	decf	wreg,f,c
  2517  000BA2  B4D8               	btfsc	status,2,c
  2518  000BA4  0012               	return	
  2519                           
  2520                           ;ES_CheckEvents.c: 52: break;
  2521  000BA6  2A16               	incf	ES_CheckUserEvents@i,f,c
  2522  000BA8  D7E2               	goto	L1
  2523  000BAA                     __end_of_ES_CheckUserEvents:
  2524                           	opt stack 0
  2525                           tosu	equ	0xFFF
  2526                           tosh	equ	0xFFE
  2527                           tosl	equ	0xFFD
  2528                           pclath	equ	0xFFA
  2529                           tblptru	equ	0xFF8
  2530                           tblptrh	equ	0xFF7
  2531                           tblptrl	equ	0xFF6
  2532                           tablat	equ	0xFF5
  2533                           prodh	equ	0xFF4
  2534                           prodl	equ	0xFF3
  2535                           intcon	equ	0xFF2
  2536                           postinc0	equ	0xFEE
  2537                           wreg	equ	0xFE8
  2538                           indf1	equ	0xFE7
  2539                           postinc1	equ	0xFE6
  2540                           fsr1h	equ	0xFE2
  2541                           fsr1l	equ	0xFE1
  2542                           indf2	equ	0xFDF
  2543                           postinc2	equ	0xFDE
  2544                           postdec2	equ	0xFDD
  2545                           fsr2h	equ	0xFDA
  2546                           fsr2l	equ	0xFD9
  2547                           status	equ	0xFD8
  2548                           
  2549 ;; *************** function _Check4Keystroke *****************
  2550 ;; Defined at:
  2551 ;;		line 62 in file "EventCheckers.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;		None
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;		None
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      unsigned char 
  2558 ;; Registers used:
  2559 ;;		wreg
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2565 ;;      Params:         0       0       0       0
  2566 ;;      Locals:         0       0       0       0
  2567 ;;      Temps:          0       0       0       0
  2568 ;;      Totals:         0       0       0       0
  2569 ;;Total ram usage:        0 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    3
  2572 ;; This function calls:
  2573 ;;		Nothing
  2574 ;; This function is called by:
  2575 ;;		_ES_CheckUserEvents
  2576 ;; This function uses a non-reentrant model
  2577 ;;
  2578                           
  2579                           	psect	text16
  2580  000DAE                     __ptext16:
  2581                           	opt stack 0
  2582  000DAE                     _Check4Keystroke:
  2583                           	opt stack 25
  2584                           
  2585                           ;EventCheckers.c: 78: return 0;
  2586                           
  2587                           ;incstack = 0
  2588  000DAE  0E00               	movlw	0
  2589  000DB0  0012               	return	
  2590  000DB2                     __end_of_Check4Keystroke:
  2591                           	opt stack 0
  2592                           tosu	equ	0xFFF
  2593                           tosh	equ	0xFFE
  2594                           tosl	equ	0xFFD
  2595                           pclath	equ	0xFFA
  2596                           tblptru	equ	0xFF8
  2597                           tblptrh	equ	0xFF7
  2598                           tblptrl	equ	0xFF6
  2599                           tablat	equ	0xFF5
  2600                           prodh	equ	0xFF4
  2601                           prodl	equ	0xFF3
  2602                           intcon	equ	0xFF2
  2603                           postinc0	equ	0xFEE
  2604                           wreg	equ	0xFE8
  2605                           indf1	equ	0xFE7
  2606                           postinc1	equ	0xFE6
  2607                           fsr1h	equ	0xFE2
  2608                           fsr1l	equ	0xFE1
  2609                           indf2	equ	0xFDF
  2610                           postinc2	equ	0xFDE
  2611                           postdec2	equ	0xFDD
  2612                           fsr2h	equ	0xFDA
  2613                           fsr2l	equ	0xFD9
  2614                           status	equ	0xFD8
  2615                           
  2616 ;; *************** function _ES_Initialize *****************
  2617 ;; Defined at:
  2618 ;;		line 242 in file "ES_Framework.c"
  2619 ;; Parameters:    Size  Location     Type
  2620 ;;  NewRate         2    4[BANK0 ] enum E15419
  2621 ;; Auto vars:     Size  Location     Type
  2622 ;;  i               1    6[BANK0 ] unsigned char 
  2623 ;; Return value:  Size  Location     Type
  2624 ;;                  1    wreg      enum E15490
  2625 ;; Registers used:
  2626 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2627 ;; Tracked objects:
  2628 ;;		On entry : 0/0
  2629 ;;		On exit  : 0/0
  2630 ;;		Unchanged: 0/0
  2631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2632 ;;      Params:         0       2       0       0
  2633 ;;      Locals:         0       1       0       0
  2634 ;;      Temps:          0       0       0       0
  2635 ;;      Totals:         0       3       0       0
  2636 ;;Total ram usage:        3 bytes
  2637 ;; Hardware stack levels used:    1
  2638 ;; Hardware stack levels required when called:    7
  2639 ;; This function calls:
  2640 ;;		_ES_InitQueue
  2641 ;;		_ES_Timer_Init
  2642 ;;		_InitCan_XmitService
  2643 ;; This function is called by:
  2644 ;;		_main
  2645 ;; This function uses a non-reentrant model
  2646 ;;
  2647                           
  2648                           	psect	text17
  2649  0005AA                     __ptext17:
  2650                           	opt stack 0
  2651  0005AA                     _ES_Initialize:
  2652                           	opt stack 23
  2653                           
  2654                           ;ES_Framework.c: 243: uint8_t i;
  2655                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  2656                           
  2657                           ;incstack = 0
  2658  0005AA  C090  F018         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  2659  0005AE  C091  F019         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  2660  0005B2  ECCC  F006         	call	_ES_Timer_Init	;wreg free
  2661                           
  2662                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  2663  0005B6  0E00               	movlw	0
  2664  0005B8  0100               	movlb	0	; () banked
  2665  0005BA  6F92               	movwf	ES_Initialize@i& (0+255),b
  2666  0005BC                     l2302:
  2667                           
  2668                           ; BSR set to: 0
  2669  0005BC  0100               	movlb	0	; () banked
  2670  0005BE  5192               	movf	ES_Initialize@i& (0+255),w,b
  2671  0005C0  0100               	movlb	0	; () banked
  2672  0005C2  A4D8               	btfss	status,2,c
  2673  0005C4  D066               	goto	l2326
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  2677                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  2678                           
  2679                           ; BSR set to: 0
  2680                           
  2681                           ; BSR set to: 0
  2682  0005C6  0100               	movlb	0	; () banked
  2683  0005C8  5192               	movf	ES_Initialize@i& (0+255),w,b
  2684  0005CA  0D04               	mullw	4
  2685  0005CC  0E50               	movlw	low _ServDescList
  2686  0005CE  24F3               	addwf	prodl,w,c
  2687  0005D0  6EF6               	movwf	tblptrl,c
  2688  0005D2  0E03               	movlw	high _ServDescList
  2689  0005D4  20F4               	addwfc	prodh,w,c
  2690  0005D6  6EF7               	movwf	tblptrh,c
  2691  0005D8                     	if	0	;There are less than 3 active tblptr bytes
  2692  0005D8                     	endif
  2693  0005D8  0009               	tblrd		*+
  2694  0005DA  50F5               	movf	tablat,w,c
  2695  0005DC  0009               	tblrd		*+
  2696  0005DE  10F5               	iorwf	tablat,w,c
  2697  0005E0  B4D8               	btfsc	status,2,c
  2698  0005E2  D013               	goto	l2310
  2699                           
  2700                           ; BSR set to: 0
  2701  0005E4  0100               	movlb	0	; () banked
  2702  0005E6  5192               	movf	ES_Initialize@i& (0+255),w,b
  2703  0005E8  0D04               	mullw	4
  2704  0005EA  0E02               	movlw	2
  2705  0005EC  26F3               	addwf	prodl,f,c
  2706  0005EE  0E00               	movlw	0
  2707  0005F0  22F4               	addwfc	prodh,f,c
  2708  0005F2  0E50               	movlw	low _ServDescList
  2709  0005F4  24F3               	addwf	prodl,w,c
  2710  0005F6  6EF6               	movwf	tblptrl,c
  2711  0005F8  0E03               	movlw	high _ServDescList
  2712  0005FA  20F4               	addwfc	prodh,w,c
  2713  0005FC  6EF7               	movwf	tblptrh,c
  2714  0005FE                     	if	0	;There are less than 3 active tblptr bytes
  2715  0005FE                     	endif
  2716  0005FE  0009               	tblrd		*+
  2717  000600  50F5               	movf	tablat,w,c
  2718  000602  0009               	tblrd		*+
  2719  000604  10F5               	iorwf	tablat,w,c
  2720  000606  A4D8               	btfss	status,2,c
  2721  000608  D002               	goto	l2314
  2722  00060A                     l2310:
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;ES_Framework.c: 249: return FailedPointer;
  2726  00060A  0E03               	movlw	3
  2727                           
  2728                           ; BSR set to: 0
  2729  00060C  0012               	return	
  2730  00060E                     l2314:
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  2734  00060E  0100               	movlb	0	; () banked
  2735  000610  5192               	movf	ES_Initialize@i& (0+255),w,b
  2736  000612  0D03               	mullw	3
  2737  000614  0E54               	movlw	low _EventQueues
  2738  000616  24F3               	addwf	prodl,w,c
  2739  000618  6EF6               	movwf	tblptrl,c
  2740  00061A  0E03               	movlw	high _EventQueues
  2741  00061C  20F4               	addwfc	prodh,w,c
  2742  00061E  6EF7               	movwf	tblptrh,c
  2743  000620                     	if	0	;There are less than 3 active tblptr bytes
  2744  000620                     	endif
  2745  000620  0009               	tblrd		*+
  2746  000622  CFF5 F016          	movff	tablat,ES_InitQueue@pBlock
  2747  000626  000A               	tblrd		*-
  2748  000628  CFF5 F017          	movff	tablat,ES_InitQueue@pBlock+1
  2749  00062C  0100               	movlb	0	; () banked
  2750  00062E  5192               	movf	ES_Initialize@i& (0+255),w,b
  2751  000630  0D03               	mullw	3
  2752  000632  0E02               	movlw	2
  2753  000634  26F3               	addwf	prodl,f,c
  2754  000636  0E00               	movlw	0
  2755  000638  22F4               	addwfc	prodh,f,c
  2756  00063A  0E54               	movlw	low _EventQueues
  2757  00063C  24F3               	addwf	prodl,w,c
  2758  00063E  6EF6               	movwf	tblptrl,c
  2759  000640  0E03               	movlw	high _EventQueues
  2760  000642  20F4               	addwfc	prodh,w,c
  2761  000644  6EF7               	movwf	tblptrh,c
  2762  000646                     	if	0	;There are less than 3 active tblptr bytes
  2763  000646                     	endif
  2764  000646  0008               	tblrd		*
  2765  000648  CFF5 F018          	movff	tablat,ES_InitQueue@BlockSize
  2766  00064C  ECF3  F005         	call	_ES_InitQueue	;wreg free
  2767                           
  2768                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  2769  000650  0100               	movlb	0	; () banked
  2770  000652  5192               	movf	ES_Initialize@i& (0+255),w,b
  2771  000654  0D04               	mullw	4
  2772  000656  0E50               	movlw	low _ServDescList
  2773  000658  24F3               	addwf	prodl,w,c
  2774  00065A  6EF6               	movwf	tblptrl,c
  2775  00065C  0E03               	movlw	high _ServDescList
  2776  00065E  20F4               	addwfc	prodh,w,c
  2777  000660  6EF7               	movwf	tblptrh,c
  2778  000662                     	if	0	;There are less than 3 active tblptr bytes
  2779  000662                     	endif
  2780  000662  D801               	call	u1638
  2781  000664  D00E               	goto	u1639
  2782  000666                     u1638:
  2783  000666  0005               	push	
  2784  000668  6EFA               	movwf	pclath,c
  2785  00066A  0009               	tblrd		*+
  2786  00066C  50F5               	movf	tablat,w,c
  2787  00066E  6EFD               	movwf	tosl,c
  2788  000670  0009               	tblrd		*+
  2789  000672  50F5               	movf	tablat,w,c
  2790  000674  6EFE               	movwf	tosh,c
  2791  000676  50F8               	movf	tblptru,w,c
  2792  000678  6EFF               	movwf	tosu,c
  2793  00067A  50FA               	movf	pclath,w,c
  2794  00067C  0100               	movlb	0	; () banked
  2795  00067E  5192               	movf	ES_Initialize@i& (0+255),w,b
  2796  000680  0012               	return		;indir
  2797  000682                     u1639:
  2798  000682  06E8               	decf	wreg,f,c
  2799  000684  B4D8               	btfsc	status,2,c
  2800  000686  D002               	goto	l2322
  2801                           
  2802                           ;ES_Framework.c: 254: return FailedInit;
  2803  000688  0E05               	movlw	5
  2804  00068A  0012               	return	
  2805  00068C                     l2322:
  2806  00068C  0100               	movlb	0	; () banked
  2807  00068E  2B92               	incf	ES_Initialize@i& (0+255),f,b
  2808  000690  D795               	goto	l2302
  2809  000692                     l2326:
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;ES_Framework.c: 255: }
  2813                           ;ES_Framework.c: 256: return Success;
  2814  000692  0E00               	movlw	0
  2815  000694  0012               	return	
  2816  000696                     __end_of_ES_Initialize:
  2817                           	opt stack 0
  2818                           tosu	equ	0xFFF
  2819                           tosh	equ	0xFFE
  2820                           tosl	equ	0xFFD
  2821                           pclath	equ	0xFFA
  2822                           tblptru	equ	0xFF8
  2823                           tblptrh	equ	0xFF7
  2824                           tblptrl	equ	0xFF6
  2825                           tablat	equ	0xFF5
  2826                           prodh	equ	0xFF4
  2827                           prodl	equ	0xFF3
  2828                           intcon	equ	0xFF2
  2829                           postinc0	equ	0xFEE
  2830                           wreg	equ	0xFE8
  2831                           indf1	equ	0xFE7
  2832                           postinc1	equ	0xFE6
  2833                           fsr1h	equ	0xFE2
  2834                           fsr1l	equ	0xFE1
  2835                           indf2	equ	0xFDF
  2836                           postinc2	equ	0xFDE
  2837                           postdec2	equ	0xFDD
  2838                           fsr2h	equ	0xFDA
  2839                           fsr2l	equ	0xFD9
  2840                           status	equ	0xFD8
  2841                           
  2842 ;; *************** function _InitCan_XmitService *****************
  2843 ;; Defined at:
  2844 ;;		line 78 in file "Can_XmitService.c"
  2845 ;; Parameters:    Size  Location     Type
  2846 ;;  Priority        1    wreg     unsigned char 
  2847 ;; Auto vars:     Size  Location     Type
  2848 ;;  Priority        1    3[BANK0 ] unsigned char 
  2849 ;;  ThisEvent       3    0[BANK0 ] struct ES_Event_t
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  1    wreg      unsigned char 
  2852 ;; Registers used:
  2853 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2859 ;;      Params:         0       0       0       0
  2860 ;;      Locals:         0       4       0       0
  2861 ;;      Temps:          0       0       0       0
  2862 ;;      Totals:         0       4       0       0
  2863 ;;Total ram usage:        4 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    6
  2866 ;; This function calls:
  2867 ;;		_ES_PostToService
  2868 ;; This function is called by:
  2869 ;;		_ES_Initialize
  2870 ;; This function uses a non-reentrant model
  2871 ;;
  2872                           
  2873                           	psect	text18
  2874  000C1C                     __ptext18:
  2875                           	opt stack 0
  2876  000C1C                     _InitCan_XmitService:
  2877                           	opt stack 23
  2878                           
  2879                           ;incstack = 0
  2880                           ;InitCan_XmitService@Priority stored from wreg
  2881  000C1C  0100               	movlb	0	; () banked
  2882  000C1E  6F8F               	movwf	InitCan_XmitService@Priority& (0+255),b
  2883                           
  2884                           ;Can_XmitService.c: 80: ES_Event ThisEvent;
  2885                           ;Can_XmitService.c: 82: MyPriority = Priority;
  2886  000C20  C08F  F045         	movff	InitCan_XmitService@Priority,_MyPriority
  2887                           
  2888                           ;Can_XmitService.c: 85: ThisEvent.EventType = ES_INIT;
  2889  000C24  0E02               	movlw	2
  2890  000C26  0100               	movlb	0	; () banked
  2891  000C28  6F8C               	movwf	InitCan_XmitService@ThisEvent& (0+255),b
  2892                           
  2893                           ; BSR set to: 0
  2894                           ;Can_XmitService.c: 86: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  2895  000C2A  C08C  F02D         	movff	InitCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  2896  000C2E  C08D  F02E         	movff	InitCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  2897  000C32  C08E  F02F         	movff	InitCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  2898  000C36  5045               	movf	_MyPriority,w,c
  2899  000C38  EC56  F005         	call	_ES_PostToService
  2900  000C3C  06E8               	decf	wreg,f,c
  2901  000C3E  A4D8               	btfss	status,2,c
  2902  000C40  D002               	goto	l2278
  2903                           
  2904                           ;Can_XmitService.c: 87: {
  2905                           ;Can_XmitService.c: 88: return 1;
  2906  000C42  0E01               	movlw	1
  2907                           
  2908                           ;Can_XmitService.c: 89: }else
  2909  000C44  0012               	return	
  2910  000C46                     l2278:
  2911                           
  2912                           ;Can_XmitService.c: 90: {
  2913                           ;Can_XmitService.c: 91: return 0;
  2914  000C46  0E00               	movlw	0
  2915  000C48  0012               	return	
  2916  000C4A                     __end_of_InitCan_XmitService:
  2917                           	opt stack 0
  2918                           tosu	equ	0xFFF
  2919                           tosh	equ	0xFFE
  2920                           tosl	equ	0xFFD
  2921                           pclath	equ	0xFFA
  2922                           tblptru	equ	0xFF8
  2923                           tblptrh	equ	0xFF7
  2924                           tblptrl	equ	0xFF6
  2925                           tablat	equ	0xFF5
  2926                           prodh	equ	0xFF4
  2927                           prodl	equ	0xFF3
  2928                           intcon	equ	0xFF2
  2929                           postinc0	equ	0xFEE
  2930                           wreg	equ	0xFE8
  2931                           indf1	equ	0xFE7
  2932                           postinc1	equ	0xFE6
  2933                           fsr1h	equ	0xFE2
  2934                           fsr1l	equ	0xFE1
  2935                           indf2	equ	0xFDF
  2936                           postinc2	equ	0xFDE
  2937                           postdec2	equ	0xFDD
  2938                           fsr2h	equ	0xFDA
  2939                           fsr2l	equ	0xFD9
  2940                           status	equ	0xFD8
  2941                           
  2942 ;; *************** function _ES_PostToService *****************
  2943 ;; Defined at:
  2944 ;;		line 351 in file "ES_Framework.c"
  2945 ;; Parameters:    Size  Location     Type
  2946 ;;  WhichService    1    wreg     unsigned char 
  2947 ;;  TheEvent        3   44[COMRAM] struct ES_Event_t
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;  WhichService    1   49[COMRAM] unsigned char 
  2950 ;; Return value:  Size  Location     Type
  2951 ;;                  1    wreg      unsigned char 
  2952 ;; Registers used:
  2953 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2954 ;; Tracked objects:
  2955 ;;		On entry : 0/0
  2956 ;;		On exit  : 0/0
  2957 ;;		Unchanged: 0/0
  2958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2959 ;;      Params:         3       0       0       0
  2960 ;;      Locals:         1       0       0       0
  2961 ;;      Temps:          2       0       0       0
  2962 ;;      Totals:         6       0       0       0
  2963 ;;Total ram usage:        6 bytes
  2964 ;; Hardware stack levels used:    1
  2965 ;; Hardware stack levels required when called:    5
  2966 ;; This function calls:
  2967 ;;		_ES_EnQueueFIFO
  2968 ;; This function is called by:
  2969 ;;		_InitCan_XmitService
  2970 ;;		_PostCan_XmitService
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           	psect	text19
  2975  000AAC                     __ptext19:
  2976                           	opt stack 0
  2977  000AAC                     _ES_PostToService:
  2978                           	opt stack 21
  2979                           
  2980                           ;incstack = 0
  2981                           ;ES_PostToService@WhichService stored from wreg
  2982  000AAC  6E32               	movwf	ES_PostToService@WhichService,c
  2983                           
  2984                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  2985                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  2986                           ;ES_Framework.c: 354: 1 )){
  2987  000AAE  5032               	movf	ES_PostToService@WhichService,w,c
  2988  000AB0  A4D8               	btfss	status,2,c
  2989  000AB2  D02D               	goto	l2074
  2990  000AB4  5032               	movf	ES_PostToService@WhichService,w,c
  2991  000AB6  0D03               	mullw	3
  2992  000AB8  0E54               	movlw	low _EventQueues
  2993  000ABA  24F3               	addwf	prodl,w,c
  2994  000ABC  6EF6               	movwf	tblptrl,c
  2995  000ABE  0E03               	movlw	high _EventQueues
  2996  000AC0  20F4               	addwfc	prodh,w,c
  2997  000AC2  6EF7               	movwf	tblptrh,c
  2998  000AC4                     	if	0	;There are less than 3 active tblptr bytes
  2999  000AC4                     	endif
  3000  000AC4  0009               	tblrd		*+
  3001  000AC6  CFF5 F022          	movff	tablat,ES_EnQueueFIFO@pBlock
  3002  000ACA  000A               	tblrd		*-
  3003  000ACC  CFF5 F023          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  3004  000AD0  C02D  F024         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  3005  000AD4  C02E  F025         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  3006  000AD8  C02F  F026         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  3007  000ADC  ECBF  F003         	call	_ES_EnQueueFIFO	;wreg free
  3008  000AE0  06E8               	decf	wreg,f,c
  3009  000AE2  A4D8               	btfss	status,2,c
  3010  000AE4  D014               	goto	l2074
  3011                           
  3012                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  3013  000AE6  5032               	movf	ES_PostToService@WhichService,w,c
  3014  000AE8  0D02               	mullw	2
  3015  000AEA  0E01               	movlw	low _BitNum2SetMask
  3016  000AEC  24F3               	addwf	prodl,w,c
  3017  000AEE  6EF6               	movwf	tblptrl,c
  3018  000AF0  0E03               	movlw	high _BitNum2SetMask
  3019  000AF2  20F4               	addwfc	prodh,w,c
  3020  000AF4  6EF7               	movwf	tblptrh,c
  3021  000AF6                     	if	0	;There are less than 3 active tblptr bytes
  3022  000AF6                     	endif
  3023  000AF6  0009               	tblrd		*+
  3024  000AF8  CFF5 F030          	movff	tablat,??_ES_PostToService
  3025  000AFC  0009               	tblrd		*+
  3026  000AFE  CFF5 F031          	movff	tablat,??_ES_PostToService+1
  3027  000B02  5030               	movf	??_ES_PostToService,w,c
  3028  000B04  123C               	iorwf	_Ready,f,c
  3029  000B06  5031               	movf	??_ES_PostToService+1,w,c
  3030  000B08  123D               	iorwf	_Ready+1,f,c
  3031                           
  3032                           ;ES_Framework.c: 356: return 1;
  3033  000B0A  0E01               	movlw	1
  3034                           
  3035                           ;ES_Framework.c: 357: } else
  3036  000B0C  0012               	return	
  3037  000B0E                     l2074:
  3038                           
  3039                           ;ES_Framework.c: 358: return 0;
  3040  000B0E  0E00               	movlw	0
  3041  000B10  0012               	return	
  3042  000B12                     __end_of_ES_PostToService:
  3043                           	opt stack 0
  3044                           tosu	equ	0xFFF
  3045                           tosh	equ	0xFFE
  3046                           tosl	equ	0xFFD
  3047                           pclath	equ	0xFFA
  3048                           tblptru	equ	0xFF8
  3049                           tblptrh	equ	0xFF7
  3050                           tblptrl	equ	0xFF6
  3051                           tablat	equ	0xFF5
  3052                           prodh	equ	0xFF4
  3053                           prodl	equ	0xFF3
  3054                           intcon	equ	0xFF2
  3055                           postinc0	equ	0xFEE
  3056                           wreg	equ	0xFE8
  3057                           indf1	equ	0xFE7
  3058                           postinc1	equ	0xFE6
  3059                           fsr1h	equ	0xFE2
  3060                           fsr1l	equ	0xFE1
  3061                           indf2	equ	0xFDF
  3062                           postinc2	equ	0xFDE
  3063                           postdec2	equ	0xFDD
  3064                           fsr2h	equ	0xFDA
  3065                           fsr2l	equ	0xFD9
  3066                           status	equ	0xFD8
  3067                           
  3068 ;; *************** function _ES_EnQueueFIFO *****************
  3069 ;; Defined at:
  3070 ;;		line 85 in file "ES_Queue.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;  pBlock          2   33[COMRAM] PTR struct ES_Event_t
  3073 ;;		 -> Queue0(12), 
  3074 ;;  Event2Add       3   35[COMRAM] struct ES_Event_t
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;  pThisQueue      2   42[COMRAM] PTR struct .
  3077 ;;		 -> Queue0(12), 
  3078 ;;  SaveCrit        1   41[COMRAM] unsigned char 
  3079 ;; Return value:  Size  Location     Type
  3080 ;;                  1    wreg      unsigned char 
  3081 ;; Registers used:
  3082 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3088 ;;      Params:         5       0       0       0
  3089 ;;      Locals:         3       0       0       0
  3090 ;;      Temps:          3       0       0       0
  3091 ;;      Totals:        11       0       0       0
  3092 ;;Total ram usage:       11 bytes
  3093 ;; Hardware stack levels used:    1
  3094 ;; Hardware stack levels required when called:    4
  3095 ;; This function calls:
  3096 ;;		___awmod
  3097 ;;		___wmul
  3098 ;; This function is called by:
  3099 ;;		_ES_PostToService
  3100 ;;		_ES_PostAll
  3101 ;; This function uses a non-reentrant model
  3102 ;;
  3103                           
  3104                           	psect	text20
  3105  00077E                     __ptext20:
  3106                           	opt stack 0
  3107  00077E                     _ES_EnQueueFIFO:
  3108                           	opt stack 21
  3109                           
  3110                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  3111                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  3112                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  3113                           
  3114                           ;incstack = 0
  3115  00077E  C022  F02B         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  3116  000782  C023  F02C         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  3117                           
  3118                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  3119  000786  C02B  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3120  00078A  C02C  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3121  00078E  EE10 F002          	lfsr	1,2
  3122  000792  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3123  000794  26E1               	addwf	fsr1l,f,c
  3124  000796  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3125  000798  22E2               	addwfc	fsr1h,f,c
  3126  00079A  50DE               	movf	postinc2,w,c
  3127  00079C  5CE6               	subwf	postinc1,w,c
  3128  00079E  B0D8               	btfsc	status,0,c
  3129  0007A0  D046               	goto	l2058
  3130                           
  3131                           ;ES_Queue.c: 92: {
  3132                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  3133  0007A2  CFF2 F02A          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  3134  0007A6  9EF2               	bcf	intcon,7,c	;volatile
  3135                           
  3136                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  3137                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  3138  0007A8  C02B  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3139  0007AC  C02C  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3140  0007B0  50DF               	movf	indf2,w,c
  3141  0007B2  6E27               	movwf	??_ES_EnQueueFIFO& (0+255),c
  3142  0007B4  5027               	movf	??_ES_EnQueueFIFO,w,c
  3143  0007B6  6E18               	movwf	___awmod@divisor,c
  3144  0007B8  6A19               	clrf	___awmod@divisor+1,c
  3145  0007BA  EE20 F002          	lfsr	2,2
  3146  0007BE  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3147  0007C0  26D9               	addwf	fsr2l,f,c
  3148  0007C2  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3149  0007C4  22DA               	addwfc	fsr2h,f,c
  3150  0007C6  50DF               	movf	indf2,w,c
  3151  0007C8  6E28               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),c
  3152  0007CA  EE20 F001          	lfsr	2,1
  3153  0007CE  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3154  0007D0  26D9               	addwf	fsr2l,f,c
  3155  0007D2  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3156  0007D4  22DA               	addwfc	fsr2h,f,c
  3157  0007D6  50DF               	movf	indf2,w,c
  3158  0007D8  6E29               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),c
  3159  0007DA  5029               	movf	??_ES_EnQueueFIFO+2,w,c
  3160  0007DC  2428               	addwf	??_ES_EnQueueFIFO+1,w,c
  3161  0007DE  6E16               	movwf	___awmod@dividend,c
  3162  0007E0  6A17               	clrf	___awmod@dividend+1,c
  3163  0007E2  3617               	rlcf	___awmod@dividend+1,f,c
  3164  0007E4  ECE9  F004         	call	___awmod	;wreg free
  3165  0007E8  0E01               	movlw	1
  3166  0007EA  2416               	addwf	?___awmod,w,c
  3167  0007EC  6E1C               	movwf	___wmul@multiplier,c
  3168  0007EE  0E00               	movlw	0
  3169  0007F0  2017               	addwfc	?___awmod+1,w,c
  3170  0007F2  6E1D               	movwf	___wmul@multiplier+1,c
  3171  0007F4  0E00               	movlw	0
  3172  0007F6  6E1F               	movwf	___wmul@multiplicand+1,c
  3173  0007F8  0E03               	movlw	3
  3174  0007FA  6E1E               	movwf	___wmul@multiplicand,c
  3175  0007FC  EC75  F006         	call	___wmul	;wreg free
  3176  000800  501C               	movf	?___wmul,w,c
  3177  000802  2422               	addwf	ES_EnQueueFIFO@pBlock,w,c
  3178  000804  6ED9               	movwf	fsr2l,c
  3179  000806  501D               	movf	?___wmul+1,w,c
  3180  000808  2023               	addwfc	ES_EnQueueFIFO@pBlock+1,w,c
  3181  00080A  6EDA               	movwf	fsr2h,c
  3182  00080C  C024  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  3183  000810  C025  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  3184  000814  C026  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  3185                           
  3186                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  3187  000818  EE20 F002          	lfsr	2,2
  3188  00081C  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3189  00081E  26D9               	addwf	fsr2l,f,c
  3190  000820  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3191  000822  22DA               	addwfc	fsr2h,f,c
  3192  000824  2ADF               	incf	indf2,f,c
  3193                           
  3194                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  3195  000826  C02A  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  3196                           
  3197                           ;ES_Queue.c: 101: return(1);
  3198  00082A  0E01               	movlw	1
  3199                           
  3200                           ;ES_Queue.c: 102: }else
  3201  00082C  0012               	return	
  3202  00082E                     l2058:
  3203                           
  3204                           ;ES_Queue.c: 103: return(0);
  3205  00082E  0E00               	movlw	0
  3206  000830  0012               	return	
  3207  000832                     __end_of_ES_EnQueueFIFO:
  3208                           	opt stack 0
  3209                           tosu	equ	0xFFF
  3210                           tosh	equ	0xFFE
  3211                           tosl	equ	0xFFD
  3212                           pclath	equ	0xFFA
  3213                           tblptru	equ	0xFF8
  3214                           tblptrh	equ	0xFF7
  3215                           tblptrl	equ	0xFF6
  3216                           tablat	equ	0xFF5
  3217                           prodh	equ	0xFF4
  3218                           prodl	equ	0xFF3
  3219                           intcon	equ	0xFF2
  3220                           postinc0	equ	0xFEE
  3221                           wreg	equ	0xFE8
  3222                           indf1	equ	0xFE7
  3223                           postinc1	equ	0xFE6
  3224                           fsr1h	equ	0xFE2
  3225                           fsr1l	equ	0xFE1
  3226                           indf2	equ	0xFDF
  3227                           postinc2	equ	0xFDE
  3228                           postdec2	equ	0xFDD
  3229                           fsr2h	equ	0xFDA
  3230                           fsr2l	equ	0xFD9
  3231                           status	equ	0xFD8
  3232                           
  3233 ;; *************** function ___wmul *****************
  3234 ;; Defined at:
  3235 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;  multiplier      2   27[COMRAM] unsigned int 
  3238 ;;  multiplicand    2   29[COMRAM] unsigned int 
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;  product         2   31[COMRAM] unsigned int 
  3241 ;; Return value:  Size  Location     Type
  3242 ;;                  2   27[COMRAM] unsigned int 
  3243 ;; Registers used:
  3244 ;;		wreg, status,2, status,0, prodl, prodh
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3250 ;;      Params:         4       0       0       0
  3251 ;;      Locals:         2       0       0       0
  3252 ;;      Temps:          0       0       0       0
  3253 ;;      Totals:         6       0       0       0
  3254 ;;Total ram usage:        6 bytes
  3255 ;; Hardware stack levels used:    1
  3256 ;; Hardware stack levels required when called:    3
  3257 ;; This function calls:
  3258 ;;		Nothing
  3259 ;; This function is called by:
  3260 ;;		_ES_EnQueueFIFO
  3261 ;;		_ES_DeQueue
  3262 ;;		_ES_EnQueueLIFO
  3263 ;; This function uses a non-reentrant model
  3264 ;;
  3265                           
  3266                           	psect	text21
  3267  000CEA                     __ptext21:
  3268                           	opt stack 0
  3269  000CEA                     ___wmul:
  3270                           	opt stack 21
  3271                           
  3272                           ;incstack = 0
  3273  000CEA  501C               	movf	___wmul@multiplier,w,c
  3274  000CEC  021E               	mulwf	___wmul@multiplicand,c
  3275  000CEE  CFF3 F020          	movff	prodl,___wmul@product
  3276  000CF2  CFF4 F021          	movff	prodh,___wmul@product+1
  3277  000CF6  501C               	movf	___wmul@multiplier,w,c
  3278  000CF8  021F               	mulwf	___wmul@multiplicand+1,c
  3279  000CFA  50F3               	movf	prodl,w,c
  3280  000CFC  2621               	addwf	___wmul@product+1,f,c
  3281  000CFE  501D               	movf	___wmul@multiplier+1,w,c
  3282  000D00  021E               	mulwf	___wmul@multiplicand,c
  3283  000D02  50F3               	movf	prodl,w,c
  3284  000D04  2621               	addwf	___wmul@product+1,f,c
  3285  000D06  C020  F01C         	movff	___wmul@product,?___wmul
  3286  000D0A  C021  F01D         	movff	___wmul@product+1,?___wmul+1
  3287  000D0E  0012               	return	
  3288  000D10                     __end_of___wmul:
  3289                           	opt stack 0
  3290                           tosu	equ	0xFFF
  3291                           tosh	equ	0xFFE
  3292                           tosl	equ	0xFFD
  3293                           pclath	equ	0xFFA
  3294                           tblptru	equ	0xFF8
  3295                           tblptrh	equ	0xFF7
  3296                           tblptrl	equ	0xFF6
  3297                           tablat	equ	0xFF5
  3298                           prodh	equ	0xFF4
  3299                           prodl	equ	0xFF3
  3300                           intcon	equ	0xFF2
  3301                           postinc0	equ	0xFEE
  3302                           wreg	equ	0xFE8
  3303                           indf1	equ	0xFE7
  3304                           postinc1	equ	0xFE6
  3305                           fsr1h	equ	0xFE2
  3306                           fsr1l	equ	0xFE1
  3307                           indf2	equ	0xFDF
  3308                           postinc2	equ	0xFDE
  3309                           postdec2	equ	0xFDD
  3310                           fsr2h	equ	0xFDA
  3311                           fsr2l	equ	0xFD9
  3312                           status	equ	0xFD8
  3313                           
  3314 ;; *************** function ___awmod *****************
  3315 ;; Defined at:
  3316 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;  dividend        2   21[COMRAM] int 
  3319 ;;  divisor         2   23[COMRAM] int 
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;  sign            1   26[COMRAM] unsigned char 
  3322 ;;  counter         1   25[COMRAM] unsigned char 
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  2   21[COMRAM] int 
  3325 ;; Registers used:
  3326 ;;		wreg, status,2, status,0
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3332 ;;      Params:         4       0       0       0
  3333 ;;      Locals:         2       0       0       0
  3334 ;;      Temps:          0       0       0       0
  3335 ;;      Totals:         6       0       0       0
  3336 ;;Total ram usage:        6 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    3
  3339 ;; This function calls:
  3340 ;;		Nothing
  3341 ;; This function is called by:
  3342 ;;		_ES_EnQueueFIFO
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346                           	psect	text22
  3347  0009D2                     __ptext22:
  3348                           	opt stack 0
  3349  0009D2                     ___awmod:
  3350                           	opt stack 21
  3351                           
  3352                           ;incstack = 0
  3353  0009D2  0E00               	movlw	0
  3354  0009D4  6E1B               	movwf	___awmod@sign,c
  3355  0009D6  AE17               	btfss	___awmod@dividend+1,7,c
  3356  0009D8  D006               	goto	l2014
  3357  0009DA  6C16               	negf	___awmod@dividend,c
  3358  0009DC  1E17               	comf	___awmod@dividend+1,f,c
  3359  0009DE  B0D8               	btfsc	status,0,c
  3360  0009E0  2A17               	incf	___awmod@dividend+1,f,c
  3361  0009E2  0E01               	movlw	1
  3362  0009E4  6E1B               	movwf	___awmod@sign,c
  3363  0009E6                     l2014:
  3364  0009E6  AE19               	btfss	___awmod@divisor+1,7,c
  3365  0009E8  D004               	goto	l2018
  3366  0009EA  6C18               	negf	___awmod@divisor,c
  3367  0009EC  1E19               	comf	___awmod@divisor+1,f,c
  3368  0009EE  B0D8               	btfsc	status,0,c
  3369  0009F0  2A19               	incf	___awmod@divisor+1,f,c
  3370  0009F2                     l2018:
  3371  0009F2  5018               	movf	___awmod@divisor,w,c
  3372  0009F4  1019               	iorwf	___awmod@divisor+1,w,c
  3373  0009F6  B4D8               	btfsc	status,2,c
  3374  0009F8  D018               	goto	l2034
  3375  0009FA  0E01               	movlw	1
  3376  0009FC  6E1A               	movwf	___awmod@counter,c
  3377  0009FE  D004               	goto	l2024
  3378  000A00                     l2022:
  3379  000A00  90D8               	bcf	status,0,c
  3380  000A02  3618               	rlcf	___awmod@divisor,f,c
  3381  000A04  3619               	rlcf	___awmod@divisor+1,f,c
  3382  000A06  2A1A               	incf	___awmod@counter,f,c
  3383  000A08                     l2024:
  3384  000A08  AE19               	btfss	___awmod@divisor+1,7,c
  3385  000A0A  D7FA               	goto	l2022
  3386  000A0C                     l2026:
  3387  000A0C  5018               	movf	___awmod@divisor,w,c
  3388  000A0E  5C16               	subwf	___awmod@dividend,w,c
  3389  000A10  5019               	movf	___awmod@divisor+1,w,c
  3390  000A12  5817               	subwfb	___awmod@dividend+1,w,c
  3391  000A14  A0D8               	btfss	status,0,c
  3392  000A16  D004               	goto	l2030
  3393  000A18  5018               	movf	___awmod@divisor,w,c
  3394  000A1A  5E16               	subwf	___awmod@dividend,f,c
  3395  000A1C  5019               	movf	___awmod@divisor+1,w,c
  3396  000A1E  5A17               	subwfb	___awmod@dividend+1,f,c
  3397  000A20                     l2030:
  3398  000A20  90D8               	bcf	status,0,c
  3399  000A22  3219               	rrcf	___awmod@divisor+1,f,c
  3400  000A24  3218               	rrcf	___awmod@divisor,f,c
  3401  000A26  2E1A               	decfsz	___awmod@counter,f,c
  3402  000A28  D7F1               	goto	l2026
  3403  000A2A                     l2034:
  3404  000A2A  501B               	movf	___awmod@sign,w,c
  3405  000A2C  B4D8               	btfsc	status,2,c
  3406  000A2E  D004               	goto	l2038
  3407  000A30  6C16               	negf	___awmod@dividend,c
  3408  000A32  1E17               	comf	___awmod@dividend+1,f,c
  3409  000A34  B0D8               	btfsc	status,0,c
  3410  000A36  2A17               	incf	___awmod@dividend+1,f,c
  3411  000A38                     l2038:
  3412  000A38  C016  F016         	movff	___awmod@dividend,?___awmod
  3413  000A3C  C017  F017         	movff	___awmod@dividend+1,?___awmod+1
  3414  000A40  0012               	return	
  3415  000A42                     __end_of___awmod:
  3416                           	opt stack 0
  3417                           tosu	equ	0xFFF
  3418                           tosh	equ	0xFFE
  3419                           tosl	equ	0xFFD
  3420                           pclath	equ	0xFFA
  3421                           tblptru	equ	0xFF8
  3422                           tblptrh	equ	0xFF7
  3423                           tblptrl	equ	0xFF6
  3424                           tablat	equ	0xFF5
  3425                           prodh	equ	0xFF4
  3426                           prodl	equ	0xFF3
  3427                           intcon	equ	0xFF2
  3428                           postinc0	equ	0xFEE
  3429                           wreg	equ	0xFE8
  3430                           indf1	equ	0xFE7
  3431                           postinc1	equ	0xFE6
  3432                           fsr1h	equ	0xFE2
  3433                           fsr1l	equ	0xFE1
  3434                           indf2	equ	0xFDF
  3435                           postinc2	equ	0xFDE
  3436                           postdec2	equ	0xFDD
  3437                           fsr2h	equ	0xFDA
  3438                           fsr2l	equ	0xFD9
  3439                           status	equ	0xFD8
  3440                           
  3441 ;; *************** function _ES_Timer_Init *****************
  3442 ;; Defined at:
  3443 ;;		line 130 in file "ES_Timers.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;  Rate            2   23[COMRAM] enum E15419
  3446 ;; Auto vars:     Size  Location     Type
  3447 ;;		None
  3448 ;; Return value:  Size  Location     Type
  3449 ;;                  1    wreg      void 
  3450 ;; Registers used:
  3451 ;;		wreg, status,2, cstack
  3452 ;; Tracked objects:
  3453 ;;		On entry : 0/0
  3454 ;;		On exit  : 0/0
  3455 ;;		Unchanged: 0/0
  3456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3457 ;;      Params:         2       0       0       0
  3458 ;;      Locals:         0       0       0       0
  3459 ;;      Temps:          0       0       0       0
  3460 ;;      Totals:         2       0       0       0
  3461 ;;Total ram usage:        2 bytes
  3462 ;; Hardware stack levels used:    1
  3463 ;; Hardware stack levels required when called:    4
  3464 ;; This function calls:
  3465 ;;		__HW_Timer_Init
  3466 ;; This function is called by:
  3467 ;;		_ES_Initialize
  3468 ;; This function uses a non-reentrant model
  3469 ;;
  3470                           
  3471                           	psect	text23
  3472  000D98                     __ptext23:
  3473                           	opt stack 0
  3474  000D98                     _ES_Timer_Init:
  3475                           	opt stack 25
  3476                           
  3477                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  3478                           
  3479                           ;incstack = 0
  3480  000D98  C018  F016         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  3481  000D9C  C019  F017         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  3482  000DA0  EC99  F006         	call	__HW_Timer_Init	;wreg free
  3483  000DA4  0012               	return		;funcret
  3484  000DA6                     __end_of_ES_Timer_Init:
  3485                           	opt stack 0
  3486                           tosu	equ	0xFFF
  3487                           tosh	equ	0xFFE
  3488                           tosl	equ	0xFFD
  3489                           pclath	equ	0xFFA
  3490                           tblptru	equ	0xFF8
  3491                           tblptrh	equ	0xFF7
  3492                           tblptrl	equ	0xFF6
  3493                           tablat	equ	0xFF5
  3494                           prodh	equ	0xFF4
  3495                           prodl	equ	0xFF3
  3496                           intcon	equ	0xFF2
  3497                           postinc0	equ	0xFEE
  3498                           wreg	equ	0xFE8
  3499                           indf1	equ	0xFE7
  3500                           postinc1	equ	0xFE6
  3501                           fsr1h	equ	0xFE2
  3502                           fsr1l	equ	0xFE1
  3503                           indf2	equ	0xFDF
  3504                           postinc2	equ	0xFDE
  3505                           postdec2	equ	0xFDD
  3506                           fsr2h	equ	0xFDA
  3507                           fsr2l	equ	0xFD9
  3508                           status	equ	0xFD8
  3509                           
  3510 ;; *************** function __HW_Timer_Init *****************
  3511 ;; Defined at:
  3512 ;;		line 72 in file "ES_Port.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;  Rate            2   21[COMRAM] enum E15412
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;		None
  3517 ;; Return value:  Size  Location     Type
  3518 ;;                  1    wreg      void 
  3519 ;; Registers used:
  3520 ;;		wreg, status,2
  3521 ;; Tracked objects:
  3522 ;;		On entry : 0/0
  3523 ;;		On exit  : 0/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3526 ;;      Params:         2       0       0       0
  3527 ;;      Locals:         0       0       0       0
  3528 ;;      Temps:          0       0       0       0
  3529 ;;      Totals:         2       0       0       0
  3530 ;;Total ram usage:        2 bytes
  3531 ;; Hardware stack levels used:    1
  3532 ;; Hardware stack levels required when called:    3
  3533 ;; This function calls:
  3534 ;;		Nothing
  3535 ;; This function is called by:
  3536 ;;		_ES_Timer_Init
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text24
  3541  000D32                     __ptext24:
  3542                           	opt stack 0
  3543  000D32                     __HW_Timer_Init:
  3544                           	opt stack 25
  3545                           
  3546                           ;ES_Port.c: 80: PIE1 = 0b00000100;
  3547                           
  3548                           ;incstack = 0
  3549  000D32  0E04               	movlw	4
  3550  000D34  6E9D               	movwf	3997,c	;volatile
  3551                           
  3552                           ;ES_Port.c: 85: INTCON = 0b01000000;
  3553  000D36  0E40               	movlw	64
  3554  000D38  6EF2               	movwf	intcon,c	;volatile
  3555                           
  3556                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
  3557  000D3A  0E0A               	movlw	10
  3558  000D3C  6EBD               	movwf	4029,c	;volatile
  3559                           
  3560                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
  3561  000D3E  0E01               	movlw	1
  3562  000D40  6EBE               	movwf	4030,c	;volatile
  3563                           
  3564                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
  3565  000D42  0E00               	movlw	0
  3566  000D44  6EBF               	movwf	4031,c	;volatile
  3567                           
  3568                           ;ES_Port.c: 107: T1CON = 0b00100001;
  3569  000D46  0E21               	movlw	33
  3570  000D48  6ECD               	movwf	4045,c	;volatile
  3571                           
  3572                           ;ES_Port.c: 109: {GIE = 1;};
  3573  000D4A  8EF2               	bsf	intcon,7,c	;volatile
  3574  000D4C  0012               	return		;funcret
  3575  000D4E                     __end_of__HW_Timer_Init:
  3576                           	opt stack 0
  3577                           tosu	equ	0xFFF
  3578                           tosh	equ	0xFFE
  3579                           tosl	equ	0xFFD
  3580                           pclath	equ	0xFFA
  3581                           tblptru	equ	0xFF8
  3582                           tblptrh	equ	0xFF7
  3583                           tblptrl	equ	0xFF6
  3584                           tablat	equ	0xFF5
  3585                           prodh	equ	0xFF4
  3586                           prodl	equ	0xFF3
  3587                           intcon	equ	0xFF2
  3588                           postinc0	equ	0xFEE
  3589                           wreg	equ	0xFE8
  3590                           indf1	equ	0xFE7
  3591                           postinc1	equ	0xFE6
  3592                           fsr1h	equ	0xFE2
  3593                           fsr1l	equ	0xFE1
  3594                           indf2	equ	0xFDF
  3595                           postinc2	equ	0xFDE
  3596                           postdec2	equ	0xFDD
  3597                           fsr2h	equ	0xFDA
  3598                           fsr2l	equ	0xFD9
  3599                           status	equ	0xFD8
  3600                           
  3601 ;; *************** function _ES_InitQueue *****************
  3602 ;; Defined at:
  3603 ;;		line 58 in file "ES_Queue.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;  pBlock          2   21[COMRAM] PTR struct ES_Event_t
  3606 ;;		 -> Queue0(12), 
  3607 ;;  BlockSize       1   23[COMRAM] unsigned char 
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;  pThisQueue      2   24[COMRAM] PTR struct .
  3610 ;;		 -> Queue0(12), 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  1    wreg      unsigned char 
  3613 ;; Registers used:
  3614 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3620 ;;      Params:         3       0       0       0
  3621 ;;      Locals:         2       0       0       0
  3622 ;;      Temps:          0       0       0       0
  3623 ;;      Totals:         5       0       0       0
  3624 ;;Total ram usage:        5 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    3
  3627 ;; This function calls:
  3628 ;;		Nothing
  3629 ;; This function is called by:
  3630 ;;		_ES_Initialize
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text25
  3635  000BE6                     __ptext25:
  3636                           	opt stack 0
  3637  000BE6                     _ES_InitQueue:
  3638                           	opt stack 26
  3639                           
  3640                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  3641                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  3642                           
  3643                           ;incstack = 0
  3644  000BE6  C016  F019         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  3645  000BEA  C017  F01A         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  3646                           
  3647                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  3648  000BEE  0418               	decf	ES_InitQueue@BlockSize,w,c
  3649  000BF0  C019  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  3650  000BF4  C01A  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  3651  000BF8  6EDF               	movwf	indf2,c
  3652                           
  3653                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  3654  000BFA  EE20 F001          	lfsr	2,1
  3655  000BFE  5019               	movf	ES_InitQueue@pThisQueue,w,c
  3656  000C00  26D9               	addwf	fsr2l,f,c
  3657  000C02  501A               	movf	ES_InitQueue@pThisQueue+1,w,c
  3658  000C04  22DA               	addwfc	fsr2h,f,c
  3659  000C06  0E00               	movlw	0
  3660  000C08  6EDF               	movwf	indf2,c
  3661                           
  3662                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  3663  000C0A  EE20 F002          	lfsr	2,2
  3664  000C0E  5019               	movf	ES_InitQueue@pThisQueue,w,c
  3665  000C10  26D9               	addwf	fsr2l,f,c
  3666  000C12  501A               	movf	ES_InitQueue@pThisQueue+1,w,c
  3667  000C14  22DA               	addwfc	fsr2h,f,c
  3668  000C16  0E00               	movlw	0
  3669  000C18  6EDF               	movwf	indf2,c
  3670  000C1A  0012               	return	
  3671  000C1C                     __end_of_ES_InitQueue:
  3672                           	opt stack 0
  3673                           tosu	equ	0xFFF
  3674                           tosh	equ	0xFFE
  3675                           tosl	equ	0xFFD
  3676                           pclath	equ	0xFFA
  3677                           tblptru	equ	0xFF8
  3678                           tblptrh	equ	0xFF7
  3679                           tblptrl	equ	0xFF6
  3680                           tablat	equ	0xFF5
  3681                           prodh	equ	0xFF4
  3682                           prodl	equ	0xFF3
  3683                           intcon	equ	0xFF2
  3684                           postinc0	equ	0xFEE
  3685                           wreg	equ	0xFE8
  3686                           indf1	equ	0xFE7
  3687                           postinc1	equ	0xFE6
  3688                           fsr1h	equ	0xFE2
  3689                           fsr1l	equ	0xFE1
  3690                           indf2	equ	0xFDF
  3691                           postinc2	equ	0xFDE
  3692                           postdec2	equ	0xFDD
  3693                           fsr2h	equ	0xFDA
  3694                           fsr2l	equ	0xFD9
  3695                           status	equ	0xFD8
  3696                           
  3697 ;; *************** function _ISR *****************
  3698 ;; Defined at:
  3699 ;;		line 112 in file "ES_Port.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;		None
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;		None
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  1    wreg      void 
  3706 ;; Registers used:
  3707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3713 ;;      Params:         0       0       0       0
  3714 ;;      Locals:         0       0       0       0
  3715 ;;      Temps:         16       0       0       0
  3716 ;;      Totals:        16       0       0       0
  3717 ;;Total ram usage:       16 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; Hardware stack levels required when called:    2
  3720 ;; This function calls:
  3721 ;;		_CanRCVResponse
  3722 ;;		_CanXmitResponse
  3723 ;; This function is called by:
  3724 ;;		Interrupt level 2
  3725 ;; This function uses a non-reentrant model
  3726 ;;
  3727                           
  3728                           	psect	intcode
  3729  000008                     __pintcode:
  3730                           	opt stack 0
  3731  000008                     _ISR:
  3732                           	opt stack 21
  3733                           
  3734                           ;incstack = 0
  3735  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3736  00000A  CFFA F008          	movff	pclath,??_ISR+2
  3737  00000E  CFFB F009          	movff	pclatu,??_ISR+3
  3738  000012  ED19  F004         	call	int_func,f	;refresh shadow registers
  3739                           tosu	equ	0xFFF
  3740                           tosh	equ	0xFFE
  3741                           tosl	equ	0xFFD
  3742                           pclatu	equ	0xFFB
  3743                           pclath	equ	0xFFA
  3744                           tblptru	equ	0xFF8
  3745                           tblptrh	equ	0xFF7
  3746                           tblptrl	equ	0xFF6
  3747                           tablat	equ	0xFF5
  3748                           prodh	equ	0xFF4
  3749                           prodl	equ	0xFF3
  3750                           intcon	equ	0xFF2
  3751                           postinc0	equ	0xFEE
  3752                           wreg	equ	0xFE8
  3753                           indf1	equ	0xFE7
  3754                           postinc1	equ	0xFE6
  3755                           fsr1h	equ	0xFE2
  3756                           fsr1l	equ	0xFE1
  3757                           indf2	equ	0xFDF
  3758                           postinc2	equ	0xFDE
  3759                           postdec2	equ	0xFDD
  3760                           fsr2h	equ	0xFDA
  3761                           fsr2l	equ	0xFD9
  3762                           status	equ	0xFD8
  3763                           
  3764                           	psect	intcode_body
  3765  000832                     __pintcode_body:
  3766                           	opt stack 21
  3767  000832                     int_func:
  3768                           	opt stack 21
  3769  000832  0006               	pop		; remove dummy address from shadow register refresh
  3770  000834  CFE9 F00A          	movff	fsr0l,??_ISR+4
  3771  000838  CFEA F00B          	movff	fsr0h,??_ISR+5
  3772  00083C  CFE1 F00C          	movff	fsr1l,??_ISR+6
  3773  000840  CFE2 F00D          	movff	fsr1h,??_ISR+7
  3774  000844  CFD9 F00E          	movff	fsr2l,??_ISR+8
  3775  000848  CFDA F00F          	movff	fsr2h,??_ISR+9
  3776  00084C  CFF3 F010          	movff	prodl,??_ISR+10
  3777  000850  CFF4 F011          	movff	prodh,??_ISR+11
  3778  000854  CFF6 F012          	movff	tblptrl,??_ISR+12
  3779  000858  CFF7 F013          	movff	tblptrh,??_ISR+13
  3780  00085C  CFF8 F014          	movff	tblptru,??_ISR+14
  3781  000860  CFF5 F015          	movff	tablat,??_ISR+15
  3782                           
  3783                           ;ES_Port.c: 115: static unsigned int LastTime;
  3784                           ;ES_Port.c: 116: static unsigned int NextTime;
  3785                           ;ES_Port.c: 118: if (CCP1IF == 1)
  3786  000864  A49E               	btfss	3998,2,c	;volatile
  3787  000866  D014               	goto	i2l1950
  3788                           
  3789                           ;ES_Port.c: 119: {
  3790                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  3791  000868  50BF               	movf	4031,w,c	;volatile
  3792  00086A  6E06               	movwf	??_ISR& (0+255),c
  3793  00086C  50BE               	movf	4030,w,c	;volatile
  3794  00086E  6E38               	movwf	ISR@LastTime,c
  3795  000870  C006  F039         	movff	??_ISR,ISR@LastTime+1
  3796                           
  3797                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
  3798  000874  0E20               	movlw	32
  3799  000876  2438               	addwf	ISR@LastTime,w,c
  3800  000878  6E3A               	movwf	ISR@NextTime,c
  3801  00087A  0E4E               	movlw	78
  3802  00087C  2039               	addwfc	ISR@LastTime+1,w,c
  3803  00087E  6E3B               	movwf	ISR@NextTime+1,c
  3804                           
  3805                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
  3806  000880  503B               	movf	ISR@NextTime+1,w,c
  3807  000882  6EBF               	movwf	4031,c	;volatile
  3808                           
  3809                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
  3810  000884  C03A  FFBE         	movff	ISR@NextTime,4030	;volatile
  3811                           
  3812                           ;ES_Port.c: 124: CCP1IF = 0;
  3813  000888  949E               	bcf	3998,2,c	;volatile
  3814                           
  3815                           ;ES_Port.c: 125: TickCount++;
  3816  00088A  2A46               	incf	_TickCount,f,c	;volatile
  3817                           
  3818                           ;ES_Port.c: 126: SysTickCounter++;
  3819  00088C  4A3E               	infsnz	_SysTickCounter,f,c	;volatile
  3820  00088E  2A3F               	incf	_SysTickCounter+1,f,c	;volatile
  3821  000890                     i2l1950:
  3822                           
  3823                           ;ES_Port.c: 127: }
  3824                           ;ES_Port.c: 133: if (TXB0IF == 1)
  3825  000890  A4A4               	btfss	4004,2,c	;volatile
  3826  000892  D003               	goto	i2l1956
  3827                           
  3828                           ;ES_Port.c: 134: {
  3829                           ;ES_Port.c: 135: TXB0IF = 0;
  3830  000894  94A4               	bcf	4004,2,c	;volatile
  3831                           
  3832                           ;ES_Port.c: 136: CanXmitResponse();
  3833  000896  ECB1  F006         	call	_CanXmitResponse	;wreg free
  3834  00089A                     i2l1956:
  3835                           
  3836                           ;ES_Port.c: 137: }
  3837                           ;ES_Port.c: 138: if (RXB0IF == 1) {
  3838  00089A  A0A4               	btfss	4004,0,c	;volatile
  3839  00089C  D003               	goto	i2l148
  3840                           
  3841                           ;ES_Port.c: 139: RXB0IF = 0;
  3842  00089E  90A4               	bcf	4004,0,c	;volatile
  3843                           
  3844                           ;ES_Port.c: 140: CanRCVResponse();
  3845  0008A0  ECD3  F006         	call	_CanRCVResponse	;wreg free
  3846  0008A4                     i2l148:
  3847  0008A4  C015  FFF5         	movff	??_ISR+15,tablat
  3848  0008A8  C014  FFF8         	movff	??_ISR+14,tblptru
  3849  0008AC  C013  FFF7         	movff	??_ISR+13,tblptrh
  3850  0008B0  C012  FFF6         	movff	??_ISR+12,tblptrl
  3851  0008B4  C011  FFF4         	movff	??_ISR+11,prodh
  3852  0008B8  C010  FFF3         	movff	??_ISR+10,prodl
  3853  0008BC  C00F  FFDA         	movff	??_ISR+9,fsr2h
  3854  0008C0  C00E  FFD9         	movff	??_ISR+8,fsr2l
  3855  0008C4  C00D  FFE2         	movff	??_ISR+7,fsr1h
  3856  0008C8  C00C  FFE1         	movff	??_ISR+6,fsr1l
  3857  0008CC  C00B  FFEA         	movff	??_ISR+5,fsr0h
  3858  0008D0  C00A  FFE9         	movff	??_ISR+4,fsr0l
  3859  0008D4  C009  FFFB         	movff	??_ISR+3,pclatu
  3860  0008D8  C008  FFFA         	movff	??_ISR+2,pclath
  3861  0008DC  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3862  0008DE  0011               	retfie		f
  3863  0008E0                     __end_of_ISR:
  3864                           	opt stack 0
  3865                           tosu	equ	0xFFF
  3866                           tosh	equ	0xFFE
  3867                           tosl	equ	0xFFD
  3868                           pclatu	equ	0xFFB
  3869                           pclath	equ	0xFFA
  3870                           tblptru	equ	0xFF8
  3871                           tblptrh	equ	0xFF7
  3872                           tblptrl	equ	0xFF6
  3873                           tablat	equ	0xFF5
  3874                           prodh	equ	0xFF4
  3875                           prodl	equ	0xFF3
  3876                           intcon	equ	0xFF2
  3877                           postinc0	equ	0xFEE
  3878                           fsr0h	equ	0xFEA
  3879                           fsr0l	equ	0xFE9
  3880                           wreg	equ	0xFE8
  3881                           indf1	equ	0xFE7
  3882                           postinc1	equ	0xFE6
  3883                           fsr1h	equ	0xFE2
  3884                           fsr1l	equ	0xFE1
  3885                           indf2	equ	0xFDF
  3886                           postinc2	equ	0xFDE
  3887                           postdec2	equ	0xFDD
  3888                           fsr2h	equ	0xFDA
  3889                           fsr2l	equ	0xFD9
  3890                           status	equ	0xFD8
  3891                           
  3892 ;; *************** function _CanXmitResponse *****************
  3893 ;; Defined at:
  3894 ;;		line 168 in file "Can_XmitService.c"
  3895 ;; Parameters:    Size  Location     Type
  3896 ;;		None
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;		None
  3899 ;; Return value:  Size  Location     Type
  3900 ;;                  1    wreg      void 
  3901 ;; Registers used:
  3902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3903 ;; Tracked objects:
  3904 ;;		On entry : 0/0
  3905 ;;		On exit  : 0/0
  3906 ;;		Unchanged: 0/0
  3907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3908 ;;      Params:         0       0       0       0
  3909 ;;      Locals:         0       0       0       0
  3910 ;;      Temps:          0       0       0       0
  3911 ;;      Totals:         0       0       0       0
  3912 ;;Total ram usage:        0 bytes
  3913 ;; Hardware stack levels used:    1
  3914 ;; Hardware stack levels required when called:    1
  3915 ;; This function calls:
  3916 ;;		_ES_Timer_InitTimer
  3917 ;; This function is called by:
  3918 ;;		_ISR
  3919 ;; This function uses a non-reentrant model
  3920 ;;
  3921                           
  3922                           	psect	text27
  3923  000D62                     __ptext27:
  3924                           	opt stack 0
  3925  000D62                     _CanXmitResponse:
  3926                           	opt stack 21
  3927                           
  3928                           ;Can_XmitService.c: 170: TXB0CONbits.TXREQ = 0;
  3929                           
  3930                           ;incstack = 0
  3931  000D62  010F               	movlb	15	; () banked
  3932  000D64  9740               	bcf	64,3,b	;volatile
  3933                           
  3934                           ; BSR set to: 15
  3935                           ;Can_XmitService.c: 171: ES_Timer_InitTimer(0, 50);
  3936  000D66  0E00               	movlw	0
  3937  000D68  6E02               	movwf	ES_Timer_InitTimer@NewTime+1,c
  3938  000D6A  0E32               	movlw	50
  3939  000D6C  6E01               	movwf	ES_Timer_InitTimer@NewTime,c
  3940  000D6E  0E00               	movlw	0
  3941  000D70  EC21  F005         	call	_ES_Timer_InitTimer
  3942  000D74  0012               	return		;funcret
  3943  000D76                     __end_of_CanXmitResponse:
  3944                           	opt stack 0
  3945                           tosu	equ	0xFFF
  3946                           tosh	equ	0xFFE
  3947                           tosl	equ	0xFFD
  3948                           pclatu	equ	0xFFB
  3949                           pclath	equ	0xFFA
  3950                           tblptru	equ	0xFF8
  3951                           tblptrh	equ	0xFF7
  3952                           tblptrl	equ	0xFF6
  3953                           tablat	equ	0xFF5
  3954                           prodh	equ	0xFF4
  3955                           prodl	equ	0xFF3
  3956                           intcon	equ	0xFF2
  3957                           postinc0	equ	0xFEE
  3958                           fsr0h	equ	0xFEA
  3959                           fsr0l	equ	0xFE9
  3960                           wreg	equ	0xFE8
  3961                           indf1	equ	0xFE7
  3962                           postinc1	equ	0xFE6
  3963                           fsr1h	equ	0xFE2
  3964                           fsr1l	equ	0xFE1
  3965                           indf2	equ	0xFDF
  3966                           postinc2	equ	0xFDE
  3967                           postdec2	equ	0xFDD
  3968                           fsr2h	equ	0xFDA
  3969                           fsr2l	equ	0xFD9
  3970                           status	equ	0xFD8
  3971                           
  3972 ;; *************** function _ES_Timer_InitTimer *****************
  3973 ;; Defined at:
  3974 ;;		line 229 in file "ES_Timers.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;  Num             1    wreg     unsigned char 
  3977 ;;  NewTime         2    0[COMRAM] unsigned int 
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;  Num             1    4[COMRAM] unsigned char 
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  1    wreg      enum E15468
  3982 ;; Registers used:
  3983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3989 ;;      Params:         2       0       0       0
  3990 ;;      Locals:         1       0       0       0
  3991 ;;      Temps:          2       0       0       0
  3992 ;;      Totals:         5       0       0       0
  3993 ;;Total ram usage:        5 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; This function calls:
  3996 ;;		Nothing
  3997 ;; This function is called by:
  3998 ;;		_CanXmitResponse
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           	psect	text28
  4003  000A42                     __ptext28:
  4004                           	opt stack 0
  4005  000A42                     _ES_Timer_InitTimer:
  4006                           	opt stack 21
  4007                           
  4008                           ;incstack = 0
  4009                           ;ES_Timer_InitTimer@Num stored from wreg
  4010  000A42  6E05               	movwf	ES_Timer_InitTimer@Num,c
  4011                           
  4012                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  4013                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  4014                           ;ES_Timers.c: 236: (NewTime == 0) )
  4015  000A44  0E10               	movlw	16
  4016  000A46  6005               	cpfslt	ES_Timer_InitTimer@Num,c
  4017  000A48  0012               	return	
  4018  000A4A  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4019  000A4C  0D02               	mullw	2
  4020  000A4E  0E21               	movlw	low _Timer2PostFunc
  4021  000A50  24F3               	addwf	prodl,w,c
  4022  000A52  6EF6               	movwf	tblptrl,c
  4023  000A54  0E03               	movlw	high _Timer2PostFunc
  4024  000A56  20F4               	addwfc	prodh,w,c
  4025  000A58  6EF7               	movwf	tblptrh,c
  4026  000A5A                     	if	0	;There are less than 3 active tblptr bytes
  4027  000A5A                     	endif
  4028  000A5A  0009               	tblrd		*+
  4029  000A5C  50F5               	movf	tablat,w,c
  4030  000A5E  0009               	tblrd		*+
  4031  000A60  10F5               	iorwf	tablat,w,c
  4032  000A62  B4D8               	btfsc	status,2,c
  4033  000A64  0012               	return	
  4034  000A66  5001               	movf	ES_Timer_InitTimer@NewTime,w,c
  4035  000A68  1002               	iorwf	ES_Timer_InitTimer@NewTime+1,w,c
  4036  000A6A  B4D8               	btfsc	status,2,c
  4037  000A6C  0012               	return	
  4038                           
  4039                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  4040                           
  4041                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  4042                           ;	Return value of _ES_Timer_InitTimer is never used
  4043  000A6E  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4044  000A70  0D02               	mullw	2
  4045  000A72  0E60               	movlw	low _TMR_TimerArray
  4046  000A74  24F3               	addwf	prodl,w,c
  4047  000A76  6ED9               	movwf	fsr2l,c
  4048  000A78  0E00               	movlw	high _TMR_TimerArray
  4049  000A7A  20F4               	addwfc	prodh,w,c
  4050  000A7C  6EDA               	movwf	fsr2h,c
  4051  000A7E  C001  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  4052  000A82  C002  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  4053                           
  4054                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  4055  000A86  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4056  000A88  0D02               	mullw	2
  4057  000A8A  0E01               	movlw	low _BitNum2SetMask
  4058  000A8C  24F3               	addwf	prodl,w,c
  4059  000A8E  6EF6               	movwf	tblptrl,c
  4060  000A90  0E03               	movlw	high _BitNum2SetMask
  4061  000A92  20F4               	addwfc	prodh,w,c
  4062  000A94  6EF7               	movwf	tblptrh,c
  4063  000A96                     	if	0	;There are less than 3 active tblptr bytes
  4064  000A96                     	endif
  4065  000A96  0009               	tblrd		*+
  4066  000A98  CFF5 F003          	movff	tablat,??_ES_Timer_InitTimer
  4067  000A9C  0009               	tblrd		*+
  4068  000A9E  CFF5 F004          	movff	tablat,??_ES_Timer_InitTimer+1
  4069  000AA2  5003               	movf	??_ES_Timer_InitTimer,w,c
  4070  000AA4  1240               	iorwf	_TMR_ActiveFlags,f,c
  4071  000AA6  5004               	movf	??_ES_Timer_InitTimer+1,w,c
  4072  000AA8  1241               	iorwf	_TMR_ActiveFlags+1,f,c
  4073  000AAA  0012               	return	
  4074  000AAC                     __end_of_ES_Timer_InitTimer:
  4075                           	opt stack 0
  4076                           tosu	equ	0xFFF
  4077                           tosh	equ	0xFFE
  4078                           tosl	equ	0xFFD
  4079                           pclatu	equ	0xFFB
  4080                           pclath	equ	0xFFA
  4081                           tblptru	equ	0xFF8
  4082                           tblptrh	equ	0xFF7
  4083                           tblptrl	equ	0xFF6
  4084                           tablat	equ	0xFF5
  4085                           prodh	equ	0xFF4
  4086                           prodl	equ	0xFF3
  4087                           intcon	equ	0xFF2
  4088                           postinc0	equ	0xFEE
  4089                           fsr0h	equ	0xFEA
  4090                           fsr0l	equ	0xFE9
  4091                           wreg	equ	0xFE8
  4092                           indf1	equ	0xFE7
  4093                           postinc1	equ	0xFE6
  4094                           fsr1h	equ	0xFE2
  4095                           fsr1l	equ	0xFE1
  4096                           indf2	equ	0xFDF
  4097                           postinc2	equ	0xFDE
  4098                           postdec2	equ	0xFDD
  4099                           fsr2h	equ	0xFDA
  4100                           fsr2l	equ	0xFD9
  4101                           status	equ	0xFD8
  4102                           
  4103 ;; *************** function _CanRCVResponse *****************
  4104 ;; Defined at:
  4105 ;;		line 174 in file "Can_XmitService.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;		None
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;		None
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  1    wreg      void 
  4112 ;; Registers used:
  4113 ;;		None
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4119 ;;      Params:         0       0       0       0
  4120 ;;      Locals:         0       0       0       0
  4121 ;;      Temps:          0       0       0       0
  4122 ;;      Totals:         0       0       0       0
  4123 ;;Total ram usage:        0 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; This function calls:
  4126 ;;		Nothing
  4127 ;; This function is called by:
  4128 ;;		_ISR
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           	psect	text29
  4133  000DA6                     __ptext29:
  4134                           	opt stack 0
  4135  000DA6                     _CanRCVResponse:
  4136                           	opt stack 22
  4137                           
  4138                           ;Can_XmitService.c: 176: if (RXB0CONbits.RXFUL == 1) {
  4139                           
  4140                           ;incstack = 0
  4141  000DA6  AE60               	btfss	3936,7,c	;volatile
  4142  000DA8  0012               	return	
  4143                           
  4144                           ;Can_XmitService.c: 177: RXB0CONbits.RXFUL = 0;
  4145  000DAA  9E60               	bcf	3936,7,c	;volatile
  4146  000DAC  0012               	return	
  4147  000DAE                     __end_of_CanRCVResponse:
  4148                           	opt stack 0
  4149                           tosu	equ	0xFFF
  4150                           tosh	equ	0xFFE
  4151                           tosl	equ	0xFFD
  4152                           pclatu	equ	0xFFB
  4153                           pclath	equ	0xFFA
  4154                           tblptru	equ	0xFF8
  4155                           tblptrh	equ	0xFF7
  4156                           tblptrl	equ	0xFF6
  4157                           tablat	equ	0xFF5
  4158                           prodh	equ	0xFF4
  4159                           prodl	equ	0xFF3
  4160                           intcon	equ	0xFF2
  4161                           postinc0	equ	0xFEE
  4162                           fsr0h	equ	0xFEA
  4163                           fsr0l	equ	0xFE9
  4164                           wreg	equ	0xFE8
  4165                           indf1	equ	0xFE7
  4166                           postinc1	equ	0xFE6
  4167                           fsr1h	equ	0xFE2
  4168                           fsr1l	equ	0xFE1
  4169                           indf2	equ	0xFDF
  4170                           postinc2	equ	0xFDE
  4171                           postdec2	equ	0xFDD
  4172                           fsr2h	equ	0xFDA
  4173                           fsr2l	equ	0xFD9
  4174                           status	equ	0xFD8
  4175                           tosu	equ	0xFFF
  4176                           tosh	equ	0xFFE
  4177                           tosl	equ	0xFFD
  4178                           pclatu	equ	0xFFB
  4179                           pclath	equ	0xFFA
  4180                           tblptru	equ	0xFF8
  4181                           tblptrh	equ	0xFF7
  4182                           tblptrl	equ	0xFF6
  4183                           tablat	equ	0xFF5
  4184                           prodh	equ	0xFF4
  4185                           prodl	equ	0xFF3
  4186                           intcon	equ	0xFF2
  4187                           postinc0	equ	0xFEE
  4188                           fsr0h	equ	0xFEA
  4189                           fsr0l	equ	0xFE9
  4190                           wreg	equ	0xFE8
  4191                           indf1	equ	0xFE7
  4192                           postinc1	equ	0xFE6
  4193                           fsr1h	equ	0xFE2
  4194                           fsr1l	equ	0xFE1
  4195                           indf2	equ	0xFDF
  4196                           postinc2	equ	0xFDE
  4197                           postdec2	equ	0xFDD
  4198                           fsr2h	equ	0xFDA
  4199                           fsr2l	equ	0xFD9
  4200                           status	equ	0xFD8
  4201                           
  4202                           	psect	text30
  4203  000000                     __ptext30:
  4204                           	opt stack 0
  4205                           tosu	equ	0xFFF
  4206                           tosh	equ	0xFFE
  4207                           tosl	equ	0xFFD
  4208                           pclatu	equ	0xFFB
  4209                           pclath	equ	0xFFA
  4210                           tblptru	equ	0xFF8
  4211                           tblptrh	equ	0xFF7
  4212                           tblptrl	equ	0xFF6
  4213                           tablat	equ	0xFF5
  4214                           prodh	equ	0xFF4
  4215                           prodl	equ	0xFF3
  4216                           intcon	equ	0xFF2
  4217                           postinc0	equ	0xFEE
  4218                           fsr0h	equ	0xFEA
  4219                           fsr0l	equ	0xFE9
  4220                           wreg	equ	0xFE8
  4221                           indf1	equ	0xFE7
  4222                           postinc1	equ	0xFE6
  4223                           fsr1h	equ	0xFE2
  4224                           fsr1l	equ	0xFE1
  4225                           indf2	equ	0xFDF
  4226                           postinc2	equ	0xFDE
  4227                           postdec2	equ	0xFDD
  4228                           fsr2h	equ	0xFDA
  4229                           fsr2l	equ	0xFD9
  4230                           status	equ	0xFD8
  4231                           
  4232                           	psect	rparam
  4233  0000                     tosu	equ	0xFFF
  4234                           tosh	equ	0xFFE
  4235                           tosl	equ	0xFFD
  4236                           pclatu	equ	0xFFB
  4237                           pclath	equ	0xFFA
  4238                           tblptru	equ	0xFF8
  4239                           tblptrh	equ	0xFF7
  4240                           tblptrl	equ	0xFF6
  4241                           tablat	equ	0xFF5
  4242                           prodh	equ	0xFF4
  4243                           prodl	equ	0xFF3
  4244                           intcon	equ	0xFF2
  4245                           postinc0	equ	0xFEE
  4246                           fsr0h	equ	0xFEA
  4247                           fsr0l	equ	0xFE9
  4248                           wreg	equ	0xFE8
  4249                           indf1	equ	0xFE7
  4250                           postinc1	equ	0xFE6
  4251                           fsr1h	equ	0xFE2
  4252                           fsr1l	equ	0xFE1
  4253                           indf2	equ	0xFDF
  4254                           postinc2	equ	0xFDE
  4255                           postdec2	equ	0xFDD
  4256                           fsr2h	equ	0xFDA
  4257                           fsr2l	equ	0xFD9
  4258                           status	equ	0xFD8
  4259                           
  4260                           	psect	temp
  4261  00004A                     btemp:
  4262                           	opt stack 0
  4263  00004A                     	ds	1
  4264  0000                     int$flags	set	btemp
  4265                           tosu	equ	0xFFF
  4266                           tosh	equ	0xFFE
  4267                           tosl	equ	0xFFD
  4268                           pclatu	equ	0xFFB
  4269                           pclath	equ	0xFFA
  4270                           tblptru	equ	0xFF8
  4271                           tblptrh	equ	0xFF7
  4272                           tblptrl	equ	0xFF6
  4273                           tablat	equ	0xFF5
  4274                           prodh	equ	0xFF4
  4275                           prodl	equ	0xFF3
  4276                           intcon	equ	0xFF2
  4277                           postinc0	equ	0xFEE
  4278                           fsr0h	equ	0xFEA
  4279                           fsr0l	equ	0xFE9
  4280                           wreg	equ	0xFE8
  4281                           indf1	equ	0xFE7
  4282                           postinc1	equ	0xFE6
  4283                           fsr1h	equ	0xFE2
  4284                           fsr1l	equ	0xFE1
  4285                           indf2	equ	0xFDF
  4286                           postinc2	equ	0xFDE
  4287                           postdec2	equ	0xFDD
  4288                           fsr2h	equ	0xFDA
  4289                           fsr2l	equ	0xFD9
  4290                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    88
    Data        0
    BSS         67
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     50      73
    BANK0           160     13      57
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostCan_XmitService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(COMRAM[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    S91$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    S70$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCan_XmitService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCan_XmitService(), 

    S70$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCan_XmitService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCan_XmitService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    _PostCan_XmitService->_ES_PostToService
    _RunCan_XmitService->_XmitData
    _ES_DeQueue->___wmul
    _InitCan_XmitService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in COMRAM

    _CanXmitResponse->_ES_Timer_InitTimer

Critical Paths under _main in BANK0

    _main->_ES_Run
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostCan_XmitService
    _ES_Initialize->_InitCan_XmitService

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   11201
                                             12 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     428
                                             21 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0    6810
                                              7 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                 _RunCan_XmitService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    3438
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    3438
                                              3 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
                _PostCan_XmitService *
 ---------------------------------------------------------------------------------
 (4) _PostCan_XmitService                                  3     0      3    2995
                                              0 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     443
                                             21 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                             21 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunCan_XmitService                                   6     3      3     217
                                             22 COMRAM     6     3      3
                    _InitCanHardware
                           _InitPins
                     _ToggleDebugLED
                           _XmitData
 ---------------------------------------------------------------------------------
 (3) _XmitData                                             1     1      0      22
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ToggleDebugLED                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2526
                                             33 COMRAM    10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     292
                                             21 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                             21 COMRAM     1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    3895
                                              4 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                _InitCan_XmitService *
 ---------------------------------------------------------------------------------
 (2) _InitCan_XmitService                                  4     4      0    2964
                                              0 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    2899
                                             44 COMRAM     6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2595
                                             33 COMRAM    11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1366
                                             27 COMRAM     6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     553
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     211
                                             23 COMRAM     2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      90
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     345
                                             21 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 16    16      0     208
                                              5 COMRAM    16    16      0
                     _CanRCVResponse
                    _CanXmitResponse
 ---------------------------------------------------------------------------------
 (9) _CanXmitResponse                                      0     0      0     208
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (10) _ES_Timer_InitTimer                                  5     3      2     208
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (9) _CanRCVResponse                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitCan_XmitService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunCan_XmitService *
       _InitCanHardware
       _InitPins
       _ToggleDebugLED
       _XmitData
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostCan_XmitService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _CanRCVResponse
   _CanXmitResponse
     _ES_Timer_InitTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      D      39       4       35.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     32      49       1       77.7%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      82       9        0.0%
DATA                 0      0      82      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Nov 14 03:06:47 2016

                   ??__HW_Timer_Init 0018                  ES_CheckUserEvents@i 0016  
                __HW_Timer_Init@Rate 0016                  ___wmul@multiplicand 001E  
                                l380 0B16                                  l365 0BD4  
                                l277 095E                                  l383 0B64  
                                l392 0D90                __end_of_ES_Initialize 0696  
                                _GIE 007F97                                  _ISR 0008  
                       ___awmod@sign 001B              __end_of_Check4Keystroke 0DB2  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 002A  
            ES_EnQueueFIFO@Event2Add 0024                    ?_ES_PostToService 002D  
                               ?_ISR 0001                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 0033                                 l2030 0A20  
                               l2022 0A00                                 l2014 09E6  
                               l2110 04C2                                 l2024 0A08  
                               l2120 0530                                 l2026 0A0C  
                               l2034 0A2A                                 l2018 09F2  
                               l2122 0568                                 l2038 0A38  
                               l2310 060A                                 l2302 05BC  
                               l2232 048A                                 l2080 0968  
                               l2058 082E                                 l2074 0B0E  
                               l2322 068C                                 l2314 060E  
                               l2090 09CA                                 l2330 0698  
                               l2228 0472                                 l2260 0D7E  
                               l2326 0692                                 l2238 04AE  
                               l2094 09CE                                 l2342 0766  
                               l2192 0C96                                 l2184 0C7E  
                               l2256 0D78                                 l2336 0712  
                               l2440 0938                                 l2346 0778  
                               l2354 0C54                                 l2434 090E  
                               l2356 0C5A                                 l2436 091C  
                               l2444 0946                                 l2278 0C46  
                               l2286 0BBA                                 l2438 092A  
                               STR_1 0359                                 STR_2 0374  
                               STR_3 038C                                 STR_4 03A3  
                               _LATA 000F89                                 _LATB 000F8A  
                               u1508 0B88                                 u1428 0518  
                               u1509 0BA0                                 u1374 0986  
                               u1375 0980                                 u1638 0666  
                               u1639 0682                                 _PIE1 000F9D  
                               _PIE3 000FA3                                 u1678 073C  
                               u1679 0754                                 _SCS1 007E99  
                   ?_CanXmitResponse 0001                   ??_ES_PostToService 0030  
                               _main 08E0                          ?_ES_DeQueue 0022  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               indf1 000FE7                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 004A                        main@ErrorType 0098  
                               pclat 000FFA                                 prodh 000FF4  
                               prodl 000FF3                                 start 0016  
                      __CFG_MCLRE$ON 000000         InitCan_XmitService@ThisEvent 008C  
                       ___param_bank 000010              __end_of_InitCanHardware 0B6A  
                              ??_ISR 0006                   ES_Run@HighestPrior 0097  
                              ?_main 0001                __end_of_ES_Timer_Init 0DA6  
                    __end_of___awmod 0A42                      __end_of___lbmod 0C9E  
                              _T1CON 000FCD                                _LATA0 007C48  
                              _LATA1 007C49                                _IRCF0 007E9C  
                              _IRCF1 007E9D                                _IRCF2 007E9E  
                              i2l148 08A4                                _PORTA 000F80  
                              _PORTB 000F81                        __CFG_PWRT$OFF 000000  
                              _Ready 003C                                _putch 0DB2  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                                status 000FD8  
                    __initialization 0C9E               ES_GetMSBitSet@LoopCntr 001F  
         __end_of_ES_CheckUserEvents 0BAA                         __end_of_main 0960  
                  ES_Timer_Init@Rate 0018                     __end_of_InitPins 0D32  
                __end_of_EventQueues 0357                               ??_main 0033  
                      __activetblptr 000002                  __size_of_ES_DeQueue 00FE  
                    _Nybble2MSBitNum 0341     __end_of__HW_Process_Pending_Ints 0D88  
                   ?_Check4Keystroke 0001                               _ADCON1 000FC1  
                   __end_of_XmitData 0CEA                               _CCP1IF 007CF2  
                             _CANCON 000F6F                               _CCPR1H 000FBF  
                             _CCPR1L 000FBE                           _MyPriority 0045  
                             ?_putch 0001                     ??_ES_GetMSBitSet 0018  
                             i2l1950 0890                               i2l1956 089A  
                             _INTCON 000FF2                               _RXB0IE 007D18  
                             _RXB0IF 007D20                               _ES_Run 0696  
                             _TXB0D0 000F46                               _TXB0IE 007D1A  
                             _TXB0IF 007D22                     ??_CanRCVResponse 0001  
                   ??_ES_EnQueueFIFO 0027                       _Timer2PostFunc 0321  
                             _Queue0 0080                       _SysTickCounter 003E  
                             ___wmul 0CEA                            ??___awmod 001A  
                          ??___lbmod 0017                     ?_InitCanHardware 0001  
                _PostCan_XmitService 0D4E          __size_of_ES_Timer_InitTimer 006A  
                             clear_0 0CA4                               clear_1 0CB0  
                    ___awmod@divisor 0018            ES_Timer_InitTimer@NewTime 0001  
                    ___awmod@counter 001A                               _printf 0C4A  
                        ISR@LastTime 0038               ES_InitQueue@pThisQueue 0019  
                       __mediumconst 0000                          ISR@NextTime 003A  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                               putch@c 0001  
        __size_of_ES_Timer_Tick_Resp 00F8                 ES_DeQueue@pThisQueue 002A  
            ES_GetMSBitSet@Val2Check 0016                 ?_PostCan_XmitService 008C  
        InitCan_XmitService@Priority 008F                      ___lbmod@divisor 0016  
                         __accesstop 0060              __end_of__initialization 0CB6  
             __end_of_Timer2PostFunc 0341                      ___lbmod@counter 0018  
                    __CFG_PBADEN$OFF 000000                        ___rparam_used 000001  
                        _EventQueues 0354                       __pcstackCOMRAM 0001  
                      ?_ES_InitQueue 0016              __end_of_Nybble2MSBitNum 0350  
                      __end_of_putch 0DB4                      _TMR_ActiveFlags 0040  
            ES_GetMSBitSet@ReturnVal 001D          __end_of_InitCan_XmitService 0C4A  
                     _TMR_TimerArray 0060                ??_PostCan_XmitService 0033  
           ES_EnQueueFIFO@pThisQueue 002B                              ??_putch 0016  
           __HW_Process_Pending_Ints 0D76                           __pbssBANK0 0060  
                          ?_InitPins 0001                              ?_ES_Run 0001  
                       ??_ES_DeQueue 0026          __size_of_RunCan_XmitService 003C  
          __size_of_ES_PostToService 0066                       ??_ES_InitQueue 0019  
                            ?___wmul 001C                              _CCP1CON 000FBD  
                          ?_XmitData 0001                              _ECANCON 000F77  
                            ?_printf 0016              __size_of_ToggleDebugLED 0010  
                 __end_of_ES_DeQueue 04B2                              _TXB0DLC 000F45  
                         ??_InitPins 0016                      __size_of_ES_Run 00E8  
             __size_of_ES_Initialize 00EC                              __Hparam 0000  
                            __Lparam 0000             __size_of_CanXmitResponse 0014  
                            ___awmod 09D2                              ___lbmod 0C74  
                    __size_of___wmul 0026                         __psmallconst 0300  
                         ??_XmitData 0016                ES_Timer_InitTimer@Num 0005  
                            __pcinit 0C9E                              __ramtop 0300  
                            __ptext0 08E0                              __ptext1 0C4A  
                            __ptext2 0DB2                              __ptext3 0696  
                            __ptext4 0D76                              __ptext5 04B2  
                            __ptext6 0D4E                              __ptext7 0960  
                            __ptext8 0BAA                              __ptext9 0CC4  
                    __size_of_printf 002A                         __size_of_ISR 08D8  
            __size_of__HW_Timer_Init 001C                     ___awmod@dividend 0016  
                 _ES_CheckUserEvents 0B6A                      ES_Run@ThisEvent 0047  
                     __pintcode_body 0832                 end_of_initialization 0CB6  
                ?_ES_CheckUserEvents 0001                        __Lmediumconst 0000  
                            int_func 0832         ES_PostToService@WhichService 0032  
             __size_of_ES_Timer_Init 000E                              printf@c 001A  
                            printf@f 0016                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                 ??_ES_CheckUserEvents 0016  
                      _ES_Initialize 05AA                     ___lbmod@dividend 0017  
                          _TRISAbits 000F92                            _TRISBbits 000F93  
               __end_of_ES_EventList 0359                 __end_of_ES_InitQueue 0C1C  
                     ES_Initialize@i 0092                          ___lbmod@rem 0019  
           __size_of_Check4Keystroke 0004                       __end_of_ES_Run 077E  
        RunCan_XmitService@ThisEvent 0017                     _ES_PostToService 0AAC  
         __end_of_ES_Timer_InitTimer 0AAC                 __end_of_ServDescList 0354  
                     __end_of___wmul 0D10                    ??_CanXmitResponse 0006  
                     _ToggleDebugLED 0D88                       ?_ES_Initialize 0090  
         ??__HW_Process_Pending_Ints 0033                        _ES_Timer_Init 0D98  
                     __end_of_printf 0C74             __size_of_InitCanHardware 0058  
         __end_of_ES_Timer_Tick_Resp 05AA                  start_initialization 0C9E  
                        __end_of_ISR 08E0                          _CANSTATbits 000F6E  
                           ??_ES_Run 0093                     __CFG_OSC$IRCIO67 000000  
                          _TickCount 0046                    __size_of_InitPins 0022  
            __size_of_ES_GetMSBitSet 0072                             ??___wmul 0020  
             __end_of_ToggleDebugLED 0D98              __size_of_CanRCVResponse 0008  
            __size_of_ES_EnQueueFIFO 00B4                             ??_printf 0018  
                     ?_ES_Timer_Init 0018                    __size_of_XmitData 0026  
                     __HW_Timer_Init 0D32          __end_of_PostCan_XmitService 0D62  
                        __pbssCOMRAM 0033                        __pcstackBANK0 008C  
                        _BRGCON1bits 000F70                          _BRGCON2bits 000F71  
                 ES_InitQueue@pBlock 0016                          _BRGCON3bits 000F72  
       __size_of_InitCan_XmitService 002E           __end_of_RunCan_XmitService 0BE6  
                      __PRIMASK_temp 0042                    ??_Check4Keystroke 0016  
                          __pintcode 0008                             ?___awmod 0016  
                           ?___lbmod 0016                      ?_ToggleDebugLED 0001  
                    ??_ES_Initialize 0033             ES_PostToService@TheEvent 002D  
             __end_of__HW_Timer_Init 0D4E                          __smallconst 0300  
              __size_of_ES_InitQueue 0036         PostCan_XmitService@ThisEvent 008C  
                     __size_of_putch 0002                 ES_Initialize@NewRate 0090  
                  ??_InitCanHardware 0016            ES_GetMSBitSet@Nybble2Test 001E  
                     ___wmul@product 0020                             _RXF0SIDH 000F00  
                       _ES_EventList 0357                             _RXF0SIDL 000F01  
                           _TXB0SIDH 000F41                             _TXB0SIDL 000F42  
                       _ES_InitQueue 0BE6                             _RXM0SIDH 000F18  
                           _RXM0SIDL 000F19                      ??_ES_Timer_Init 001A  
                    ?__HW_Timer_Init 0016                    ___wmul@multiplier 001C  
                 ES_DeQueue@SaveCrit 0028                 ES_EnQueueFIFO@pBlock 0022  
           __end_of_ES_PostToService 0B12                       _BitNum2SetMask 0301  
                       _ServDescList 0350                             _InitPins 0D10  
                    _CanXmitResponse 0D62                             __Hrparam 0000  
                     _ES_GetMSBitSet 0960                             __Lrparam 0000  
                   __size_of___awmod 0070                     __size_of___lbmod 002A  
                           _XmitData 0CC4          __size_of_ES_CheckUserEvents 0040  
                     _CanRCVResponse 0DA6                       _ES_EnQueueFIFO 077E  
                   XmitData@DataByte 0016                   _ES_Timer_InitTimer 0A42  
             __end_of_BitNum2SetMask 0321                             __ptext10 0D88  
                           __ptext11 0D10                             __ptext20 077E  
                           __ptext12 0B12                             __ptext21 0CEA  
                           __ptext13 03B4                             __ptext30 0000  
                           __ptext22 09D2                             __ptext14 0C74  
                           __ptext23 0D98                             __ptext15 0B6A  
                           __ptext24 0D32                             __ptext16 0DAE  
                           __ptext25 0BE6                             __ptext17 05AA  
                           __ptext18 0C1C                             __ptext27 0D62  
                           __ptext19 0AAC                             __ptext28 0A42  
                           __ptext29 0DA6    ES_Timer_Tick_Resp@NeedsProcessing 0036  
                ?_ES_Timer_InitTimer 0001                        __size_of_main 0080  
                 _ES_Timer_Tick_Resp 04B2               __end_of_ES_GetMSBitSet 09D2  
                ?_ES_Timer_Tick_Resp 0001               __end_of_CanRCVResponse 0DAE  
             __end_of_ES_EnQueueFIFO 0832                             int$flags 004A  
                _InitCan_XmitService 0C1C                 ??_ES_Timer_InitTimer 0003  
                  ES_DeQueue@NumLeft 0029                          _RXB0CONbits 000F60  
               ??_ES_Timer_Tick_Resp 008F        RunCan_XmitService@ReturnEvent 001A  
               ?_InitCan_XmitService 0001              __end_of_CanXmitResponse 0D76  
                    _Check4Keystroke 0DAE                             intlevel2 0000  
                         _ES_DeQueue 03B4    __size_of__HW_Process_Pending_Ints 0012  
          ?__HW_Process_Pending_Ints 0001                          _TXB0CONbits 000F40  
                    ?_ES_GetMSBitSet 0016                     ??_ToggleDebugLED 0016  
ES_Timer_Tick_Resp@NextTimer2Process 0044                   _RunCan_XmitService 0BAA  
                           printf@ap 0018                      ?_CanRCVResponse 0001  
                    ?_ES_EnQueueFIFO 0022                     ES_DeQueue@pBlock 0022  
                ?_RunCan_XmitService 0017                      _InitCanHardware 0B12  
             ES_DeQueue@pReturnEvent 0024                ES_InitQueue@BlockSize 0018  
              ??_InitCan_XmitService 0033         __size_of_PostCan_XmitService 0014  
               ??_RunCan_XmitService 001A  
