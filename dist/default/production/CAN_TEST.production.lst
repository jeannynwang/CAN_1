

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Nov 14 00:30:10 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           	psect	smallconst
    48  000300                     __psmallconst:
    49                           	opt stack 0
    50  000300  00                 	db	0
    51  000301                     _BitNum2SetMask:
    52                           	opt stack 0
    53  000301  0001               	dw	1
    54  000303  0002               	dw	2
    55  000305  0004               	dw	4
    56  000307  0008               	dw	8
    57  000309  0010               	dw	16
    58  00030B  0020               	dw	32
    59  00030D  0040               	dw	64
    60  00030F  0080               	dw	128
    61  000311  0100               	dw	256
    62  000313  0200               	dw	512
    63  000315  0400               	dw	1024
    64  000317  0800               	dw	2048
    65  000319  1000               	dw	4096
    66  00031B  2000               	dw	8192
    67  00031D  4000               	dw	16384
    68  00031F  8000               	dw	32768
    69  000321                     __end_of_BitNum2SetMask:
    70                           	opt stack 0
    71  000321                     _Timer2PostFunc:
    72                           	opt stack 0
    73  000321  00                 	db	0
    74  000322  00                 	db	0
    75  000323  00                 	db	0
    76  000324  00                 	db	0
    77  000325  9A                 	db	low _PostToggleService
    78  000326  0D                 	db	high _PostToggleService
    79  000327  00                 	db	0
    80  000328  00                 	db	0
    81  000329  00                 	db	0
    82  00032A  00                 	db	0
    83  00032B  00                 	db	0
    84  00032C  00                 	db	0
    85  00032D  00                 	db	0
    86  00032E  00                 	db	0
    87  00032F  00                 	db	0
    88  000330  00                 	db	0
    89  000331  00                 	db	0
    90  000332  00                 	db	0
    91  000333  00                 	db	0
    92  000334  00                 	db	0
    93  000335  00                 	db	0
    94  000336  00                 	db	0
    95  000337  00                 	db	0
    96  000338  00                 	db	0
    97  000339  00                 	db	0
    98  00033A  00                 	db	0
    99  00033B  00                 	db	0
   100  00033C  00                 	db	0
   101  00033D  00                 	db	0
   102  00033E  00                 	db	0
   103  00033F  00                 	db	0
   104  000340  00                 	db	0
   105  000341                     __end_of_Timer2PostFunc:
   106                           	opt stack 0
   107  000341                     _Nybble2MSBitNum:
   108                           	opt stack 0
   109  000341  00                 	db	0
   110  000342  01                 	db	1
   111  000343  01                 	db	1
   112  000344  02                 	db	2
   113  000345  02                 	db	2
   114  000346  02                 	db	2
   115  000347  02                 	db	2
   116  000348  03                 	db	3
   117  000349  03                 	db	3
   118  00034A  03                 	db	3
   119  00034B  03                 	db	3
   120  00034C  03                 	db	3
   121  00034D  03                 	db	3
   122  00034E  03                 	db	3
   123  00034F  03                 	db	3
   124  000350                     __end_of_Nybble2MSBitNum:
   125                           	opt stack 0
   126  000350                     _ServDescList:
   127                           	opt stack 0
   128  000350  3C                 	db	low _InitCan_XmitService
   129  000351  0C                 	db	high _InitCan_XmitService
   130  000352  5A                 	db	low _RunCan_XmitService
   131  000353  0D                 	db	high _RunCan_XmitService
   132  000354  84                 	db	low _InitToggleService
   133  000355  0B                 	db	high _InitToggleService
   134  000356  94                 	db	low _RunToggleService
   135  000357  0C                 	db	high _RunToggleService
   136  000358                     __end_of_ServDescList:
   137                           	opt stack 0
   138  000358                     _EventQueues:
   139                           	opt stack 0
   140  000358  80                 	db	low _Queue0
   141  000359  00                 	db	high _Queue0
   142  00035A  04                 	db	4
   143  00035B  8C                 	db	low _Queue1
   144  00035C  00                 	db	high _Queue1
   145  00035D  04                 	db	4
   146  00035E                     __end_of_EventQueues:
   147                           	opt stack 0
   148  00035E                     _ES_EventList:
   149                           	opt stack 0
   150  00035E  F6                 	db	low _Check4Keystroke
   151  00035F  0D                 	db	high _Check4Keystroke
   152  000360                     __end_of_ES_EventList:
   153                           	opt stack 0
   154  0000                     _RXF0SIDH	set	3840
   155  0000                     _RXF0SIDL	set	3841
   156  0000                     _RXM0SIDH	set	3864
   157  0000                     _RXM0SIDL	set	3865
   158  0000                     _TXB0CONbits	set	3904
   159  0000                     _TXB0D0	set	3910
   160  0000                     _TXB0DLC	set	3909
   161  0000                     _TXB0SIDH	set	3905
   162  0000                     _TXB0SIDL	set	3906
   163  0000                     _ADCON1	set	4033
   164  0000                     _BRGCON1bits	set	3952
   165  0000                     _BRGCON2bits	set	3953
   166  0000                     _BRGCON3bits	set	3954
   167  0000                     _CANCON	set	3951
   168  0000                     _CANSTATbits	set	3950
   169  0000                     _CCP1CON	set	4029
   170  0000                     _CCPR1H	set	4031
   171  0000                     _CCPR1L	set	4030
   172  0000                     _ECANCON	set	3959
   173  0000                     _INTCON	set	4082
   174  0000                     _LATA	set	3977
   175  0000                     _LATB	set	3978
   176  0000                     _PIE1	set	3997
   177  0000                     _PIE3	set	4003
   178  0000                     _PORTA	set	3968
   179  0000                     _PORTB	set	3969
   180  0000                     _RXB0CONbits	set	3936
   181  0000                     _T1CON	set	4045
   182  0000                     _TRISA	set	3986
   183  0000                     _TRISBbits	set	3987
   184  0000                     _CCP1IF	set	31986
   185  0000                     _GIE	set	32663
   186  0000                     _IRCF0	set	32412
   187  0000                     _IRCF1	set	32413
   188  0000                     _IRCF2	set	32414
   189  0000                     _LATA0	set	31816
   190  0000                     _LATA1	set	31817
   191  0000                     _RXB0IE	set	32024
   192  0000                     _RXB0IF	set	32032
   193  0000                     _SCS1	set	32409
   194  0000                     _TXB0IE	set	32026
   195  0000                     _TXB0IF	set	32034
   196  000360                     STR_1:
   197  000360  46                 	db	70	;'F'
   198  000361  61                 	db	97	;'a'
   199  000362  69                 	db	105	;'i'
   200  000363  6C                 	db	108	;'l'
   201  000364  65                 	db	101	;'e'
   202  000365  64                 	db	100	;'d'
   203  000366  20                 	db	32
   204  000367  6F                 	db	111	;'o'
   205  000368  6E                 	db	110	;'n'
   206  000369  20                 	db	32
   207  00036A  61                 	db	97	;'a'
   208  00036B  74                 	db	116	;'t'
   209  00036C  74                 	db	116	;'t'
   210  00036D  65                 	db	101	;'e'
   211  00036E  6D                 	db	109	;'m'
   212  00036F  70                 	db	112	;'p'
   213  000370  74                 	db	116	;'t'
   214  000371  20                 	db	32
   215  000372  74                 	db	116	;'t'
   216  000373  6F                 	db	111	;'o'
   217  000374  20                 	db	32
   218  000375  50                 	db	80	;'P'
   219  000376  6F                 	db	111	;'o'
   220  000377  73                 	db	115	;'s'
   221  000378  74                 	db	116	;'t'
   222  000379  0A                 	db	10
   223  00037A  00                 	db	0
   224  00037B                     STR_2:
   225  00037B  46                 	db	70	;'F'
   226  00037C  61                 	db	97	;'a'
   227  00037D  69                 	db	105	;'i'
   228  00037E  6C                 	db	108	;'l'
   229  00037F  65                 	db	101	;'e'
   230  000380  64                 	db	100	;'d'
   231  000381  20                 	db	32
   232  000382  6F                 	db	111	;'o'
   233  000383  6E                 	db	110	;'n'
   234  000384  20                 	db	32
   235  000385  4E                 	db	78	;'N'
   236  000386  55                 	db	85	;'U'
   237  000387  4C                 	db	76	;'L'
   238  000388  4C                 	db	76	;'L'
   239  000389  20                 	db	32
   240  00038A  70                 	db	112	;'p'
   241  00038B  6F                 	db	111	;'o'
   242  00038C  69                 	db	105	;'i'
   243  00038D  6E                 	db	110	;'n'
   244  00038E  74                 	db	116	;'t'
   245  00038F  65                 	db	101	;'e'
   246  000390  72                 	db	114	;'r'
   247  000391  0A                 	db	10
   248  000392  00                 	db	0
   249  000393                     STR_3:
   250  000393  46                 	db	70	;'F'
   251  000394  61                 	db	97	;'a'
   252  000395  69                 	db	105	;'i'
   253  000396  6C                 	db	108	;'l'
   254  000397  65                 	db	101	;'e'
   255  000398  64                 	db	100	;'d'
   256  000399  20                 	db	32
   257  00039A  49                 	db	73	;'I'
   258  00039B  6E                 	db	110	;'n'
   259  00039C  69                 	db	105	;'i'
   260  00039D  74                 	db	116	;'t'
   261  00039E  69                 	db	105	;'i'
   262  00039F  61                 	db	97	;'a'
   263  0003A0  6C                 	db	108	;'l'
   264  0003A1  69                 	db	105	;'i'
   265  0003A2  7A                 	db	122	;'z'
   266  0003A3  61                 	db	97	;'a'
   267  0003A4  74                 	db	116	;'t'
   268  0003A5  69                 	db	105	;'i'
   269  0003A6  6F                 	db	111	;'o'
   270  0003A7  6E                 	db	110	;'n'
   271  0003A8  0A                 	db	10
   272  0003A9  00                 	db	0
   273  0003AA                     STR_4:
   274  0003AA  4F                 	db	79	;'O'
   275  0003AB  74                 	db	116	;'t'
   276  0003AC  68                 	db	104	;'h'
   277  0003AD  65                 	db	101	;'e'
   278  0003AE  72                 	db	114	;'r'
   279  0003AF  20                 	db	32
   280  0003B0  46                 	db	70	;'F'
   281  0003B1  61                 	db	97	;'a'
   282  0003B2  69                 	db	105	;'i'
   283  0003B3  6C                 	db	108	;'l'
   284  0003B4  75                 	db	117	;'u'
   285  0003B5  72                 	db	114	;'r'
   286  0003B6  65                 	db	101	;'e'
   287  0003B7  0A                 	db	10
   288  0003B8  00                 	db	0
   289                           
   290                           ; #config settings
   291  0003B9  00                 	db	0	; dummy byte at the end
   292  0000                     
   293                           	psect	cinit
   294  000CE8                     __pcinit:
   295                           	opt stack 0
   296  000CE8                     start_initialization:
   297                           	opt stack 0
   298  000CE8                     __initialization:
   299                           	opt stack 0
   300                           
   301                           ; Clear objects allocated to BANK0 (56 bytes)
   302  000CE8  EE00  F060         	lfsr	0,__pbssBANK0
   303  000CEC  0E38               	movlw	56
   304  000CEE                     clear_0:
   305  000CEE  6AEE               	clrf	postinc0,c
   306  000CF0  06E8               	decf	wreg,f,c
   307  000CF2  E1FD               	bnz	clear_0
   308                           
   309                           ; Clear objects allocated to COMRAM (24 bytes)
   310  000CF4  EE00  F032         	lfsr	0,__pbssCOMRAM
   311  000CF8  0E18               	movlw	24
   312  000CFA                     clear_1:
   313  000CFA  6AEE               	clrf	postinc0,c
   314  000CFC  06E8               	decf	wreg,f,c
   315  000CFE  E1FD               	bnz	clear_1
   316  000D00                     end_of_initialization:
   317                           	opt stack 0
   318  000D00                     __end_of__initialization:
   319                           	opt stack 0
   320  000D00  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   321  000D02  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   322  000D04  0E00               	movlw	low (__Lmediumconst shr (0+16))
   323  000D06  6EF8               	movwf	tblptru,c
   324  000D08  0100               	movlb	0
   325  000D0A  EF73  F004         	goto	_main	;jump to C main() function
   326                           tblptru	equ	0xFF8
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           
   330                           	psect	bssCOMRAM
   331  000032                     __pbssCOMRAM:
   332                           	opt stack 0
   333  000032                     ES_Timer_Tick_Resp@NewEvent:
   334                           	opt stack 0
   335  000032                     	ds	3
   336  000035                     ES_Timer_Tick_Resp@NeedsProcessing:
   337                           	opt stack 0
   338  000035                     	ds	2
   339  000037                     ISR@LastTime:
   340                           	opt stack 0
   341  000037                     	ds	2
   342  000039                     ISR@NextTime:
   343                           	opt stack 0
   344  000039                     	ds	2
   345  00003B                     _Ready:
   346                           	opt stack 0
   347  00003B                     	ds	2
   348  00003D                     _SysTickCounter:
   349                           	opt stack 0
   350  00003D                     	ds	2
   351  00003F                     _TMR_ActiveFlags:
   352                           	opt stack 0
   353  00003F                     	ds	2
   354  000041                     __PRIMASK_temp:
   355                           	opt stack 0
   356  000041                     	ds	2
   357  000043                     Can_XmitService@MyPriority:
   358                           	opt stack 0
   359  000043                     	ds	1
   360  000044                     ES_Timer_Tick_Resp@NextTimer2Process:
   361                           	opt stack 0
   362  000044                     	ds	1
   363  000045                     _MyPriority:
   364                           	opt stack 0
   365  000045                     	ds	1
   366  000046                     _TickCount:
   367                           	opt stack 0
   368  000046                     	ds	1
   369  000047                     ES_Run@ThisEvent:
   370                           	opt stack 0
   371  000047                     	ds	3
   372                           tblptru	equ	0xFF8
   373                           postinc0	equ	0xFEE
   374                           wreg	equ	0xFE8
   375                           
   376                           	psect	bssBANK0
   377  000060                     __pbssBANK0:
   378                           	opt stack 0
   379  000060                     _TMR_TimerArray:
   380                           	opt stack 0
   381  000060                     	ds	32
   382  000080                     _Queue0:
   383                           	opt stack 0
   384  000080                     	ds	12
   385  00008C                     _Queue1:
   386                           	opt stack 0
   387  00008C                     	ds	12
   388                           tblptru	equ	0xFF8
   389                           postinc0	equ	0xFEE
   390                           wreg	equ	0xFE8
   391                           
   392                           	psect	cstackBANK0
   393  000098                     __pcstackBANK0:
   394                           	opt stack 0
   395  000098                     ES_PostToService@WhichService:
   396                           	opt stack 0
   397                           
   398                           ; 1 bytes @ 0x0
   399  000098                     	ds	1
   400  000099                     InitToggleService@ThisEvent:
   401                           	opt stack 0
   402  000099                     PostToggleService@ThisEvent:
   403                           	opt stack 0
   404  000099                     InitCan_XmitService@ThisEvent:
   405                           	opt stack 0
   406                           
   407                           ; 3 bytes @ 0x1
   408  000099                     	ds	3
   409  00009C                     ??_ES_Timer_Tick_Resp:
   410  00009C                     InitToggleService@Priority:
   411                           	opt stack 0
   412  00009C                     InitCan_XmitService@Priority:
   413                           	opt stack 0
   414                           
   415                           ; 1 bytes @ 0x4
   416  00009C                     	ds	1
   417  00009D                     ES_Initialize@NewRate:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x5
   421  00009D                     	ds	2
   422  00009F                     ES_Initialize@i:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x7
   426  00009F                     	ds	1
   427  0000A0                     ??_ES_Run:
   428                           
   429                           ; 1 bytes @ 0x8
   430  0000A0                     	ds	4
   431  0000A4                     ES_Run@HighestPrior:
   432                           	opt stack 0
   433                           
   434                           ; 1 bytes @ 0xC
   435  0000A4                     	ds	1
   436  0000A5                     main@ErrorType:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0xD
   440  0000A5                     	ds	1
   441                           tblptru	equ	0xFF8
   442                           postinc0	equ	0xFEE
   443                           wreg	equ	0xFE8
   444                           
   445                           	psect	cstackCOMRAM
   446  000001                     __pcstackCOMRAM:
   447                           	opt stack 0
   448  000001                     ES_Timer_InitTimer@NewTime:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x0
   452  000001                     	ds	2
   453  000003                     ??_ES_Timer_InitTimer:
   454                           
   455                           ; 1 bytes @ 0x2
   456  000003                     	ds	2
   457  000005                     ES_Timer_InitTimer@Num:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0x4
   461  000005                     	ds	1
   462  000006                     ??_ISR:
   463                           
   464                           ; 1 bytes @ 0x5
   465  000006                     	ds	16
   466  000016                     ?_printf:
   467                           	opt stack 0
   468  000016                     ?___awmod:
   469                           	opt stack 0
   470  000016                     ES_CheckUserEvents@i:
   471                           	opt stack 0
   472  000016                     XmitData@DataByte:
   473                           	opt stack 0
   474  000016                     ___lbmod@divisor:
   475                           	opt stack 0
   476  000016                     ES_GetMSBitSet@Val2Check:
   477                           	opt stack 0
   478  000016                     __HW_Timer_Init@Rate:
   479                           	opt stack 0
   480  000016                     ES_InitQueue@pBlock:
   481                           	opt stack 0
   482  000016                     printf@f:
   483                           	opt stack 0
   484  000016                     ___awmod@dividend:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x15
   488  000016                     	ds	1
   489  000017                     ?_RunCan_XmitService:
   490                           	opt stack 0
   491  000017                     ?_RunToggleService:
   492                           	opt stack 0
   493  000017                     ___lbmod@dividend:
   494                           	opt stack 0
   495  000017                     RunToggleService@ThisEvent:
   496                           	opt stack 0
   497  000017                     RunCan_XmitService@ThisEvent:
   498                           	opt stack 0
   499                           
   500                           ; 3 bytes @ 0x16
   501  000017                     	ds	1
   502  000018                     ??_ES_GetMSBitSet:
   503  000018                     ES_InitQueue@BlockSize:
   504                           	opt stack 0
   505  000018                     ___lbmod@counter:
   506                           	opt stack 0
   507  000018                     ES_Timer_Init@Rate:
   508                           	opt stack 0
   509  000018                     printf@ap:
   510                           	opt stack 0
   511  000018                     ___awmod@divisor:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x17
   515  000018                     	ds	1
   516  000019                     ___lbmod@rem:
   517                           	opt stack 0
   518  000019                     ES_InitQueue@pThisQueue:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x18
   522  000019                     	ds	1
   523  00001A                     printf@c:
   524                           	opt stack 0
   525  00001A                     ___awmod@counter:
   526                           	opt stack 0
   527  00001A                     RunToggleService@ReturnEvent:
   528                           	opt stack 0
   529  00001A                     RunCan_XmitService@ReturnEvent:
   530                           	opt stack 0
   531                           
   532                           ; 3 bytes @ 0x19
   533  00001A                     	ds	1
   534  00001B                     ___awmod@sign:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x1A
   538  00001B                     	ds	1
   539  00001C                     ?___wmul:
   540                           	opt stack 0
   541  00001C                     ___wmul@multiplier:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x1B
   545  00001C                     	ds	1
   546  00001D                     ES_GetMSBitSet@ReturnVal:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x1C
   550  00001D                     	ds	1
   551  00001E                     ES_GetMSBitSet@Nybble2Test:
   552                           	opt stack 0
   553  00001E                     ___wmul@multiplicand:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x1D
   557  00001E                     	ds	1
   558  00001F                     ES_GetMSBitSet@LoopCntr:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x1E
   562  00001F                     	ds	1
   563  000020                     ___wmul@product:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x1F
   567  000020                     	ds	2
   568  000022                     ES_EnQueueFIFO@pBlock:
   569                           	opt stack 0
   570  000022                     ES_DeQueue@pBlock:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x21
   574  000022                     	ds	2
   575  000024                     ES_DeQueue@pReturnEvent:
   576                           	opt stack 0
   577  000024                     ES_EnQueueFIFO@Event2Add:
   578                           	opt stack 0
   579                           
   580                           ; 3 bytes @ 0x23
   581  000024                     	ds	2
   582  000026                     ??_ES_DeQueue:
   583                           
   584                           ; 1 bytes @ 0x25
   585  000026                     	ds	1
   586  000027                     ??_ES_EnQueueFIFO:
   587                           
   588                           ; 1 bytes @ 0x26
   589  000027                     	ds	1
   590  000028                     ES_DeQueue@SaveCrit:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x27
   594  000028                     	ds	1
   595  000029                     ES_DeQueue@NumLeft:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x28
   599  000029                     	ds	1
   600  00002A                     ES_EnQueueFIFO@SaveCrit:
   601                           	opt stack 0
   602  00002A                     ES_DeQueue@pThisQueue:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x29
   606  00002A                     	ds	1
   607  00002B                     ES_EnQueueFIFO@pThisQueue:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x2A
   611  00002B                     	ds	2
   612  00002D                     ES_PostToService@TheEvent:
   613                           	opt stack 0
   614                           
   615                           ; 3 bytes @ 0x2C
   616  00002D                     	ds	3
   617  000030                     ??_ES_PostToService:
   618                           
   619                           ; 1 bytes @ 0x2F
   620  000030                     	ds	2
   621  000032                     tblptru	equ	0xFF8
   622                           postinc0	equ	0xFEE
   623                           wreg	equ	0xFE8
   624                           
   625                           ; 1 bytes @ 0x31
   626 ;;
   627 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   628 ;;
   629 ;; *************** function _main *****************
   630 ;; Defined at:
   631 ;;		line 25 in file "main.c"
   632 ;; Parameters:    Size  Location     Type
   633 ;;		None
   634 ;; Auto vars:     Size  Location     Type
   635 ;;  ErrorType       1   13[BANK0 ] enum E15642
   636 ;; Return value:  Size  Location     Type
   637 ;;                  2  275[None  ] int 
   638 ;; Registers used:
   639 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   640 ;; Tracked objects:
   641 ;;		On entry : 0/0
   642 ;;		On exit  : 0/0
   643 ;;		Unchanged: 0/0
   644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   645 ;;      Params:         0       0       0       0
   646 ;;      Locals:         0       1       0       0
   647 ;;      Temps:          0       0       0       0
   648 ;;      Totals:         0       1       0       0
   649 ;;Total ram usage:        1 bytes
   650 ;; Hardware stack levels required when called:   10
   651 ;; This function calls:
   652 ;;		_ES_Initialize
   653 ;;		_ES_Run
   654 ;;		_printf
   655 ;; This function is called by:
   656 ;;		Startup code after reset
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660                           	psect	text0
   661  0008E6                     __ptext0:
   662                           	opt stack 0
   663  0008E6                     _main:
   664                           	opt stack 21
   665                           
   666                           ;main.c: 28: IRCF0 = 1;
   667                           
   668                           ;incstack = 0
   669  0008E6  88D3               	bsf	4051,4,c	;volatile
   670                           
   671                           ;main.c: 29: IRCF1 = 1;
   672  0008E8  8AD3               	bsf	4051,5,c	;volatile
   673                           
   674                           ;main.c: 30: IRCF2 = 1;
   675  0008EA  8CD3               	bsf	4051,6,c	;volatile
   676                           
   677                           ;main.c: 31: SCS1 = 1;
   678  0008EC  82D3               	bsf	4051,1,c	;volatile
   679                           
   680                           ;main.c: 39: ES_Return_t ErrorType;
   681                           ;main.c: 55: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
   682  0008EE  0E9C               	movlw	156
   683  0008F0  0100               	movlb	0	; () banked
   684  0008F2  6F9E               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
   685  0008F4  0E3F               	movlw	63
   686  0008F6  6F9D               	movwf	ES_Initialize@NewRate& (0+255),b
   687  0008F8  ECD8  F002         	call	_ES_Initialize	;wreg free
   688  0008FC  0100               	movlb	0	; () banked
   689  0008FE  6FA5               	movwf	main@ErrorType& (0+255),b
   690                           
   691                           ; BSR set to: 0
   692                           ;main.c: 56: if ( ErrorType == Success ) {
   693  000900  0100               	movlb	0	; () banked
   694  000902  51A5               	movf	main@ErrorType& (0+255),w,b
   695  000904  0100               	movlb	0	; () banked
   696  000906  A4D8               	btfss	status,2,c
   697  000908  D021               	goto	l2537
   698                           
   699                           ; BSR set to: 0
   700                           ;main.c: 58: ErrorType = ES_Run();
   701  00090A  EC4E  F003         	call	_ES_Run	;wreg free
   702  00090E  0100               	movlb	0	; () banked
   703  000910  6FA5               	movwf	main@ErrorType& (0+255),b
   704                           
   705                           ; BSR set to: 0
   706                           ;main.c: 60: }
   707                           ;main.c: 62: switch (ErrorType){
   708  000912  D01C               	goto	l2537
   709  000914                     l2527:
   710                           
   711                           ; BSR set to: 0
   712                           ;main.c: 64: printf("Failed on attempt to Post\n");
   713  000914  0E60               	movlw	low STR_1
   714  000916  6E16               	movwf	printf@f,c
   715  000918  0E03               	movlw	high STR_1
   716  00091A  6E17               	movwf	printf@f+1,c
   717  00091C  EC35  F006         	call	_printf	;wreg free
   718                           
   719                           ;main.c: 65: break;
   720  000920  D021               	goto	l283
   721  000922                     l2529:
   722                           
   723                           ;main.c: 67: printf("Failed on NULL pointer\n");
   724  000922  0E7B               	movlw	low STR_2
   725  000924  6E16               	movwf	printf@f,c
   726  000926  0E03               	movlw	high STR_2
   727  000928  6E17               	movwf	printf@f+1,c
   728  00092A  EC35  F006         	call	_printf	;wreg free
   729                           
   730                           ;main.c: 68: break;
   731  00092E  D01A               	goto	l283
   732  000930                     l2531:
   733                           
   734                           ;main.c: 70: printf("Failed Initialization\n");
   735  000930  0E93               	movlw	low STR_3
   736  000932  6E16               	movwf	printf@f,c
   737  000934  0E03               	movlw	high STR_3
   738  000936  6E17               	movwf	printf@f+1,c
   739  000938  EC35  F006         	call	_printf	;wreg free
   740                           
   741                           ;main.c: 71: break;
   742  00093C  D013               	goto	l283
   743  00093E                     l2533:
   744                           
   745                           ;main.c: 73: printf("Other Failure\n");
   746  00093E  0EAA               	movlw	low STR_4
   747  000940  6E16               	movwf	printf@f,c
   748  000942  0E03               	movlw	high STR_4
   749  000944  6E17               	movwf	printf@f+1,c
   750  000946  EC35  F006         	call	_printf	;wreg free
   751                           
   752                           ;main.c: 75: }
   753                           
   754                           ;main.c: 74: break;
   755  00094A  D00C               	goto	l283
   756  00094C                     l2537:
   757  00094C  0100               	movlb	0	; () banked
   758  00094E  51A5               	movf	main@ErrorType& (0+255),w,b
   759                           
   760                           ; Switch size 1, requested type "space"
   761                           ; Number of cases is 3, Range of values is 1 to 5
   762                           ; switch strategies available:
   763                           ; Name         Instructions Cycles
   764                           ; simple_byte           10     6 (average)
   765                           ;	Chosen strategy is simple_byte
   766  000950  0A01               	xorlw	1	; case 1
   767  000952  B4D8               	btfsc	status,2,c
   768  000954  D7DF               	goto	l2527
   769  000956  0A02               	xorlw	2	; case 3
   770  000958  B4D8               	btfsc	status,2,c
   771  00095A  D7E3               	goto	l2529
   772  00095C  0A06               	xorlw	6	; case 5
   773  00095E  B4D8               	btfsc	status,2,c
   774  000960  D7E7               	goto	l2531
   775  000962  D7ED               	goto	l2533
   776  000964                     l283:
   777                           
   778                           ;main.c: 77: ;
   779  000964  D7FF               	goto	l283
   780  000966                     __end_of_main:
   781                           	opt stack 0
   782                           tblptru	equ	0xFF8
   783                           postinc0	equ	0xFEE
   784                           wreg	equ	0xFE8
   785                           status	equ	0xFD8
   786                           
   787 ;; *************** function _printf *****************
   788 ;; Defined at:
   789 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;  f               2   21[COMRAM] PTR const unsigned char 
   792 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
   793 ;; Auto vars:     Size  Location     Type
   794 ;;  tmpval          4    0        struct .
   795 ;;  cp              3    0        PTR const unsigned char 
   796 ;;  ap              2   23[COMRAM] PTR void [1]
   797 ;;		 -> ?_printf(2), 
   798 ;;  len             2    0        unsigned int 
   799 ;;  val             2    0        unsigned int 
   800 ;;  c               1   25[COMRAM] char 
   801 ;;  flag            1    0        unsigned char 
   802 ;;  prec            1    0        char 
   803 ;; Return value:  Size  Location     Type
   804 ;;                  2   21[COMRAM] int 
   805 ;; Registers used:
   806 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   812 ;;      Params:         2       0       0       0
   813 ;;      Locals:         3       0       0       0
   814 ;;      Temps:          0       0       0       0
   815 ;;      Totals:         5       0       0       0
   816 ;;Total ram usage:        5 bytes
   817 ;; Hardware stack levels used:    1
   818 ;; Hardware stack levels required when called:    4
   819 ;; This function calls:
   820 ;;		_putch
   821 ;; This function is called by:
   822 ;;		_main
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           	psect	text1
   827  000C6A                     __ptext1:
   828                           	opt stack 0
   829  000C6A                     _printf:
   830                           	opt stack 26
   831                           
   832                           ;doprnt.c: 466: va_list ap;
   833                           ;doprnt.c: 499: signed char c;
   834                           ;doprnt.c: 506: signed char prec;
   835                           ;doprnt.c: 508: unsigned char flag;
   836                           ;doprnt.c: 523: union {
   837                           ;doprnt.c: 524: unsigned long vd;
   838                           ;doprnt.c: 525: double integ;
   839                           ;doprnt.c: 526: } tmpval;
   840                           ;doprnt.c: 528: unsigned int val;
   841                           ;doprnt.c: 529: unsigned len;
   842                           ;doprnt.c: 530: const char * cp;
   843                           ;doprnt.c: 533: *ap = __va_start();
   844                           
   845                           ;incstack = 0
   846  000C6A  0E18               	movlw	low (?_printf+2)
   847  000C6C  6E18               	movwf	printf@ap,c
   848  000C6E  0E00               	movlw	high (?_printf+2)
   849  000C70  6E19               	movwf	printf@ap+1,c
   850                           
   851                           ;doprnt.c: 536: while(c = *f++) {
   852  000C72  D003               	goto	l2447
   853  000C74                     l2445:
   854                           
   855                           ;doprnt.c: 540: {
   856                           ;doprnt.c: 541: (putch(c) );
   857  000C74  501A               	movf	printf@c,w,c
   858  000C76  ECFD  F006         	call	_putch
   859  000C7A                     l2447:
   860  000C7A  C016  FFF6         	movff	printf@f,tblptrl
   861  000C7E  C017  FFF7         	movff	printf@f+1,tblptrh
   862  000C82  4A16               	infsnz	printf@f,f,c
   863  000C84  2A17               	incf	printf@f+1,f,c
   864  000C86                     	if	0	;tblptru may be non-zero
   865  000C86                     	endif
   866  000C86                     	if	0	;tblptru may be non-zero
   867  000C86                     	endif
   868  000C86  0008               	tblrd		*
   869  000C88  CFF5 F01A          	movff	tablat,printf@c
   870  000C8C  501A               	movf	printf@c,w,c
   871  000C8E  B4D8               	btfsc	status,2,c
   872  000C90  0012               	return	
   873  000C92  D7F0               	goto	l2445
   874  000C94                     __end_of_printf:
   875                           	opt stack 0
   876                           tblptru	equ	0xFF8
   877                           tblptrh	equ	0xFF7
   878                           tblptrl	equ	0xFF6
   879                           tablat	equ	0xFF5
   880                           postinc0	equ	0xFEE
   881                           wreg	equ	0xFE8
   882                           status	equ	0xFD8
   883                           
   884 ;; *************** function _putch *****************
   885 ;; Defined at:
   886 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;  c               1    wreg     unsigned char 
   889 ;; Auto vars:     Size  Location     Type
   890 ;;  c               1    0[COMRAM] unsigned char 
   891 ;; Return value:  Size  Location     Type
   892 ;;                  1    wreg      void 
   893 ;; Registers used:
   894 ;;		wreg
   895 ;; Tracked objects:
   896 ;;		On entry : 0/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   900 ;;      Params:         0       0       0       0
   901 ;;      Locals:         0       0       0       0
   902 ;;      Temps:          0       0       0       0
   903 ;;      Totals:         0       0       0       0
   904 ;;Total ram usage:        0 bytes
   905 ;; Hardware stack levels used:    1
   906 ;; Hardware stack levels required when called:    3
   907 ;; This function calls:
   908 ;;		Nothing
   909 ;; This function is called by:
   910 ;;		_printf
   911 ;; This function uses a non-reentrant model
   912 ;;
   913                           
   914                           	psect	text2
   915  000DFA                     __ptext2:
   916                           	opt stack 0
   917  000DFA                     _putch:
   918                           	opt stack 26
   919                           
   920                           ;incstack = 0
   921  000DFA  0012               	return		;funcret
   922  000DFC                     __end_of_putch:
   923                           	opt stack 0
   924                           tblptru	equ	0xFF8
   925                           tblptrh	equ	0xFF7
   926                           tblptrl	equ	0xFF6
   927                           tablat	equ	0xFF5
   928                           postinc0	equ	0xFEE
   929                           wreg	equ	0xFE8
   930                           status	equ	0xFD8
   931                           
   932 ;; *************** function _ES_Run *****************
   933 ;; Defined at:
   934 ;;		line 277 in file "ES_Framework.c"
   935 ;; Parameters:    Size  Location     Type
   936 ;;		None
   937 ;; Auto vars:     Size  Location     Type
   938 ;;  HighestPrior    1   12[BANK0 ] unsigned char 
   939 ;; Return value:  Size  Location     Type
   940 ;;                  1    wreg      enum E15490
   941 ;; Registers used:
   942 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   948 ;;      Params:         0       0       0       0
   949 ;;      Locals:         0       1       0       0
   950 ;;      Temps:          0       4       0       0
   951 ;;      Totals:         0       5       0       0
   952 ;;Total ram usage:        5 bytes
   953 ;; Hardware stack levels used:    1
   954 ;; Hardware stack levels required when called:    9
   955 ;; This function calls:
   956 ;;		_ES_CheckUserEvents
   957 ;;		_ES_DeQueue
   958 ;;		_ES_GetMSBitSet
   959 ;;		_RunCan_XmitService
   960 ;;		_RunToggleService
   961 ;;		__HW_Process_Pending_Ints
   962 ;; This function is called by:
   963 ;;		_main
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967                           	psect	text3
   968  00069C                     __ptext3:
   969                           	opt stack 0
   970  00069C                     _ES_Run:
   971                           	opt stack 21
   972                           
   973                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
   974                           
   975                           ;incstack = 0
   976                           ;ES_Framework.c: 279: uint8_t HighestPrior;
   977                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
   978                           ;ES_Framework.c: 282: while(1){
   979  00069C  D067               	goto	l2433
   980  00069E                     l2421:
   981                           
   982                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
   983  00069E  C03B  F016         	movff	_Ready,ES_GetMSBitSet@Val2Check
   984  0006A2  C03C  F017         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
   985  0006A6  ECB3  F004         	call	_ES_GetMSBitSet	;wreg free
   986  0006AA  0100               	movlb	0	; () banked
   987  0006AC  6FA4               	movwf	ES_Run@HighestPrior& (0+255),b
   988                           
   989                           ; BSR set to: 0
   990                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
   991  0006AE  0100               	movlb	0	; () banked
   992  0006B0  51A4               	movf	ES_Run@HighestPrior& (0+255),w,b
   993  0006B2  0D03               	mullw	3
   994  0006B4  0E58               	movlw	low _EventQueues
   995  0006B6  24F3               	addwf	prodl,w,c
   996  0006B8  6EF6               	movwf	tblptrl,c
   997  0006BA  0E03               	movlw	high _EventQueues
   998  0006BC  20F4               	addwfc	prodh,w,c
   999  0006BE  6EF7               	movwf	tblptrh,c
  1000  0006C0                     	if	0	;There are less than 3 active tblptr bytes
  1001  0006C0                     	endif
  1002  0006C0  0009               	tblrd		*+
  1003  0006C2  CFF5 F022          	movff	tablat,ES_DeQueue@pBlock
  1004  0006C6  000A               	tblrd		*-
  1005  0006C8  CFF5 F023          	movff	tablat,ES_DeQueue@pBlock+1
  1006  0006CC  0E47               	movlw	low ES_Run@ThisEvent
  1007  0006CE  6E24               	movwf	ES_DeQueue@pReturnEvent,c
  1008  0006D0  0E00               	movlw	high ES_Run@ThisEvent
  1009  0006D2  6E25               	movwf	ES_DeQueue@pReturnEvent+1,c
  1010  0006D4  ECDD  F001         	call	_ES_DeQueue	;wreg free
  1011  0006D8  0900               	iorlw	0
  1012  0006DA  A4D8               	btfss	status,2,c
  1013  0006DC  D01D               	goto	l2427
  1014                           
  1015                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1016  0006DE  0100               	movlb	0	; () banked
  1017  0006E0  51A4               	movf	ES_Run@HighestPrior& (0+255),w,b
  1018  0006E2  0D02               	mullw	2
  1019  0006E4  0E01               	movlw	low _BitNum2SetMask
  1020  0006E6  24F3               	addwf	prodl,w,c
  1021  0006E8  6EF6               	movwf	tblptrl,c
  1022  0006EA  0E03               	movlw	high _BitNum2SetMask
  1023  0006EC  20F4               	addwfc	prodh,w,c
  1024  0006EE  6EF7               	movwf	tblptrh,c
  1025  0006F0                     	if	0	;There are less than 3 active tblptr bytes
  1026  0006F0                     	endif
  1027  0006F0  0009               	tblrd		*+
  1028  0006F2  CFF5 F0A0          	movff	tablat,??_ES_Run
  1029  0006F6  0009               	tblrd		*+
  1030  0006F8  CFF5 F0A1          	movff	tablat,??_ES_Run+1
  1031  0006FC  0100               	movlb	0	; () banked
  1032  0006FE  1DA0               	comf	??_ES_Run& (0+255),w,b
  1033  000700  0100               	movlb	0	; () banked
  1034  000702  6FA2               	movwf	(??_ES_Run+2)& (0+255),b
  1035  000704  0100               	movlb	0	; () banked
  1036  000706  1DA1               	comf	(??_ES_Run+1)& (0+255),w,b
  1037  000708  0100               	movlb	0	; () banked
  1038  00070A  6FA3               	movwf	(??_ES_Run+3)& (0+255),b
  1039  00070C  0100               	movlb	0	; () banked
  1040  00070E  51A2               	movf	(??_ES_Run+2)& (0+255),w,b
  1041  000710  163B               	andwf	_Ready,f,c
  1042  000712  0100               	movlb	0	; () banked
  1043  000714  51A3               	movf	(??_ES_Run+3)& (0+255),w,b
  1044  000716  163C               	andwf	_Ready+1,f,c
  1045  000718                     l2427:
  1046                           
  1047                           ;ES_Framework.c: 291: }
  1048                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1049  000718  C047  F017         	movff	ES_Run@ThisEvent,RunToggleService@ThisEvent
  1050  00071C  C048  F018         	movff	ES_Run@ThisEvent+1,RunToggleService@ThisEvent+1
  1051  000720  C049  F019         	movff	ES_Run@ThisEvent+2,RunToggleService@ThisEvent+2
  1052  000724  0100               	movlb	0	; () banked
  1053  000726  51A4               	movf	ES_Run@HighestPrior& (0+255),w,b
  1054  000728  0D04               	mullw	4
  1055  00072A  0E02               	movlw	2
  1056  00072C  26F3               	addwf	prodl,f,c
  1057  00072E  0E00               	movlw	0
  1058  000730  22F4               	addwfc	prodh,f,c
  1059  000732  0E50               	movlw	low _ServDescList
  1060  000734  24F3               	addwf	prodl,w,c
  1061  000736  6EF6               	movwf	tblptrl,c
  1062  000738  0E03               	movlw	high _ServDescList
  1063  00073A  20F4               	addwfc	prodh,w,c
  1064  00073C  6EF7               	movwf	tblptrh,c
  1065  00073E                     	if	0	;There are less than 3 active tblptr bytes
  1066  00073E                     	endif
  1067  00073E  D801               	call	u1678
  1068  000740  D00C               	goto	u1679
  1069  000742                     u1678:
  1070  000742  0005               	push	
  1071  000744  6EFA               	movwf	pclath,c
  1072  000746  0009               	tblrd		*+
  1073  000748  50F5               	movf	tablat,w,c
  1074  00074A  6EFD               	movwf	tosl,c
  1075  00074C  0009               	tblrd		*+
  1076  00074E  50F5               	movf	tablat,w,c
  1077  000750  6EFE               	movwf	tosh,c
  1078  000752  50F8               	movf	tblptru,w,c
  1079  000754  6EFF               	movwf	tosu,c
  1080  000756  50FA               	movf	pclath,w,c
  1081  000758  0012               	return		;indir
  1082  00075A                     u1679:
  1083  00075A  0E17               	movlw	low ?_RunToggleService
  1084  00075C  6ED9               	movwf	fsr2l,c
  1085  00075E  0E00               	movlw	high ?_RunToggleService
  1086  000760  6EDA               	movwf	fsr2h,c
  1087  000762  50DF               	movf	indf2,w,c
  1088  000764  B4D8               	btfsc	status,2,c
  1089  000766  D002               	goto	l2433
  1090                           
  1091                           ;ES_Framework.c: 293: return FailedRun;
  1092  000768  0E02               	movlw	2
  1093  00076A  0012               	return	
  1094  00076C                     l2433:
  1095  00076C  ECEB  F006         	call	__HW_Process_Pending_Ints	;wreg free
  1096  000770  0900               	iorlw	0
  1097  000772  B4D8               	btfsc	status,2,c
  1098  000774  D004               	goto	l2437
  1099  000776  503B               	movf	_Ready,w,c
  1100  000778  103C               	iorwf	_Ready+1,w,c
  1101  00077A  A4D8               	btfss	status,2,c
  1102  00077C  D790               	goto	l2421
  1103  00077E                     l2437:
  1104                           
  1105                           ;ES_Framework.c: 294: }
  1106                           ;ES_Framework.c: 295: }
  1107                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1108  00077E  ECE3  F005         	call	_ES_CheckUserEvents	;wreg free
  1109  000782  D7F4               	goto	l2433
  1110  000784                     __end_of_ES_Run:
  1111                           	opt stack 0
  1112                           tosu	equ	0xFFF
  1113                           tosh	equ	0xFFE
  1114                           tosl	equ	0xFFD
  1115                           pclath	equ	0xFFA
  1116                           tblptru	equ	0xFF8
  1117                           tblptrh	equ	0xFF7
  1118                           tblptrl	equ	0xFF6
  1119                           tablat	equ	0xFF5
  1120                           prodh	equ	0xFF4
  1121                           prodl	equ	0xFF3
  1122                           postinc0	equ	0xFEE
  1123                           wreg	equ	0xFE8
  1124                           indf2	equ	0xFDF
  1125                           fsr2h	equ	0xFDA
  1126                           fsr2l	equ	0xFD9
  1127                           status	equ	0xFD8
  1128                           
  1129 ;; *************** function __HW_Process_Pending_Ints *****************
  1130 ;; Defined at:
  1131 ;;		line 217 in file "ES_Port.c"
  1132 ;; Parameters:    Size  Location     Type
  1133 ;;		None
  1134 ;; Auto vars:     Size  Location     Type
  1135 ;;		None
  1136 ;; Return value:  Size  Location     Type
  1137 ;;                  1    wreg      unsigned char 
  1138 ;; Registers used:
  1139 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1140 ;; Tracked objects:
  1141 ;;		On entry : 0/0
  1142 ;;		On exit  : 0/0
  1143 ;;		Unchanged: 0/0
  1144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1145 ;;      Params:         0       0       0       0
  1146 ;;      Locals:         0       0       0       0
  1147 ;;      Temps:          0       0       0       0
  1148 ;;      Totals:         0       0       0       0
  1149 ;;Total ram usage:        0 bytes
  1150 ;; Hardware stack levels used:    1
  1151 ;; Hardware stack levels required when called:    8
  1152 ;; This function calls:
  1153 ;;		_ES_Timer_Tick_Resp
  1154 ;; This function is called by:
  1155 ;;		_ES_Run
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           	psect	text4
  1160  000DD6                     __ptext4:
  1161                           	opt stack 0
  1162  000DD6                     __HW_Process_Pending_Ints:
  1163                           	opt stack 21
  1164                           
  1165                           ;ES_Port.c: 219: while (TickCount > 0)
  1166                           
  1167                           ;incstack = 0
  1168  000DD6  D003               	goto	l2317
  1169  000DD8                     l2313:
  1170                           
  1171                           ;ES_Port.c: 220: {
  1172                           ;ES_Port.c: 222: ES_Timer_Tick_Resp();
  1173  000DD8  EC5C  F002         	call	_ES_Timer_Tick_Resp	;wreg free
  1174                           
  1175                           ;ES_Port.c: 223: TickCount--;
  1176  000DDC  0646               	decf	_TickCount,f,c	;volatile
  1177  000DDE                     l2317:
  1178  000DDE  5046               	movf	_TickCount,w,c	;volatile
  1179  000DE0  A4D8               	btfss	status,2,c
  1180  000DE2  D7FA               	goto	l2313
  1181                           
  1182                           ;ES_Port.c: 224: }
  1183                           ;ES_Port.c: 226: return 1;
  1184  000DE4  0E01               	movlw	1
  1185  000DE6  0012               	return	
  1186  000DE8                     __end_of__HW_Process_Pending_Ints:
  1187                           	opt stack 0
  1188                           tosu	equ	0xFFF
  1189                           tosh	equ	0xFFE
  1190                           tosl	equ	0xFFD
  1191                           pclath	equ	0xFFA
  1192                           tblptru	equ	0xFF8
  1193                           tblptrh	equ	0xFF7
  1194                           tblptrl	equ	0xFF6
  1195                           tablat	equ	0xFF5
  1196                           prodh	equ	0xFF4
  1197                           prodl	equ	0xFF3
  1198                           postinc0	equ	0xFEE
  1199                           wreg	equ	0xFE8
  1200                           indf2	equ	0xFDF
  1201                           fsr2h	equ	0xFDA
  1202                           fsr2l	equ	0xFD9
  1203                           status	equ	0xFD8
  1204                           
  1205 ;; *************** function _ES_Timer_Tick_Resp *****************
  1206 ;; Defined at:
  1207 ;;		line 284 in file "ES_Timers.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;		None
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;		None
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  1    wreg      void 
  1214 ;; Registers used:
  1215 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1221 ;;      Params:         0       0       0       0
  1222 ;;      Locals:         0       0       0       0
  1223 ;;      Temps:          0       4       0       0
  1224 ;;      Totals:         0       4       0       0
  1225 ;;Total ram usage:        4 bytes
  1226 ;; Hardware stack levels used:    1
  1227 ;; Hardware stack levels required when called:    7
  1228 ;; This function calls:
  1229 ;;		Absolute function
  1230 ;;		_ES_GetMSBitSet
  1231 ;;		_PostToggleService
  1232 ;; This function is called by:
  1233 ;;		__HW_Process_Pending_Ints
  1234 ;; This function uses a non-reentrant model
  1235 ;;
  1236                           
  1237                           	psect	text5
  1238  0004B8                     __ptext5:
  1239                           	opt stack 0
  1240  0004B8                     _ES_Timer_Tick_Resp:
  1241                           	opt stack 21
  1242                           
  1243                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1244                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1245                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1246                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1247                           
  1248                           ;incstack = 0
  1249  0004B8  503F               	movf	_TMR_ActiveFlags,w,c
  1250  0004BA  1040               	iorwf	_TMR_ActiveFlags+1,w,c
  1251  0004BC  B4D8               	btfsc	status,2,c
  1252  0004BE  0012               	return	
  1253                           
  1254                           ;ES_Timers.c: 291: {
  1255                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1256  0004C0  C03F  F035         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1257  0004C4  C040  F036         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1258  0004C8                     l2183:
  1259                           
  1260                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1261  0004C8  C035  F016         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1262  0004CC  C036  F017         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1263  0004D0  ECB3  F004         	call	_ES_GetMSBitSet	;wreg free
  1264  0004D4  6E44               	movwf	ES_Timer_Tick_Resp@NextTimer2Process,c
  1265                           
  1266                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1267  0004D6  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1268  0004D8  0D02               	mullw	2
  1269  0004DA  0E60               	movlw	low _TMR_TimerArray
  1270  0004DC  24F3               	addwf	prodl,w,c
  1271  0004DE  6ED9               	movwf	fsr2l,c
  1272  0004E0  0E00               	movlw	high _TMR_TimerArray
  1273  0004E2  20F4               	addwfc	prodh,w,c
  1274  0004E4  6EDA               	movwf	fsr2h,c
  1275  0004E6  06DE               	decf	postinc2,f,c
  1276  0004E8  0E00               	movlw	0
  1277  0004EA  5ADD               	subwfb	postdec2,f,c
  1278  0004EC  50DE               	movf	postinc2,w,c
  1279  0004EE  10DE               	iorwf	postinc2,w,c
  1280  0004F0  A4D8               	btfss	status,2,c
  1281  0004F2  D03D               	goto	l2195
  1282                           
  1283                           ;ES_Timers.c: 299: {
  1284                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1285  0004F4  0E03               	movlw	3
  1286  0004F6  6E32               	movwf	ES_Timer_Tick_Resp@NewEvent,c
  1287                           
  1288                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1289  0004F8  C044  F033         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1290  0004FC  6A34               	clrf	ES_Timer_Tick_Resp@NewEvent+2,c
  1291                           
  1292                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1293  0004FE  C032  F099         	movff	ES_Timer_Tick_Resp@NewEvent,PostToggleService@ThisEvent
  1294  000502  C033  F09A         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostToggleService@ThisEvent+1
  1295  000506  C034  F09B         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostToggleService@ThisEvent+2
  1296  00050A  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1297  00050C  0D02               	mullw	2
  1298  00050E  0E21               	movlw	low _Timer2PostFunc
  1299  000510  24F3               	addwf	prodl,w,c
  1300  000512  6EF6               	movwf	tblptrl,c
  1301  000514  0E03               	movlw	high _Timer2PostFunc
  1302  000516  20F4               	addwfc	prodh,w,c
  1303  000518  6EF7               	movwf	tblptrh,c
  1304  00051A                     	if	0	;There are less than 3 active tblptr bytes
  1305  00051A                     	endif
  1306  00051A  D801               	call	u1438
  1307  00051C  D00C               	goto	l2193
  1308  00051E                     u1438:
  1309  00051E  0005               	push	
  1310  000520  6EFA               	movwf	pclath,c
  1311  000522  0009               	tblrd		*+
  1312  000524  50F5               	movf	tablat,w,c
  1313  000526  6EFD               	movwf	tosl,c
  1314  000528  0009               	tblrd		*+
  1315  00052A  50F5               	movf	tablat,w,c
  1316  00052C  6EFE               	movwf	tosh,c
  1317  00052E  50F8               	movf	tblptru,w,c
  1318  000530  6EFF               	movwf	tosu,c
  1319  000532  50FA               	movf	pclath,w,c
  1320  000534  0012               	return		;indir
  1321  000536                     l2193:
  1322                           
  1323                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1324  000536  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1325  000538  0D02               	mullw	2
  1326  00053A  0E01               	movlw	low _BitNum2SetMask
  1327  00053C  24F3               	addwf	prodl,w,c
  1328  00053E  6EF6               	movwf	tblptrl,c
  1329  000540  0E03               	movlw	high _BitNum2SetMask
  1330  000542  20F4               	addwfc	prodh,w,c
  1331  000544  6EF7               	movwf	tblptrh,c
  1332  000546                     	if	0	;There are less than 3 active tblptr bytes
  1333  000546                     	endif
  1334  000546  0009               	tblrd		*+
  1335  000548  CFF5 F09C          	movff	tablat,??_ES_Timer_Tick_Resp
  1336  00054C  0009               	tblrd		*+
  1337  00054E  CFF5 F09D          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1338  000552  0100               	movlb	0	; () banked
  1339  000554  1D9C               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1340  000556  0100               	movlb	0	; () banked
  1341  000558  6F9E               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1342  00055A  0100               	movlb	0	; () banked
  1343  00055C  1D9D               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1344  00055E  0100               	movlb	0	; () banked
  1345  000560  6F9F               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1346  000562  0100               	movlb	0	; () banked
  1347  000564  519E               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1348  000566  163F               	andwf	_TMR_ActiveFlags,f,c
  1349  000568  0100               	movlb	0	; () banked
  1350  00056A  519F               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1351  00056C  1640               	andwf	_TMR_ActiveFlags+1,f,c
  1352  00056E                     l2195:
  1353                           
  1354                           ;ES_Timers.c: 306: }
  1355                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1356  00056E  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1357  000570  0D02               	mullw	2
  1358  000572  0E01               	movlw	low _BitNum2SetMask
  1359  000574  24F3               	addwf	prodl,w,c
  1360  000576  6EF6               	movwf	tblptrl,c
  1361  000578  0E03               	movlw	high _BitNum2SetMask
  1362  00057A  20F4               	addwfc	prodh,w,c
  1363  00057C  6EF7               	movwf	tblptrh,c
  1364  00057E                     	if	0	;There are less than 3 active tblptr bytes
  1365  00057E                     	endif
  1366  00057E  0009               	tblrd		*+
  1367  000580  CFF5 F09C          	movff	tablat,??_ES_Timer_Tick_Resp
  1368  000584  0009               	tblrd		*+
  1369  000586  CFF5 F09D          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1370  00058A  0100               	movlb	0	; () banked
  1371  00058C  1D9C               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1372  00058E  0100               	movlb	0	; () banked
  1373  000590  6F9E               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1374  000592  0100               	movlb	0	; () banked
  1375  000594  1D9D               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1376  000596  0100               	movlb	0	; () banked
  1377  000598  6F9F               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1378  00059A  0100               	movlb	0	; () banked
  1379  00059C  519E               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1380  00059E  1635               	andwf	ES_Timer_Tick_Resp@NeedsProcessing,f,c
  1381  0005A0  0100               	movlb	0	; () banked
  1382  0005A2  519F               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1383  0005A4  1636               	andwf	ES_Timer_Tick_Resp@NeedsProcessing+1,f,c
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1387  0005A6  5035               	movf	ES_Timer_Tick_Resp@NeedsProcessing,w,c
  1388  0005A8  1036               	iorwf	ES_Timer_Tick_Resp@NeedsProcessing+1,w,c
  1389  0005AA  B4D8               	btfsc	status,2,c
  1390  0005AC  0012               	return	
  1391  0005AE  D78C               	goto	l2183
  1392  0005B0                     __end_of_ES_Timer_Tick_Resp:
  1393                           	opt stack 0
  1394                           tosu	equ	0xFFF
  1395                           tosh	equ	0xFFE
  1396                           tosl	equ	0xFFD
  1397                           pclath	equ	0xFFA
  1398                           tblptru	equ	0xFF8
  1399                           tblptrh	equ	0xFF7
  1400                           tblptrl	equ	0xFF6
  1401                           tablat	equ	0xFF5
  1402                           prodh	equ	0xFF4
  1403                           prodl	equ	0xFF3
  1404                           postinc0	equ	0xFEE
  1405                           wreg	equ	0xFE8
  1406                           indf2	equ	0xFDF
  1407                           postinc2	equ	0xFDE
  1408                           postdec2	equ	0xFDD
  1409                           fsr2h	equ	0xFDA
  1410                           fsr2l	equ	0xFD9
  1411                           status	equ	0xFD8
  1412                           
  1413 ;; *************** function _PostToggleService *****************
  1414 ;; Defined at:
  1415 ;;		line 108 in file "ToggleService.c"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;  ThisEvent       3    1[BANK0 ] struct ES_Event_t
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;		None
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  1    wreg      unsigned char 
  1422 ;; Registers used:
  1423 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1429 ;;      Params:         0       3       0       0
  1430 ;;      Locals:         0       0       0       0
  1431 ;;      Temps:          0       0       0       0
  1432 ;;      Totals:         0       3       0       0
  1433 ;;Total ram usage:        3 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; Hardware stack levels required when called:    6
  1436 ;; This function calls:
  1437 ;;		_ES_PostToService
  1438 ;; This function is called by:
  1439 ;;		_ES_Timer_Tick_Resp
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text6
  1444  000D9A                     __ptext6:
  1445                           	opt stack 0
  1446  000D9A                     _PostToggleService:
  1447                           	opt stack 21
  1448                           
  1449                           ;ToggleService.c: 110: return ES_PostToService( MyPriority, ThisEvent);
  1450                           ;	Return value of _PostToggleService is never used
  1451                           
  1452                           ;incstack = 0
  1453  000D9A  C099  F02D         	movff	PostToggleService@ThisEvent,ES_PostToService@TheEvent
  1454  000D9E  C09A  F02E         	movff	PostToggleService@ThisEvent+1,ES_PostToService@TheEvent+1
  1455  000DA2  C09B  F02F         	movff	PostToggleService@ThisEvent+2,ES_PostToService@TheEvent+2
  1456  000DA6  5045               	movf	_MyPriority,w,c
  1457  000DA8  EC24  F005         	call	_ES_PostToService
  1458  000DAC  0012               	return	
  1459  000DAE                     __end_of_PostToggleService:
  1460                           	opt stack 0
  1461                           tosu	equ	0xFFF
  1462                           tosh	equ	0xFFE
  1463                           tosl	equ	0xFFD
  1464                           pclath	equ	0xFFA
  1465                           tblptru	equ	0xFF8
  1466                           tblptrh	equ	0xFF7
  1467                           tblptrl	equ	0xFF6
  1468                           tablat	equ	0xFF5
  1469                           prodh	equ	0xFF4
  1470                           prodl	equ	0xFF3
  1471                           postinc0	equ	0xFEE
  1472                           wreg	equ	0xFE8
  1473                           indf2	equ	0xFDF
  1474                           postinc2	equ	0xFDE
  1475                           postdec2	equ	0xFDD
  1476                           fsr2h	equ	0xFDA
  1477                           fsr2l	equ	0xFD9
  1478                           status	equ	0xFD8
  1479                           
  1480 ;; *************** function _ES_GetMSBitSet *****************
  1481 ;; Defined at:
  1482 ;;		line 79 in file "ES_LookupTables.c"
  1483 ;; Parameters:    Size  Location     Type
  1484 ;;  Val2Check       2   21[COMRAM] unsigned int 
  1485 ;; Auto vars:     Size  Location     Type
  1486 ;;  LoopCntr        1   30[COMRAM] char 
  1487 ;;  Nybble2Test     1   29[COMRAM] unsigned char 
  1488 ;;  ReturnVal       1   28[COMRAM] unsigned char 
  1489 ;; Return value:  Size  Location     Type
  1490 ;;                  1    wreg      unsigned char 
  1491 ;; Registers used:
  1492 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1493 ;; Tracked objects:
  1494 ;;		On entry : 0/0
  1495 ;;		On exit  : 0/0
  1496 ;;		Unchanged: 0/0
  1497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1498 ;;      Params:         2       0       0       0
  1499 ;;      Locals:         3       0       0       0
  1500 ;;      Temps:          5       0       0       0
  1501 ;;      Totals:        10       0       0       0
  1502 ;;Total ram usage:       10 bytes
  1503 ;; Hardware stack levels used:    1
  1504 ;; Hardware stack levels required when called:    3
  1505 ;; This function calls:
  1506 ;;		Nothing
  1507 ;; This function is called by:
  1508 ;;		_ES_Run
  1509 ;;		_ES_Timer_Tick_Resp
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513                           	psect	text7
  1514  000966                     __ptext7:
  1515                           	opt stack 0
  1516  000966                     _ES_GetMSBitSet:
  1517                           	opt stack 24
  1518                           
  1519                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1520                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1521                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1522                           
  1523                           ;incstack = 0
  1524  000966  0E80               	movlw	128
  1525  000968  6E1D               	movwf	ES_GetMSBitSet@ReturnVal,c
  1526                           
  1527                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1528  00096A  0E03               	movlw	3
  1529  00096C  6E1F               	movwf	ES_GetMSBitSet@LoopCntr,c
  1530  00096E                     l2153:
  1531                           
  1532                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1533  00096E  BE1F               	btfsc	ES_GetMSBitSet@LoopCntr,7,c
  1534  000970  D031               	goto	l2167
  1535                           
  1536                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1537                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1538                           ;ES_LookupTables.c: 91: 0x0F);
  1539  000972  501F               	movf	ES_GetMSBitSet@LoopCntr,w,c
  1540  000974  0D04               	mullw	4
  1541  000976  CFF3 F018          	movff	prodl,??_ES_GetMSBitSet
  1542  00097A  C016  F019         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1543  00097E  C017  F01A         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1544  000982  2A18               	incf	??_ES_GetMSBitSet,f,c
  1545  000984  D003               	goto	u1384
  1546  000986                     u1385:
  1547  000986  90D8               	bcf	status,0,c
  1548  000988  321A               	rrcf	??_ES_GetMSBitSet+2,f,c
  1549  00098A  3219               	rrcf	??_ES_GetMSBitSet+1,f,c
  1550  00098C                     u1384:
  1551  00098C  2E18               	decfsz	??_ES_GetMSBitSet,f,c
  1552  00098E  D7FB               	goto	u1385
  1553  000990  5019               	movf	??_ES_GetMSBitSet+1,w,c
  1554  000992  0B0F               	andlw	15
  1555  000994  6E1E               	movwf	ES_GetMSBitSet@Nybble2Test,c
  1556                           
  1557                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1558  000996  501E               	movf	ES_GetMSBitSet@Nybble2Test,w,c
  1559  000998  B4D8               	btfsc	status,2,c
  1560  00099A  D01A               	goto	l2163
  1561                           
  1562                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  1563                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  1564  00099C  0EFF               	movlw	255
  1565  00099E  6E18               	movwf	??_ES_GetMSBitSet& (0+255),c
  1566  0009A0  0EFF               	movlw	255
  1567  0009A2  6E19               	movwf	(??_ES_GetMSBitSet+1)& (0+255),c
  1568  0009A4  501E               	movf	ES_GetMSBitSet@Nybble2Test,w,c
  1569  0009A6  6E1A               	movwf	(??_ES_GetMSBitSet+2)& (0+255),c
  1570  0009A8  6A1B               	clrf	(??_ES_GetMSBitSet+3)& (0+255),c
  1571  0009AA  5018               	movf	??_ES_GetMSBitSet,w,c
  1572  0009AC  261A               	addwf	??_ES_GetMSBitSet+2,f,c
  1573  0009AE  5019               	movf	??_ES_GetMSBitSet+1,w,c
  1574  0009B0  221B               	addwfc	??_ES_GetMSBitSet+3,f,c
  1575  0009B2  0E41               	movlw	low _Nybble2MSBitNum
  1576  0009B4  241A               	addwf	??_ES_GetMSBitSet+2,w,c
  1577  0009B6  6EF6               	movwf	tblptrl,c
  1578  0009B8  0E03               	movlw	high _Nybble2MSBitNum
  1579  0009BA  201B               	addwfc	??_ES_GetMSBitSet+3,w,c
  1580  0009BC  6EF7               	movwf	tblptrh,c
  1581  0009BE                     	if	0	;There are less than 3 active tblptr bytes
  1582  0009BE                     	endif
  1583  0009BE  0008               	tblrd		*
  1584  0009C0  CFF5 F01C          	movff	tablat,??_ES_GetMSBitSet+4
  1585  0009C4  501F               	movf	ES_GetMSBitSet@LoopCntr,w,c
  1586  0009C6  0D04               	mullw	4
  1587  0009C8  50F3               	movf	prodl,w,c
  1588  0009CA  241C               	addwf	??_ES_GetMSBitSet+4,w,c
  1589  0009CC  6E1D               	movwf	ES_GetMSBitSet@ReturnVal,c
  1590                           
  1591                           ;ES_LookupTables.c: 96: break;
  1592  0009CE  D002               	goto	l2167
  1593  0009D0                     l2163:
  1594  0009D0  061F               	decf	ES_GetMSBitSet@LoopCntr,f,c
  1595  0009D2  D7CD               	goto	l2153
  1596  0009D4                     l2167:
  1597                           
  1598                           ;ES_LookupTables.c: 97: }
  1599                           ;ES_LookupTables.c: 98: }
  1600                           ;ES_LookupTables.c: 99: return ReturnVal;
  1601  0009D4  501D               	movf	ES_GetMSBitSet@ReturnVal,w,c
  1602  0009D6  0012               	return	
  1603  0009D8                     __end_of_ES_GetMSBitSet:
  1604                           	opt stack 0
  1605                           tosu	equ	0xFFF
  1606                           tosh	equ	0xFFE
  1607                           tosl	equ	0xFFD
  1608                           pclath	equ	0xFFA
  1609                           tblptru	equ	0xFF8
  1610                           tblptrh	equ	0xFF7
  1611                           tblptrl	equ	0xFF6
  1612                           tablat	equ	0xFF5
  1613                           prodh	equ	0xFF4
  1614                           prodl	equ	0xFF3
  1615                           postinc0	equ	0xFEE
  1616                           wreg	equ	0xFE8
  1617                           indf2	equ	0xFDF
  1618                           postinc2	equ	0xFDE
  1619                           postdec2	equ	0xFDD
  1620                           fsr2h	equ	0xFDA
  1621                           fsr2l	equ	0xFD9
  1622                           status	equ	0xFD8
  1623                           
  1624 ;; *************** function _RunCan_XmitService *****************
  1625 ;; Defined at:
  1626 ;;		line 133 in file "Can_XmitService.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;  ThisEvent       3   22[COMRAM] struct ES_Event_t
  1629 ;; Auto vars:     Size  Location     Type
  1630 ;;  ReturnEvent     3   25[COMRAM] struct ES_Event_t
  1631 ;; Return value:  Size  Location     Type
  1632 ;;                  3   22[COMRAM] struct ES_Event_t
  1633 ;; Registers used:
  1634 ;;		wreg, status,2, status,0, cstack
  1635 ;; Tracked objects:
  1636 ;;		On entry : 0/0
  1637 ;;		On exit  : 0/0
  1638 ;;		Unchanged: 0/0
  1639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1640 ;;      Params:         3       0       0       0
  1641 ;;      Locals:         3       0       0       0
  1642 ;;      Temps:          0       0       0       0
  1643 ;;      Totals:         6       0       0       0
  1644 ;;Total ram usage:        6 bytes
  1645 ;; Hardware stack levels used:    1
  1646 ;; Hardware stack levels required when called:    4
  1647 ;; This function calls:
  1648 ;;		_InitCanHardware
  1649 ;;		_XmitData
  1650 ;; This function is called by:
  1651 ;;		_ES_Run
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655                           	psect	text8
  1656  000D5A                     __ptext8:
  1657                           	opt stack 0
  1658  000D5A                     _RunCan_XmitService:
  1659                           	opt stack 25
  1660                           
  1661                           ;Can_XmitService.c: 135: ES_Event ReturnEvent;
  1662                           ;Can_XmitService.c: 137: if (ThisEvent.EventType == ES_INIT) {
  1663                           
  1664                           ;incstack = 0
  1665  000D5A  0E02               	movlw	2
  1666  000D5C  1817               	xorwf	RunCan_XmitService@ThisEvent,w,c
  1667  000D5E  A4D8               	btfss	status,2,c
  1668  000D60  D005               	goto	l2383
  1669                           
  1670                           ;Can_XmitService.c: 138: InitCanHardware();
  1671  000D62  EC90  F005         	call	_InitCanHardware	;wreg free
  1672                           
  1673                           ;Can_XmitService.c: 139: XmitData(0xAA);
  1674  000D66  0EAA               	movlw	170
  1675  000D68  EC87  F006         	call	_XmitData
  1676  000D6C                     l2383:
  1677                           
  1678                           ;Can_XmitService.c: 140: }
  1679                           ;Can_XmitService.c: 141: ReturnEvent.EventType = ES_NO_EVENT;
  1680  000D6C  0E00               	movlw	0
  1681  000D6E  6E1A               	movwf	RunCan_XmitService@ReturnEvent,c
  1682                           
  1683                           ;Can_XmitService.c: 142: return ReturnEvent;
  1684  000D70  C01A  F017         	movff	RunCan_XmitService@ReturnEvent,?_RunCan_XmitService
  1685  000D74  C01B  F018         	movff	RunCan_XmitService@ReturnEvent+1,?_RunCan_XmitService+1
  1686  000D78  C01C  F019         	movff	RunCan_XmitService@ReturnEvent+2,?_RunCan_XmitService+2
  1687  000D7C  0012               	return	
  1688  000D7E                     __end_of_RunCan_XmitService:
  1689                           	opt stack 0
  1690                           tosu	equ	0xFFF
  1691                           tosh	equ	0xFFE
  1692                           tosl	equ	0xFFD
  1693                           pclath	equ	0xFFA
  1694                           tblptru	equ	0xFF8
  1695                           tblptrh	equ	0xFF7
  1696                           tblptrl	equ	0xFF6
  1697                           tablat	equ	0xFF5
  1698                           prodh	equ	0xFF4
  1699                           prodl	equ	0xFF3
  1700                           postinc0	equ	0xFEE
  1701                           wreg	equ	0xFE8
  1702                           indf2	equ	0xFDF
  1703                           postinc2	equ	0xFDE
  1704                           postdec2	equ	0xFDD
  1705                           fsr2h	equ	0xFDA
  1706                           fsr2l	equ	0xFD9
  1707                           status	equ	0xFD8
  1708                           
  1709 ;; *************** function _RunToggleService *****************
  1710 ;; Defined at:
  1711 ;;		line 130 in file "ToggleService.c"
  1712 ;; Parameters:    Size  Location     Type
  1713 ;;  ThisEvent       3   22[COMRAM] struct ES_Event_t
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;  ReturnEvent     3   25[COMRAM] struct ES_Event_t
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  3   22[COMRAM] struct ES_Event_t
  1718 ;; Registers used:
  1719 ;;		wreg, status,2, status,0, cstack
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1725 ;;      Params:         3       0       0       0
  1726 ;;      Locals:         3       0       0       0
  1727 ;;      Temps:          0       0       0       0
  1728 ;;      Totals:         6       0       0       0
  1729 ;;Total ram usage:        6 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; Hardware stack levels required when called:    4
  1732 ;; This function calls:
  1733 ;;		_XmitData
  1734 ;; This function is called by:
  1735 ;;		_ES_Run
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text9
  1740  000C94                     __ptext9:
  1741                           	opt stack 0
  1742  000C94                     _RunToggleService:
  1743                           	opt stack 25
  1744                           
  1745                           ;ToggleService.c: 132: ES_Event ReturnEvent;
  1746                           ;ToggleService.c: 133: ReturnEvent.EventType = ES_NO_EVENT;
  1747                           
  1748                           ;incstack = 0
  1749  000C94  0E00               	movlw	0
  1750  000C96  6E1A               	movwf	RunToggleService@ReturnEvent,c
  1751                           
  1752                           ;ToggleService.c: 137: if (ThisEvent.EventType == ES_TIMEOUT) {
  1753  000C98  0E03               	movlw	3
  1754  000C9A  1817               	xorwf	RunToggleService@ThisEvent,w,c
  1755  000C9C  A4D8               	btfss	status,2,c
  1756  000C9E  D008               	goto	l2359
  1757                           
  1758                           ;ToggleService.c: 138: if (ThisEvent.EventParam == 2) {
  1759  000CA0  0E02               	movlw	2
  1760  000CA2  1818               	xorwf	RunToggleService@ThisEvent+1,w,c
  1761  000CA4  1019               	iorwf	RunToggleService@ThisEvent+2,w,c
  1762  000CA6  A4D8               	btfss	status,2,c
  1763  000CA8  D003               	goto	l2359
  1764                           
  1765                           ;ToggleService.c: 145: XmitData(0xAA);
  1766  000CAA  0EAA               	movlw	170
  1767  000CAC  EC87  F006         	call	_XmitData
  1768  000CB0                     l2359:
  1769                           
  1770                           ;ToggleService.c: 147: }
  1771                           ;ToggleService.c: 148: }
  1772                           ;ToggleService.c: 149: return ReturnEvent;
  1773  000CB0  C01A  F017         	movff	RunToggleService@ReturnEvent,?_RunToggleService
  1774  000CB4  C01B  F018         	movff	RunToggleService@ReturnEvent+1,?_RunToggleService+1
  1775  000CB8  C01C  F019         	movff	RunToggleService@ReturnEvent+2,?_RunToggleService+2
  1776  000CBC  0012               	return	
  1777  000CBE                     __end_of_RunToggleService:
  1778                           	opt stack 0
  1779                           tosu	equ	0xFFF
  1780                           tosh	equ	0xFFE
  1781                           tosl	equ	0xFFD
  1782                           pclath	equ	0xFFA
  1783                           tblptru	equ	0xFF8
  1784                           tblptrh	equ	0xFF7
  1785                           tblptrl	equ	0xFF6
  1786                           tablat	equ	0xFF5
  1787                           prodh	equ	0xFF4
  1788                           prodl	equ	0xFF3
  1789                           postinc0	equ	0xFEE
  1790                           wreg	equ	0xFE8
  1791                           indf2	equ	0xFDF
  1792                           postinc2	equ	0xFDE
  1793                           postdec2	equ	0xFDD
  1794                           fsr2h	equ	0xFDA
  1795                           fsr2l	equ	0xFD9
  1796                           status	equ	0xFD8
  1797                           
  1798 ;; *************** function _XmitData *****************
  1799 ;; Defined at:
  1800 ;;		line 145 in file "Can_XmitService.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  DataByte        1    wreg     unsigned char 
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;  DataByte        1   21[COMRAM] unsigned char 
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  1    wreg      void 
  1807 ;; Registers used:
  1808 ;;		wreg, status,2
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1814 ;;      Params:         0       0       0       0
  1815 ;;      Locals:         1       0       0       0
  1816 ;;      Temps:          0       0       0       0
  1817 ;;      Totals:         1       0       0       0
  1818 ;;Total ram usage:        1 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; Hardware stack levels required when called:    3
  1821 ;; This function calls:
  1822 ;;		Nothing
  1823 ;; This function is called by:
  1824 ;;		_RunToggleService
  1825 ;;		_RunCan_XmitService
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           	psect	text10
  1830  000D0E                     __ptext10:
  1831                           	opt stack 0
  1832  000D0E                     _XmitData:
  1833                           	opt stack 25
  1834                           
  1835                           ;incstack = 0
  1836                           ;XmitData@DataByte stored from wreg
  1837  000D0E  6E16               	movwf	XmitData@DataByte,c
  1838                           
  1839                           ;Can_XmitService.c: 147: TXB0D0 = DataByte;
  1840  000D10  C016  FF46         	movff	XmitData@DataByte,3910	;volatile
  1841                           
  1842                           ;Can_XmitService.c: 149: TXB0SIDL = 0b01100000;
  1843  000D14  0E60               	movlw	96
  1844  000D16  010F               	movlb	15	; () banked
  1845  000D18  6F42               	movwf	66,b	;volatile
  1846                           
  1847                           ; BSR set to: 15
  1848                           ;Can_XmitService.c: 150: TXB0SIDH = 0b00100100;
  1849  000D1A  0E24               	movlw	36
  1850  000D1C  010F               	movlb	15	; () banked
  1851  000D1E  6F41               	movwf	65,b	;volatile
  1852                           
  1853                           ; BSR set to: 15
  1854                           ;Can_XmitService.c: 152: TXB0DLC = 0b00000001;
  1855  000D20  0E01               	movlw	1
  1856  000D22  010F               	movlb	15	; () banked
  1857  000D24  6F45               	movwf	69,b	;volatile
  1858                           
  1859                           ; BSR set to: 15
  1860                           ;Can_XmitService.c: 153: TXB0CONbits.TXPRI0 = 1;
  1861  000D26  010F               	movlb	15	; () banked
  1862  000D28  8140               	bsf	64,0,b	;volatile
  1863                           
  1864                           ; BSR set to: 15
  1865                           ;Can_XmitService.c: 154: TXB0CONbits.TXPRI1 = 1;
  1866  000D2A  010F               	movlb	15	; () banked
  1867  000D2C  8340               	bsf	64,1,b	;volatile
  1868                           
  1869                           ; BSR set to: 15
  1870                           ;Can_XmitService.c: 156: TXB0CONbits.TXREQ = 1;
  1871  000D2E  010F               	movlb	15	; () banked
  1872  000D30  8740               	bsf	64,3,b	;volatile
  1873                           
  1874                           ; BSR set to: 15
  1875  000D32  0012               	return		;funcret
  1876  000D34                     __end_of_XmitData:
  1877                           	opt stack 0
  1878                           tosu	equ	0xFFF
  1879                           tosh	equ	0xFFE
  1880                           tosl	equ	0xFFD
  1881                           pclath	equ	0xFFA
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           prodh	equ	0xFF4
  1887                           prodl	equ	0xFF3
  1888                           postinc0	equ	0xFEE
  1889                           wreg	equ	0xFE8
  1890                           indf2	equ	0xFDF
  1891                           postinc2	equ	0xFDE
  1892                           postdec2	equ	0xFDD
  1893                           fsr2h	equ	0xFDA
  1894                           fsr2l	equ	0xFD9
  1895                           status	equ	0xFD8
  1896                           
  1897 ;; *************** function _InitCanHardware *****************
  1898 ;; Defined at:
  1899 ;;		line 180 in file "Can_XmitService.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;		None
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;		None
  1904 ;; Return value:  Size  Location     Type
  1905 ;;                  1    wreg      void 
  1906 ;; Registers used:
  1907 ;;		wreg, status,2
  1908 ;; Tracked objects:
  1909 ;;		On entry : 0/0
  1910 ;;		On exit  : 0/0
  1911 ;;		Unchanged: 0/0
  1912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1913 ;;      Params:         0       0       0       0
  1914 ;;      Locals:         0       0       0       0
  1915 ;;      Temps:          0       0       0       0
  1916 ;;      Totals:         0       0       0       0
  1917 ;;Total ram usage:        0 bytes
  1918 ;; Hardware stack levels used:    1
  1919 ;; Hardware stack levels required when called:    3
  1920 ;; This function calls:
  1921 ;;		Nothing
  1922 ;; This function is called by:
  1923 ;;		_RunCan_XmitService
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           	psect	text11
  1928  000B20                     __ptext11:
  1929                           	opt stack 0
  1930  000B20                     _InitCanHardware:
  1931                           	opt stack 25
  1932                           
  1933                           ;Can_XmitService.c: 183: PORTB = 0x00;
  1934                           
  1935                           ; BSR set to: 15
  1936                           ;incstack = 0
  1937  000B20  0E00               	movlw	0
  1938  000B22  6E81               	movwf	3969,c	;volatile
  1939                           
  1940                           ;Can_XmitService.c: 184: LATB = 0x00;
  1941  000B24  0E00               	movlw	0
  1942  000B26  6E8A               	movwf	3978,c	;volatile
  1943                           
  1944                           ;Can_XmitService.c: 185: TRISBbits.TRISB2 = 0;
  1945  000B28  9493               	bcf	3987,2,c	;volatile
  1946                           
  1947                           ;Can_XmitService.c: 186: TRISBbits.TRISB3 = 1;
  1948  000B2A  8693               	bsf	3987,3,c	;volatile
  1949                           
  1950                           ;Can_XmitService.c: 189: CANCON = 0x80;
  1951  000B2C  0E80               	movlw	128
  1952  000B2E  6E6F               	movwf	3951,c	;volatile
  1953  000B30                     l404:
  1954  000B30  AE6E               	btfss	3950,7,c	;volatile
  1955  000B32  D7FE               	goto	l404
  1956                           
  1957                           ;Can_XmitService.c: 194: BRGCON1bits.SJW0 = 1;
  1958  000B34  8C70               	bsf	3952,6,c	;volatile
  1959                           
  1960                           ;Can_XmitService.c: 195: BRGCON2bits.SAM = 1;
  1961  000B36  8C71               	bsf	3953,6,c	;volatile
  1962                           
  1963                           ;Can_XmitService.c: 196: BRGCON2bits.SEG2PHTS = 1;
  1964  000B38  8E71               	bsf	3953,7,c	;volatile
  1965                           
  1966                           ;Can_XmitService.c: 197: BRGCON2bits.PRSEG1 = 1;
  1967  000B3A  8271               	bsf	3953,1,c	;volatile
  1968                           
  1969                           ;Can_XmitService.c: 198: BRGCON2bits.SEG1PH0 = 1;
  1970  000B3C  8671               	bsf	3953,3,c	;volatile
  1971                           
  1972                           ;Can_XmitService.c: 199: BRGCON2bits.SEG1PH1 = 1;
  1973  000B3E  8871               	bsf	3953,4,c	;volatile
  1974                           
  1975                           ;Can_XmitService.c: 200: BRGCON2bits.SEG1PH2 = 1;
  1976  000B40  8A71               	bsf	3953,5,c	;volatile
  1977                           
  1978                           ;Can_XmitService.c: 201: BRGCON3bits.SEG2PH0 = 1;
  1979  000B42  8072               	bsf	3954,0,c	;volatile
  1980                           
  1981                           ;Can_XmitService.c: 202: BRGCON3bits.SEG2PH1 = 1;
  1982  000B44  8272               	bsf	3954,1,c	;volatile
  1983                           
  1984                           ;Can_XmitService.c: 203: BRGCON1bits.BRP0 = 1;
  1985  000B46  8070               	bsf	3952,0,c	;volatile
  1986                           
  1987                           ;Can_XmitService.c: 204: BRGCON1bits.BRP1 = 1;
  1988  000B48  8270               	bsf	3952,1,c	;volatile
  1989                           
  1990                           ;Can_XmitService.c: 209: RXB0CONbits.RXM0 = 1;
  1991  000B4A  8A60               	bsf	3936,5,c	;volatile
  1992                           
  1993                           ;Can_XmitService.c: 210: RXB0CONbits.RXM1 = 1;
  1994  000B4C  8C60               	bsf	3936,6,c	;volatile
  1995                           
  1996                           ;Can_XmitService.c: 211: RXF0SIDH = 0x20;
  1997  000B4E  0E20               	movlw	32
  1998  000B50  010F               	movlb	15	; () banked
  1999  000B52  6F00               	movwf	0,b	;volatile
  2000                           
  2001                           ;Can_XmitService.c: 212: RXF0SIDL = 0x60;
  2002  000B54  0E60               	movlw	96
  2003  000B56  010F               	movlb	15	; () banked
  2004  000B58  6F01               	movwf	1,b	;volatile
  2005                           
  2006                           ;Can_XmitService.c: 213: RXM0SIDH = 0x00;
  2007  000B5A  0E00               	movlw	0
  2008  000B5C  010F               	movlb	15	; () banked
  2009  000B5E  6F18               	movwf	24,b	;volatile
  2010                           
  2011                           ;Can_XmitService.c: 214: RXM0SIDL = 0x00;
  2012  000B60  0E00               	movlw	0
  2013  000B62  010F               	movlb	15	; () banked
  2014  000B64  6F19               	movwf	25,b	;volatile
  2015                           
  2016                           ; BSR set to: 15
  2017                           ;Can_XmitService.c: 216: TXB0IE = 1;
  2018  000B66  84A3               	bsf	4003,2,c	;volatile
  2019                           
  2020                           ; BSR set to: 15
  2021                           ;Can_XmitService.c: 217: RXB0IE = 1;
  2022  000B68  80A3               	bsf	4003,0,c	;volatile
  2023                           
  2024                           ; BSR set to: 15
  2025                           ;Can_XmitService.c: 218: PIE3 = 0xff;
  2026  000B6A  68A3               	setf	4003,c	;volatile
  2027                           
  2028                           ; BSR set to: 15
  2029                           ;Can_XmitService.c: 222: TXB0CONbits.TXREQ = 0;
  2030  000B6C  010F               	movlb	15	; () banked
  2031  000B6E  9740               	bcf	64,3,b	;volatile
  2032                           
  2033                           ; BSR set to: 15
  2034                           ;Can_XmitService.c: 223: TXB0IF = 0;
  2035  000B70  94A4               	bcf	4004,2,c	;volatile
  2036                           
  2037                           ; BSR set to: 15
  2038                           ;Can_XmitService.c: 224: RXB0IF = 0;
  2039  000B72  90A4               	bcf	4004,0,c	;volatile
  2040                           
  2041                           ; BSR set to: 15
  2042                           ;Can_XmitService.c: 225: RXB0CONbits.RXFUL = 0;
  2043  000B74  9E60               	bcf	3936,7,c	;volatile
  2044                           
  2045                           ;Can_XmitService.c: 230: ECANCON = 0x00;
  2046  000B76  0E00               	movlw	0
  2047  000B78  6E77               	movwf	3959,c	;volatile
  2048                           
  2049                           ;Can_XmitService.c: 231: CANCON = 0x00;
  2050  000B7A  0E00               	movlw	0
  2051  000B7C  6E6F               	movwf	3951,c	;volatile
  2052  000B7E                     l407:
  2053  000B7E  AE6E               	btfss	3950,7,c	;volatile
  2054  000B80  0012               	return	
  2055  000B82  D7FD               	goto	l407
  2056  000B84                     __end_of_InitCanHardware:
  2057                           	opt stack 0
  2058                           tosu	equ	0xFFF
  2059                           tosh	equ	0xFFE
  2060                           tosl	equ	0xFFD
  2061                           pclath	equ	0xFFA
  2062                           tblptru	equ	0xFF8
  2063                           tblptrh	equ	0xFF7
  2064                           tblptrl	equ	0xFF6
  2065                           tablat	equ	0xFF5
  2066                           prodh	equ	0xFF4
  2067                           prodl	equ	0xFF3
  2068                           postinc0	equ	0xFEE
  2069                           wreg	equ	0xFE8
  2070                           indf2	equ	0xFDF
  2071                           postinc2	equ	0xFDE
  2072                           postdec2	equ	0xFDD
  2073                           fsr2h	equ	0xFDA
  2074                           fsr2l	equ	0xFD9
  2075                           status	equ	0xFD8
  2076                           
  2077 ;; *************** function _ES_DeQueue *****************
  2078 ;; Defined at:
  2079 ;;		line 164 in file "ES_Queue.c"
  2080 ;; Parameters:    Size  Location     Type
  2081 ;;  pBlock          2   33[COMRAM] PTR struct ES_Event_t
  2082 ;;		 -> Queue1(12), Queue0(12), 
  2083 ;;  pReturnEvent    2   35[COMRAM] PTR struct ES_Event_t
  2084 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;  pThisQueue      2   41[COMRAM] PTR struct .
  2087 ;;		 -> Queue1(12), Queue0(12), 
  2088 ;;  NumLeft         1   40[COMRAM] unsigned char 
  2089 ;;  SaveCrit        1   39[COMRAM] unsigned char 
  2090 ;; Return value:  Size  Location     Type
  2091 ;;                  1    wreg      unsigned char 
  2092 ;; Registers used:
  2093 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2094 ;; Tracked objects:
  2095 ;;		On entry : 0/0
  2096 ;;		On exit  : 0/0
  2097 ;;		Unchanged: 0/0
  2098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2099 ;;      Params:         4       0       0       0
  2100 ;;      Locals:         4       0       0       0
  2101 ;;      Temps:          2       0       0       0
  2102 ;;      Totals:        10       0       0       0
  2103 ;;Total ram usage:       10 bytes
  2104 ;; Hardware stack levels used:    1
  2105 ;; Hardware stack levels required when called:    4
  2106 ;; This function calls:
  2107 ;;		___lbmod
  2108 ;;		___wmul
  2109 ;; This function is called by:
  2110 ;;		_ES_Run
  2111 ;;		_ES_RecallEvents
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           	psect	text12
  2116  0003BA                     __ptext12:
  2117                           	opt stack 0
  2118  0003BA                     _ES_DeQueue:
  2119                           	opt stack 25
  2120                           
  2121                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  2122                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  2123                           ;ES_Queue.c: 168: uint8_t NumLeft;
  2124                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  2125                           
  2126                           ;incstack = 0
  2127  0003BA  C022  F02A         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  2128  0003BE  C023  F02B         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  2129                           
  2130                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  2131  0003C2  EE20 F002          	lfsr	2,2
  2132  0003C6  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2133  0003C8  26D9               	addwf	fsr2l,f,c
  2134  0003CA  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2135  0003CC  22DA               	addwfc	fsr2h,f,c
  2136  0003CE  50DF               	movf	indf2,w,c
  2137  0003D0  B4D8               	btfsc	status,2,c
  2138  0003D2  D05E               	goto	l2289
  2139                           
  2140                           ;ES_Queue.c: 172: {
  2141                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  2142  0003D4  CFF2 F028          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  2143  0003D8  9EF2               	bcf	intcon,7,c	;volatile
  2144                           
  2145                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  2146  0003DA  EE20 F001          	lfsr	2,1
  2147  0003DE  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2148  0003E0  26D9               	addwf	fsr2l,f,c
  2149  0003E2  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2150  0003E4  22DA               	addwfc	fsr2h,f,c
  2151  0003E6  50DF               	movf	indf2,w,c
  2152  0003E8  6E26               	movwf	??_ES_DeQueue& (0+255),c
  2153  0003EA  0E01               	movlw	1
  2154  0003EC  2426               	addwf	??_ES_DeQueue,w,c
  2155  0003EE  6E1C               	movwf	___wmul@multiplier,c
  2156  0003F0  6A1D               	clrf	___wmul@multiplier+1,c
  2157  0003F2  0E00               	movlw	0
  2158  0003F4  221D               	addwfc	___wmul@multiplier+1,f,c
  2159  0003F6  0E00               	movlw	0
  2160  0003F8  6E1F               	movwf	___wmul@multiplicand+1,c
  2161  0003FA  0E03               	movlw	3
  2162  0003FC  6E1E               	movwf	___wmul@multiplicand,c
  2163  0003FE  EC9A  F006         	call	___wmul	;wreg free
  2164  000402  501C               	movf	?___wmul,w,c
  2165  000404  2422               	addwf	ES_DeQueue@pBlock,w,c
  2166  000406  6ED9               	movwf	fsr2l,c
  2167  000408  501D               	movf	?___wmul+1,w,c
  2168  00040A  2023               	addwfc	ES_DeQueue@pBlock+1,w,c
  2169  00040C  6EDA               	movwf	fsr2h,c
  2170  00040E  C024  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  2171  000412  C025  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  2172  000416  CFDE FFE6          	movff	postinc2,postinc1
  2173  00041A  CFDE FFE6          	movff	postinc2,postinc1
  2174  00041E  CFDE FFE6          	movff	postinc2,postinc1
  2175                           
  2176                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  2177  000422  EE20 F001          	lfsr	2,1
  2178  000426  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2179  000428  26D9               	addwf	fsr2l,f,c
  2180  00042A  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2181  00042C  22DA               	addwfc	fsr2h,f,c
  2182  00042E  2ADF               	incf	indf2,f,c
  2183                           
  2184                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  2185  000430  C02A  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  2186  000434  C02B  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  2187  000438  EE10 F001          	lfsr	1,1
  2188  00043C  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2189  00043E  26E1               	addwf	fsr1l,f,c
  2190  000440  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2191  000442  22E2               	addwfc	fsr1h,f,c
  2192  000444  50DE               	movf	postinc2,w,c
  2193  000446  5CE6               	subwf	postinc1,w,c
  2194  000448  A0D8               	btfss	status,0,c
  2195  00044A  D016               	goto	l2285
  2196                           
  2197                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  2198  00044C  EE20 F001          	lfsr	2,1
  2199  000450  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2200  000452  26D9               	addwf	fsr2l,f,c
  2201  000454  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2202  000456  22DA               	addwfc	fsr2h,f,c
  2203  000458  C02A  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  2204  00045C  C02B  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  2205  000460  50E7               	movf	indf1,w,c
  2206  000462  6E16               	movwf	___lbmod@divisor,c
  2207  000464  EE10 F001          	lfsr	1,1
  2208  000468  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2209  00046A  26E1               	addwf	fsr1l,f,c
  2210  00046C  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2211  00046E  22E2               	addwfc	fsr1h,f,c
  2212  000470  50E7               	movf	indf1,w,c
  2213  000472  EC5F  F006         	call	___lbmod
  2214  000476  6EDF               	movwf	indf2,c
  2215  000478                     l2285:
  2216                           
  2217                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  2218  000478  EE20 F002          	lfsr	2,2
  2219  00047C  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2220  00047E  26D9               	addwf	fsr2l,f,c
  2221  000480  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2222  000482  22DA               	addwfc	fsr2h,f,c
  2223  000484  06DF               	decf	indf2,f,c
  2224  000486  50DF               	movf	indf2,w,c
  2225  000488  6E29               	movwf	ES_DeQueue@NumLeft,c
  2226                           
  2227                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  2228  00048A  C028  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  2229                           
  2230                           ;ES_Queue.c: 183: }else {
  2231  00048E  D012               	goto	l2295
  2232  000490                     l2289:
  2233                           
  2234                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  2235  000490  C024  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  2236  000494  C025  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  2237  000498  0E00               	movlw	0
  2238  00049A  6EDF               	movwf	indf2,c
  2239                           
  2240                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  2241  00049C  EE20 F001          	lfsr	2,1
  2242  0004A0  5024               	movf	ES_DeQueue@pReturnEvent,w,c
  2243  0004A2  26D9               	addwf	fsr2l,f,c
  2244  0004A4  5025               	movf	ES_DeQueue@pReturnEvent+1,w,c
  2245  0004A6  22DA               	addwfc	fsr2h,f,c
  2246  0004A8  0E00               	movlw	0
  2247  0004AA  6EDE               	movwf	postinc2,c
  2248  0004AC  0E00               	movlw	0
  2249  0004AE  6EDD               	movwf	postdec2,c
  2250                           
  2251                           ;ES_Queue.c: 186: NumLeft = 0;
  2252  0004B0  0E00               	movlw	0
  2253  0004B2  6E29               	movwf	ES_DeQueue@NumLeft,c
  2254  0004B4                     l2295:
  2255                           
  2256                           ;ES_Queue.c: 187: }
  2257                           ;ES_Queue.c: 188: return NumLeft;
  2258  0004B4  5029               	movf	ES_DeQueue@NumLeft,w,c
  2259  0004B6  0012               	return	
  2260  0004B8                     __end_of_ES_DeQueue:
  2261                           	opt stack 0
  2262                           tosu	equ	0xFFF
  2263                           tosh	equ	0xFFE
  2264                           tosl	equ	0xFFD
  2265                           pclath	equ	0xFFA
  2266                           tblptru	equ	0xFF8
  2267                           tblptrh	equ	0xFF7
  2268                           tblptrl	equ	0xFF6
  2269                           tablat	equ	0xFF5
  2270                           prodh	equ	0xFF4
  2271                           prodl	equ	0xFF3
  2272                           intcon	equ	0xFF2
  2273                           postinc0	equ	0xFEE
  2274                           wreg	equ	0xFE8
  2275                           indf1	equ	0xFE7
  2276                           postinc1	equ	0xFE6
  2277                           fsr1h	equ	0xFE2
  2278                           fsr1l	equ	0xFE1
  2279                           indf2	equ	0xFDF
  2280                           postinc2	equ	0xFDE
  2281                           postdec2	equ	0xFDD
  2282                           fsr2h	equ	0xFDA
  2283                           fsr2l	equ	0xFD9
  2284                           status	equ	0xFD8
  2285                           
  2286 ;; *************** function ___lbmod *****************
  2287 ;; Defined at:
  2288 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;  dividend        1    wreg     unsigned char 
  2291 ;;  divisor         1   21[COMRAM] unsigned char 
  2292 ;; Auto vars:     Size  Location     Type
  2293 ;;  dividend        1   22[COMRAM] unsigned char 
  2294 ;;  rem             1   24[COMRAM] unsigned char 
  2295 ;;  counter         1   23[COMRAM] unsigned char 
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      unsigned char 
  2298 ;; Registers used:
  2299 ;;		wreg, status,2, status,0
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2305 ;;      Params:         1       0       0       0
  2306 ;;      Locals:         3       0       0       0
  2307 ;;      Temps:          0       0       0       0
  2308 ;;      Totals:         4       0       0       0
  2309 ;;Total ram usage:        4 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    3
  2312 ;; This function calls:
  2313 ;;		Nothing
  2314 ;; This function is called by:
  2315 ;;		_ES_DeQueue
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           	psect	text13
  2320  000CBE                     __ptext13:
  2321                           	opt stack 0
  2322  000CBE                     ___lbmod:
  2323                           	opt stack 25
  2324                           
  2325                           ;incstack = 0
  2326                           ;___lbmod@dividend stored from wreg
  2327  000CBE  6E17               	movwf	___lbmod@dividend,c
  2328  000CC0  0E08               	movlw	8
  2329  000CC2  6E18               	movwf	___lbmod@counter,c
  2330  000CC4  0E00               	movlw	0
  2331  000CC6  6E19               	movwf	___lbmod@rem,c
  2332  000CC8                     l2241:
  2333  000CC8  90D8               	bcf	status,0,c
  2334  000CCA  3417               	rlcf	___lbmod@dividend,w,c
  2335  000CCC  3419               	rlcf	___lbmod@rem,w,c
  2336  000CCE  6E19               	movwf	___lbmod@rem,c
  2337  000CD0  90D8               	bcf	status,0,c
  2338  000CD2  3617               	rlcf	___lbmod@dividend,f,c
  2339  000CD4  5016               	movf	___lbmod@divisor,w,c
  2340  000CD6  5C19               	subwf	___lbmod@rem,w,c
  2341  000CD8  A0D8               	btfss	status,0,c
  2342  000CDA  D002               	goto	l2249
  2343  000CDC  5016               	movf	___lbmod@divisor,w,c
  2344  000CDE  5E19               	subwf	___lbmod@rem,f,c
  2345  000CE0                     l2249:
  2346  000CE0  2E18               	decfsz	___lbmod@counter,f,c
  2347  000CE2  D7F2               	goto	l2241
  2348  000CE4  5019               	movf	___lbmod@rem,w,c
  2349  000CE6  0012               	return	
  2350  000CE8                     __end_of___lbmod:
  2351                           	opt stack 0
  2352                           tosu	equ	0xFFF
  2353                           tosh	equ	0xFFE
  2354                           tosl	equ	0xFFD
  2355                           pclath	equ	0xFFA
  2356                           tblptru	equ	0xFF8
  2357                           tblptrh	equ	0xFF7
  2358                           tblptrl	equ	0xFF6
  2359                           tablat	equ	0xFF5
  2360                           prodh	equ	0xFF4
  2361                           prodl	equ	0xFF3
  2362                           intcon	equ	0xFF2
  2363                           postinc0	equ	0xFEE
  2364                           wreg	equ	0xFE8
  2365                           indf1	equ	0xFE7
  2366                           postinc1	equ	0xFE6
  2367                           fsr1h	equ	0xFE2
  2368                           fsr1l	equ	0xFE1
  2369                           indf2	equ	0xFDF
  2370                           postinc2	equ	0xFDE
  2371                           postdec2	equ	0xFDD
  2372                           fsr2h	equ	0xFDA
  2373                           fsr2l	equ	0xFD9
  2374                           status	equ	0xFD8
  2375                           
  2376 ;; *************** function _ES_CheckUserEvents *****************
  2377 ;; Defined at:
  2378 ;;		line 46 in file "ES_CheckEvents.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;		None
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;  i               1   21[COMRAM] unsigned char 
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  1    wreg      unsigned char 
  2385 ;; Registers used:
  2386 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2392 ;;      Params:         0       0       0       0
  2393 ;;      Locals:         1       0       0       0
  2394 ;;      Temps:          0       0       0       0
  2395 ;;      Totals:         1       0       0       0
  2396 ;;Total ram usage:        1 bytes
  2397 ;; Hardware stack levels used:    1
  2398 ;; Hardware stack levels required when called:    4
  2399 ;; This function calls:
  2400 ;;		_Check4Keystroke
  2401 ;; This function is called by:
  2402 ;;		_ES_Run
  2403 ;; This function uses a non-reentrant model
  2404 ;;
  2405                           
  2406                           	psect	text14
  2407  000BC6                     __ptext14:
  2408                           	opt stack 0
  2409  000BC6                     _ES_CheckUserEvents:
  2410                           	opt stack 25
  2411                           
  2412                           ;ES_CheckEvents.c: 48: uint8_t i;
  2413                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  2414                           
  2415                           ;incstack = 0
  2416  000BC6  0E00               	movlw	0
  2417  000BC8  6E16               	movwf	ES_CheckUserEvents@i,c
  2418  000BCA  5016               	movf	ES_CheckUserEvents@i,w,c
  2419  000BCC  A4D8               	btfss	status,2,c
  2420  000BCE  0012               	return	
  2421                           
  2422                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  2423  000BD0  5016               	movf	ES_CheckUserEvents@i,w,c
  2424  000BD2  0D02               	mullw	2
  2425  000BD4  0E5E               	movlw	low _ES_EventList
  2426  000BD6  24F3               	addwf	prodl,w,c
  2427  000BD8  6EF6               	movwf	tblptrl,c
  2428  000BDA  0E03               	movlw	high _ES_EventList
  2429  000BDC  20F4               	addwfc	prodh,w,c
  2430  000BDE  6EF7               	movwf	tblptrh,c
  2431  000BE0                     	if	0	;There are less than 3 active tblptr bytes
  2432  000BE0                     	endif
  2433  000BE0  D801               	call	u1498
  2434  000BE2  D00C               	goto	u1499
  2435  000BE4                     u1498:
  2436  000BE4  0005               	push	
  2437  000BE6  6EFA               	movwf	pclath,c
  2438  000BE8  0009               	tblrd		*+
  2439  000BEA  50F5               	movf	tablat,w,c
  2440  000BEC  6EFD               	movwf	tosl,c
  2441  000BEE  0009               	tblrd		*+
  2442  000BF0  50F5               	movf	tablat,w,c
  2443  000BF2  6EFE               	movwf	tosh,c
  2444  000BF4  50F8               	movf	tblptru,w,c
  2445  000BF6  6EFF               	movwf	tosu,c
  2446  000BF8  50FA               	movf	pclath,w,c
  2447  000BFA  0012               	return		;indir
  2448  000BFC                     u1499:
  2449  000BFC  06E8               	decf	wreg,f,c
  2450  000BFE  B4D8               	btfsc	status,2,c
  2451  000C00  0012               	return	
  2452                           
  2453                           ;ES_CheckEvents.c: 52: break;
  2454  000C02  2A16               	incf	ES_CheckUserEvents@i,f,c
  2455  000C04  D7E2               	goto	L1
  2456  000C06                     __end_of_ES_CheckUserEvents:
  2457                           	opt stack 0
  2458                           tosu	equ	0xFFF
  2459                           tosh	equ	0xFFE
  2460                           tosl	equ	0xFFD
  2461                           pclath	equ	0xFFA
  2462                           tblptru	equ	0xFF8
  2463                           tblptrh	equ	0xFF7
  2464                           tblptrl	equ	0xFF6
  2465                           tablat	equ	0xFF5
  2466                           prodh	equ	0xFF4
  2467                           prodl	equ	0xFF3
  2468                           intcon	equ	0xFF2
  2469                           postinc0	equ	0xFEE
  2470                           wreg	equ	0xFE8
  2471                           indf1	equ	0xFE7
  2472                           postinc1	equ	0xFE6
  2473                           fsr1h	equ	0xFE2
  2474                           fsr1l	equ	0xFE1
  2475                           indf2	equ	0xFDF
  2476                           postinc2	equ	0xFDE
  2477                           postdec2	equ	0xFDD
  2478                           fsr2h	equ	0xFDA
  2479                           fsr2l	equ	0xFD9
  2480                           status	equ	0xFD8
  2481                           
  2482 ;; *************** function _Check4Keystroke *****************
  2483 ;; Defined at:
  2484 ;;		line 62 in file "EventCheckers.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;		None
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      unsigned char 
  2491 ;; Registers used:
  2492 ;;		wreg
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2498 ;;      Params:         0       0       0       0
  2499 ;;      Locals:         0       0       0       0
  2500 ;;      Temps:          0       0       0       0
  2501 ;;      Totals:         0       0       0       0
  2502 ;;Total ram usage:        0 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:    3
  2505 ;; This function calls:
  2506 ;;		Nothing
  2507 ;; This function is called by:
  2508 ;;		_ES_CheckUserEvents
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text15
  2513  000DF6                     __ptext15:
  2514                           	opt stack 0
  2515  000DF6                     _Check4Keystroke:
  2516                           	opt stack 25
  2517                           
  2518                           ;EventCheckers.c: 78: return 0;
  2519                           
  2520                           ;incstack = 0
  2521  000DF6  0E00               	movlw	0
  2522  000DF8  0012               	return	
  2523  000DFA                     __end_of_Check4Keystroke:
  2524                           	opt stack 0
  2525                           tosu	equ	0xFFF
  2526                           tosh	equ	0xFFE
  2527                           tosl	equ	0xFFD
  2528                           pclath	equ	0xFFA
  2529                           tblptru	equ	0xFF8
  2530                           tblptrh	equ	0xFF7
  2531                           tblptrl	equ	0xFF6
  2532                           tablat	equ	0xFF5
  2533                           prodh	equ	0xFF4
  2534                           prodl	equ	0xFF3
  2535                           intcon	equ	0xFF2
  2536                           postinc0	equ	0xFEE
  2537                           wreg	equ	0xFE8
  2538                           indf1	equ	0xFE7
  2539                           postinc1	equ	0xFE6
  2540                           fsr1h	equ	0xFE2
  2541                           fsr1l	equ	0xFE1
  2542                           indf2	equ	0xFDF
  2543                           postinc2	equ	0xFDE
  2544                           postdec2	equ	0xFDD
  2545                           fsr2h	equ	0xFDA
  2546                           fsr2l	equ	0xFD9
  2547                           status	equ	0xFD8
  2548                           
  2549 ;; *************** function _ES_Initialize *****************
  2550 ;; Defined at:
  2551 ;;		line 242 in file "ES_Framework.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;  NewRate         2    5[BANK0 ] enum E15419
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;  i               1    7[BANK0 ] unsigned char 
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      enum E15490
  2558 ;; Registers used:
  2559 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2565 ;;      Params:         0       2       0       0
  2566 ;;      Locals:         0       1       0       0
  2567 ;;      Temps:          0       0       0       0
  2568 ;;      Totals:         0       3       0       0
  2569 ;;Total ram usage:        3 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    7
  2572 ;; This function calls:
  2573 ;;		_ES_InitQueue
  2574 ;;		_ES_Timer_Init
  2575 ;;		_InitCan_XmitService
  2576 ;;		_InitToggleService
  2577 ;; This function is called by:
  2578 ;;		_main
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           	psect	text16
  2583  0005B0                     __ptext16:
  2584                           	opt stack 0
  2585  0005B0                     _ES_Initialize:
  2586                           	opt stack 23
  2587                           
  2588                           ;ES_Framework.c: 243: uint8_t i;
  2589                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  2590                           
  2591                           ;incstack = 0
  2592  0005B0  C09D  F018         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  2593  0005B4  C09E  F019         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  2594  0005B8  ECF4  F006         	call	_ES_Timer_Init	;wreg free
  2595                           
  2596                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  2597  0005BC  0E00               	movlw	0
  2598  0005BE  0100               	movlb	0	; () banked
  2599  0005C0  6F9F               	movwf	ES_Initialize@i& (0+255),b
  2600  0005C2                     l2393:
  2601                           
  2602                           ; BSR set to: 0
  2603  0005C2  0E01               	movlw	1
  2604  0005C4  0100               	movlb	0	; () banked
  2605  0005C6  659F               	cpfsgt	ES_Initialize@i& (0+255),b
  2606  0005C8  D001               	goto	l2397
  2607  0005CA  D066               	goto	l2417
  2608  0005CC                     l2397:
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  2612                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  2613  0005CC  0100               	movlb	0	; () banked
  2614  0005CE  519F               	movf	ES_Initialize@i& (0+255),w,b
  2615  0005D0  0D04               	mullw	4
  2616  0005D2  0E50               	movlw	low _ServDescList
  2617  0005D4  24F3               	addwf	prodl,w,c
  2618  0005D6  6EF6               	movwf	tblptrl,c
  2619  0005D8  0E03               	movlw	high _ServDescList
  2620  0005DA  20F4               	addwfc	prodh,w,c
  2621  0005DC  6EF7               	movwf	tblptrh,c
  2622  0005DE                     	if	0	;There are less than 3 active tblptr bytes
  2623  0005DE                     	endif
  2624  0005DE  0009               	tblrd		*+
  2625  0005E0  50F5               	movf	tablat,w,c
  2626  0005E2  0009               	tblrd		*+
  2627  0005E4  10F5               	iorwf	tablat,w,c
  2628  0005E6  B4D8               	btfsc	status,2,c
  2629  0005E8  D013               	goto	l2401
  2630                           
  2631                           ; BSR set to: 0
  2632  0005EA  0100               	movlb	0	; () banked
  2633  0005EC  519F               	movf	ES_Initialize@i& (0+255),w,b
  2634  0005EE  0D04               	mullw	4
  2635  0005F0  0E02               	movlw	2
  2636  0005F2  26F3               	addwf	prodl,f,c
  2637  0005F4  0E00               	movlw	0
  2638  0005F6  22F4               	addwfc	prodh,f,c
  2639  0005F8  0E50               	movlw	low _ServDescList
  2640  0005FA  24F3               	addwf	prodl,w,c
  2641  0005FC  6EF6               	movwf	tblptrl,c
  2642  0005FE  0E03               	movlw	high _ServDescList
  2643  000600  20F4               	addwfc	prodh,w,c
  2644  000602  6EF7               	movwf	tblptrh,c
  2645  000604                     	if	0	;There are less than 3 active tblptr bytes
  2646  000604                     	endif
  2647  000604  0009               	tblrd		*+
  2648  000606  50F5               	movf	tablat,w,c
  2649  000608  0009               	tblrd		*+
  2650  00060A  10F5               	iorwf	tablat,w,c
  2651  00060C  A4D8               	btfss	status,2,c
  2652  00060E  D002               	goto	l2405
  2653  000610                     l2401:
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;ES_Framework.c: 249: return FailedPointer;
  2657  000610  0E03               	movlw	3
  2658                           
  2659                           ; BSR set to: 0
  2660  000612  0012               	return	
  2661  000614                     l2405:
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  2665  000614  0100               	movlb	0	; () banked
  2666  000616  519F               	movf	ES_Initialize@i& (0+255),w,b
  2667  000618  0D03               	mullw	3
  2668  00061A  0E58               	movlw	low _EventQueues
  2669  00061C  24F3               	addwf	prodl,w,c
  2670  00061E  6EF6               	movwf	tblptrl,c
  2671  000620  0E03               	movlw	high _EventQueues
  2672  000622  20F4               	addwfc	prodh,w,c
  2673  000624  6EF7               	movwf	tblptrh,c
  2674  000626                     	if	0	;There are less than 3 active tblptr bytes
  2675  000626                     	endif
  2676  000626  0009               	tblrd		*+
  2677  000628  CFF5 F016          	movff	tablat,ES_InitQueue@pBlock
  2678  00062C  000A               	tblrd		*-
  2679  00062E  CFF5 F017          	movff	tablat,ES_InitQueue@pBlock+1
  2680  000632  0100               	movlb	0	; () banked
  2681  000634  519F               	movf	ES_Initialize@i& (0+255),w,b
  2682  000636  0D03               	mullw	3
  2683  000638  0E02               	movlw	2
  2684  00063A  26F3               	addwf	prodl,f,c
  2685  00063C  0E00               	movlw	0
  2686  00063E  22F4               	addwfc	prodh,f,c
  2687  000640  0E58               	movlw	low _EventQueues
  2688  000642  24F3               	addwf	prodl,w,c
  2689  000644  6EF6               	movwf	tblptrl,c
  2690  000646  0E03               	movlw	high _EventQueues
  2691  000648  20F4               	addwfc	prodh,w,c
  2692  00064A  6EF7               	movwf	tblptrh,c
  2693  00064C                     	if	0	;There are less than 3 active tblptr bytes
  2694  00064C                     	endif
  2695  00064C  0008               	tblrd		*
  2696  00064E  CFF5 F018          	movff	tablat,ES_InitQueue@BlockSize
  2697  000652  EC03  F006         	call	_ES_InitQueue	;wreg free
  2698                           
  2699                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  2700  000656  0100               	movlb	0	; () banked
  2701  000658  519F               	movf	ES_Initialize@i& (0+255),w,b
  2702  00065A  0D04               	mullw	4
  2703  00065C  0E50               	movlw	low _ServDescList
  2704  00065E  24F3               	addwf	prodl,w,c
  2705  000660  6EF6               	movwf	tblptrl,c
  2706  000662  0E03               	movlw	high _ServDescList
  2707  000664  20F4               	addwfc	prodh,w,c
  2708  000666  6EF7               	movwf	tblptrh,c
  2709  000668                     	if	0	;There are less than 3 active tblptr bytes
  2710  000668                     	endif
  2711  000668  D801               	call	u1638
  2712  00066A  D00E               	goto	u1639
  2713  00066C                     u1638:
  2714  00066C  0005               	push	
  2715  00066E  6EFA               	movwf	pclath,c
  2716  000670  0009               	tblrd		*+
  2717  000672  50F5               	movf	tablat,w,c
  2718  000674  6EFD               	movwf	tosl,c
  2719  000676  0009               	tblrd		*+
  2720  000678  50F5               	movf	tablat,w,c
  2721  00067A  6EFE               	movwf	tosh,c
  2722  00067C  50F8               	movf	tblptru,w,c
  2723  00067E  6EFF               	movwf	tosu,c
  2724  000680  50FA               	movf	pclath,w,c
  2725  000682  0100               	movlb	0	; () banked
  2726  000684  519F               	movf	ES_Initialize@i& (0+255),w,b
  2727  000686  0012               	return		;indir
  2728  000688                     u1639:
  2729  000688  06E8               	decf	wreg,f,c
  2730  00068A  B4D8               	btfsc	status,2,c
  2731  00068C  D002               	goto	l2413
  2732                           
  2733                           ;ES_Framework.c: 254: return FailedInit;
  2734  00068E  0E05               	movlw	5
  2735  000690  0012               	return	
  2736  000692                     l2413:
  2737  000692  0100               	movlb	0	; () banked
  2738  000694  2B9F               	incf	ES_Initialize@i& (0+255),f,b
  2739  000696  D795               	goto	l2393
  2740  000698                     l2417:
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;ES_Framework.c: 255: }
  2744                           ;ES_Framework.c: 256: return Success;
  2745  000698  0E00               	movlw	0
  2746  00069A  0012               	return	
  2747  00069C                     __end_of_ES_Initialize:
  2748                           	opt stack 0
  2749                           tosu	equ	0xFFF
  2750                           tosh	equ	0xFFE
  2751                           tosl	equ	0xFFD
  2752                           pclath	equ	0xFFA
  2753                           tblptru	equ	0xFF8
  2754                           tblptrh	equ	0xFF7
  2755                           tblptrl	equ	0xFF6
  2756                           tablat	equ	0xFF5
  2757                           prodh	equ	0xFF4
  2758                           prodl	equ	0xFF3
  2759                           intcon	equ	0xFF2
  2760                           postinc0	equ	0xFEE
  2761                           wreg	equ	0xFE8
  2762                           indf1	equ	0xFE7
  2763                           postinc1	equ	0xFE6
  2764                           fsr1h	equ	0xFE2
  2765                           fsr1l	equ	0xFE1
  2766                           indf2	equ	0xFDF
  2767                           postinc2	equ	0xFDE
  2768                           postdec2	equ	0xFDD
  2769                           fsr2h	equ	0xFDA
  2770                           fsr2l	equ	0xFD9
  2771                           status	equ	0xFD8
  2772                           
  2773 ;; *************** function _InitCan_XmitService *****************
  2774 ;; Defined at:
  2775 ;;		line 76 in file "Can_XmitService.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;  Priority        1    wreg     unsigned char 
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;  Priority        1    4[BANK0 ] unsigned char 
  2780 ;;  ThisEvent       3    1[BANK0 ] struct ES_Event_t
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  1    wreg      unsigned char 
  2783 ;; Registers used:
  2784 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2790 ;;      Params:         0       0       0       0
  2791 ;;      Locals:         0       4       0       0
  2792 ;;      Temps:          0       0       0       0
  2793 ;;      Totals:         0       4       0       0
  2794 ;;Total ram usage:        4 bytes
  2795 ;; Hardware stack levels used:    1
  2796 ;; Hardware stack levels required when called:    6
  2797 ;; This function calls:
  2798 ;;		_ES_PostToService
  2799 ;; This function is called by:
  2800 ;;		_ES_Initialize
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           	psect	text17
  2805  000C3C                     __ptext17:
  2806                           	opt stack 0
  2807  000C3C                     _InitCan_XmitService:
  2808                           	opt stack 23
  2809                           
  2810                           ;incstack = 0
  2811                           ;InitCan_XmitService@Priority stored from wreg
  2812  000C3C  0100               	movlb	0	; () banked
  2813  000C3E  6F9C               	movwf	InitCan_XmitService@Priority& (0+255),b
  2814                           
  2815                           ;Can_XmitService.c: 78: ES_Event ThisEvent;
  2816                           ;Can_XmitService.c: 80: MyPriority = Priority;
  2817  000C40  C09C  F043         	movff	InitCan_XmitService@Priority,Can_XmitService@MyPriority
  2818                           
  2819                           ;Can_XmitService.c: 83: ThisEvent.EventType = ES_INIT;
  2820  000C44  0E02               	movlw	2
  2821  000C46  0100               	movlb	0	; () banked
  2822  000C48  6F99               	movwf	InitCan_XmitService@ThisEvent& (0+255),b
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;Can_XmitService.c: 84: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  2826  000C4A  C099  F02D         	movff	InitCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  2827  000C4E  C09A  F02E         	movff	InitCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  2828  000C52  C09B  F02F         	movff	InitCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  2829  000C56  5043               	movf	Can_XmitService@MyPriority,w,c
  2830  000C58  EC24  F005         	call	_ES_PostToService
  2831  000C5C  06E8               	decf	wreg,f,c
  2832  000C5E  A4D8               	btfss	status,2,c
  2833  000C60  D002               	goto	l2375
  2834                           
  2835                           ;Can_XmitService.c: 85: {
  2836                           ;Can_XmitService.c: 86: return 1;
  2837  000C62  0E01               	movlw	1
  2838                           
  2839                           ;Can_XmitService.c: 87: }else
  2840  000C64  0012               	return	
  2841  000C66                     l2375:
  2842                           
  2843                           ;Can_XmitService.c: 88: {
  2844                           ;Can_XmitService.c: 89: return 0;
  2845  000C66  0E00               	movlw	0
  2846  000C68  0012               	return	
  2847  000C6A                     __end_of_InitCan_XmitService:
  2848                           	opt stack 0
  2849                           tosu	equ	0xFFF
  2850                           tosh	equ	0xFFE
  2851                           tosl	equ	0xFFD
  2852                           pclath	equ	0xFFA
  2853                           tblptru	equ	0xFF8
  2854                           tblptrh	equ	0xFF7
  2855                           tblptrl	equ	0xFF6
  2856                           tablat	equ	0xFF5
  2857                           prodh	equ	0xFF4
  2858                           prodl	equ	0xFF3
  2859                           intcon	equ	0xFF2
  2860                           postinc0	equ	0xFEE
  2861                           wreg	equ	0xFE8
  2862                           indf1	equ	0xFE7
  2863                           postinc1	equ	0xFE6
  2864                           fsr1h	equ	0xFE2
  2865                           fsr1l	equ	0xFE1
  2866                           indf2	equ	0xFDF
  2867                           postinc2	equ	0xFDE
  2868                           postdec2	equ	0xFDD
  2869                           fsr2h	equ	0xFDA
  2870                           fsr2l	equ	0xFD9
  2871                           status	equ	0xFD8
  2872                           
  2873 ;; *************** function _InitToggleService *****************
  2874 ;; Defined at:
  2875 ;;		line 63 in file "ToggleService.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;  Priority        1    wreg     unsigned char 
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;  Priority        1    4[BANK0 ] unsigned char 
  2880 ;;  ThisEvent       3    1[BANK0 ] struct ES_Event_t
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      unsigned char 
  2883 ;; Registers used:
  2884 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2890 ;;      Params:         0       0       0       0
  2891 ;;      Locals:         0       4       0       0
  2892 ;;      Temps:          0       0       0       0
  2893 ;;      Totals:         0       4       0       0
  2894 ;;Total ram usage:        4 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    6
  2897 ;; This function calls:
  2898 ;;		_ES_PostToService
  2899 ;; This function is called by:
  2900 ;;		_ES_Initialize
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904                           	psect	text18
  2905  000B84                     __ptext18:
  2906                           	opt stack 0
  2907  000B84                     _InitToggleService:
  2908                           	opt stack 23
  2909                           
  2910                           ;incstack = 0
  2911                           ;InitToggleService@Priority stored from wreg
  2912  000B84  0100               	movlb	0	; () banked
  2913  000B86  6F9C               	movwf	InitToggleService@Priority& (0+255),b
  2914                           
  2915                           ;ToggleService.c: 65: ES_Event ThisEvent;
  2916                           ;ToggleService.c: 67: MyPriority = Priority;
  2917  000B88  C09C  F045         	movff	InitToggleService@Priority,_MyPriority
  2918                           
  2919                           ;ToggleService.c: 71: PORTA = 0x00;
  2920  000B8C  0E00               	movlw	0
  2921  000B8E  6E80               	movwf	3968,c	;volatile
  2922                           
  2923                           ;ToggleService.c: 72: LATA = 0x00;
  2924  000B90  0E00               	movlw	0
  2925  000B92  6E89               	movwf	3977,c	;volatile
  2926                           
  2927                           ;ToggleService.c: 74: ADCON1 = 0x0F;
  2928  000B94  0E0F               	movlw	15
  2929  000B96  6EC1               	movwf	4033,c	;volatile
  2930                           
  2931                           ;ToggleService.c: 75: TRISA = 0b11111100;
  2932  000B98  0EFC               	movlw	252
  2933  000B9A  6E92               	movwf	3986,c	;volatile
  2934                           
  2935                           ;ToggleService.c: 76: LATA1 = 0;
  2936  000B9C  9289               	bcf	3977,1,c	;volatile
  2937                           
  2938                           ;ToggleService.c: 77: LATA0 = 1;
  2939  000B9E  8089               	bsf	3977,0,c	;volatile
  2940                           
  2941                           ;ToggleService.c: 81: ThisEvent.EventType = ES_INIT;
  2942  000BA0  0E02               	movlw	2
  2943  000BA2  0100               	movlb	0	; () banked
  2944  000BA4  6F99               	movwf	InitToggleService@ThisEvent& (0+255),b
  2945                           
  2946                           ; BSR set to: 0
  2947                           ;ToggleService.c: 82: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  2948  000BA6  C099  F02D         	movff	InitToggleService@ThisEvent,ES_PostToService@TheEvent
  2949  000BAA  C09A  F02E         	movff	InitToggleService@ThisEvent+1,ES_PostToService@TheEvent+1
  2950  000BAE  C09B  F02F         	movff	InitToggleService@ThisEvent+2,ES_PostToService@TheEvent+2
  2951  000BB2  5045               	movf	_MyPriority,w,c
  2952  000BB4  EC24  F005         	call	_ES_PostToService
  2953  000BB8  06E8               	decf	wreg,f,c
  2954  000BBA  A4D8               	btfss	status,2,c
  2955  000BBC  D002               	goto	l2347
  2956                           
  2957                           ;ToggleService.c: 83: {
  2958                           ;ToggleService.c: 84: return 1;
  2959  000BBE  0E01               	movlw	1
  2960                           
  2961                           ;ToggleService.c: 85: }else
  2962  000BC0  0012               	return	
  2963  000BC2                     l2347:
  2964                           
  2965                           ;ToggleService.c: 86: {
  2966                           ;ToggleService.c: 87: return 0;
  2967  000BC2  0E00               	movlw	0
  2968  000BC4  0012               	return	
  2969  000BC6                     __end_of_InitToggleService:
  2970                           	opt stack 0
  2971                           tosu	equ	0xFFF
  2972                           tosh	equ	0xFFE
  2973                           tosl	equ	0xFFD
  2974                           pclath	equ	0xFFA
  2975                           tblptru	equ	0xFF8
  2976                           tblptrh	equ	0xFF7
  2977                           tblptrl	equ	0xFF6
  2978                           tablat	equ	0xFF5
  2979                           prodh	equ	0xFF4
  2980                           prodl	equ	0xFF3
  2981                           intcon	equ	0xFF2
  2982                           postinc0	equ	0xFEE
  2983                           wreg	equ	0xFE8
  2984                           indf1	equ	0xFE7
  2985                           postinc1	equ	0xFE6
  2986                           fsr1h	equ	0xFE2
  2987                           fsr1l	equ	0xFE1
  2988                           indf2	equ	0xFDF
  2989                           postinc2	equ	0xFDE
  2990                           postdec2	equ	0xFDD
  2991                           fsr2h	equ	0xFDA
  2992                           fsr2l	equ	0xFD9
  2993                           status	equ	0xFD8
  2994                           
  2995 ;; *************** function _ES_PostToService *****************
  2996 ;; Defined at:
  2997 ;;		line 351 in file "ES_Framework.c"
  2998 ;; Parameters:    Size  Location     Type
  2999 ;;  WhichService    1    wreg     unsigned char 
  3000 ;;  TheEvent        3   44[COMRAM] struct ES_Event_t
  3001 ;; Auto vars:     Size  Location     Type
  3002 ;;  WhichService    1    0[BANK0 ] unsigned char 
  3003 ;; Return value:  Size  Location     Type
  3004 ;;                  1    wreg      unsigned char 
  3005 ;; Registers used:
  3006 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 0/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3012 ;;      Params:         3       0       0       0
  3013 ;;      Locals:         0       1       0       0
  3014 ;;      Temps:          2       0       0       0
  3015 ;;      Totals:         5       1       0       0
  3016 ;;Total ram usage:        6 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; Hardware stack levels required when called:    5
  3019 ;; This function calls:
  3020 ;;		_ES_EnQueueFIFO
  3021 ;; This function is called by:
  3022 ;;		_InitToggleService
  3023 ;;		_PostToggleService
  3024 ;;		_InitCan_XmitService
  3025 ;;		_PostCan_TransmitService
  3026 ;; This function uses a non-reentrant model
  3027 ;;
  3028                           
  3029                           	psect	text19
  3030  000A48                     __ptext19:
  3031                           	opt stack 0
  3032  000A48                     _ES_PostToService:
  3033                           	opt stack 21
  3034                           
  3035                           ;incstack = 0
  3036                           ;ES_PostToService@WhichService stored from wreg
  3037  000A48  0100               	movlb	0	; () banked
  3038  000A4A  6F98               	movwf	ES_PostToService@WhichService& (0+255),b
  3039                           
  3040                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  3041                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  3042                           ;ES_Framework.c: 354: 1 )){
  3043  000A4C  0E02               	movlw	2
  3044  000A4E  0100               	movlb	0	; () banked
  3045  000A50  6198               	cpfslt	ES_PostToService@WhichService& (0+255),b
  3046  000A52  D02F               	goto	l2147
  3047                           
  3048                           ; BSR set to: 0
  3049  000A54  0100               	movlb	0	; () banked
  3050  000A56  5198               	movf	ES_PostToService@WhichService& (0+255),w,b
  3051  000A58  0D03               	mullw	3
  3052  000A5A  0E58               	movlw	low _EventQueues
  3053  000A5C  24F3               	addwf	prodl,w,c
  3054  000A5E  6EF6               	movwf	tblptrl,c
  3055  000A60  0E03               	movlw	high _EventQueues
  3056  000A62  20F4               	addwfc	prodh,w,c
  3057  000A64  6EF7               	movwf	tblptrh,c
  3058  000A66                     	if	0	;There are less than 3 active tblptr bytes
  3059  000A66                     	endif
  3060  000A66  0009               	tblrd		*+
  3061  000A68  CFF5 F022          	movff	tablat,ES_EnQueueFIFO@pBlock
  3062  000A6C  000A               	tblrd		*-
  3063  000A6E  CFF5 F023          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  3064  000A72  C02D  F024         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  3065  000A76  C02E  F025         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  3066  000A7A  C02F  F026         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  3067  000A7E  ECC2  F003         	call	_ES_EnQueueFIFO	;wreg free
  3068  000A82  06E8               	decf	wreg,f,c
  3069  000A84  A4D8               	btfss	status,2,c
  3070  000A86  D015               	goto	l2147
  3071                           
  3072                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  3073  000A88  0100               	movlb	0	; () banked
  3074  000A8A  5198               	movf	ES_PostToService@WhichService& (0+255),w,b
  3075  000A8C  0D02               	mullw	2
  3076  000A8E  0E01               	movlw	low _BitNum2SetMask
  3077  000A90  24F3               	addwf	prodl,w,c
  3078  000A92  6EF6               	movwf	tblptrl,c
  3079  000A94  0E03               	movlw	high _BitNum2SetMask
  3080  000A96  20F4               	addwfc	prodh,w,c
  3081  000A98  6EF7               	movwf	tblptrh,c
  3082  000A9A                     	if	0	;There are less than 3 active tblptr bytes
  3083  000A9A                     	endif
  3084  000A9A  0009               	tblrd		*+
  3085  000A9C  CFF5 F030          	movff	tablat,??_ES_PostToService
  3086  000AA0  0009               	tblrd		*+
  3087  000AA2  CFF5 F031          	movff	tablat,??_ES_PostToService+1
  3088  000AA6  5030               	movf	??_ES_PostToService,w,c
  3089  000AA8  123B               	iorwf	_Ready,f,c
  3090  000AAA  5031               	movf	??_ES_PostToService+1,w,c
  3091  000AAC  123C               	iorwf	_Ready+1,f,c
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;ES_Framework.c: 356: return 1;
  3095  000AAE  0E01               	movlw	1
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;ES_Framework.c: 357: } else
  3099                           
  3100                           ; BSR set to: 0
  3101  000AB0  0012               	return	
  3102  000AB2                     l2147:
  3103                           
  3104                           ;ES_Framework.c: 358: return 0;
  3105  000AB2  0E00               	movlw	0
  3106  000AB4  0012               	return	
  3107  000AB6                     __end_of_ES_PostToService:
  3108                           	opt stack 0
  3109                           tosu	equ	0xFFF
  3110                           tosh	equ	0xFFE
  3111                           tosl	equ	0xFFD
  3112                           pclath	equ	0xFFA
  3113                           tblptru	equ	0xFF8
  3114                           tblptrh	equ	0xFF7
  3115                           tblptrl	equ	0xFF6
  3116                           tablat	equ	0xFF5
  3117                           prodh	equ	0xFF4
  3118                           prodl	equ	0xFF3
  3119                           intcon	equ	0xFF2
  3120                           postinc0	equ	0xFEE
  3121                           wreg	equ	0xFE8
  3122                           indf1	equ	0xFE7
  3123                           postinc1	equ	0xFE6
  3124                           fsr1h	equ	0xFE2
  3125                           fsr1l	equ	0xFE1
  3126                           indf2	equ	0xFDF
  3127                           postinc2	equ	0xFDE
  3128                           postdec2	equ	0xFDD
  3129                           fsr2h	equ	0xFDA
  3130                           fsr2l	equ	0xFD9
  3131                           status	equ	0xFD8
  3132                           
  3133 ;; *************** function _ES_EnQueueFIFO *****************
  3134 ;; Defined at:
  3135 ;;		line 85 in file "ES_Queue.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;  pBlock          2   33[COMRAM] PTR struct ES_Event_t
  3138 ;;		 -> Queue1(12), Queue0(12), 
  3139 ;;  Event2Add       3   35[COMRAM] struct ES_Event_t
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;  pThisQueue      2   42[COMRAM] PTR struct .
  3142 ;;		 -> Queue1(12), Queue0(12), 
  3143 ;;  SaveCrit        1   41[COMRAM] unsigned char 
  3144 ;; Return value:  Size  Location     Type
  3145 ;;                  1    wreg      unsigned char 
  3146 ;; Registers used:
  3147 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3153 ;;      Params:         5       0       0       0
  3154 ;;      Locals:         3       0       0       0
  3155 ;;      Temps:          3       0       0       0
  3156 ;;      Totals:        11       0       0       0
  3157 ;;Total ram usage:       11 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    4
  3160 ;; This function calls:
  3161 ;;		___awmod
  3162 ;;		___wmul
  3163 ;; This function is called by:
  3164 ;;		_ES_PostToService
  3165 ;;		_ES_PostAll
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169                           	psect	text20
  3170  000784                     __ptext20:
  3171                           	opt stack 0
  3172  000784                     _ES_EnQueueFIFO:
  3173                           	opt stack 21
  3174                           
  3175                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  3176                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  3177                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  3178                           
  3179                           ;incstack = 0
  3180  000784  C022  F02B         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  3181  000788  C023  F02C         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  3182                           
  3183                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  3184  00078C  C02B  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3185  000790  C02C  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3186  000794  EE10 F002          	lfsr	1,2
  3187  000798  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3188  00079A  26E1               	addwf	fsr1l,f,c
  3189  00079C  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3190  00079E  22E2               	addwfc	fsr1h,f,c
  3191  0007A0  50DE               	movf	postinc2,w,c
  3192  0007A2  5CE6               	subwf	postinc1,w,c
  3193  0007A4  B0D8               	btfsc	status,0,c
  3194  0007A6  D046               	goto	l2131
  3195                           
  3196                           ;ES_Queue.c: 92: {
  3197                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  3198  0007A8  CFF2 F02A          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  3199  0007AC  9EF2               	bcf	intcon,7,c	;volatile
  3200                           
  3201                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  3202                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  3203  0007AE  C02B  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3204  0007B2  C02C  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3205  0007B6  50DF               	movf	indf2,w,c
  3206  0007B8  6E27               	movwf	??_ES_EnQueueFIFO& (0+255),c
  3207  0007BA  5027               	movf	??_ES_EnQueueFIFO,w,c
  3208  0007BC  6E18               	movwf	___awmod@divisor,c
  3209  0007BE  6A19               	clrf	___awmod@divisor+1,c
  3210  0007C0  EE20 F002          	lfsr	2,2
  3211  0007C4  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3212  0007C6  26D9               	addwf	fsr2l,f,c
  3213  0007C8  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3214  0007CA  22DA               	addwfc	fsr2h,f,c
  3215  0007CC  50DF               	movf	indf2,w,c
  3216  0007CE  6E28               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),c
  3217  0007D0  EE20 F001          	lfsr	2,1
  3218  0007D4  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3219  0007D6  26D9               	addwf	fsr2l,f,c
  3220  0007D8  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3221  0007DA  22DA               	addwfc	fsr2h,f,c
  3222  0007DC  50DF               	movf	indf2,w,c
  3223  0007DE  6E29               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),c
  3224  0007E0  5029               	movf	??_ES_EnQueueFIFO+2,w,c
  3225  0007E2  2428               	addwf	??_ES_EnQueueFIFO+1,w,c
  3226  0007E4  6E16               	movwf	___awmod@dividend,c
  3227  0007E6  6A17               	clrf	___awmod@dividend+1,c
  3228  0007E8  3617               	rlcf	___awmod@dividend+1,f,c
  3229  0007EA  ECEC  F004         	call	___awmod	;wreg free
  3230  0007EE  0E01               	movlw	1
  3231  0007F0  2416               	addwf	?___awmod,w,c
  3232  0007F2  6E1C               	movwf	___wmul@multiplier,c
  3233  0007F4  0E00               	movlw	0
  3234  0007F6  2017               	addwfc	?___awmod+1,w,c
  3235  0007F8  6E1D               	movwf	___wmul@multiplier+1,c
  3236  0007FA  0E00               	movlw	0
  3237  0007FC  6E1F               	movwf	___wmul@multiplicand+1,c
  3238  0007FE  0E03               	movlw	3
  3239  000800  6E1E               	movwf	___wmul@multiplicand,c
  3240  000802  EC9A  F006         	call	___wmul	;wreg free
  3241  000806  501C               	movf	?___wmul,w,c
  3242  000808  2422               	addwf	ES_EnQueueFIFO@pBlock,w,c
  3243  00080A  6ED9               	movwf	fsr2l,c
  3244  00080C  501D               	movf	?___wmul+1,w,c
  3245  00080E  2023               	addwfc	ES_EnQueueFIFO@pBlock+1,w,c
  3246  000810  6EDA               	movwf	fsr2h,c
  3247  000812  C024  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  3248  000816  C025  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  3249  00081A  C026  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  3250                           
  3251                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  3252  00081E  EE20 F002          	lfsr	2,2
  3253  000822  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3254  000824  26D9               	addwf	fsr2l,f,c
  3255  000826  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3256  000828  22DA               	addwfc	fsr2h,f,c
  3257  00082A  2ADF               	incf	indf2,f,c
  3258                           
  3259                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  3260  00082C  C02A  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  3261                           
  3262                           ;ES_Queue.c: 101: return(1);
  3263  000830  0E01               	movlw	1
  3264                           
  3265                           ;ES_Queue.c: 102: }else
  3266  000832  0012               	return	
  3267  000834                     l2131:
  3268                           
  3269                           ;ES_Queue.c: 103: return(0);
  3270  000834  0E00               	movlw	0
  3271  000836  0012               	return	
  3272  000838                     __end_of_ES_EnQueueFIFO:
  3273                           	opt stack 0
  3274                           tosu	equ	0xFFF
  3275                           tosh	equ	0xFFE
  3276                           tosl	equ	0xFFD
  3277                           pclath	equ	0xFFA
  3278                           tblptru	equ	0xFF8
  3279                           tblptrh	equ	0xFF7
  3280                           tblptrl	equ	0xFF6
  3281                           tablat	equ	0xFF5
  3282                           prodh	equ	0xFF4
  3283                           prodl	equ	0xFF3
  3284                           intcon	equ	0xFF2
  3285                           postinc0	equ	0xFEE
  3286                           wreg	equ	0xFE8
  3287                           indf1	equ	0xFE7
  3288                           postinc1	equ	0xFE6
  3289                           fsr1h	equ	0xFE2
  3290                           fsr1l	equ	0xFE1
  3291                           indf2	equ	0xFDF
  3292                           postinc2	equ	0xFDE
  3293                           postdec2	equ	0xFDD
  3294                           fsr2h	equ	0xFDA
  3295                           fsr2l	equ	0xFD9
  3296                           status	equ	0xFD8
  3297                           
  3298 ;; *************** function ___wmul *****************
  3299 ;; Defined at:
  3300 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;  multiplier      2   27[COMRAM] unsigned int 
  3303 ;;  multiplicand    2   29[COMRAM] unsigned int 
  3304 ;; Auto vars:     Size  Location     Type
  3305 ;;  product         2   31[COMRAM] unsigned int 
  3306 ;; Return value:  Size  Location     Type
  3307 ;;                  2   27[COMRAM] unsigned int 
  3308 ;; Registers used:
  3309 ;;		wreg, status,2, status,0, prodl, prodh
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/0
  3312 ;;		On exit  : 0/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3315 ;;      Params:         4       0       0       0
  3316 ;;      Locals:         2       0       0       0
  3317 ;;      Temps:          0       0       0       0
  3318 ;;      Totals:         6       0       0       0
  3319 ;;Total ram usage:        6 bytes
  3320 ;; Hardware stack levels used:    1
  3321 ;; Hardware stack levels required when called:    3
  3322 ;; This function calls:
  3323 ;;		Nothing
  3324 ;; This function is called by:
  3325 ;;		_ES_EnQueueFIFO
  3326 ;;		_ES_DeQueue
  3327 ;;		_ES_EnQueueLIFO
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           	psect	text21
  3332  000D34                     __ptext21:
  3333                           	opt stack 0
  3334  000D34                     ___wmul:
  3335                           	opt stack 21
  3336                           
  3337                           ;incstack = 0
  3338  000D34  501C               	movf	___wmul@multiplier,w,c
  3339  000D36  021E               	mulwf	___wmul@multiplicand,c
  3340  000D38  CFF3 F020          	movff	prodl,___wmul@product
  3341  000D3C  CFF4 F021          	movff	prodh,___wmul@product+1
  3342  000D40  501C               	movf	___wmul@multiplier,w,c
  3343  000D42  021F               	mulwf	___wmul@multiplicand+1,c
  3344  000D44  50F3               	movf	prodl,w,c
  3345  000D46  2621               	addwf	___wmul@product+1,f,c
  3346  000D48  501D               	movf	___wmul@multiplier+1,w,c
  3347  000D4A  021E               	mulwf	___wmul@multiplicand,c
  3348  000D4C  50F3               	movf	prodl,w,c
  3349  000D4E  2621               	addwf	___wmul@product+1,f,c
  3350  000D50  C020  F01C         	movff	___wmul@product,?___wmul
  3351  000D54  C021  F01D         	movff	___wmul@product+1,?___wmul+1
  3352  000D58  0012               	return	
  3353  000D5A                     __end_of___wmul:
  3354                           	opt stack 0
  3355                           tosu	equ	0xFFF
  3356                           tosh	equ	0xFFE
  3357                           tosl	equ	0xFFD
  3358                           pclath	equ	0xFFA
  3359                           tblptru	equ	0xFF8
  3360                           tblptrh	equ	0xFF7
  3361                           tblptrl	equ	0xFF6
  3362                           tablat	equ	0xFF5
  3363                           prodh	equ	0xFF4
  3364                           prodl	equ	0xFF3
  3365                           intcon	equ	0xFF2
  3366                           postinc0	equ	0xFEE
  3367                           wreg	equ	0xFE8
  3368                           indf1	equ	0xFE7
  3369                           postinc1	equ	0xFE6
  3370                           fsr1h	equ	0xFE2
  3371                           fsr1l	equ	0xFE1
  3372                           indf2	equ	0xFDF
  3373                           postinc2	equ	0xFDE
  3374                           postdec2	equ	0xFDD
  3375                           fsr2h	equ	0xFDA
  3376                           fsr2l	equ	0xFD9
  3377                           status	equ	0xFD8
  3378                           
  3379 ;; *************** function ___awmod *****************
  3380 ;; Defined at:
  3381 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;  dividend        2   21[COMRAM] int 
  3384 ;;  divisor         2   23[COMRAM] int 
  3385 ;; Auto vars:     Size  Location     Type
  3386 ;;  sign            1   26[COMRAM] unsigned char 
  3387 ;;  counter         1   25[COMRAM] unsigned char 
  3388 ;; Return value:  Size  Location     Type
  3389 ;;                  2   21[COMRAM] int 
  3390 ;; Registers used:
  3391 ;;		wreg, status,2, status,0
  3392 ;; Tracked objects:
  3393 ;;		On entry : 0/0
  3394 ;;		On exit  : 0/0
  3395 ;;		Unchanged: 0/0
  3396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3397 ;;      Params:         4       0       0       0
  3398 ;;      Locals:         2       0       0       0
  3399 ;;      Temps:          0       0       0       0
  3400 ;;      Totals:         6       0       0       0
  3401 ;;Total ram usage:        6 bytes
  3402 ;; Hardware stack levels used:    1
  3403 ;; Hardware stack levels required when called:    3
  3404 ;; This function calls:
  3405 ;;		Nothing
  3406 ;; This function is called by:
  3407 ;;		_ES_EnQueueFIFO
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           	psect	text22
  3412  0009D8                     __ptext22:
  3413                           	opt stack 0
  3414  0009D8                     ___awmod:
  3415                           	opt stack 21
  3416                           
  3417                           ;incstack = 0
  3418  0009D8  0E00               	movlw	0
  3419  0009DA  6E1B               	movwf	___awmod@sign,c
  3420  0009DC  AE17               	btfss	___awmod@dividend+1,7,c
  3421  0009DE  D006               	goto	l2087
  3422  0009E0  6C16               	negf	___awmod@dividend,c
  3423  0009E2  1E17               	comf	___awmod@dividend+1,f,c
  3424  0009E4  B0D8               	btfsc	status,0,c
  3425  0009E6  2A17               	incf	___awmod@dividend+1,f,c
  3426  0009E8  0E01               	movlw	1
  3427  0009EA  6E1B               	movwf	___awmod@sign,c
  3428  0009EC                     l2087:
  3429  0009EC  AE19               	btfss	___awmod@divisor+1,7,c
  3430  0009EE  D004               	goto	l2091
  3431  0009F0  6C18               	negf	___awmod@divisor,c
  3432  0009F2  1E19               	comf	___awmod@divisor+1,f,c
  3433  0009F4  B0D8               	btfsc	status,0,c
  3434  0009F6  2A19               	incf	___awmod@divisor+1,f,c
  3435  0009F8                     l2091:
  3436  0009F8  5018               	movf	___awmod@divisor,w,c
  3437  0009FA  1019               	iorwf	___awmod@divisor+1,w,c
  3438  0009FC  B4D8               	btfsc	status,2,c
  3439  0009FE  D018               	goto	l2107
  3440  000A00  0E01               	movlw	1
  3441  000A02  6E1A               	movwf	___awmod@counter,c
  3442  000A04  D004               	goto	l2097
  3443  000A06                     l2095:
  3444  000A06  90D8               	bcf	status,0,c
  3445  000A08  3618               	rlcf	___awmod@divisor,f,c
  3446  000A0A  3619               	rlcf	___awmod@divisor+1,f,c
  3447  000A0C  2A1A               	incf	___awmod@counter,f,c
  3448  000A0E                     l2097:
  3449  000A0E  AE19               	btfss	___awmod@divisor+1,7,c
  3450  000A10  D7FA               	goto	l2095
  3451  000A12                     l2099:
  3452  000A12  5018               	movf	___awmod@divisor,w,c
  3453  000A14  5C16               	subwf	___awmod@dividend,w,c
  3454  000A16  5019               	movf	___awmod@divisor+1,w,c
  3455  000A18  5817               	subwfb	___awmod@dividend+1,w,c
  3456  000A1A  A0D8               	btfss	status,0,c
  3457  000A1C  D004               	goto	l2103
  3458  000A1E  5018               	movf	___awmod@divisor,w,c
  3459  000A20  5E16               	subwf	___awmod@dividend,f,c
  3460  000A22  5019               	movf	___awmod@divisor+1,w,c
  3461  000A24  5A17               	subwfb	___awmod@dividend+1,f,c
  3462  000A26                     l2103:
  3463  000A26  90D8               	bcf	status,0,c
  3464  000A28  3219               	rrcf	___awmod@divisor+1,f,c
  3465  000A2A  3218               	rrcf	___awmod@divisor,f,c
  3466  000A2C  2E1A               	decfsz	___awmod@counter,f,c
  3467  000A2E  D7F1               	goto	l2099
  3468  000A30                     l2107:
  3469  000A30  501B               	movf	___awmod@sign,w,c
  3470  000A32  B4D8               	btfsc	status,2,c
  3471  000A34  D004               	goto	l2111
  3472  000A36  6C16               	negf	___awmod@dividend,c
  3473  000A38  1E17               	comf	___awmod@dividend+1,f,c
  3474  000A3A  B0D8               	btfsc	status,0,c
  3475  000A3C  2A17               	incf	___awmod@dividend+1,f,c
  3476  000A3E                     l2111:
  3477  000A3E  C016  F016         	movff	___awmod@dividend,?___awmod
  3478  000A42  C017  F017         	movff	___awmod@dividend+1,?___awmod+1
  3479  000A46  0012               	return	
  3480  000A48                     __end_of___awmod:
  3481                           	opt stack 0
  3482                           tosu	equ	0xFFF
  3483                           tosh	equ	0xFFE
  3484                           tosl	equ	0xFFD
  3485                           pclath	equ	0xFFA
  3486                           tblptru	equ	0xFF8
  3487                           tblptrh	equ	0xFF7
  3488                           tblptrl	equ	0xFF6
  3489                           tablat	equ	0xFF5
  3490                           prodh	equ	0xFF4
  3491                           prodl	equ	0xFF3
  3492                           intcon	equ	0xFF2
  3493                           postinc0	equ	0xFEE
  3494                           wreg	equ	0xFE8
  3495                           indf1	equ	0xFE7
  3496                           postinc1	equ	0xFE6
  3497                           fsr1h	equ	0xFE2
  3498                           fsr1l	equ	0xFE1
  3499                           indf2	equ	0xFDF
  3500                           postinc2	equ	0xFDE
  3501                           postdec2	equ	0xFDD
  3502                           fsr2h	equ	0xFDA
  3503                           fsr2l	equ	0xFD9
  3504                           status	equ	0xFD8
  3505                           
  3506 ;; *************** function _ES_Timer_Init *****************
  3507 ;; Defined at:
  3508 ;;		line 130 in file "ES_Timers.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;  Rate            2   23[COMRAM] enum E15419
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;		None
  3513 ;; Return value:  Size  Location     Type
  3514 ;;                  1    wreg      void 
  3515 ;; Registers used:
  3516 ;;		wreg, status,2, cstack
  3517 ;; Tracked objects:
  3518 ;;		On entry : 0/0
  3519 ;;		On exit  : 0/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3522 ;;      Params:         2       0       0       0
  3523 ;;      Locals:         0       0       0       0
  3524 ;;      Temps:          0       0       0       0
  3525 ;;      Totals:         2       0       0       0
  3526 ;;Total ram usage:        2 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    4
  3529 ;; This function calls:
  3530 ;;		__HW_Timer_Init
  3531 ;; This function is called by:
  3532 ;;		_ES_Initialize
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           	psect	text23
  3537  000DE8                     __ptext23:
  3538                           	opt stack 0
  3539  000DE8                     _ES_Timer_Init:
  3540                           	opt stack 25
  3541                           
  3542                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  3543                           
  3544                           ;incstack = 0
  3545  000DE8  C018  F016         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  3546  000DEC  C019  F017         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  3547  000DF0  ECBF  F006         	call	__HW_Timer_Init	;wreg free
  3548  000DF4  0012               	return		;funcret
  3549  000DF6                     __end_of_ES_Timer_Init:
  3550                           	opt stack 0
  3551                           tosu	equ	0xFFF
  3552                           tosh	equ	0xFFE
  3553                           tosl	equ	0xFFD
  3554                           pclath	equ	0xFFA
  3555                           tblptru	equ	0xFF8
  3556                           tblptrh	equ	0xFF7
  3557                           tblptrl	equ	0xFF6
  3558                           tablat	equ	0xFF5
  3559                           prodh	equ	0xFF4
  3560                           prodl	equ	0xFF3
  3561                           intcon	equ	0xFF2
  3562                           postinc0	equ	0xFEE
  3563                           wreg	equ	0xFE8
  3564                           indf1	equ	0xFE7
  3565                           postinc1	equ	0xFE6
  3566                           fsr1h	equ	0xFE2
  3567                           fsr1l	equ	0xFE1
  3568                           indf2	equ	0xFDF
  3569                           postinc2	equ	0xFDE
  3570                           postdec2	equ	0xFDD
  3571                           fsr2h	equ	0xFDA
  3572                           fsr2l	equ	0xFD9
  3573                           status	equ	0xFD8
  3574                           
  3575 ;; *************** function __HW_Timer_Init *****************
  3576 ;; Defined at:
  3577 ;;		line 72 in file "ES_Port.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;  Rate            2   21[COMRAM] enum E15412
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;		None
  3582 ;; Return value:  Size  Location     Type
  3583 ;;                  1    wreg      void 
  3584 ;; Registers used:
  3585 ;;		wreg, status,2
  3586 ;; Tracked objects:
  3587 ;;		On entry : 0/0
  3588 ;;		On exit  : 0/0
  3589 ;;		Unchanged: 0/0
  3590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3591 ;;      Params:         2       0       0       0
  3592 ;;      Locals:         0       0       0       0
  3593 ;;      Temps:          0       0       0       0
  3594 ;;      Totals:         2       0       0       0
  3595 ;;Total ram usage:        2 bytes
  3596 ;; Hardware stack levels used:    1
  3597 ;; Hardware stack levels required when called:    3
  3598 ;; This function calls:
  3599 ;;		Nothing
  3600 ;; This function is called by:
  3601 ;;		_ES_Timer_Init
  3602 ;; This function uses a non-reentrant model
  3603 ;;
  3604                           
  3605                           	psect	text24
  3606  000D7E                     __ptext24:
  3607                           	opt stack 0
  3608  000D7E                     __HW_Timer_Init:
  3609                           	opt stack 25
  3610                           
  3611                           ;ES_Port.c: 80: PIE1 = 0b00000100;
  3612                           
  3613                           ;incstack = 0
  3614  000D7E  0E04               	movlw	4
  3615  000D80  6E9D               	movwf	3997,c	;volatile
  3616                           
  3617                           ;ES_Port.c: 85: INTCON = 0b01000000;
  3618  000D82  0E40               	movlw	64
  3619  000D84  6EF2               	movwf	intcon,c	;volatile
  3620                           
  3621                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
  3622  000D86  0E0A               	movlw	10
  3623  000D88  6EBD               	movwf	4029,c	;volatile
  3624                           
  3625                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
  3626  000D8A  0E01               	movlw	1
  3627  000D8C  6EBE               	movwf	4030,c	;volatile
  3628                           
  3629                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
  3630  000D8E  0E00               	movlw	0
  3631  000D90  6EBF               	movwf	4031,c	;volatile
  3632                           
  3633                           ;ES_Port.c: 107: T1CON = 0b00100001;
  3634  000D92  0E21               	movlw	33
  3635  000D94  6ECD               	movwf	4045,c	;volatile
  3636                           
  3637                           ;ES_Port.c: 109: {GIE = 1;};
  3638  000D96  8EF2               	bsf	intcon,7,c	;volatile
  3639  000D98  0012               	return		;funcret
  3640  000D9A                     __end_of__HW_Timer_Init:
  3641                           	opt stack 0
  3642                           tosu	equ	0xFFF
  3643                           tosh	equ	0xFFE
  3644                           tosl	equ	0xFFD
  3645                           pclath	equ	0xFFA
  3646                           tblptru	equ	0xFF8
  3647                           tblptrh	equ	0xFF7
  3648                           tblptrl	equ	0xFF6
  3649                           tablat	equ	0xFF5
  3650                           prodh	equ	0xFF4
  3651                           prodl	equ	0xFF3
  3652                           intcon	equ	0xFF2
  3653                           postinc0	equ	0xFEE
  3654                           wreg	equ	0xFE8
  3655                           indf1	equ	0xFE7
  3656                           postinc1	equ	0xFE6
  3657                           fsr1h	equ	0xFE2
  3658                           fsr1l	equ	0xFE1
  3659                           indf2	equ	0xFDF
  3660                           postinc2	equ	0xFDE
  3661                           postdec2	equ	0xFDD
  3662                           fsr2h	equ	0xFDA
  3663                           fsr2l	equ	0xFD9
  3664                           status	equ	0xFD8
  3665                           
  3666 ;; *************** function _ES_InitQueue *****************
  3667 ;; Defined at:
  3668 ;;		line 58 in file "ES_Queue.c"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;  pBlock          2   21[COMRAM] PTR struct ES_Event_t
  3671 ;;		 -> Queue1(12), Queue0(12), 
  3672 ;;  BlockSize       1   23[COMRAM] unsigned char 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;  pThisQueue      2   24[COMRAM] PTR struct .
  3675 ;;		 -> Queue1(12), Queue0(12), 
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  1    wreg      unsigned char 
  3678 ;; Registers used:
  3679 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3685 ;;      Params:         3       0       0       0
  3686 ;;      Locals:         2       0       0       0
  3687 ;;      Temps:          0       0       0       0
  3688 ;;      Totals:         5       0       0       0
  3689 ;;Total ram usage:        5 bytes
  3690 ;; Hardware stack levels used:    1
  3691 ;; Hardware stack levels required when called:    3
  3692 ;; This function calls:
  3693 ;;		Nothing
  3694 ;; This function is called by:
  3695 ;;		_ES_Initialize
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           	psect	text25
  3700  000C06                     __ptext25:
  3701                           	opt stack 0
  3702  000C06                     _ES_InitQueue:
  3703                           	opt stack 26
  3704                           
  3705                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  3706                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  3707                           
  3708                           ;incstack = 0
  3709  000C06  C016  F019         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  3710  000C0A  C017  F01A         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  3711                           
  3712                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  3713  000C0E  0418               	decf	ES_InitQueue@BlockSize,w,c
  3714  000C10  C019  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  3715  000C14  C01A  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  3716  000C18  6EDF               	movwf	indf2,c
  3717                           
  3718                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  3719  000C1A  EE20 F001          	lfsr	2,1
  3720  000C1E  5019               	movf	ES_InitQueue@pThisQueue,w,c
  3721  000C20  26D9               	addwf	fsr2l,f,c
  3722  000C22  501A               	movf	ES_InitQueue@pThisQueue+1,w,c
  3723  000C24  22DA               	addwfc	fsr2h,f,c
  3724  000C26  0E00               	movlw	0
  3725  000C28  6EDF               	movwf	indf2,c
  3726                           
  3727                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  3728  000C2A  EE20 F002          	lfsr	2,2
  3729  000C2E  5019               	movf	ES_InitQueue@pThisQueue,w,c
  3730  000C30  26D9               	addwf	fsr2l,f,c
  3731  000C32  501A               	movf	ES_InitQueue@pThisQueue+1,w,c
  3732  000C34  22DA               	addwfc	fsr2h,f,c
  3733  000C36  0E00               	movlw	0
  3734  000C38  6EDF               	movwf	indf2,c
  3735  000C3A  0012               	return	
  3736  000C3C                     __end_of_ES_InitQueue:
  3737                           	opt stack 0
  3738                           tosu	equ	0xFFF
  3739                           tosh	equ	0xFFE
  3740                           tosl	equ	0xFFD
  3741                           pclath	equ	0xFFA
  3742                           tblptru	equ	0xFF8
  3743                           tblptrh	equ	0xFF7
  3744                           tblptrl	equ	0xFF6
  3745                           tablat	equ	0xFF5
  3746                           prodh	equ	0xFF4
  3747                           prodl	equ	0xFF3
  3748                           intcon	equ	0xFF2
  3749                           postinc0	equ	0xFEE
  3750                           wreg	equ	0xFE8
  3751                           indf1	equ	0xFE7
  3752                           postinc1	equ	0xFE6
  3753                           fsr1h	equ	0xFE2
  3754                           fsr1l	equ	0xFE1
  3755                           indf2	equ	0xFDF
  3756                           postinc2	equ	0xFDE
  3757                           postdec2	equ	0xFDD
  3758                           fsr2h	equ	0xFDA
  3759                           fsr2l	equ	0xFD9
  3760                           status	equ	0xFD8
  3761                           
  3762 ;; *************** function _ISR *****************
  3763 ;; Defined at:
  3764 ;;		line 112 in file "ES_Port.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;		None
  3767 ;; Auto vars:     Size  Location     Type
  3768 ;;		None
  3769 ;; Return value:  Size  Location     Type
  3770 ;;                  1    wreg      void 
  3771 ;; Registers used:
  3772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3773 ;; Tracked objects:
  3774 ;;		On entry : 0/0
  3775 ;;		On exit  : 0/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3778 ;;      Params:         0       0       0       0
  3779 ;;      Locals:         0       0       0       0
  3780 ;;      Temps:         16       0       0       0
  3781 ;;      Totals:        16       0       0       0
  3782 ;;Total ram usage:       16 bytes
  3783 ;; Hardware stack levels used:    1
  3784 ;; Hardware stack levels required when called:    2
  3785 ;; This function calls:
  3786 ;;		_CanRCVResponse
  3787 ;;		_CanXmitResponse
  3788 ;; This function is called by:
  3789 ;;		Interrupt level 2
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           	psect	intcode
  3794  000008                     __pintcode:
  3795                           	opt stack 0
  3796  000008                     _ISR:
  3797                           	opt stack 21
  3798                           
  3799                           ;incstack = 0
  3800  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3801  00000A  CFFA F008          	movff	pclath,??_ISR+2
  3802  00000E  CFFB F009          	movff	pclatu,??_ISR+3
  3803  000012  ED1C  F004         	call	int_func,f	;refresh shadow registers
  3804                           tosu	equ	0xFFF
  3805                           tosh	equ	0xFFE
  3806                           tosl	equ	0xFFD
  3807                           pclatu	equ	0xFFB
  3808                           pclath	equ	0xFFA
  3809                           tblptru	equ	0xFF8
  3810                           tblptrh	equ	0xFF7
  3811                           tblptrl	equ	0xFF6
  3812                           tablat	equ	0xFF5
  3813                           prodh	equ	0xFF4
  3814                           prodl	equ	0xFF3
  3815                           intcon	equ	0xFF2
  3816                           postinc0	equ	0xFEE
  3817                           wreg	equ	0xFE8
  3818                           indf1	equ	0xFE7
  3819                           postinc1	equ	0xFE6
  3820                           fsr1h	equ	0xFE2
  3821                           fsr1l	equ	0xFE1
  3822                           indf2	equ	0xFDF
  3823                           postinc2	equ	0xFDE
  3824                           postdec2	equ	0xFDD
  3825                           fsr2h	equ	0xFDA
  3826                           fsr2l	equ	0xFD9
  3827                           status	equ	0xFD8
  3828                           
  3829                           	psect	intcode_body
  3830  000838                     __pintcode_body:
  3831                           	opt stack 21
  3832  000838                     int_func:
  3833                           	opt stack 21
  3834  000838  0006               	pop		; remove dummy address from shadow register refresh
  3835  00083A  CFE9 F00A          	movff	fsr0l,??_ISR+4
  3836  00083E  CFEA F00B          	movff	fsr0h,??_ISR+5
  3837  000842  CFE1 F00C          	movff	fsr1l,??_ISR+6
  3838  000846  CFE2 F00D          	movff	fsr1h,??_ISR+7
  3839  00084A  CFD9 F00E          	movff	fsr2l,??_ISR+8
  3840  00084E  CFDA F00F          	movff	fsr2h,??_ISR+9
  3841  000852  CFF3 F010          	movff	prodl,??_ISR+10
  3842  000856  CFF4 F011          	movff	prodh,??_ISR+11
  3843  00085A  CFF6 F012          	movff	tblptrl,??_ISR+12
  3844  00085E  CFF7 F013          	movff	tblptrh,??_ISR+13
  3845  000862  CFF8 F014          	movff	tblptru,??_ISR+14
  3846  000866  CFF5 F015          	movff	tablat,??_ISR+15
  3847                           
  3848                           ;ES_Port.c: 115: static unsigned int LastTime;
  3849                           ;ES_Port.c: 116: static unsigned int NextTime;
  3850                           ;ES_Port.c: 118: if (CCP1IF == 1)
  3851  00086A  A49E               	btfss	3998,2,c	;volatile
  3852  00086C  D014               	goto	i2l2019
  3853                           
  3854                           ;ES_Port.c: 119: {
  3855                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  3856  00086E  50BF               	movf	4031,w,c	;volatile
  3857  000870  6E06               	movwf	??_ISR& (0+255),c
  3858  000872  50BE               	movf	4030,w,c	;volatile
  3859  000874  6E37               	movwf	ISR@LastTime,c
  3860  000876  C006  F038         	movff	??_ISR,ISR@LastTime+1
  3861                           
  3862                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
  3863  00087A  0E20               	movlw	32
  3864  00087C  2437               	addwf	ISR@LastTime,w,c
  3865  00087E  6E39               	movwf	ISR@NextTime,c
  3866  000880  0E4E               	movlw	78
  3867  000882  2038               	addwfc	ISR@LastTime+1,w,c
  3868  000884  6E3A               	movwf	ISR@NextTime+1,c
  3869                           
  3870                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
  3871  000886  503A               	movf	ISR@NextTime+1,w,c
  3872  000888  6EBF               	movwf	4031,c	;volatile
  3873                           
  3874                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
  3875  00088A  C039  FFBE         	movff	ISR@NextTime,4030	;volatile
  3876                           
  3877                           ;ES_Port.c: 124: CCP1IF = 0;
  3878  00088E  949E               	bcf	3998,2,c	;volatile
  3879                           
  3880                           ;ES_Port.c: 125: TickCount++;
  3881  000890  2A46               	incf	_TickCount,f,c	;volatile
  3882                           
  3883                           ;ES_Port.c: 126: SysTickCounter++;
  3884  000892  4A3D               	infsnz	_SysTickCounter,f,c	;volatile
  3885  000894  2A3E               	incf	_SysTickCounter+1,f,c	;volatile
  3886  000896                     i2l2019:
  3887                           
  3888                           ;ES_Port.c: 127: }
  3889                           ;ES_Port.c: 133: if (TXB0IF == 1)
  3890  000896  A4A4               	btfss	4004,2,c	;volatile
  3891  000898  D003               	goto	i2l2025
  3892                           
  3893                           ;ES_Port.c: 134: {
  3894                           ;ES_Port.c: 135: TXB0IF = 0;
  3895  00089A  94A4               	bcf	4004,2,c	;volatile
  3896                           
  3897                           ;ES_Port.c: 136: CanXmitResponse();
  3898  00089C  ECD7  F006         	call	_CanXmitResponse	;wreg free
  3899  0008A0                     i2l2025:
  3900                           
  3901                           ;ES_Port.c: 137: }
  3902                           ;ES_Port.c: 138: if (RXB0IF == 1) {
  3903  0008A0  A0A4               	btfss	4004,0,c	;volatile
  3904  0008A2  D003               	goto	i2l154
  3905                           
  3906                           ;ES_Port.c: 139: RXB0IF = 0;
  3907  0008A4  90A4               	bcf	4004,0,c	;volatile
  3908                           
  3909                           ;ES_Port.c: 140: CanRCVResponse();
  3910  0008A6  ECE1  F006         	call	_CanRCVResponse	;wreg free
  3911  0008AA                     i2l154:
  3912  0008AA  C015  FFF5         	movff	??_ISR+15,tablat
  3913  0008AE  C014  FFF8         	movff	??_ISR+14,tblptru
  3914  0008B2  C013  FFF7         	movff	??_ISR+13,tblptrh
  3915  0008B6  C012  FFF6         	movff	??_ISR+12,tblptrl
  3916  0008BA  C011  FFF4         	movff	??_ISR+11,prodh
  3917  0008BE  C010  FFF3         	movff	??_ISR+10,prodl
  3918  0008C2  C00F  FFDA         	movff	??_ISR+9,fsr2h
  3919  0008C6  C00E  FFD9         	movff	??_ISR+8,fsr2l
  3920  0008CA  C00D  FFE2         	movff	??_ISR+7,fsr1h
  3921  0008CE  C00C  FFE1         	movff	??_ISR+6,fsr1l
  3922  0008D2  C00B  FFEA         	movff	??_ISR+5,fsr0h
  3923  0008D6  C00A  FFE9         	movff	??_ISR+4,fsr0l
  3924  0008DA  C009  FFFB         	movff	??_ISR+3,pclatu
  3925  0008DE  C008  FFFA         	movff	??_ISR+2,pclath
  3926  0008E2  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3927  0008E4  0011               	retfie		f
  3928  0008E6                     __end_of_ISR:
  3929                           	opt stack 0
  3930                           tosu	equ	0xFFF
  3931                           tosh	equ	0xFFE
  3932                           tosl	equ	0xFFD
  3933                           pclatu	equ	0xFFB
  3934                           pclath	equ	0xFFA
  3935                           tblptru	equ	0xFF8
  3936                           tblptrh	equ	0xFF7
  3937                           tblptrl	equ	0xFF6
  3938                           tablat	equ	0xFF5
  3939                           prodh	equ	0xFF4
  3940                           prodl	equ	0xFF3
  3941                           intcon	equ	0xFF2
  3942                           postinc0	equ	0xFEE
  3943                           fsr0h	equ	0xFEA
  3944                           fsr0l	equ	0xFE9
  3945                           wreg	equ	0xFE8
  3946                           indf1	equ	0xFE7
  3947                           postinc1	equ	0xFE6
  3948                           fsr1h	equ	0xFE2
  3949                           fsr1l	equ	0xFE1
  3950                           indf2	equ	0xFDF
  3951                           postinc2	equ	0xFDE
  3952                           postdec2	equ	0xFDD
  3953                           fsr2h	equ	0xFDA
  3954                           fsr2l	equ	0xFD9
  3955                           status	equ	0xFD8
  3956                           
  3957 ;; *************** function _CanXmitResponse *****************
  3958 ;; Defined at:
  3959 ;;		line 160 in file "Can_XmitService.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;		None
  3962 ;; Auto vars:     Size  Location     Type
  3963 ;;		None
  3964 ;; Return value:  Size  Location     Type
  3965 ;;                  1    wreg      void 
  3966 ;; Registers used:
  3967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3968 ;; Tracked objects:
  3969 ;;		On entry : 0/0
  3970 ;;		On exit  : 0/0
  3971 ;;		Unchanged: 0/0
  3972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3973 ;;      Params:         0       0       0       0
  3974 ;;      Locals:         0       0       0       0
  3975 ;;      Temps:          0       0       0       0
  3976 ;;      Totals:         0       0       0       0
  3977 ;;Total ram usage:        0 bytes
  3978 ;; Hardware stack levels used:    1
  3979 ;; Hardware stack levels required when called:    1
  3980 ;; This function calls:
  3981 ;;		_ES_Timer_InitTimer
  3982 ;; This function is called by:
  3983 ;;		_ISR
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987                           	psect	text27
  3988  000DAE                     __ptext27:
  3989                           	opt stack 0
  3990  000DAE                     _CanXmitResponse:
  3991                           	opt stack 21
  3992                           
  3993                           ;Can_XmitService.c: 162: TXB0CONbits.TXREQ = 0;
  3994                           
  3995                           ;incstack = 0
  3996  000DAE  010F               	movlb	15	; () banked
  3997  000DB0  9740               	bcf	64,3,b	;volatile
  3998                           
  3999                           ; BSR set to: 15
  4000                           ;Can_XmitService.c: 163: ES_Timer_InitTimer(2, 50);
  4001  000DB2  0E00               	movlw	0
  4002  000DB4  6E02               	movwf	ES_Timer_InitTimer@NewTime+1,c
  4003  000DB6  0E32               	movlw	50
  4004  000DB8  6E01               	movwf	ES_Timer_InitTimer@NewTime,c
  4005  000DBA  0E02               	movlw	2
  4006  000DBC  EC5B  F005         	call	_ES_Timer_InitTimer
  4007  000DC0  0012               	return		;funcret
  4008  000DC2                     __end_of_CanXmitResponse:
  4009                           	opt stack 0
  4010                           tosu	equ	0xFFF
  4011                           tosh	equ	0xFFE
  4012                           tosl	equ	0xFFD
  4013                           pclatu	equ	0xFFB
  4014                           pclath	equ	0xFFA
  4015                           tblptru	equ	0xFF8
  4016                           tblptrh	equ	0xFF7
  4017                           tblptrl	equ	0xFF6
  4018                           tablat	equ	0xFF5
  4019                           prodh	equ	0xFF4
  4020                           prodl	equ	0xFF3
  4021                           intcon	equ	0xFF2
  4022                           postinc0	equ	0xFEE
  4023                           fsr0h	equ	0xFEA
  4024                           fsr0l	equ	0xFE9
  4025                           wreg	equ	0xFE8
  4026                           indf1	equ	0xFE7
  4027                           postinc1	equ	0xFE6
  4028                           fsr1h	equ	0xFE2
  4029                           fsr1l	equ	0xFE1
  4030                           indf2	equ	0xFDF
  4031                           postinc2	equ	0xFDE
  4032                           postdec2	equ	0xFDD
  4033                           fsr2h	equ	0xFDA
  4034                           fsr2l	equ	0xFD9
  4035                           status	equ	0xFD8
  4036                           
  4037 ;; *************** function _ES_Timer_InitTimer *****************
  4038 ;; Defined at:
  4039 ;;		line 229 in file "ES_Timers.c"
  4040 ;; Parameters:    Size  Location     Type
  4041 ;;  Num             1    wreg     unsigned char 
  4042 ;;  NewTime         2    0[COMRAM] unsigned int 
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;  Num             1    4[COMRAM] unsigned char 
  4045 ;; Return value:  Size  Location     Type
  4046 ;;                  1    wreg      enum E15468
  4047 ;; Registers used:
  4048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4049 ;; Tracked objects:
  4050 ;;		On entry : 0/0
  4051 ;;		On exit  : 0/0
  4052 ;;		Unchanged: 0/0
  4053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4054 ;;      Params:         2       0       0       0
  4055 ;;      Locals:         1       0       0       0
  4056 ;;      Temps:          2       0       0       0
  4057 ;;      Totals:         5       0       0       0
  4058 ;;Total ram usage:        5 bytes
  4059 ;; Hardware stack levels used:    1
  4060 ;; This function calls:
  4061 ;;		Nothing
  4062 ;; This function is called by:
  4063 ;;		_CanXmitResponse
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           	psect	text28
  4068  000AB6                     __ptext28:
  4069                           	opt stack 0
  4070  000AB6                     _ES_Timer_InitTimer:
  4071                           	opt stack 21
  4072                           
  4073                           ;incstack = 0
  4074                           ;ES_Timer_InitTimer@Num stored from wreg
  4075  000AB6  6E05               	movwf	ES_Timer_InitTimer@Num,c
  4076                           
  4077                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  4078                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  4079                           ;ES_Timers.c: 236: (NewTime == 0) )
  4080  000AB8  0E10               	movlw	16
  4081  000ABA  6005               	cpfslt	ES_Timer_InitTimer@Num,c
  4082  000ABC  0012               	return	
  4083  000ABE  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4084  000AC0  0D02               	mullw	2
  4085  000AC2  0E21               	movlw	low _Timer2PostFunc
  4086  000AC4  24F3               	addwf	prodl,w,c
  4087  000AC6  6EF6               	movwf	tblptrl,c
  4088  000AC8  0E03               	movlw	high _Timer2PostFunc
  4089  000ACA  20F4               	addwfc	prodh,w,c
  4090  000ACC  6EF7               	movwf	tblptrh,c
  4091  000ACE                     	if	0	;There are less than 3 active tblptr bytes
  4092  000ACE                     	endif
  4093  000ACE  0009               	tblrd		*+
  4094  000AD0  50F5               	movf	tablat,w,c
  4095  000AD2  0009               	tblrd		*+
  4096  000AD4  10F5               	iorwf	tablat,w,c
  4097  000AD6  B4D8               	btfsc	status,2,c
  4098  000AD8  0012               	return	
  4099  000ADA  5001               	movf	ES_Timer_InitTimer@NewTime,w,c
  4100  000ADC  1002               	iorwf	ES_Timer_InitTimer@NewTime+1,w,c
  4101  000ADE  B4D8               	btfsc	status,2,c
  4102  000AE0  0012               	return	
  4103                           
  4104                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  4105                           
  4106                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  4107                           ;	Return value of _ES_Timer_InitTimer is never used
  4108  000AE2  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4109  000AE4  0D02               	mullw	2
  4110  000AE6  0E60               	movlw	low _TMR_TimerArray
  4111  000AE8  24F3               	addwf	prodl,w,c
  4112  000AEA  6ED9               	movwf	fsr2l,c
  4113  000AEC  0E00               	movlw	high _TMR_TimerArray
  4114  000AEE  20F4               	addwfc	prodh,w,c
  4115  000AF0  6EDA               	movwf	fsr2h,c
  4116  000AF2  C001  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  4117  000AF6  C002  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  4118                           
  4119                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  4120  000AFA  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4121  000AFC  0D02               	mullw	2
  4122  000AFE  0E01               	movlw	low _BitNum2SetMask
  4123  000B00  24F3               	addwf	prodl,w,c
  4124  000B02  6EF6               	movwf	tblptrl,c
  4125  000B04  0E03               	movlw	high _BitNum2SetMask
  4126  000B06  20F4               	addwfc	prodh,w,c
  4127  000B08  6EF7               	movwf	tblptrh,c
  4128  000B0A                     	if	0	;There are less than 3 active tblptr bytes
  4129  000B0A                     	endif
  4130  000B0A  0009               	tblrd		*+
  4131  000B0C  CFF5 F003          	movff	tablat,??_ES_Timer_InitTimer
  4132  000B10  0009               	tblrd		*+
  4133  000B12  CFF5 F004          	movff	tablat,??_ES_Timer_InitTimer+1
  4134  000B16  5003               	movf	??_ES_Timer_InitTimer,w,c
  4135  000B18  123F               	iorwf	_TMR_ActiveFlags,f,c
  4136  000B1A  5004               	movf	??_ES_Timer_InitTimer+1,w,c
  4137  000B1C  1240               	iorwf	_TMR_ActiveFlags+1,f,c
  4138  000B1E  0012               	return	
  4139  000B20                     __end_of_ES_Timer_InitTimer:
  4140                           	opt stack 0
  4141                           tosu	equ	0xFFF
  4142                           tosh	equ	0xFFE
  4143                           tosl	equ	0xFFD
  4144                           pclatu	equ	0xFFB
  4145                           pclath	equ	0xFFA
  4146                           tblptru	equ	0xFF8
  4147                           tblptrh	equ	0xFF7
  4148                           tblptrl	equ	0xFF6
  4149                           tablat	equ	0xFF5
  4150                           prodh	equ	0xFF4
  4151                           prodl	equ	0xFF3
  4152                           intcon	equ	0xFF2
  4153                           postinc0	equ	0xFEE
  4154                           fsr0h	equ	0xFEA
  4155                           fsr0l	equ	0xFE9
  4156                           wreg	equ	0xFE8
  4157                           indf1	equ	0xFE7
  4158                           postinc1	equ	0xFE6
  4159                           fsr1h	equ	0xFE2
  4160                           fsr1l	equ	0xFE1
  4161                           indf2	equ	0xFDF
  4162                           postinc2	equ	0xFDE
  4163                           postdec2	equ	0xFDD
  4164                           fsr2h	equ	0xFDA
  4165                           fsr2l	equ	0xFD9
  4166                           status	equ	0xFD8
  4167                           
  4168 ;; *************** function _CanRCVResponse *****************
  4169 ;; Defined at:
  4170 ;;		line 166 in file "Can_XmitService.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;		None
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;		None
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  1    wreg      void 
  4177 ;; Registers used:
  4178 ;;		None
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4184 ;;      Params:         0       0       0       0
  4185 ;;      Locals:         0       0       0       0
  4186 ;;      Temps:          0       0       0       0
  4187 ;;      Totals:         0       0       0       0
  4188 ;;Total ram usage:        0 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; This function calls:
  4191 ;;		Nothing
  4192 ;; This function is called by:
  4193 ;;		_ISR
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196                           
  4197                           	psect	text29
  4198  000DC2                     __ptext29:
  4199                           	opt stack 0
  4200  000DC2                     _CanRCVResponse:
  4201                           	opt stack 22
  4202                           
  4203                           ;Can_XmitService.c: 168: if (LATA1 == 1) {
  4204                           
  4205                           ;incstack = 0
  4206  000DC2  A289               	btfss	3977,1,c	;volatile
  4207  000DC4  D002               	goto	i2l397
  4208                           
  4209                           ;Can_XmitService.c: 169: LATA1 = 0;
  4210  000DC6  9289               	bcf	3977,1,c	;volatile
  4211                           
  4212                           ;Can_XmitService.c: 170: } else if (LATA1 == 0) {
  4213  000DC8  D002               	goto	i2l398
  4214  000DCA                     i2l397:
  4215  000DCA  A289               	btfss	3977,1,c	;volatile
  4216                           
  4217                           ;Can_XmitService.c: 171: LATA1 = 1;
  4218  000DCC  8289               	bsf	3977,1,c	;volatile
  4219  000DCE                     i2l398:
  4220                           
  4221                           ;Can_XmitService.c: 172: }
  4222                           ;Can_XmitService.c: 173: if (RXB0CONbits.RXFUL == 1) {
  4223  000DCE  AE60               	btfss	3936,7,c	;volatile
  4224  000DD0  0012               	return	
  4225                           
  4226                           ;Can_XmitService.c: 174: RXB0CONbits.RXFUL = 0;
  4227  000DD2  9E60               	bcf	3936,7,c	;volatile
  4228  000DD4  0012               	return	
  4229  000DD6                     __end_of_CanRCVResponse:
  4230                           	opt stack 0
  4231                           tosu	equ	0xFFF
  4232                           tosh	equ	0xFFE
  4233                           tosl	equ	0xFFD
  4234                           pclatu	equ	0xFFB
  4235                           pclath	equ	0xFFA
  4236                           tblptru	equ	0xFF8
  4237                           tblptrh	equ	0xFF7
  4238                           tblptrl	equ	0xFF6
  4239                           tablat	equ	0xFF5
  4240                           prodh	equ	0xFF4
  4241                           prodl	equ	0xFF3
  4242                           intcon	equ	0xFF2
  4243                           postinc0	equ	0xFEE
  4244                           fsr0h	equ	0xFEA
  4245                           fsr0l	equ	0xFE9
  4246                           wreg	equ	0xFE8
  4247                           indf1	equ	0xFE7
  4248                           postinc1	equ	0xFE6
  4249                           fsr1h	equ	0xFE2
  4250                           fsr1l	equ	0xFE1
  4251                           indf2	equ	0xFDF
  4252                           postinc2	equ	0xFDE
  4253                           postdec2	equ	0xFDD
  4254                           fsr2h	equ	0xFDA
  4255                           fsr2l	equ	0xFD9
  4256                           status	equ	0xFD8
  4257                           tosu	equ	0xFFF
  4258                           tosh	equ	0xFFE
  4259                           tosl	equ	0xFFD
  4260                           pclatu	equ	0xFFB
  4261                           pclath	equ	0xFFA
  4262                           tblptru	equ	0xFF8
  4263                           tblptrh	equ	0xFF7
  4264                           tblptrl	equ	0xFF6
  4265                           tablat	equ	0xFF5
  4266                           prodh	equ	0xFF4
  4267                           prodl	equ	0xFF3
  4268                           intcon	equ	0xFF2
  4269                           postinc0	equ	0xFEE
  4270                           fsr0h	equ	0xFEA
  4271                           fsr0l	equ	0xFE9
  4272                           wreg	equ	0xFE8
  4273                           indf1	equ	0xFE7
  4274                           postinc1	equ	0xFE6
  4275                           fsr1h	equ	0xFE2
  4276                           fsr1l	equ	0xFE1
  4277                           indf2	equ	0xFDF
  4278                           postinc2	equ	0xFDE
  4279                           postdec2	equ	0xFDD
  4280                           fsr2h	equ	0xFDA
  4281                           fsr2l	equ	0xFD9
  4282                           status	equ	0xFD8
  4283                           
  4284                           	psect	text30
  4285  000000                     __ptext30:
  4286                           	opt stack 0
  4287                           tosu	equ	0xFFF
  4288                           tosh	equ	0xFFE
  4289                           tosl	equ	0xFFD
  4290                           pclatu	equ	0xFFB
  4291                           pclath	equ	0xFFA
  4292                           tblptru	equ	0xFF8
  4293                           tblptrh	equ	0xFF7
  4294                           tblptrl	equ	0xFF6
  4295                           tablat	equ	0xFF5
  4296                           prodh	equ	0xFF4
  4297                           prodl	equ	0xFF3
  4298                           intcon	equ	0xFF2
  4299                           postinc0	equ	0xFEE
  4300                           fsr0h	equ	0xFEA
  4301                           fsr0l	equ	0xFE9
  4302                           wreg	equ	0xFE8
  4303                           indf1	equ	0xFE7
  4304                           postinc1	equ	0xFE6
  4305                           fsr1h	equ	0xFE2
  4306                           fsr1l	equ	0xFE1
  4307                           indf2	equ	0xFDF
  4308                           postinc2	equ	0xFDE
  4309                           postdec2	equ	0xFDD
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           status	equ	0xFD8
  4313                           
  4314                           	psect	rparam
  4315  0000                     tosu	equ	0xFFF
  4316                           tosh	equ	0xFFE
  4317                           tosl	equ	0xFFD
  4318                           pclatu	equ	0xFFB
  4319                           pclath	equ	0xFFA
  4320                           tblptru	equ	0xFF8
  4321                           tblptrh	equ	0xFF7
  4322                           tblptrl	equ	0xFF6
  4323                           tablat	equ	0xFF5
  4324                           prodh	equ	0xFF4
  4325                           prodl	equ	0xFF3
  4326                           intcon	equ	0xFF2
  4327                           postinc0	equ	0xFEE
  4328                           fsr0h	equ	0xFEA
  4329                           fsr0l	equ	0xFE9
  4330                           wreg	equ	0xFE8
  4331                           indf1	equ	0xFE7
  4332                           postinc1	equ	0xFE6
  4333                           fsr1h	equ	0xFE2
  4334                           fsr1l	equ	0xFE1
  4335                           indf2	equ	0xFDF
  4336                           postinc2	equ	0xFDE
  4337                           postdec2	equ	0xFDD
  4338                           fsr2h	equ	0xFDA
  4339                           fsr2l	equ	0xFD9
  4340                           status	equ	0xFD8
  4341                           
  4342                           	psect	temp
  4343  00004A                     btemp:
  4344                           	opt stack 0
  4345  00004A                     	ds	1
  4346  0000                     int$flags	set	btemp
  4347                           tosu	equ	0xFFF
  4348                           tosh	equ	0xFFE
  4349                           tosl	equ	0xFFD
  4350                           pclatu	equ	0xFFB
  4351                           pclath	equ	0xFFA
  4352                           tblptru	equ	0xFF8
  4353                           tblptrh	equ	0xFF7
  4354                           tblptrl	equ	0xFF6
  4355                           tablat	equ	0xFF5
  4356                           prodh	equ	0xFF4
  4357                           prodl	equ	0xFF3
  4358                           intcon	equ	0xFF2
  4359                           postinc0	equ	0xFEE
  4360                           fsr0h	equ	0xFEA
  4361                           fsr0l	equ	0xFE9
  4362                           wreg	equ	0xFE8
  4363                           indf1	equ	0xFE7
  4364                           postinc1	equ	0xFE6
  4365                           fsr1h	equ	0xFE2
  4366                           fsr1l	equ	0xFE1
  4367                           indf2	equ	0xFDF
  4368                           postinc2	equ	0xFDE
  4369                           postdec2	equ	0xFDD
  4370                           fsr2h	equ	0xFDA
  4371                           fsr2l	equ	0xFD9
  4372                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    95
    Data        0
    BSS         80
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      73
    BANK0           160     14      70
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostToggleService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(COMRAM[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    S101$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue1(BANK0[12]), Queue0(BANK0[12]), 

    S70$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunToggleService(), RunCan_XmitService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunToggleService(), RunCan_XmitService(), 

    S70$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitToggleService(), InitCan_XmitService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitToggleService(), InitCan_XmitService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    _PostToggleService->_ES_PostToService
    _RunToggleService->_XmitData
    _RunCan_XmitService->_XmitData
    _ES_DeQueue->___wmul
    _InitToggleService->_ES_PostToService
    _InitCan_XmitService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in COMRAM

    _CanXmitResponse->_ES_Timer_InitTimer

Critical Paths under _main in BANK0

    _main->_ES_Run
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostToggleService
    _PostToggleService->_ES_PostToService
    _ES_Initialize->_InitCan_XmitService
    _ES_Initialize->_InitToggleService
    _InitToggleService->_ES_PostToService
    _InitCan_XmitService->_ES_PostToService

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   14741
                                             13 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     428
                                             21 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0    7026
                                              8 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                 _RunCan_XmitService *
                   _RunToggleService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    3618
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    3618
                                              4 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
                  _PostToggleService *
 ---------------------------------------------------------------------------------
 (4) _PostToggleService                                    3     0      3    3175
                                              1 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     443
                                             21 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                             21 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunToggleService                                     6     3      3     186
                                             22 COMRAM     6     3      3
                           _XmitData
 ---------------------------------------------------------------------------------
 (2) _RunCan_XmitService                                   6     3      3      67
                                             22 COMRAM     6     3      3
                    _InitCanHardware
                           _XmitData
 ---------------------------------------------------------------------------------
 (3) _XmitData                                             1     1      0      22
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2526
                                             33 COMRAM    10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     292
                                             21 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                             21 COMRAM     1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    7219
                                              5 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                _InitCan_XmitService *
                  _InitToggleService *
 ---------------------------------------------------------------------------------
 (2) _InitToggleService                                    4     4      0    3144
                                              1 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (2) _InitCan_XmitService                                  4     4      0    3144
                                              1 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    3079
                                             44 COMRAM     5     2      3
                                              0 BANK0      1     1      0
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2595
                                             33 COMRAM    11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1366
                                             27 COMRAM     6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     553
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     211
                                             23 COMRAM     2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      90
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     345
                                             21 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 16    16      0     208
                                              5 COMRAM    16    16      0
                     _CanRCVResponse
                    _CanXmitResponse
 ---------------------------------------------------------------------------------
 (9) _CanXmitResponse                                      0     0      0     208
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (10) _ES_Timer_InitTimer                                  5     3      2     208
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (9) _CanRCVResponse                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitCan_XmitService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
     _InitToggleService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunCan_XmitService *
       _InitCanHardware
       _XmitData
     _RunToggleService *
       _XmitData
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostToggleService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _CanRCVResponse
   _CanXmitResponse
     _ES_Timer_InitTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      E      46       4       43.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     31      49       1       77.7%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8F       9        0.0%
DATA                 0      0      8F      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Nov 14 00:30:10 2016

                   ??__HW_Timer_Init 0018                  ES_CheckUserEvents@i 0016  
                __HW_Timer_Init@Rate 0016                  ___wmul@multiplicand 001E  
                                l404 0B30                                  l407 0B7E  
                                l283 0964                __end_of_ES_Initialize 069C  
                                _GIE 007F97                                  _ISR 0008  
                       ___awmod@sign 001B              __end_of_Check4Keystroke 0DFA  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 002A  
            ES_EnQueueFIFO@Event2Add 0024                    ?_ES_PostToService 002D  
                               ?_ISR 0001                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 0032                                 l2111 0A3E  
                               l2103 0A26                                 l2107 0A30  
                               l2131 0834                                 l2401 0610  
                               l2241 0CC8                                 l2153 096E  
                               l2313 0DD8                                 l2091 09F8  
                               l2147 0AB2                                 l2163 09D0  
                               l2413 0692                                 l2405 0614  
                               l2317 0DDE                                 l2421 069E  
                               l2095 0A06                                 l2087 09EC  
                               l2167 09D4                                 l2183 04C8  
                               l2097 0A0E                                 l2417 0698  
                               l2249 0CE0                                 l2193 0536  
                               l2433 076C                                 l2099 0A12  
                               l2347 0BC2                                 l2195 056E  
                               l2427 0718                                 l2531 0930  
                               l2285 0478                                 l2437 077E  
                               l2445 0C74                                 l2533 093E  
                               l2375 0C66                                 l2295 04B4  
                               l2359 0CB0                                 l2383 0D6C  
                               l2447 0C7A                                 l2527 0914  
                               l2393 05C2                                 l2289 0490  
                               l2529 0922                                 l2537 094C  
                               l2397 05CC                                 STR_1 0360  
                               STR_2 037B                                 STR_3 0393  
                               STR_4 03AA                                 _LATA 000F89  
                               _LATB 000F8A                                 u1438 051E  
                               u1384 098C                                 u1385 0986  
                               u1638 066C                                 u1639 0688  
                               _PIE1 000F9D                                 _PIE3 000FA3  
                               u1498 0BE4                                 u1499 0BFC  
                               u1678 0742                                 u1679 075A  
                               _SCS1 007E99                     ?_CanXmitResponse 0001  
                 ??_ES_PostToService 0030                                 _main 08E6  
                        ?_ES_DeQueue 0022                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 indf1 000FE7  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 004A  
                      main@ErrorType 00A5                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0016                        __CFG_MCLRE$ON 000000  
       InitCan_XmitService@ThisEvent 0099                         ___param_bank 000010  
            __end_of_InitCanHardware 0B84                                ??_ISR 0006  
                 ES_Run@HighestPrior 00A4                                ?_main 0001  
              __end_of_ES_Timer_Init 0DF6                      __end_of___awmod 0A48  
                    __end_of___lbmod 0CE8             __end_of_RunToggleService 0CBE  
                              _T1CON 000FCD                                _LATA0 007C48  
                              _LATA1 007C49                                _IRCF0 007E9C  
                              _IRCF1 007E9D                                _IRCF2 007E9E  
                              i2l154 08AA                                i2l397 0DCA  
                              i2l398 0DCE                                _PORTA 000F80  
                              _PORTB 000F81                                _TRISA 000F92  
                      __CFG_PWRT$OFF 000000                                _Ready 003B  
                              _putch 0DFA                       __CFG_BOREN$OFF 000000  
                              pclath 000FFA                                tablat 000FF5  
                              status 000FD8                      __initialization 0CE8  
             ES_GetMSBitSet@LoopCntr 001F           __end_of_ES_CheckUserEvents 0C06  
                       __end_of_main 0966                    ES_Timer_Init@Rate 0018  
                __end_of_EventQueues 035E                               ??_main 0032  
                      __activetblptr 000002                  __size_of_ES_DeQueue 00FE  
                    _Nybble2MSBitNum 0341     __end_of__HW_Process_Pending_Ints 0DE8  
                   ?_Check4Keystroke 0001                               _ADCON1 000FC1  
                   __end_of_XmitData 0D34                               _CCP1IF 007CF2  
                             _CANCON 000F6F                               _CCPR1H 000FBF  
                             _CCPR1L 000FBE                           _MyPriority 0045  
                             ?_putch 0001                     ??_ES_GetMSBitSet 0018  
                             i2l2025 08A0                               i2l2019 0896  
                             _INTCON 000FF2                               _RXB0IE 007D18  
                             _RXB0IF 007D20                               _ES_Run 069C  
                             _TXB0D0 000F46                               _TXB0IE 007D1A  
                             _TXB0IF 007D22                     ??_CanRCVResponse 0001  
                   ??_ES_EnQueueFIFO 0027                       _Timer2PostFunc 0321  
                             _Queue0 0080                               _Queue1 008C  
                     _SysTickCounter 003D                               ___wmul 0D34  
                          ??___awmod 001A                            ??___lbmod 0017  
                   ?_InitCanHardware 0001          __size_of_ES_Timer_InitTimer 006A  
                             clear_0 0CEE                               clear_1 0CFA  
                    ___awmod@divisor 0018            ES_Timer_InitTimer@NewTime 0001  
                    ___awmod@counter 001A                               _printf 0C6A  
                        ISR@LastTime 0037               ES_InitQueue@pThisQueue 0019  
                       __mediumconst 0000                          ISR@NextTime 0039  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                               putch@c 0001  
        __size_of_ES_Timer_Tick_Resp 00F8                 ES_DeQueue@pThisQueue 002A  
            ES_GetMSBitSet@Val2Check 0016          InitCan_XmitService@Priority 009C  
                    ___lbmod@divisor 0016                           __accesstop 0060  
            __end_of__initialization 0D00               __end_of_Timer2PostFunc 0341  
                    ___lbmod@counter 0018                      __CFG_PBADEN$OFF 000000  
                      ___rparam_used 000001                          _EventQueues 0358  
                     __pcstackCOMRAM 0001                        ?_ES_InitQueue 0016  
            __end_of_Nybble2MSBitNum 0350                        __end_of_putch 0DFC  
                    _TMR_ActiveFlags 003F              ES_GetMSBitSet@ReturnVal 001D  
        __end_of_InitCan_XmitService 0C6A                       _TMR_TimerArray 0060  
           ES_EnQueueFIFO@pThisQueue 002B                              ??_putch 0016  
           __HW_Process_Pending_Ints 0DD6                           __pbssBANK0 0060  
                            ?_ES_Run 0001                         ??_ES_DeQueue 0026  
        __size_of_RunCan_XmitService 0024            __size_of_ES_PostToService 006E  
                     ??_ES_InitQueue 0019                              ?___wmul 001C  
                            _CCP1CON 000FBD                            ?_XmitData 0001  
                            _ECANCON 000F77                              ?_printf 0016  
                  ?_RunToggleService 0017                   __end_of_ES_DeQueue 04B8  
                 ??_RunToggleService 001A                              _TXB0DLC 000F45  
                    __size_of_ES_Run 00E8               __size_of_ES_Initialize 00EC  
                            __Hparam 0000                              __Lparam 0000  
           __size_of_CanXmitResponse 0014                              ___awmod 09D8  
                            ___lbmod 0CBE                      __size_of___wmul 0026  
                       __psmallconst 0300                           ??_XmitData 0016  
              ES_Timer_InitTimer@Num 0005                              __pcinit 0CE8  
                            __ramtop 0300                              __ptext0 08E6  
                            __ptext1 0C6A                              __ptext2 0DFA  
                            __ptext3 069C                              __ptext4 0DD6  
                            __ptext5 04B8                              __ptext6 0D9A  
                            __ptext7 0966                              __ptext8 0D5A  
                            __ptext9 0C94                      __size_of_printf 002A  
                  _PostToggleService 0D9A                         __size_of_ISR 08DE  
            __size_of__HW_Timer_Init 001C                     ___awmod@dividend 0016  
                 _ES_CheckUserEvents 0BC6                   ?_PostToggleService 0099  
                    ES_Run@ThisEvent 0047            InitToggleService@Priority 009C  
                     __pintcode_body 0838                 end_of_initialization 0D00  
                ?_ES_CheckUserEvents 0001                  ??_PostToggleService 0032  
                      __Lmediumconst 0000                              int_func 0838  
       ES_PostToService@WhichService 0098               __size_of_ES_Timer_Init 000E  
                            printf@c 001A                              printf@f 0016  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
               ??_ES_CheckUserEvents 0016            __end_of_PostToggleService 0DAE  
                      _ES_Initialize 05B0                     ___lbmod@dividend 0017  
                          _TRISBbits 000F93                 __end_of_ES_EventList 0360  
               __end_of_ES_InitQueue 0C3C                       ES_Initialize@i 009F  
                        ___lbmod@rem 0019             __size_of_Check4Keystroke 0004  
         PostToggleService@ThisEvent 0099            RunToggleService@ThisEvent 0017  
                     __end_of_ES_Run 0784          RunCan_XmitService@ThisEvent 0017  
                   _ES_PostToService 0A48           __end_of_ES_Timer_InitTimer 0B20  
               __end_of_ServDescList 0358                       __end_of___wmul 0D5A  
                  ??_CanXmitResponse 0006                       ?_ES_Initialize 009D  
         ??__HW_Process_Pending_Ints 0032                        _ES_Timer_Init 0DE8  
                     __end_of_printf 0C94             __size_of_InitCanHardware 0064  
         __end_of_ES_Timer_Tick_Resp 05B0                  start_initialization 0CE8  
                        __end_of_ISR 08E6                          _CANSTATbits 000F6E  
                           ??_ES_Run 00A0                     __CFG_OSC$IRCIO67 000000  
                  _InitToggleService 0B84                            _TickCount 0046  
                 ?_InitToggleService 0001              __size_of_ES_GetMSBitSet 0072  
                           ??___wmul 0020                  ??_InitToggleService 0032  
         __size_of_PostToggleService 0014              __size_of_CanRCVResponse 0014  
            __size_of_ES_EnQueueFIFO 00B4                             ??_printf 0018  
                     ?_ES_Timer_Init 0018                    __size_of_XmitData 0026  
                     __HW_Timer_Init 0D7E                          __pbssCOMRAM 0032  
                      __pcstackBANK0 0098                          _BRGCON1bits 000F70  
                        _BRGCON2bits 000F71                   ES_InitQueue@pBlock 0016  
                        _BRGCON3bits 000F72         __size_of_InitCan_XmitService 002E  
         __end_of_RunCan_XmitService 0D7E            __end_of_InitToggleService 0BC6  
          __size_of_RunToggleService 002A                        __PRIMASK_temp 0041  
                  ??_Check4Keystroke 0016                            __pintcode 0008  
                           ?___awmod 0016                             ?___lbmod 0016  
                    ??_ES_Initialize 0032             ES_PostToService@TheEvent 002D  
             __end_of__HW_Timer_Init 0D9A                          __smallconst 0300  
              __size_of_ES_InitQueue 0036          RunToggleService@ReturnEvent 001A  
                     __size_of_putch 0002                 ES_Initialize@NewRate 009D  
                  ??_InitCanHardware 0016            ES_GetMSBitSet@Nybble2Test 001E  
                     ___wmul@product 0020                             _RXF0SIDH 000F00  
                       _ES_EventList 035E                             _RXF0SIDL 000F01  
                           _TXB0SIDH 000F41                             _TXB0SIDL 000F42  
                       _ES_InitQueue 0C06                             _RXM0SIDH 000F18  
                           _RXM0SIDL 000F19                      ??_ES_Timer_Init 001A  
                    ?__HW_Timer_Init 0016                    ___wmul@multiplier 001C  
                 ES_DeQueue@SaveCrit 0028                 ES_EnQueueFIFO@pBlock 0022  
           __end_of_ES_PostToService 0AB6                       _BitNum2SetMask 0301  
                       _ServDescList 0350           __size_of_InitToggleService 0042  
                    _CanXmitResponse 0DAE                             __Hrparam 0000  
                     _ES_GetMSBitSet 0966                             __Lrparam 0000  
                   __size_of___awmod 0070                     __size_of___lbmod 002A  
                           _XmitData 0D0E          __size_of_ES_CheckUserEvents 0040  
                     _CanRCVResponse 0DC2                       _ES_EnQueueFIFO 0784  
                   XmitData@DataByte 0016                   _ES_Timer_InitTimer 0AB6  
             __end_of_BitNum2SetMask 0321                             __ptext10 0D0E  
                           __ptext11 0B20                             __ptext20 0784  
                           __ptext12 03BA                             __ptext21 0D34  
                           __ptext13 0CBE                             __ptext30 0000  
                           __ptext22 09D8                             __ptext14 0BC6  
                           __ptext23 0DE8                             __ptext15 0DF6  
                           __ptext24 0D7E                             __ptext16 05B0  
                           __ptext25 0C06                             __ptext17 0C3C  
                           __ptext18 0B84                             __ptext27 0DAE  
                           __ptext19 0A48                             __ptext28 0AB6  
                           __ptext29 0DC2    ES_Timer_Tick_Resp@NeedsProcessing 0035  
                ?_ES_Timer_InitTimer 0001                        __size_of_main 0080  
                   _RunToggleService 0C94                   _ES_Timer_Tick_Resp 04B8  
             __end_of_ES_GetMSBitSet 09D8           InitToggleService@ThisEvent 0099  
                ?_ES_Timer_Tick_Resp 0001               __end_of_CanRCVResponse 0DD6  
             __end_of_ES_EnQueueFIFO 0838                             int$flags 004A  
                _InitCan_XmitService 0C3C                 ??_ES_Timer_InitTimer 0003  
                  ES_DeQueue@NumLeft 0029                          _RXB0CONbits 000F60  
               ??_ES_Timer_Tick_Resp 009C        RunCan_XmitService@ReturnEvent 001A  
               ?_InitCan_XmitService 0001              __end_of_CanXmitResponse 0DC2  
                    _Check4Keystroke 0DF6                             intlevel2 0000  
          Can_XmitService@MyPriority 0043                           _ES_DeQueue 03BA  
  __size_of__HW_Process_Pending_Ints 0012            ?__HW_Process_Pending_Ints 0001  
                        _TXB0CONbits 000F40                      ?_ES_GetMSBitSet 0016  
ES_Timer_Tick_Resp@NextTimer2Process 0044                   _RunCan_XmitService 0D5A  
                           printf@ap 0018                      ?_CanRCVResponse 0001  
                    ?_ES_EnQueueFIFO 0022                     ES_DeQueue@pBlock 0022  
                ?_RunCan_XmitService 0017                      _InitCanHardware 0B20  
             ES_DeQueue@pReturnEvent 0024                ES_InitQueue@BlockSize 0018  
              ??_InitCan_XmitService 0032                 ??_RunCan_XmitService 001A  
