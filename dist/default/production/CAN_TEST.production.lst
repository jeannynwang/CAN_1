

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Nov 14 21:32:42 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           	psect	smallconst
    49  000300                     __psmallconst:
    50                           	opt stack 0
    51  000300  00                 	db	0
    52  000301                     _BitNum2SetMask:
    53                           	opt stack 0
    54  000301  0001               	dw	1
    55  000303  0002               	dw	2
    56  000305  0004               	dw	4
    57  000307  0008               	dw	8
    58  000309  0010               	dw	16
    59  00030B  0020               	dw	32
    60  00030D  0040               	dw	64
    61  00030F  0080               	dw	128
    62  000311  0100               	dw	256
    63  000313  0200               	dw	512
    64  000315  0400               	dw	1024
    65  000317  0800               	dw	2048
    66  000319  1000               	dw	4096
    67  00031B  2000               	dw	8192
    68  00031D  4000               	dw	16384
    69  00031F  8000               	dw	32768
    70  000321                     __end_of_BitNum2SetMask:
    71                           	opt stack 0
    72  000321                     _Timer2PostFunc:
    73                           	opt stack 0
    74  000321  8C                 	db	low _PostCan_XmitService
    75  000322  0D                 	db	high _PostCan_XmitService
    76  000323  00                 	db	0
    77  000324  00                 	db	0
    78  000325  00                 	db	0
    79  000326  00                 	db	0
    80  000327  00                 	db	0
    81  000328  00                 	db	0
    82  000329  00                 	db	0
    83  00032A  00                 	db	0
    84  00032B  00                 	db	0
    85  00032C  00                 	db	0
    86  00032D  00                 	db	0
    87  00032E  00                 	db	0
    88  00032F  00                 	db	0
    89  000330  00                 	db	0
    90  000331  00                 	db	0
    91  000332  00                 	db	0
    92  000333  00                 	db	0
    93  000334  00                 	db	0
    94  000335  00                 	db	0
    95  000336  00                 	db	0
    96  000337  00                 	db	0
    97  000338  00                 	db	0
    98  000339  00                 	db	0
    99  00033A  00                 	db	0
   100  00033B  00                 	db	0
   101  00033C  00                 	db	0
   102  00033D  00                 	db	0
   103  00033E  00                 	db	0
   104  00033F  00                 	db	0
   105  000340  00                 	db	0
   106  000341                     __end_of_Timer2PostFunc:
   107                           	opt stack 0
   108  000341                     _Nybble2MSBitNum:
   109                           	opt stack 0
   110  000341  00                 	db	0
   111  000342  01                 	db	1
   112  000343  01                 	db	1
   113  000344  02                 	db	2
   114  000345  02                 	db	2
   115  000346  02                 	db	2
   116  000347  02                 	db	2
   117  000348  03                 	db	3
   118  000349  03                 	db	3
   119  00034A  03                 	db	3
   120  00034B  03                 	db	3
   121  00034C  03                 	db	3
   122  00034D  03                 	db	3
   123  00034E  03                 	db	3
   124  00034F  03                 	db	3
   125  000350                     __end_of_Nybble2MSBitNum:
   126                           	opt stack 0
   127  000350                     _ServDescList:
   128                           	opt stack 0
   129  000350  34                 	db	low _InitCan_XmitService
   130  000351  0C                 	db	high _InitCan_XmitService
   131  000352  7C                 	db	low _RunCan_XmitService
   132  000353  0B                 	db	high _RunCan_XmitService
   133  000354                     __end_of_ServDescList:
   134                           	opt stack 0
   135  000354                     _EventQueues:
   136                           	opt stack 0
   137  000354  80                 	db	low _Queue0
   138  000355  00                 	db	high _Queue0
   139  000356  04                 	db	4
   140  000357                     __end_of_EventQueues:
   141                           	opt stack 0
   142  000357                     _ES_EventList:
   143                           	opt stack 0
   144  000357  E2                 	db	low _Check4Keystroke
   145  000358  0D                 	db	high _Check4Keystroke
   146  000359                     __end_of_ES_EventList:
   147                           	opt stack 0
   148  000359                     _DistList00:
   149                           	opt stack 0
   150  000359  8C                 	db	low _PostCan_XmitService
   151  00035A  0D                 	db	high _PostCan_XmitService
   152  00035B                     __end_of_DistList00:
   153                           	opt stack 0
   154  0000                     _RXF0SIDH	set	3840
   155  0000                     _RXF0SIDL	set	3841
   156  0000                     _RXM0SIDH	set	3864
   157  0000                     _RXM0SIDL	set	3865
   158  0000                     _TXB0CONbits	set	3904
   159  0000                     _TXB0D0	set	3910
   160  0000                     _TXB0DLC	set	3909
   161  0000                     _TXB0SIDH	set	3905
   162  0000                     _TXB0SIDL	set	3906
   163  0000                     _ADCON1	set	4033
   164  0000                     _BRGCON1bits	set	3952
   165  0000                     _BRGCON2bits	set	3953
   166  0000                     _BRGCON3bits	set	3954
   167  0000                     _CANCON	set	3951
   168  0000                     _CANSTATbits	set	3950
   169  0000                     _CCP1CON	set	4029
   170  0000                     _CCPR1H	set	4031
   171  0000                     _CCPR1L	set	4030
   172  0000                     _ECANCON	set	3959
   173  0000                     _INTCON	set	4082
   174  0000                     _LATA	set	3977
   175  0000                     _LATB	set	3978
   176  0000                     _PIE1	set	3997
   177  0000                     _PORTA	set	3968
   178  0000                     _PORTB	set	3969
   179  0000                     _RXB0CONbits	set	3936
   180  0000                     _T1CON	set	4045
   181  0000                     _TRISAbits	set	3986
   182  0000                     _TRISBbits	set	3987
   183  0000                     _CCP1IF	set	31986
   184  0000                     _GIE	set	32663
   185  0000                     _IRCF0	set	32412
   186  0000                     _IRCF1	set	32413
   187  0000                     _IRCF2	set	32414
   188  0000                     _IRXIE	set	32031
   189  0000                     _IRXIF	set	32039
   190  0000                     _LATA0	set	31816
   191  0000                     _LATA1	set	31817
   192  0000                     _LATA2	set	31818
   193  0000                     _LATA3	set	31819
   194  0000                     _LATB2	set	31826
   195  0000                     _PEIE	set	32662
   196  0000                     _RXB0IE	set	32024
   197  0000                     _RXB0IF	set	32032
   198  0000                     _SCS1	set	32409
   199  0000                     _TXB0IE	set	32026
   200  0000                     _TXB0IF	set	32034
   201  00035B                     STR_1:
   202                           
   203                           ; BSR set to: 15
   204  00035B  46                 	db	70	;'F'
   205  00035C  61                 	db	97	;'a'
   206  00035D  69                 	db	105	;'i'
   207  00035E  6C                 	db	108	;'l'
   208  00035F  65                 	db	101	;'e'
   209  000360  64                 	db	100	;'d'
   210  000361  20                 	db	32
   211  000362  6F                 	db	111	;'o'
   212  000363  6E                 	db	110	;'n'
   213  000364  20                 	db	32
   214  000365  61                 	db	97	;'a'
   215  000366  74                 	db	116	;'t'
   216  000367  74                 	db	116	;'t'
   217  000368  65                 	db	101	;'e'
   218  000369  6D                 	db	109	;'m'
   219  00036A  70                 	db	112	;'p'
   220  00036B  74                 	db	116	;'t'
   221  00036C  20                 	db	32
   222  00036D  74                 	db	116	;'t'
   223  00036E  6F                 	db	111	;'o'
   224  00036F  20                 	db	32
   225  000370  50                 	db	80	;'P'
   226  000371  6F                 	db	111	;'o'
   227  000372  73                 	db	115	;'s'
   228  000373  74                 	db	116	;'t'
   229  000374  0A                 	db	10
   230  000375  00                 	db	0
   231  000376                     STR_2:
   232                           
   233                           ; BSR set to: 15
   234  000376  46                 	db	70	;'F'
   235  000377  61                 	db	97	;'a'
   236  000378  69                 	db	105	;'i'
   237  000379  6C                 	db	108	;'l'
   238  00037A  65                 	db	101	;'e'
   239  00037B  64                 	db	100	;'d'
   240  00037C  20                 	db	32
   241  00037D  6F                 	db	111	;'o'
   242  00037E  6E                 	db	110	;'n'
   243  00037F  20                 	db	32
   244  000380  4E                 	db	78	;'N'
   245  000381  55                 	db	85	;'U'
   246  000382  4C                 	db	76	;'L'
   247  000383  4C                 	db	76	;'L'
   248  000384  20                 	db	32
   249  000385  70                 	db	112	;'p'
   250  000386  6F                 	db	111	;'o'
   251  000387  69                 	db	105	;'i'
   252  000388  6E                 	db	110	;'n'
   253  000389  74                 	db	116	;'t'
   254  00038A  65                 	db	101	;'e'
   255  00038B  72                 	db	114	;'r'
   256  00038C  0A                 	db	10
   257  00038D  00                 	db	0
   258  00038E                     STR_3:
   259                           
   260                           ; BSR set to: 15
   261  00038E  46                 	db	70	;'F'
   262  00038F  61                 	db	97	;'a'
   263  000390  69                 	db	105	;'i'
   264  000391  6C                 	db	108	;'l'
   265  000392  65                 	db	101	;'e'
   266  000393  64                 	db	100	;'d'
   267  000394  20                 	db	32
   268  000395  49                 	db	73	;'I'
   269  000396  6E                 	db	110	;'n'
   270  000397  69                 	db	105	;'i'
   271  000398  74                 	db	116	;'t'
   272  000399  69                 	db	105	;'i'
   273  00039A  61                 	db	97	;'a'
   274  00039B  6C                 	db	108	;'l'
   275  00039C  69                 	db	105	;'i'
   276  00039D  7A                 	db	122	;'z'
   277  00039E  61                 	db	97	;'a'
   278  00039F  74                 	db	116	;'t'
   279  0003A0  69                 	db	105	;'i'
   280  0003A1  6F                 	db	111	;'o'
   281  0003A2  6E                 	db	110	;'n'
   282  0003A3  0A                 	db	10
   283  0003A4  00                 	db	0
   284  0003A5                     STR_4:
   285                           
   286                           ; BSR set to: 15
   287  0003A5  4F                 	db	79	;'O'
   288  0003A6  74                 	db	116	;'t'
   289  0003A7  68                 	db	104	;'h'
   290  0003A8  65                 	db	101	;'e'
   291  0003A9  72                 	db	114	;'r'
   292  0003AA  20                 	db	32
   293  0003AB  46                 	db	70	;'F'
   294  0003AC  61                 	db	97	;'a'
   295  0003AD  69                 	db	105	;'i'
   296  0003AE  6C                 	db	108	;'l'
   297  0003AF  75                 	db	117	;'u'
   298  0003B0  72                 	db	114	;'r'
   299  0003B1  65                 	db	101	;'e'
   300  0003B2  0A                 	db	10
   301  0003B3  00                 	db	0
   302                           
   303                           ; #config settings
   304  0003B4  00                 	db	0	; dummy byte at the end
   305  0000                     
   306                           	psect	cinit
   307  000D0C                     __pcinit:
   308                           	opt stack 0
   309  000D0C                     start_initialization:
   310                           	opt stack 0
   311  000D0C                     __initialization:
   312                           	opt stack 0
   313                           
   314                           ; Clear objects allocated to BANK0 (44 bytes)
   315  000D0C  EE00  F060         	lfsr	0,__pbssBANK0
   316  000D10  0E2C               	movlw	44
   317  000D12                     clear_0:
   318  000D12  6AEE               	clrf	postinc0,c
   319  000D14  06E8               	decf	wreg,f,c
   320  000D16  E1FD               	bnz	clear_0
   321                           
   322                           ; Clear objects allocated to COMRAM (23 bytes)
   323  000D18  EE00  F033         	lfsr	0,__pbssCOMRAM
   324  000D1C  0E17               	movlw	23
   325  000D1E                     clear_1:
   326  000D1E  6AEE               	clrf	postinc0,c
   327  000D20  06E8               	decf	wreg,f,c
   328  000D22  E1FD               	bnz	clear_1
   329  000D24                     end_of_initialization:
   330                           	opt stack 0
   331  000D24                     __end_of__initialization:
   332                           	opt stack 0
   333  000D24  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   334  000D26  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   335  000D28  0E00               	movlw	low (__Lmediumconst shr (0+16))
   336  000D2A  6EF8               	movwf	tblptru,c
   337  000D2C  0100               	movlb	0
   338  000D2E  EF76  F004         	goto	_main	;jump to C main() function
   339                           tblptru	equ	0xFF8
   340                           postinc0	equ	0xFEE
   341                           wreg	equ	0xFE8
   342                           
   343                           	psect	bssCOMRAM
   344  000033                     __pbssCOMRAM:
   345                           	opt stack 0
   346  000033                     ES_Timer_Tick_Resp@NewEvent:
   347                           	opt stack 0
   348  000033                     	ds	3
   349  000036                     ES_Timer_Tick_Resp@NeedsProcessing:
   350                           	opt stack 0
   351  000036                     	ds	2
   352  000038                     ISR@LastTime:
   353                           	opt stack 0
   354  000038                     	ds	2
   355  00003A                     ISR@NextTime:
   356                           	opt stack 0
   357  00003A                     	ds	2
   358  00003C                     _Ready:
   359                           	opt stack 0
   360  00003C                     	ds	2
   361  00003E                     _SysTickCounter:
   362                           	opt stack 0
   363  00003E                     	ds	2
   364  000040                     _TMR_ActiveFlags:
   365                           	opt stack 0
   366  000040                     	ds	2
   367  000042                     __PRIMASK_temp:
   368                           	opt stack 0
   369  000042                     	ds	2
   370  000044                     ES_Timer_Tick_Resp@NextTimer2Process:
   371                           	opt stack 0
   372  000044                     	ds	1
   373  000045                     _MyPriority:
   374                           	opt stack 0
   375  000045                     	ds	1
   376  000046                     _TickCount:
   377                           	opt stack 0
   378  000046                     	ds	1
   379  000047                     ES_Run@ThisEvent:
   380                           	opt stack 0
   381  000047                     	ds	3
   382                           tblptru	equ	0xFF8
   383                           postinc0	equ	0xFEE
   384                           wreg	equ	0xFE8
   385                           
   386                           	psect	bssBANK0
   387  000060                     __pbssBANK0:
   388                           	opt stack 0
   389  000060                     _TMR_TimerArray:
   390                           	opt stack 0
   391  000060                     	ds	32
   392  000080                     _Queue0:
   393                           	opt stack 0
   394  000080                     	ds	12
   395                           tblptru	equ	0xFF8
   396                           postinc0	equ	0xFEE
   397                           wreg	equ	0xFE8
   398                           
   399                           	psect	cstackBANK0
   400  00008C                     __pcstackBANK0:
   401                           	opt stack 0
   402  00008C                     InitCan_XmitService@ThisEvent:
   403                           	opt stack 0
   404  00008C                     PostCan_XmitService@ThisEvent:
   405                           	opt stack 0
   406                           
   407                           ; 3 bytes @ 0x0
   408  00008C                     	ds	3
   409  00008F                     ??_ES_Timer_Tick_Resp:
   410  00008F                     InitCan_XmitService@Priority:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x3
   414  00008F                     	ds	1
   415  000090                     ES_Initialize@NewRate:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x4
   419  000090                     	ds	2
   420  000092                     ES_Initialize@i:
   421                           	opt stack 0
   422                           
   423                           ; 1 bytes @ 0x6
   424  000092                     	ds	1
   425  000093                     ??_ES_Run:
   426                           
   427                           ; 1 bytes @ 0x7
   428  000093                     	ds	4
   429  000097                     ES_Run@HighestPrior:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0xB
   433  000097                     	ds	1
   434  000098                     main@ErrorType:
   435                           	opt stack 0
   436                           
   437                           ; 1 bytes @ 0xC
   438  000098                     	ds	1
   439                           tblptru	equ	0xFF8
   440                           postinc0	equ	0xFEE
   441                           wreg	equ	0xFE8
   442                           
   443                           	psect	cstackCOMRAM
   444  000001                     __pcstackCOMRAM:
   445                           	opt stack 0
   446  000001                     ES_Timer_InitTimer@NewTime:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0x0
   450  000001                     	ds	2
   451  000003                     ??_ES_Timer_InitTimer:
   452                           
   453                           ; 1 bytes @ 0x2
   454  000003                     	ds	2
   455  000005                     ES_Timer_InitTimer@Num:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x4
   459  000005                     	ds	1
   460  000006                     ??_ISR:
   461                           
   462                           ; 1 bytes @ 0x5
   463  000006                     	ds	16
   464  000016                     ?_printf:
   465                           	opt stack 0
   466  000016                     ?___awmod:
   467                           	opt stack 0
   468  000016                     ES_CheckUserEvents@i:
   469                           	opt stack 0
   470  000016                     XmitData@DataByte:
   471                           	opt stack 0
   472  000016                     ___lbmod@divisor:
   473                           	opt stack 0
   474  000016                     ES_GetMSBitSet@Val2Check:
   475                           	opt stack 0
   476  000016                     __HW_Timer_Init@Rate:
   477                           	opt stack 0
   478  000016                     ES_InitQueue@pBlock:
   479                           	opt stack 0
   480  000016                     printf@f:
   481                           	opt stack 0
   482  000016                     ___awmod@dividend:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x15
   486  000016                     	ds	1
   487  000017                     ?_RunCan_XmitService:
   488                           	opt stack 0
   489  000017                     ___lbmod@dividend:
   490                           	opt stack 0
   491  000017                     RunCan_XmitService@ThisEvent:
   492                           	opt stack 0
   493                           
   494                           ; 3 bytes @ 0x16
   495  000017                     	ds	1
   496  000018                     ??_ES_GetMSBitSet:
   497  000018                     ES_InitQueue@BlockSize:
   498                           	opt stack 0
   499  000018                     ___lbmod@counter:
   500                           	opt stack 0
   501  000018                     ES_Timer_Init@Rate:
   502                           	opt stack 0
   503  000018                     printf@ap:
   504                           	opt stack 0
   505  000018                     ___awmod@divisor:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x17
   509  000018                     	ds	1
   510  000019                     ___lbmod@rem:
   511                           	opt stack 0
   512  000019                     ES_InitQueue@pThisQueue:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x18
   516  000019                     	ds	1
   517  00001A                     printf@c:
   518                           	opt stack 0
   519  00001A                     ___awmod@counter:
   520                           	opt stack 0
   521  00001A                     RunCan_XmitService@ReturnEvent:
   522                           	opt stack 0
   523                           
   524                           ; 3 bytes @ 0x19
   525  00001A                     	ds	1
   526  00001B                     ___awmod@sign:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x1A
   530  00001B                     	ds	1
   531  00001C                     ?___wmul:
   532                           	opt stack 0
   533  00001C                     ___wmul@multiplier:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x1B
   537  00001C                     	ds	1
   538  00001D                     ES_GetMSBitSet@ReturnVal:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x1C
   542  00001D                     	ds	1
   543  00001E                     ES_GetMSBitSet@Nybble2Test:
   544                           	opt stack 0
   545  00001E                     ___wmul@multiplicand:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x1D
   549  00001E                     	ds	1
   550  00001F                     ES_GetMSBitSet@LoopCntr:
   551                           	opt stack 0
   552                           
   553                           ; 1 bytes @ 0x1E
   554  00001F                     	ds	1
   555  000020                     ___wmul@product:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x1F
   559  000020                     	ds	2
   560  000022                     ES_EnQueueFIFO@pBlock:
   561                           	opt stack 0
   562  000022                     ES_DeQueue@pBlock:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x21
   566  000022                     	ds	2
   567  000024                     ES_DeQueue@pReturnEvent:
   568                           	opt stack 0
   569  000024                     ES_EnQueueFIFO@Event2Add:
   570                           	opt stack 0
   571                           
   572                           ; 3 bytes @ 0x23
   573  000024                     	ds	2
   574  000026                     ??_ES_DeQueue:
   575                           
   576                           ; 1 bytes @ 0x25
   577  000026                     	ds	1
   578  000027                     ??_ES_EnQueueFIFO:
   579                           
   580                           ; 1 bytes @ 0x26
   581  000027                     	ds	1
   582  000028                     ES_DeQueue@SaveCrit:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x27
   586  000028                     	ds	1
   587  000029                     ES_DeQueue@NumLeft:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x28
   591  000029                     	ds	1
   592  00002A                     ES_EnQueueFIFO@SaveCrit:
   593                           	opt stack 0
   594  00002A                     ES_DeQueue@pThisQueue:
   595                           	opt stack 0
   596                           
   597                           ; 2 bytes @ 0x29
   598  00002A                     	ds	1
   599  00002B                     ES_EnQueueFIFO@pThisQueue:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x2A
   603  00002B                     	ds	2
   604  00002D                     ES_PostToService@TheEvent:
   605                           	opt stack 0
   606                           
   607                           ; 3 bytes @ 0x2C
   608  00002D                     	ds	3
   609  000030                     ??_ES_PostToService:
   610                           
   611                           ; 1 bytes @ 0x2F
   612  000030                     	ds	2
   613  000032                     ES_PostToService@WhichService:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x31
   617  000032                     	ds	1
   618  000033                     tblptru	equ	0xFF8
   619                           postinc0	equ	0xFEE
   620                           wreg	equ	0xFE8
   621                           
   622                           ; 1 bytes @ 0x32
   623 ;;
   624 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   625 ;;
   626 ;; *************** function _main *****************
   627 ;; Defined at:
   628 ;;		line 25 in file "main.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;		None
   631 ;; Auto vars:     Size  Location     Type
   632 ;;  ErrorType       1   12[BANK0 ] enum E15642
   633 ;; Return value:  Size  Location     Type
   634 ;;                  2  294[None  ] int 
   635 ;; Registers used:
   636 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   637 ;; Tracked objects:
   638 ;;		On entry : 0/0
   639 ;;		On exit  : 0/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   642 ;;      Params:         0       0       0       0
   643 ;;      Locals:         0       1       0       0
   644 ;;      Temps:          0       0       0       0
   645 ;;      Totals:         0       1       0       0
   646 ;;Total ram usage:        1 bytes
   647 ;; Hardware stack levels required when called:   10
   648 ;; This function calls:
   649 ;;		_ES_Initialize
   650 ;;		_ES_Run
   651 ;;		_printf
   652 ;; This function is called by:
   653 ;;		Startup code after reset
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text0
   658  0008EC                     __ptext0:
   659                           	opt stack 0
   660  0008EC                     _main:
   661                           	opt stack 21
   662                           
   663                           ;main.c: 28: IRCF0 = 1;
   664                           
   665                           ; BSR set to: 15
   666                           ;incstack = 0
   667  0008EC  88D3               	bsf	4051,4,c	;volatile
   668                           
   669                           ;main.c: 29: IRCF1 = 1;
   670  0008EE  8AD3               	bsf	4051,5,c	;volatile
   671                           
   672                           ;main.c: 30: IRCF2 = 1;
   673  0008F0  8CD3               	bsf	4051,6,c	;volatile
   674                           
   675                           ;main.c: 31: SCS1 = 1;
   676  0008F2  82D3               	bsf	4051,1,c	;volatile
   677                           
   678                           ;main.c: 39: ES_Return_t ErrorType;
   679                           ;main.c: 55: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
   680  0008F4  0E9C               	movlw	156
   681  0008F6  0100               	movlb	0	; () banked
   682  0008F8  6F91               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
   683  0008FA  0E3F               	movlw	63
   684  0008FC  6F90               	movwf	ES_Initialize@NewRate& (0+255),b
   685  0008FE  ECD6  F002         	call	_ES_Initialize	;wreg free
   686  000902  0100               	movlb	0	; () banked
   687  000904  6F98               	movwf	main@ErrorType& (0+255),b
   688                           
   689                           ; BSR set to: 0
   690                           ;main.c: 56: if ( ErrorType == Success ) {
   691  000906  0100               	movlb	0	; () banked
   692  000908  5198               	movf	main@ErrorType& (0+255),w,b
   693  00090A  0100               	movlb	0	; () banked
   694  00090C  A4D8               	btfss	status,2,c
   695  00090E  D021               	goto	l2579
   696                           
   697                           ; BSR set to: 0
   698                           ;main.c: 58: ErrorType = ES_Run();
   699  000910  EC4C  F003         	call	_ES_Run	;wreg free
   700  000914  0100               	movlb	0	; () banked
   701  000916  6F98               	movwf	main@ErrorType& (0+255),b
   702                           
   703                           ; BSR set to: 0
   704                           ;main.c: 60: }
   705                           ;main.c: 62: switch (ErrorType){
   706  000918  D01C               	goto	l2579
   707  00091A                     l2569:
   708                           
   709                           ; BSR set to: 0
   710                           ;main.c: 64: printf("Failed on attempt to Post\n");
   711  00091A  0E5B               	movlw	low STR_1
   712  00091C  6E16               	movwf	printf@f,c
   713  00091E  0E03               	movlw	high STR_1
   714  000920  6E17               	movwf	printf@f+1,c
   715  000922  EC47  F006         	call	_printf	;wreg free
   716                           
   717                           ;main.c: 65: break;
   718  000926  D021               	goto	l302
   719  000928                     l2571:
   720                           
   721                           ;main.c: 67: printf("Failed on NULL pointer\n");
   722  000928  0E76               	movlw	low STR_2
   723  00092A  6E16               	movwf	printf@f,c
   724  00092C  0E03               	movlw	high STR_2
   725  00092E  6E17               	movwf	printf@f+1,c
   726  000930  EC47  F006         	call	_printf	;wreg free
   727                           
   728                           ;main.c: 68: break;
   729  000934  D01A               	goto	l302
   730  000936                     l2573:
   731                           
   732                           ;main.c: 70: printf("Failed Initialization\n");
   733  000936  0E8E               	movlw	low STR_3
   734  000938  6E16               	movwf	printf@f,c
   735  00093A  0E03               	movlw	high STR_3
   736  00093C  6E17               	movwf	printf@f+1,c
   737  00093E  EC47  F006         	call	_printf	;wreg free
   738                           
   739                           ;main.c: 71: break;
   740  000942  D013               	goto	l302
   741  000944                     l2575:
   742                           
   743                           ;main.c: 73: printf("Other Failure\n");
   744  000944  0EA5               	movlw	low STR_4
   745  000946  6E16               	movwf	printf@f,c
   746  000948  0E03               	movlw	high STR_4
   747  00094A  6E17               	movwf	printf@f+1,c
   748  00094C  EC47  F006         	call	_printf	;wreg free
   749                           
   750                           ;main.c: 75: }
   751                           
   752                           ;main.c: 74: break;
   753  000950  D00C               	goto	l302
   754  000952                     l2579:
   755  000952  0100               	movlb	0	; () banked
   756  000954  5198               	movf	main@ErrorType& (0+255),w,b
   757                           
   758                           ; Switch size 1, requested type "space"
   759                           ; Number of cases is 3, Range of values is 1 to 5
   760                           ; switch strategies available:
   761                           ; Name         Instructions Cycles
   762                           ; simple_byte           10     6 (average)
   763                           ;	Chosen strategy is simple_byte
   764  000956  0A01               	xorlw	1	; case 1
   765  000958  B4D8               	btfsc	status,2,c
   766  00095A  D7DF               	goto	l2569
   767  00095C  0A02               	xorlw	2	; case 3
   768  00095E  B4D8               	btfsc	status,2,c
   769  000960  D7E3               	goto	l2571
   770  000962  0A06               	xorlw	6	; case 5
   771  000964  B4D8               	btfsc	status,2,c
   772  000966  D7E7               	goto	l2573
   773  000968  D7ED               	goto	l2575
   774  00096A                     l302:
   775                           
   776                           ;main.c: 77: ;
   777  00096A  D7FF               	goto	l302
   778  00096C                     __end_of_main:
   779                           	opt stack 0
   780                           tblptru	equ	0xFF8
   781                           postinc0	equ	0xFEE
   782                           wreg	equ	0xFE8
   783                           status	equ	0xFD8
   784                           
   785 ;; *************** function _printf *****************
   786 ;; Defined at:
   787 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  f               2   21[COMRAM] PTR const unsigned char 
   790 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
   791 ;; Auto vars:     Size  Location     Type
   792 ;;  tmpval          4    0        struct .
   793 ;;  cp              3    0        PTR const unsigned char 
   794 ;;  ap              2   23[COMRAM] PTR void [1]
   795 ;;		 -> ?_printf(2), 
   796 ;;  len             2    0        unsigned int 
   797 ;;  val             2    0        unsigned int 
   798 ;;  c               1   25[COMRAM] char 
   799 ;;  flag            1    0        unsigned char 
   800 ;;  prec            1    0        char 
   801 ;; Return value:  Size  Location     Type
   802 ;;                  2   21[COMRAM] int 
   803 ;; Registers used:
   804 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   805 ;; Tracked objects:
   806 ;;		On entry : 0/0
   807 ;;		On exit  : 0/0
   808 ;;		Unchanged: 0/0
   809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   810 ;;      Params:         2       0       0       0
   811 ;;      Locals:         3       0       0       0
   812 ;;      Temps:          0       0       0       0
   813 ;;      Totals:         5       0       0       0
   814 ;;Total ram usage:        5 bytes
   815 ;; Hardware stack levels used:    1
   816 ;; Hardware stack levels required when called:    4
   817 ;; This function calls:
   818 ;;		_putch
   819 ;; This function is called by:
   820 ;;		_main
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           	psect	text1
   825  000C8E                     __ptext1:
   826                           	opt stack 0
   827  000C8E                     _printf:
   828                           	opt stack 26
   829                           
   830                           ;doprnt.c: 466: va_list ap;
   831                           ;doprnt.c: 499: signed char c;
   832                           ;doprnt.c: 506: signed char prec;
   833                           ;doprnt.c: 508: unsigned char flag;
   834                           ;doprnt.c: 523: union {
   835                           ;doprnt.c: 524: unsigned long vd;
   836                           ;doprnt.c: 525: double integ;
   837                           ;doprnt.c: 526: } tmpval;
   838                           ;doprnt.c: 528: unsigned int val;
   839                           ;doprnt.c: 529: unsigned len;
   840                           ;doprnt.c: 530: const char * cp;
   841                           ;doprnt.c: 533: *ap = __va_start();
   842                           
   843                           ;incstack = 0
   844  000C8E  0E18               	movlw	low (?_printf+2)
   845  000C90  6E18               	movwf	printf@ap,c
   846  000C92  0E00               	movlw	high (?_printf+2)
   847  000C94  6E19               	movwf	printf@ap+1,c
   848                           
   849                           ;doprnt.c: 536: while(c = *f++) {
   850  000C96  D003               	goto	l2465
   851  000C98                     l2463:
   852                           
   853                           ;doprnt.c: 540: {
   854                           ;doprnt.c: 541: (putch(c) );
   855  000C98  501A               	movf	printf@c,w,c
   856  000C9A  ECF3  F006         	call	_putch
   857  000C9E                     l2465:
   858  000C9E  C016  FFF6         	movff	printf@f,tblptrl
   859  000CA2  C017  FFF7         	movff	printf@f+1,tblptrh
   860  000CA6  4A16               	infsnz	printf@f,f,c
   861  000CA8  2A17               	incf	printf@f+1,f,c
   862  000CAA                     	if	0	;tblptru may be non-zero
   863  000CAA                     	endif
   864  000CAA                     	if	0	;tblptru may be non-zero
   865  000CAA                     	endif
   866  000CAA  0008               	tblrd		*
   867  000CAC  CFF5 F01A          	movff	tablat,printf@c
   868  000CB0  501A               	movf	printf@c,w,c
   869  000CB2  B4D8               	btfsc	status,2,c
   870  000CB4  0012               	return	
   871  000CB6  D7F0               	goto	l2463
   872  000CB8                     __end_of_printf:
   873                           	opt stack 0
   874                           tblptru	equ	0xFF8
   875                           tblptrh	equ	0xFF7
   876                           tblptrl	equ	0xFF6
   877                           tablat	equ	0xFF5
   878                           postinc0	equ	0xFEE
   879                           wreg	equ	0xFE8
   880                           status	equ	0xFD8
   881                           
   882 ;; *************** function _putch *****************
   883 ;; Defined at:
   884 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
   885 ;; Parameters:    Size  Location     Type
   886 ;;  c               1    wreg     unsigned char 
   887 ;; Auto vars:     Size  Location     Type
   888 ;;  c               1    0[COMRAM] unsigned char 
   889 ;; Return value:  Size  Location     Type
   890 ;;                  1    wreg      void 
   891 ;; Registers used:
   892 ;;		wreg
   893 ;; Tracked objects:
   894 ;;		On entry : 0/0
   895 ;;		On exit  : 0/0
   896 ;;		Unchanged: 0/0
   897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   898 ;;      Params:         0       0       0       0
   899 ;;      Locals:         0       0       0       0
   900 ;;      Temps:          0       0       0       0
   901 ;;      Totals:         0       0       0       0
   902 ;;Total ram usage:        0 bytes
   903 ;; Hardware stack levels used:    1
   904 ;; Hardware stack levels required when called:    3
   905 ;; This function calls:
   906 ;;		Nothing
   907 ;; This function is called by:
   908 ;;		_printf
   909 ;; This function uses a non-reentrant model
   910 ;;
   911                           
   912                           	psect	text2
   913  000DE6                     __ptext2:
   914                           	opt stack 0
   915  000DE6                     _putch:
   916                           	opt stack 26
   917                           
   918                           ;incstack = 0
   919  000DE6  0012               	return		;funcret
   920  000DE8                     __end_of_putch:
   921                           	opt stack 0
   922                           tblptru	equ	0xFF8
   923                           tblptrh	equ	0xFF7
   924                           tblptrl	equ	0xFF6
   925                           tablat	equ	0xFF5
   926                           postinc0	equ	0xFEE
   927                           wreg	equ	0xFE8
   928                           status	equ	0xFD8
   929                           
   930 ;; *************** function _ES_Run *****************
   931 ;; Defined at:
   932 ;;		line 277 in file "ES_Framework.c"
   933 ;; Parameters:    Size  Location     Type
   934 ;;		None
   935 ;; Auto vars:     Size  Location     Type
   936 ;;  HighestPrior    1   11[BANK0 ] unsigned char 
   937 ;; Return value:  Size  Location     Type
   938 ;;                  1    wreg      enum E15490
   939 ;; Registers used:
   940 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   941 ;; Tracked objects:
   942 ;;		On entry : 0/0
   943 ;;		On exit  : 0/0
   944 ;;		Unchanged: 0/0
   945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   946 ;;      Params:         0       0       0       0
   947 ;;      Locals:         0       1       0       0
   948 ;;      Temps:          0       4       0       0
   949 ;;      Totals:         0       5       0       0
   950 ;;Total ram usage:        5 bytes
   951 ;; Hardware stack levels used:    1
   952 ;; Hardware stack levels required when called:    9
   953 ;; This function calls:
   954 ;;		_ES_CheckUserEvents
   955 ;;		_ES_DeQueue
   956 ;;		_ES_GetMSBitSet
   957 ;;		_RunCan_XmitService
   958 ;;		__HW_Process_Pending_Ints
   959 ;; This function is called by:
   960 ;;		_main
   961 ;; This function uses a non-reentrant model
   962 ;;
   963                           
   964                           	psect	text3
   965  000698                     __ptext3:
   966                           	opt stack 0
   967  000698                     _ES_Run:
   968                           	opt stack 21
   969                           
   970                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
   971                           
   972                           ;incstack = 0
   973                           ;ES_Framework.c: 279: uint8_t HighestPrior;
   974                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
   975                           ;ES_Framework.c: 282: while(1){
   976  000698  D067               	goto	l2451
   977  00069A                     l2439:
   978                           
   979                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
   980  00069A  C03C  F016         	movff	_Ready,ES_GetMSBitSet@Val2Check
   981  00069E  C03D  F017         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
   982  0006A2  ECB6  F004         	call	_ES_GetMSBitSet	;wreg free
   983  0006A6  0100               	movlb	0	; () banked
   984  0006A8  6F97               	movwf	ES_Run@HighestPrior& (0+255),b
   985                           
   986                           ; BSR set to: 0
   987                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
   988  0006AA  0100               	movlb	0	; () banked
   989  0006AC  5197               	movf	ES_Run@HighestPrior& (0+255),w,b
   990  0006AE  0D03               	mullw	3
   991  0006B0  0E54               	movlw	low _EventQueues
   992  0006B2  24F3               	addwf	prodl,w,c
   993  0006B4  6EF6               	movwf	tblptrl,c
   994  0006B6  0E03               	movlw	high _EventQueues
   995  0006B8  20F4               	addwfc	prodh,w,c
   996  0006BA  6EF7               	movwf	tblptrh,c
   997  0006BC                     	if	0	;There are less than 3 active tblptr bytes
   998  0006BC                     	endif
   999  0006BC  0009               	tblrd		*+
  1000  0006BE  CFF5 F022          	movff	tablat,ES_DeQueue@pBlock
  1001  0006C2  000A               	tblrd		*-
  1002  0006C4  CFF5 F023          	movff	tablat,ES_DeQueue@pBlock+1
  1003  0006C8  0E47               	movlw	low ES_Run@ThisEvent
  1004  0006CA  6E24               	movwf	ES_DeQueue@pReturnEvent,c
  1005  0006CC  0E00               	movlw	high ES_Run@ThisEvent
  1006  0006CE  6E25               	movwf	ES_DeQueue@pReturnEvent+1,c
  1007  0006D0  ECDB  F001         	call	_ES_DeQueue	;wreg free
  1008  0006D4  0900               	iorlw	0
  1009  0006D6  A4D8               	btfss	status,2,c
  1010  0006D8  D01D               	goto	l2445
  1011                           
  1012                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1013  0006DA  0100               	movlb	0	; () banked
  1014  0006DC  5197               	movf	ES_Run@HighestPrior& (0+255),w,b
  1015  0006DE  0D02               	mullw	2
  1016  0006E0  0E01               	movlw	low _BitNum2SetMask
  1017  0006E2  24F3               	addwf	prodl,w,c
  1018  0006E4  6EF6               	movwf	tblptrl,c
  1019  0006E6  0E03               	movlw	high _BitNum2SetMask
  1020  0006E8  20F4               	addwfc	prodh,w,c
  1021  0006EA  6EF7               	movwf	tblptrh,c
  1022  0006EC                     	if	0	;There are less than 3 active tblptr bytes
  1023  0006EC                     	endif
  1024  0006EC  0009               	tblrd		*+
  1025  0006EE  CFF5 F093          	movff	tablat,??_ES_Run
  1026  0006F2  0009               	tblrd		*+
  1027  0006F4  CFF5 F094          	movff	tablat,??_ES_Run+1
  1028  0006F8  0100               	movlb	0	; () banked
  1029  0006FA  1D93               	comf	??_ES_Run& (0+255),w,b
  1030  0006FC  0100               	movlb	0	; () banked
  1031  0006FE  6F95               	movwf	(??_ES_Run+2)& (0+255),b
  1032  000700  0100               	movlb	0	; () banked
  1033  000702  1D94               	comf	(??_ES_Run+1)& (0+255),w,b
  1034  000704  0100               	movlb	0	; () banked
  1035  000706  6F96               	movwf	(??_ES_Run+3)& (0+255),b
  1036  000708  0100               	movlb	0	; () banked
  1037  00070A  5195               	movf	(??_ES_Run+2)& (0+255),w,b
  1038  00070C  163C               	andwf	_Ready,f,c
  1039  00070E  0100               	movlb	0	; () banked
  1040  000710  5196               	movf	(??_ES_Run+3)& (0+255),w,b
  1041  000712  163D               	andwf	_Ready+1,f,c
  1042  000714                     l2445:
  1043                           
  1044                           ;ES_Framework.c: 291: }
  1045                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1046  000714  C047  F017         	movff	ES_Run@ThisEvent,RunCan_XmitService@ThisEvent
  1047  000718  C048  F018         	movff	ES_Run@ThisEvent+1,RunCan_XmitService@ThisEvent+1
  1048  00071C  C049  F019         	movff	ES_Run@ThisEvent+2,RunCan_XmitService@ThisEvent+2
  1049  000720  0100               	movlb	0	; () banked
  1050  000722  5197               	movf	ES_Run@HighestPrior& (0+255),w,b
  1051  000724  0D04               	mullw	4
  1052  000726  0E02               	movlw	2
  1053  000728  26F3               	addwf	prodl,f,c
  1054  00072A  0E00               	movlw	0
  1055  00072C  22F4               	addwfc	prodh,f,c
  1056  00072E  0E50               	movlw	low _ServDescList
  1057  000730  24F3               	addwf	prodl,w,c
  1058  000732  6EF6               	movwf	tblptrl,c
  1059  000734  0E03               	movlw	high _ServDescList
  1060  000736  20F4               	addwfc	prodh,w,c
  1061  000738  6EF7               	movwf	tblptrh,c
  1062  00073A                     	if	0	;There are less than 3 active tblptr bytes
  1063  00073A                     	endif
  1064  00073A  D801               	call	u1798
  1065  00073C  D00C               	goto	u1799
  1066  00073E                     u1798:
  1067  00073E  0005               	push	
  1068  000740  6EFA               	movwf	pclath,c
  1069  000742  0009               	tblrd		*+
  1070  000744  50F5               	movf	tablat,w,c
  1071  000746  6EFD               	movwf	tosl,c
  1072  000748  0009               	tblrd		*+
  1073  00074A  50F5               	movf	tablat,w,c
  1074  00074C  6EFE               	movwf	tosh,c
  1075  00074E  50F8               	movf	tblptru,w,c
  1076  000750  6EFF               	movwf	tosu,c
  1077  000752  50FA               	movf	pclath,w,c
  1078  000754  0012               	return		;indir
  1079  000756                     u1799:
  1080  000756  0E17               	movlw	low ?_RunCan_XmitService
  1081  000758  6ED9               	movwf	fsr2l,c
  1082  00075A  0E00               	movlw	high ?_RunCan_XmitService
  1083  00075C  6EDA               	movwf	fsr2h,c
  1084  00075E  50DF               	movf	indf2,w,c
  1085  000760  B4D8               	btfsc	status,2,c
  1086  000762  D002               	goto	l2451
  1087                           
  1088                           ;ES_Framework.c: 293: return FailedRun;
  1089  000764  0E02               	movlw	2
  1090  000766  0012               	return	
  1091  000768                     l2451:
  1092  000768  ECD0  F006         	call	__HW_Process_Pending_Ints	;wreg free
  1093  00076C  0900               	iorlw	0
  1094  00076E  B4D8               	btfsc	status,2,c
  1095  000770  D004               	goto	l2455
  1096  000772  503C               	movf	_Ready,w,c
  1097  000774  103D               	iorwf	_Ready+1,w,c
  1098  000776  A4D8               	btfss	status,2,c
  1099  000778  D790               	goto	l2439
  1100  00077A                     l2455:
  1101                           
  1102                           ;ES_Framework.c: 294: }
  1103                           ;ES_Framework.c: 295: }
  1104                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1105  00077A  ECDF  F005         	call	_ES_CheckUserEvents	;wreg free
  1106  00077E  D7F4               	goto	l2451
  1107  000780                     __end_of_ES_Run:
  1108                           	opt stack 0
  1109                           tosu	equ	0xFFF
  1110                           tosh	equ	0xFFE
  1111                           tosl	equ	0xFFD
  1112                           pclath	equ	0xFFA
  1113                           tblptru	equ	0xFF8
  1114                           tblptrh	equ	0xFF7
  1115                           tblptrl	equ	0xFF6
  1116                           tablat	equ	0xFF5
  1117                           prodh	equ	0xFF4
  1118                           prodl	equ	0xFF3
  1119                           postinc0	equ	0xFEE
  1120                           wreg	equ	0xFE8
  1121                           indf2	equ	0xFDF
  1122                           fsr2h	equ	0xFDA
  1123                           fsr2l	equ	0xFD9
  1124                           status	equ	0xFD8
  1125                           
  1126 ;; *************** function __HW_Process_Pending_Ints *****************
  1127 ;; Defined at:
  1128 ;;		line 221 in file "ES_Port.c"
  1129 ;; Parameters:    Size  Location     Type
  1130 ;;		None
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;		None
  1133 ;; Return value:  Size  Location     Type
  1134 ;;                  1    wreg      unsigned char 
  1135 ;; Registers used:
  1136 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1137 ;; Tracked objects:
  1138 ;;		On entry : 0/0
  1139 ;;		On exit  : 0/0
  1140 ;;		Unchanged: 0/0
  1141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1142 ;;      Params:         0       0       0       0
  1143 ;;      Locals:         0       0       0       0
  1144 ;;      Temps:          0       0       0       0
  1145 ;;      Totals:         0       0       0       0
  1146 ;;Total ram usage:        0 bytes
  1147 ;; Hardware stack levels used:    1
  1148 ;; Hardware stack levels required when called:    8
  1149 ;; This function calls:
  1150 ;;		_ES_Timer_Tick_Resp
  1151 ;; This function is called by:
  1152 ;;		_ES_Run
  1153 ;; This function uses a non-reentrant model
  1154 ;;
  1155                           
  1156                           	psect	text4
  1157  000DA0                     __ptext4:
  1158                           	opt stack 0
  1159  000DA0                     __HW_Process_Pending_Ints:
  1160                           	opt stack 21
  1161                           
  1162                           ;ES_Port.c: 223: while (TickCount > 0)
  1163                           
  1164                           ;incstack = 0
  1165  000DA0  D003               	goto	l2369
  1166  000DA2                     l2365:
  1167                           
  1168                           ;ES_Port.c: 224: {
  1169                           ;ES_Port.c: 226: ES_Timer_Tick_Resp();
  1170  000DA2  EC5A  F002         	call	_ES_Timer_Tick_Resp	;wreg free
  1171                           
  1172                           ;ES_Port.c: 227: TickCount--;
  1173  000DA6  0646               	decf	_TickCount,f,c	;volatile
  1174  000DA8                     l2369:
  1175  000DA8  5046               	movf	_TickCount,w,c	;volatile
  1176  000DAA  A4D8               	btfss	status,2,c
  1177  000DAC  D7FA               	goto	l2365
  1178                           
  1179                           ;ES_Port.c: 228: }
  1180                           ;ES_Port.c: 230: return 1;
  1181  000DAE  0E01               	movlw	1
  1182  000DB0  0012               	return	
  1183  000DB2                     __end_of__HW_Process_Pending_Ints:
  1184                           	opt stack 0
  1185                           tosu	equ	0xFFF
  1186                           tosh	equ	0xFFE
  1187                           tosl	equ	0xFFD
  1188                           pclath	equ	0xFFA
  1189                           tblptru	equ	0xFF8
  1190                           tblptrh	equ	0xFF7
  1191                           tblptrl	equ	0xFF6
  1192                           tablat	equ	0xFF5
  1193                           prodh	equ	0xFF4
  1194                           prodl	equ	0xFF3
  1195                           postinc0	equ	0xFEE
  1196                           wreg	equ	0xFE8
  1197                           indf2	equ	0xFDF
  1198                           fsr2h	equ	0xFDA
  1199                           fsr2l	equ	0xFD9
  1200                           status	equ	0xFD8
  1201                           
  1202 ;; *************** function _ES_Timer_Tick_Resp *****************
  1203 ;; Defined at:
  1204 ;;		line 284 in file "ES_Timers.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;		None
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;		None
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  1    wreg      void 
  1211 ;; Registers used:
  1212 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1218 ;;      Params:         0       0       0       0
  1219 ;;      Locals:         0       0       0       0
  1220 ;;      Temps:          0       4       0       0
  1221 ;;      Totals:         0       4       0       0
  1222 ;;Total ram usage:        4 bytes
  1223 ;; Hardware stack levels used:    1
  1224 ;; Hardware stack levels required when called:    7
  1225 ;; This function calls:
  1226 ;;		Absolute function
  1227 ;;		_ES_GetMSBitSet
  1228 ;;		_PostCan_XmitService
  1229 ;; This function is called by:
  1230 ;;		__HW_Process_Pending_Ints
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           	psect	text5
  1235  0004B4                     __ptext5:
  1236                           	opt stack 0
  1237  0004B4                     _ES_Timer_Tick_Resp:
  1238                           	opt stack 21
  1239                           
  1240                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1241                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1242                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1243                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1244                           
  1245                           ;incstack = 0
  1246  0004B4  5040               	movf	_TMR_ActiveFlags,w,c
  1247  0004B6  1041               	iorwf	_TMR_ActiveFlags+1,w,c
  1248  0004B8  B4D8               	btfsc	status,2,c
  1249  0004BA  0012               	return	
  1250                           
  1251                           ;ES_Timers.c: 291: {
  1252                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1253  0004BC  C040  F036         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1254  0004C0  C041  F037         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1255  0004C4                     l2221:
  1256                           
  1257                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1258  0004C4  C036  F016         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1259  0004C8  C037  F017         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1260  0004CC  ECB6  F004         	call	_ES_GetMSBitSet	;wreg free
  1261  0004D0  6E44               	movwf	ES_Timer_Tick_Resp@NextTimer2Process,c
  1262                           
  1263                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1264  0004D2  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1265  0004D4  0D02               	mullw	2
  1266  0004D6  0E60               	movlw	low _TMR_TimerArray
  1267  0004D8  24F3               	addwf	prodl,w,c
  1268  0004DA  6ED9               	movwf	fsr2l,c
  1269  0004DC  0E00               	movlw	high _TMR_TimerArray
  1270  0004DE  20F4               	addwfc	prodh,w,c
  1271  0004E0  6EDA               	movwf	fsr2h,c
  1272  0004E2  06DE               	decf	postinc2,f,c
  1273  0004E4  0E00               	movlw	0
  1274  0004E6  5ADD               	subwfb	postdec2,f,c
  1275  0004E8  50DE               	movf	postinc2,w,c
  1276  0004EA  10DE               	iorwf	postinc2,w,c
  1277  0004EC  A4D8               	btfss	status,2,c
  1278  0004EE  D03D               	goto	l2233
  1279                           
  1280                           ;ES_Timers.c: 299: {
  1281                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1282  0004F0  0E03               	movlw	3
  1283  0004F2  6E33               	movwf	ES_Timer_Tick_Resp@NewEvent,c
  1284                           
  1285                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1286  0004F4  C044  F034         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1287  0004F8  6A35               	clrf	ES_Timer_Tick_Resp@NewEvent+2,c
  1288                           
  1289                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1290  0004FA  C033  F08C         	movff	ES_Timer_Tick_Resp@NewEvent,PostCan_XmitService@ThisEvent
  1291  0004FE  C034  F08D         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostCan_XmitService@ThisEvent+1
  1292  000502  C035  F08E         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostCan_XmitService@ThisEvent+2
  1293  000506  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1294  000508  0D02               	mullw	2
  1295  00050A  0E21               	movlw	low _Timer2PostFunc
  1296  00050C  24F3               	addwf	prodl,w,c
  1297  00050E  6EF6               	movwf	tblptrl,c
  1298  000510  0E03               	movlw	high _Timer2PostFunc
  1299  000512  20F4               	addwfc	prodh,w,c
  1300  000514  6EF7               	movwf	tblptrh,c
  1301  000516                     	if	0	;There are less than 3 active tblptr bytes
  1302  000516                     	endif
  1303  000516  D801               	call	u1548
  1304  000518  D00C               	goto	l2231
  1305  00051A                     u1548:
  1306  00051A  0005               	push	
  1307  00051C  6EFA               	movwf	pclath,c
  1308  00051E  0009               	tblrd		*+
  1309  000520  50F5               	movf	tablat,w,c
  1310  000522  6EFD               	movwf	tosl,c
  1311  000524  0009               	tblrd		*+
  1312  000526  50F5               	movf	tablat,w,c
  1313  000528  6EFE               	movwf	tosh,c
  1314  00052A  50F8               	movf	tblptru,w,c
  1315  00052C  6EFF               	movwf	tosu,c
  1316  00052E  50FA               	movf	pclath,w,c
  1317  000530  0012               	return		;indir
  1318  000532                     l2231:
  1319                           
  1320                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1321  000532  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1322  000534  0D02               	mullw	2
  1323  000536  0E01               	movlw	low _BitNum2SetMask
  1324  000538  24F3               	addwf	prodl,w,c
  1325  00053A  6EF6               	movwf	tblptrl,c
  1326  00053C  0E03               	movlw	high _BitNum2SetMask
  1327  00053E  20F4               	addwfc	prodh,w,c
  1328  000540  6EF7               	movwf	tblptrh,c
  1329  000542                     	if	0	;There are less than 3 active tblptr bytes
  1330  000542                     	endif
  1331  000542  0009               	tblrd		*+
  1332  000544  CFF5 F08F          	movff	tablat,??_ES_Timer_Tick_Resp
  1333  000548  0009               	tblrd		*+
  1334  00054A  CFF5 F090          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1335  00054E  0100               	movlb	0	; () banked
  1336  000550  1D8F               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1337  000552  0100               	movlb	0	; () banked
  1338  000554  6F91               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1339  000556  0100               	movlb	0	; () banked
  1340  000558  1D90               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1341  00055A  0100               	movlb	0	; () banked
  1342  00055C  6F92               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1343  00055E  0100               	movlb	0	; () banked
  1344  000560  5191               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1345  000562  1640               	andwf	_TMR_ActiveFlags,f,c
  1346  000564  0100               	movlb	0	; () banked
  1347  000566  5192               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1348  000568  1641               	andwf	_TMR_ActiveFlags+1,f,c
  1349  00056A                     l2233:
  1350                           
  1351                           ;ES_Timers.c: 306: }
  1352                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1353  00056A  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1354  00056C  0D02               	mullw	2
  1355  00056E  0E01               	movlw	low _BitNum2SetMask
  1356  000570  24F3               	addwf	prodl,w,c
  1357  000572  6EF6               	movwf	tblptrl,c
  1358  000574  0E03               	movlw	high _BitNum2SetMask
  1359  000576  20F4               	addwfc	prodh,w,c
  1360  000578  6EF7               	movwf	tblptrh,c
  1361  00057A                     	if	0	;There are less than 3 active tblptr bytes
  1362  00057A                     	endif
  1363  00057A  0009               	tblrd		*+
  1364  00057C  CFF5 F08F          	movff	tablat,??_ES_Timer_Tick_Resp
  1365  000580  0009               	tblrd		*+
  1366  000582  CFF5 F090          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1367  000586  0100               	movlb	0	; () banked
  1368  000588  1D8F               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1369  00058A  0100               	movlb	0	; () banked
  1370  00058C  6F91               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1371  00058E  0100               	movlb	0	; () banked
  1372  000590  1D90               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1373  000592  0100               	movlb	0	; () banked
  1374  000594  6F92               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1375  000596  0100               	movlb	0	; () banked
  1376  000598  5191               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1377  00059A  1636               	andwf	ES_Timer_Tick_Resp@NeedsProcessing,f,c
  1378  00059C  0100               	movlb	0	; () banked
  1379  00059E  5192               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1380  0005A0  1637               	andwf	ES_Timer_Tick_Resp@NeedsProcessing+1,f,c
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1384  0005A2  5036               	movf	ES_Timer_Tick_Resp@NeedsProcessing,w,c
  1385  0005A4  1037               	iorwf	ES_Timer_Tick_Resp@NeedsProcessing+1,w,c
  1386  0005A6  B4D8               	btfsc	status,2,c
  1387  0005A8  0012               	return	
  1388  0005AA  D78C               	goto	l2221
  1389  0005AC                     __end_of_ES_Timer_Tick_Resp:
  1390                           	opt stack 0
  1391                           tosu	equ	0xFFF
  1392                           tosh	equ	0xFFE
  1393                           tosl	equ	0xFFD
  1394                           pclath	equ	0xFFA
  1395                           tblptru	equ	0xFF8
  1396                           tblptrh	equ	0xFF7
  1397                           tblptrl	equ	0xFF6
  1398                           tablat	equ	0xFF5
  1399                           prodh	equ	0xFF4
  1400                           prodl	equ	0xFF3
  1401                           postinc0	equ	0xFEE
  1402                           wreg	equ	0xFE8
  1403                           indf2	equ	0xFDF
  1404                           postinc2	equ	0xFDE
  1405                           postdec2	equ	0xFDD
  1406                           fsr2h	equ	0xFDA
  1407                           fsr2l	equ	0xFD9
  1408                           status	equ	0xFD8
  1409                           
  1410 ;; *************** function _PostCan_XmitService *****************
  1411 ;; Defined at:
  1412 ;;		line 112 in file "Can_XmitService.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;  ThisEvent       3    0[BANK0 ] struct ES_Event_t
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;		None
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  1    wreg      unsigned char 
  1419 ;; Registers used:
  1420 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1421 ;; Tracked objects:
  1422 ;;		On entry : 0/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1426 ;;      Params:         0       3       0       0
  1427 ;;      Locals:         0       0       0       0
  1428 ;;      Temps:          0       0       0       0
  1429 ;;      Totals:         0       3       0       0
  1430 ;;Total ram usage:        3 bytes
  1431 ;; Hardware stack levels used:    1
  1432 ;; Hardware stack levels required when called:    6
  1433 ;; This function calls:
  1434 ;;		_ES_PostToService
  1435 ;; This function is called by:
  1436 ;;		_ES_Timer_Tick_Resp
  1437 ;;		_PostToList
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           	psect	text6
  1442  000D8C                     __ptext6:
  1443                           	opt stack 0
  1444  000D8C                     _PostCan_XmitService:
  1445                           	opt stack 21
  1446                           
  1447                           ;Can_XmitService.c: 114: return ES_PostToService( MyPriority, ThisEvent);
  1448                           
  1449                           ;incstack = 0
  1450  000D8C  C08C  F02D         	movff	PostCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  1451  000D90  C08D  F02E         	movff	PostCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  1452  000D94  C08E  F02F         	movff	PostCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  1453  000D98  5045               	movf	_MyPriority,w,c
  1454  000D9A  EC5C  F005         	call	_ES_PostToService
  1455  000D9E  0012               	return	
  1456  000DA0                     __end_of_PostCan_XmitService:
  1457                           	opt stack 0
  1458                           tosu	equ	0xFFF
  1459                           tosh	equ	0xFFE
  1460                           tosl	equ	0xFFD
  1461                           pclath	equ	0xFFA
  1462                           tblptru	equ	0xFF8
  1463                           tblptrh	equ	0xFF7
  1464                           tblptrl	equ	0xFF6
  1465                           tablat	equ	0xFF5
  1466                           prodh	equ	0xFF4
  1467                           prodl	equ	0xFF3
  1468                           postinc0	equ	0xFEE
  1469                           wreg	equ	0xFE8
  1470                           indf2	equ	0xFDF
  1471                           postinc2	equ	0xFDE
  1472                           postdec2	equ	0xFDD
  1473                           fsr2h	equ	0xFDA
  1474                           fsr2l	equ	0xFD9
  1475                           status	equ	0xFD8
  1476                           
  1477 ;; *************** function _ES_GetMSBitSet *****************
  1478 ;; Defined at:
  1479 ;;		line 79 in file "ES_LookupTables.c"
  1480 ;; Parameters:    Size  Location     Type
  1481 ;;  Val2Check       2   21[COMRAM] unsigned int 
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;  LoopCntr        1   30[COMRAM] char 
  1484 ;;  Nybble2Test     1   29[COMRAM] unsigned char 
  1485 ;;  ReturnVal       1   28[COMRAM] unsigned char 
  1486 ;; Return value:  Size  Location     Type
  1487 ;;                  1    wreg      unsigned char 
  1488 ;; Registers used:
  1489 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1490 ;; Tracked objects:
  1491 ;;		On entry : 0/0
  1492 ;;		On exit  : 0/0
  1493 ;;		Unchanged: 0/0
  1494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1495 ;;      Params:         2       0       0       0
  1496 ;;      Locals:         3       0       0       0
  1497 ;;      Temps:          5       0       0       0
  1498 ;;      Totals:        10       0       0       0
  1499 ;;Total ram usage:       10 bytes
  1500 ;; Hardware stack levels used:    1
  1501 ;; Hardware stack levels required when called:    3
  1502 ;; This function calls:
  1503 ;;		Nothing
  1504 ;; This function is called by:
  1505 ;;		_ES_Run
  1506 ;;		_ES_Timer_Tick_Resp
  1507 ;; This function uses a non-reentrant model
  1508 ;;
  1509                           
  1510                           	psect	text7
  1511  00096C                     __ptext7:
  1512                           	opt stack 0
  1513  00096C                     _ES_GetMSBitSet:
  1514                           	opt stack 24
  1515                           
  1516                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1517                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1518                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1519                           
  1520                           ;incstack = 0
  1521  00096C  0E80               	movlw	128
  1522  00096E  6E1D               	movwf	ES_GetMSBitSet@ReturnVal,c
  1523                           
  1524                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1525  000970  0E03               	movlw	3
  1526  000972  6E1F               	movwf	ES_GetMSBitSet@LoopCntr,c
  1527  000974                     l2189:
  1528                           
  1529                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1530  000974  BE1F               	btfsc	ES_GetMSBitSet@LoopCntr,7,c
  1531  000976  D031               	goto	l2203
  1532                           
  1533                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1534                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1535                           ;ES_LookupTables.c: 91: 0x0F);
  1536  000978  501F               	movf	ES_GetMSBitSet@LoopCntr,w,c
  1537  00097A  0D04               	mullw	4
  1538  00097C  CFF3 F018          	movff	prodl,??_ES_GetMSBitSet
  1539  000980  C016  F019         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1540  000984  C017  F01A         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1541  000988  2A18               	incf	??_ES_GetMSBitSet,f,c
  1542  00098A  D003               	goto	u1494
  1543  00098C                     u1495:
  1544  00098C  90D8               	bcf	status,0,c
  1545  00098E  321A               	rrcf	??_ES_GetMSBitSet+2,f,c
  1546  000990  3219               	rrcf	??_ES_GetMSBitSet+1,f,c
  1547  000992                     u1494:
  1548  000992  2E18               	decfsz	??_ES_GetMSBitSet,f,c
  1549  000994  D7FB               	goto	u1495
  1550  000996  5019               	movf	??_ES_GetMSBitSet+1,w,c
  1551  000998  0B0F               	andlw	15
  1552  00099A  6E1E               	movwf	ES_GetMSBitSet@Nybble2Test,c
  1553                           
  1554                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1555  00099C  501E               	movf	ES_GetMSBitSet@Nybble2Test,w,c
  1556  00099E  B4D8               	btfsc	status,2,c
  1557  0009A0  D01A               	goto	l2199
  1558                           
  1559                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  1560                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  1561  0009A2  0EFF               	movlw	255
  1562  0009A4  6E18               	movwf	??_ES_GetMSBitSet& (0+255),c
  1563  0009A6  0EFF               	movlw	255
  1564  0009A8  6E19               	movwf	(??_ES_GetMSBitSet+1)& (0+255),c
  1565  0009AA  501E               	movf	ES_GetMSBitSet@Nybble2Test,w,c
  1566  0009AC  6E1A               	movwf	(??_ES_GetMSBitSet+2)& (0+255),c
  1567  0009AE  6A1B               	clrf	(??_ES_GetMSBitSet+3)& (0+255),c
  1568  0009B0  5018               	movf	??_ES_GetMSBitSet,w,c
  1569  0009B2  261A               	addwf	??_ES_GetMSBitSet+2,f,c
  1570  0009B4  5019               	movf	??_ES_GetMSBitSet+1,w,c
  1571  0009B6  221B               	addwfc	??_ES_GetMSBitSet+3,f,c
  1572  0009B8  0E41               	movlw	low _Nybble2MSBitNum
  1573  0009BA  241A               	addwf	??_ES_GetMSBitSet+2,w,c
  1574  0009BC  6EF6               	movwf	tblptrl,c
  1575  0009BE  0E03               	movlw	high _Nybble2MSBitNum
  1576  0009C0  201B               	addwfc	??_ES_GetMSBitSet+3,w,c
  1577  0009C2  6EF7               	movwf	tblptrh,c
  1578  0009C4                     	if	0	;There are less than 3 active tblptr bytes
  1579  0009C4                     	endif
  1580  0009C4  0008               	tblrd		*
  1581  0009C6  CFF5 F01C          	movff	tablat,??_ES_GetMSBitSet+4
  1582  0009CA  501F               	movf	ES_GetMSBitSet@LoopCntr,w,c
  1583  0009CC  0D04               	mullw	4
  1584  0009CE  50F3               	movf	prodl,w,c
  1585  0009D0  241C               	addwf	??_ES_GetMSBitSet+4,w,c
  1586  0009D2  6E1D               	movwf	ES_GetMSBitSet@ReturnVal,c
  1587                           
  1588                           ;ES_LookupTables.c: 96: break;
  1589  0009D4  D002               	goto	l2203
  1590  0009D6                     l2199:
  1591  0009D6  061F               	decf	ES_GetMSBitSet@LoopCntr,f,c
  1592  0009D8  D7CD               	goto	l2189
  1593  0009DA                     l2203:
  1594                           
  1595                           ;ES_LookupTables.c: 97: }
  1596                           ;ES_LookupTables.c: 98: }
  1597                           ;ES_LookupTables.c: 99: return ReturnVal;
  1598  0009DA  501D               	movf	ES_GetMSBitSet@ReturnVal,w,c
  1599  0009DC  0012               	return	
  1600  0009DE                     __end_of_ES_GetMSBitSet:
  1601                           	opt stack 0
  1602                           tosu	equ	0xFFF
  1603                           tosh	equ	0xFFE
  1604                           tosl	equ	0xFFD
  1605                           pclath	equ	0xFFA
  1606                           tblptru	equ	0xFF8
  1607                           tblptrh	equ	0xFF7
  1608                           tblptrl	equ	0xFF6
  1609                           tablat	equ	0xFF5
  1610                           prodh	equ	0xFF4
  1611                           prodl	equ	0xFF3
  1612                           postinc0	equ	0xFEE
  1613                           wreg	equ	0xFE8
  1614                           indf2	equ	0xFDF
  1615                           postinc2	equ	0xFDE
  1616                           postdec2	equ	0xFDD
  1617                           fsr2h	equ	0xFDA
  1618                           fsr2l	equ	0xFD9
  1619                           status	equ	0xFD8
  1620                           
  1621 ;; *************** function _RunCan_XmitService *****************
  1622 ;; Defined at:
  1623 ;;		line 135 in file "Can_XmitService.c"
  1624 ;; Parameters:    Size  Location     Type
  1625 ;;  ThisEvent       3   22[COMRAM] struct ES_Event_t
  1626 ;; Auto vars:     Size  Location     Type
  1627 ;;  ReturnEvent     3   25[COMRAM] struct ES_Event_t
  1628 ;; Return value:  Size  Location     Type
  1629 ;;                  3   22[COMRAM] struct ES_Event_t
  1630 ;; Registers used:
  1631 ;;		wreg, status,2, status,0, cstack
  1632 ;; Tracked objects:
  1633 ;;		On entry : 0/0
  1634 ;;		On exit  : 0/0
  1635 ;;		Unchanged: 0/0
  1636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1637 ;;      Params:         3       0       0       0
  1638 ;;      Locals:         3       0       0       0
  1639 ;;      Temps:          0       0       0       0
  1640 ;;      Totals:         6       0       0       0
  1641 ;;Total ram usage:        6 bytes
  1642 ;; Hardware stack levels used:    1
  1643 ;; Hardware stack levels required when called:    4
  1644 ;; This function calls:
  1645 ;;		_InitCanHardware
  1646 ;;		_InitPins
  1647 ;;		_ToggleDebugLED
  1648 ;;		_XmitData
  1649 ;; This function is called by:
  1650 ;;		_ES_Run
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654                           	psect	text8
  1655  000B7C                     __ptext8:
  1656                           	opt stack 0
  1657  000B7C                     _RunCan_XmitService:
  1658                           	opt stack 25
  1659                           
  1660                           ;Can_XmitService.c: 137: ES_Event ReturnEvent;
  1661                           ;Can_XmitService.c: 139: if (ThisEvent.EventType == ES_INIT) {
  1662                           
  1663                           ;incstack = 0
  1664  000B7C  0E02               	movlw	2
  1665  000B7E  1817               	xorwf	RunCan_XmitService@ThisEvent,w,c
  1666  000B80  A4D8               	btfss	status,2,c
  1667  000B82  D007               	goto	l2395
  1668                           
  1669                           ;Can_XmitService.c: 140: InitPins();
  1670  000B84  EC31  F006         	call	_InitPins	;wreg free
  1671                           
  1672                           ;Can_XmitService.c: 141: InitCanHardware();
  1673  000B88  EC8F  F005         	call	_InitCanHardware	;wreg free
  1674                           
  1675                           ;Can_XmitService.c: 142: XmitData(0xb7);
  1676  000B8C  0EB7               	movlw	183
  1677  000B8E  EC5C  F006         	call	_XmitData
  1678  000B92                     l2395:
  1679                           
  1680                           ;Can_XmitService.c: 143: }
  1681                           ;Can_XmitService.c: 144: if (ThisEvent.EventType == ES_TIMEOUT) {
  1682  000B92  0E03               	movlw	3
  1683  000B94  1817               	xorwf	RunCan_XmitService@ThisEvent,w,c
  1684  000B96  A4D8               	btfss	status,2,c
  1685  000B98  D009               	goto	l398
  1686                           
  1687                           ;Can_XmitService.c: 145: if (ThisEvent.EventParam == 0) {
  1688  000B9A  5018               	movf	RunCan_XmitService@ThisEvent+1,w,c
  1689  000B9C  1019               	iorwf	RunCan_XmitService@ThisEvent+2,w,c
  1690  000B9E  A4D8               	btfss	status,2,c
  1691  000BA0  D005               	goto	l398
  1692                           
  1693                           ;Can_XmitService.c: 146: ToggleDebugLED();
  1694  000BA2  ECD9  F006         	call	_ToggleDebugLED	;wreg free
  1695                           
  1696                           ;Can_XmitService.c: 147: XmitData(0xb7);
  1697  000BA6  0EB7               	movlw	183
  1698  000BA8  EC5C  F006         	call	_XmitData
  1699  000BAC                     l398:
  1700                           
  1701                           ;Can_XmitService.c: 148: }
  1702                           ;Can_XmitService.c: 149: }
  1703                           ;Can_XmitService.c: 150: ReturnEvent.EventType = ES_NO_EVENT;
  1704  000BAC  0E00               	movlw	0
  1705  000BAE  6E1A               	movwf	RunCan_XmitService@ReturnEvent,c
  1706                           
  1707                           ;Can_XmitService.c: 151: return ReturnEvent;
  1708  000BB0  C01A  F017         	movff	RunCan_XmitService@ReturnEvent,?_RunCan_XmitService
  1709  000BB4  C01B  F018         	movff	RunCan_XmitService@ReturnEvent+1,?_RunCan_XmitService+1
  1710  000BB8  C01C  F019         	movff	RunCan_XmitService@ReturnEvent+2,?_RunCan_XmitService+2
  1711  000BBC  0012               	return	
  1712  000BBE                     __end_of_RunCan_XmitService:
  1713                           	opt stack 0
  1714                           tosu	equ	0xFFF
  1715                           tosh	equ	0xFFE
  1716                           tosl	equ	0xFFD
  1717                           pclath	equ	0xFFA
  1718                           tblptru	equ	0xFF8
  1719                           tblptrh	equ	0xFF7
  1720                           tblptrl	equ	0xFF6
  1721                           tablat	equ	0xFF5
  1722                           prodh	equ	0xFF4
  1723                           prodl	equ	0xFF3
  1724                           postinc0	equ	0xFEE
  1725                           wreg	equ	0xFE8
  1726                           indf2	equ	0xFDF
  1727                           postinc2	equ	0xFDE
  1728                           postdec2	equ	0xFDD
  1729                           fsr2h	equ	0xFDA
  1730                           fsr2l	equ	0xFD9
  1731                           status	equ	0xFD8
  1732                           
  1733 ;; *************** function _XmitData *****************
  1734 ;; Defined at:
  1735 ;;		line 154 in file "Can_XmitService.c"
  1736 ;; Parameters:    Size  Location     Type
  1737 ;;  DataByte        1    wreg     unsigned char 
  1738 ;; Auto vars:     Size  Location     Type
  1739 ;;  DataByte        1   21[COMRAM] unsigned char 
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  1    wreg      void 
  1742 ;; Registers used:
  1743 ;;		wreg, status,2
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1749 ;;      Params:         0       0       0       0
  1750 ;;      Locals:         1       0       0       0
  1751 ;;      Temps:          0       0       0       0
  1752 ;;      Totals:         1       0       0       0
  1753 ;;Total ram usage:        1 bytes
  1754 ;; Hardware stack levels used:    1
  1755 ;; Hardware stack levels required when called:    3
  1756 ;; This function calls:
  1757 ;;		Nothing
  1758 ;; This function is called by:
  1759 ;;		_RunCan_XmitService
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           	psect	text9
  1764  000CB8                     __ptext9:
  1765                           	opt stack 0
  1766  000CB8                     _XmitData:
  1767                           	opt stack 25
  1768                           
  1769                           ;incstack = 0
  1770                           ;XmitData@DataByte stored from wreg
  1771  000CB8  6E16               	movwf	XmitData@DataByte,c
  1772                           
  1773                           ;Can_XmitService.c: 155: TXB0CONbits.TXREQ = 0;
  1774  000CBA  010F               	movlb	15	; () banked
  1775  000CBC  9740               	bcf	64,3,b	;volatile
  1776                           
  1777                           ; BSR set to: 15
  1778                           ;Can_XmitService.c: 157: TXB0D0 = DataByte;
  1779  000CBE  C016  FF46         	movff	XmitData@DataByte,3910	;volatile
  1780                           
  1781                           ; BSR set to: 15
  1782                           ;Can_XmitService.c: 159: TXB0SIDL = 0x00;
  1783  000CC2  0E00               	movlw	0
  1784  000CC4  010F               	movlb	15	; () banked
  1785  000CC6  6F42               	movwf	66,b	;volatile
  1786                           
  1787                           ; BSR set to: 15
  1788                           ;Can_XmitService.c: 160: TXB0SIDH = 0b00100000;
  1789  000CC8  0E20               	movlw	32
  1790  000CCA  010F               	movlb	15	; () banked
  1791  000CCC  6F41               	movwf	65,b	;volatile
  1792                           
  1793                           ; BSR set to: 15
  1794                           ;Can_XmitService.c: 162: TXB0DLC = 0b00000001;
  1795  000CCE  0E01               	movlw	1
  1796  000CD0  010F               	movlb	15	; () banked
  1797  000CD2  6F45               	movwf	69,b	;volatile
  1798                           
  1799                           ; BSR set to: 15
  1800                           ;Can_XmitService.c: 163: TXB0CONbits.TXPRI0 = 1;
  1801  000CD4  010F               	movlb	15	; () banked
  1802  000CD6  8140               	bsf	64,0,b	;volatile
  1803                           
  1804                           ; BSR set to: 15
  1805                           ;Can_XmitService.c: 164: TXB0CONbits.TXPRI1 = 1;
  1806  000CD8  010F               	movlb	15	; () banked
  1807  000CDA  8340               	bsf	64,1,b	;volatile
  1808                           
  1809                           ; BSR set to: 15
  1810                           ;Can_XmitService.c: 166: TXB0CONbits.TXREQ = 1;
  1811  000CDC  010F               	movlb	15	; () banked
  1812  000CDE  8740               	bsf	64,3,b	;volatile
  1813                           
  1814                           ; BSR set to: 15
  1815  000CE0  0012               	return		;funcret
  1816  000CE2                     __end_of_XmitData:
  1817                           	opt stack 0
  1818                           tosu	equ	0xFFF
  1819                           tosh	equ	0xFFE
  1820                           tosl	equ	0xFFD
  1821                           pclath	equ	0xFFA
  1822                           tblptru	equ	0xFF8
  1823                           tblptrh	equ	0xFF7
  1824                           tblptrl	equ	0xFF6
  1825                           tablat	equ	0xFF5
  1826                           prodh	equ	0xFF4
  1827                           prodl	equ	0xFF3
  1828                           postinc0	equ	0xFEE
  1829                           wreg	equ	0xFE8
  1830                           indf2	equ	0xFDF
  1831                           postinc2	equ	0xFDE
  1832                           postdec2	equ	0xFDD
  1833                           fsr2h	equ	0xFDA
  1834                           fsr2l	equ	0xFD9
  1835                           status	equ	0xFD8
  1836                           
  1837 ;; *************** function _ToggleDebugLED *****************
  1838 ;; Defined at:
  1839 ;;		line 271 in file "Can_XmitService.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;		None
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;		None
  1844 ;; Return value:  Size  Location     Type
  1845 ;;                  1    wreg      void 
  1846 ;; Registers used:
  1847 ;;		None
  1848 ;; Tracked objects:
  1849 ;;		On entry : 0/0
  1850 ;;		On exit  : 0/0
  1851 ;;		Unchanged: 0/0
  1852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1853 ;;      Params:         0       0       0       0
  1854 ;;      Locals:         0       0       0       0
  1855 ;;      Temps:          0       0       0       0
  1856 ;;      Totals:         0       0       0       0
  1857 ;;Total ram usage:        0 bytes
  1858 ;; Hardware stack levels used:    1
  1859 ;; Hardware stack levels required when called:    3
  1860 ;; This function calls:
  1861 ;;		Nothing
  1862 ;; This function is called by:
  1863 ;;		_RunCan_XmitService
  1864 ;; This function uses a non-reentrant model
  1865 ;;
  1866                           
  1867                           	psect	text10
  1868  000DB2                     __ptext10:
  1869                           	opt stack 0
  1870  000DB2                     _ToggleDebugLED:
  1871                           	opt stack 25
  1872                           
  1873                           ;Can_XmitService.c: 273: if (LATA1 == 1) {
  1874                           
  1875                           ; BSR set to: 15
  1876                           ;incstack = 0
  1877  000DB2  A289               	btfss	3977,1,c	;volatile
  1878  000DB4  D002               	goto	l429
  1879                           
  1880                           ;Can_XmitService.c: 274: LATA1 = 0;
  1881  000DB6  9289               	bcf	3977,1,c	;volatile
  1882                           
  1883                           ;Can_XmitService.c: 275: } else if (LATA1 == 0) {
  1884  000DB8  0012               	return	
  1885  000DBA                     l429:
  1886  000DBA  B289               	btfsc	3977,1,c	;volatile
  1887  000DBC  0012               	return	
  1888                           
  1889                           ;Can_XmitService.c: 276: LATA1 = 1;
  1890  000DBE  8289               	bsf	3977,1,c	;volatile
  1891  000DC0  0012               	return	
  1892  000DC2                     __end_of_ToggleDebugLED:
  1893                           	opt stack 0
  1894                           tosu	equ	0xFFF
  1895                           tosh	equ	0xFFE
  1896                           tosl	equ	0xFFD
  1897                           pclath	equ	0xFFA
  1898                           tblptru	equ	0xFF8
  1899                           tblptrh	equ	0xFF7
  1900                           tblptrl	equ	0xFF6
  1901                           tablat	equ	0xFF5
  1902                           prodh	equ	0xFF4
  1903                           prodl	equ	0xFF3
  1904                           postinc0	equ	0xFEE
  1905                           wreg	equ	0xFE8
  1906                           indf2	equ	0xFDF
  1907                           postinc2	equ	0xFDE
  1908                           postdec2	equ	0xFDD
  1909                           fsr2h	equ	0xFDA
  1910                           fsr2l	equ	0xFD9
  1911                           status	equ	0xFD8
  1912                           
  1913 ;; *************** function _InitPins *****************
  1914 ;; Defined at:
  1915 ;;		line 250 in file "Can_XmitService.c"
  1916 ;; Parameters:    Size  Location     Type
  1917 ;;		None
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;		None
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, status,2
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1929 ;;      Params:         0       0       0       0
  1930 ;;      Locals:         0       0       0       0
  1931 ;;      Temps:          0       0       0       0
  1932 ;;      Totals:         0       0       0       0
  1933 ;;Total ram usage:        0 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    3
  1936 ;; This function calls:
  1937 ;;		Nothing
  1938 ;; This function is called by:
  1939 ;;		_RunCan_XmitService
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text11
  1944  000C62                     __ptext11:
  1945                           	opt stack 0
  1946  000C62                     _InitPins:
  1947                           	opt stack 25
  1948                           
  1949                           ;Can_XmitService.c: 253: PORTB = 0x00;
  1950                           
  1951                           ;incstack = 0
  1952  000C62  0E00               	movlw	0
  1953  000C64  6E81               	movwf	3969,c	;volatile
  1954                           
  1955                           ;Can_XmitService.c: 254: LATB = 0x00;
  1956  000C66  0E00               	movlw	0
  1957  000C68  6E8A               	movwf	3978,c	;volatile
  1958                           
  1959                           ;Can_XmitService.c: 255: PORTA = 0x00;
  1960  000C6A  0E00               	movlw	0
  1961  000C6C  6E80               	movwf	3968,c	;volatile
  1962                           
  1963                           ;Can_XmitService.c: 256: LATA = 0x00;
  1964  000C6E  0E00               	movlw	0
  1965  000C70  6E89               	movwf	3977,c	;volatile
  1966                           
  1967                           ;Can_XmitService.c: 257: ADCON1 = 0x0F;
  1968  000C72  0E0F               	movlw	15
  1969  000C74  6EC1               	movwf	4033,c	;volatile
  1970                           
  1971                           ;Can_XmitService.c: 258: TRISAbits.TRISA0 = 0;
  1972  000C76  9092               	bcf	3986,0,c	;volatile
  1973                           
  1974                           ;Can_XmitService.c: 259: TRISAbits.TRISA1 = 0;
  1975  000C78  9292               	bcf	3986,1,c	;volatile
  1976                           
  1977                           ;Can_XmitService.c: 260: TRISAbits.TRISA2 = 0;
  1978  000C7A  9492               	bcf	3986,2,c	;volatile
  1979                           
  1980                           ;Can_XmitService.c: 261: TRISAbits.TRISA3 = 0;
  1981  000C7C  9692               	bcf	3986,3,c	;volatile
  1982                           
  1983                           ;Can_XmitService.c: 262: TRISBbits.TRISB2 = 0;
  1984  000C7E  9493               	bcf	3987,2,c	;volatile
  1985                           
  1986                           ;Can_XmitService.c: 263: TRISBbits.TRISB3 = 1;
  1987  000C80  8693               	bsf	3987,3,c	;volatile
  1988                           
  1989                           ;Can_XmitService.c: 264: LATA1 = 0;
  1990  000C82  9289               	bcf	3977,1,c	;volatile
  1991                           
  1992                           ;Can_XmitService.c: 265: LATA0 = 0;
  1993  000C84  9089               	bcf	3977,0,c	;volatile
  1994                           
  1995                           ;Can_XmitService.c: 266: LATA2 = 0;
  1996  000C86  9489               	bcf	3977,2,c	;volatile
  1997                           
  1998                           ;Can_XmitService.c: 267: LATA3 = 1;
  1999  000C88  8689               	bsf	3977,3,c	;volatile
  2000                           
  2001                           ;Can_XmitService.c: 268: LATB2 = 0;
  2002  000C8A  948A               	bcf	3978,2,c	;volatile
  2003  000C8C  0012               	return		;funcret
  2004  000C8E                     __end_of_InitPins:
  2005                           	opt stack 0
  2006                           tosu	equ	0xFFF
  2007                           tosh	equ	0xFFE
  2008                           tosl	equ	0xFFD
  2009                           pclath	equ	0xFFA
  2010                           tblptru	equ	0xFF8
  2011                           tblptrh	equ	0xFF7
  2012                           tblptrl	equ	0xFF6
  2013                           tablat	equ	0xFF5
  2014                           prodh	equ	0xFF4
  2015                           prodl	equ	0xFF3
  2016                           postinc0	equ	0xFEE
  2017                           wreg	equ	0xFE8
  2018                           indf2	equ	0xFDF
  2019                           postinc2	equ	0xFDE
  2020                           postdec2	equ	0xFDD
  2021                           fsr2h	equ	0xFDA
  2022                           fsr2l	equ	0xFD9
  2023                           status	equ	0xFD8
  2024                           
  2025 ;; *************** function _InitCanHardware *****************
  2026 ;; Defined at:
  2027 ;;		line 194 in file "Can_XmitService.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;		None
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;		None
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  1    wreg      void 
  2034 ;; Registers used:
  2035 ;;		wreg, status,2
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2041 ;;      Params:         0       0       0       0
  2042 ;;      Locals:         0       0       0       0
  2043 ;;      Temps:          0       0       0       0
  2044 ;;      Totals:         0       0       0       0
  2045 ;;Total ram usage:        0 bytes
  2046 ;; Hardware stack levels used:    1
  2047 ;; Hardware stack levels required when called:    3
  2048 ;; This function calls:
  2049 ;;		Nothing
  2050 ;; This function is called by:
  2051 ;;		_RunCan_XmitService
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text12
  2056  000B1E                     __ptext12:
  2057                           	opt stack 0
  2058  000B1E                     _InitCanHardware:
  2059                           	opt stack 25
  2060                           
  2061                           ;Can_XmitService.c: 198: CANCON = 0x80;
  2062                           
  2063                           ;incstack = 0
  2064  000B1E  0E80               	movlw	128
  2065  000B20  6E6F               	movwf	3951,c	;volatile
  2066  000B22                     l417:
  2067  000B22  AE6E               	btfss	3950,7,c	;volatile
  2068  000B24  D7FE               	goto	l417
  2069                           
  2070                           ;Can_XmitService.c: 204: BRGCON1bits.SJW0 = 1;
  2071  000B26  8C70               	bsf	3952,6,c	;volatile
  2072                           
  2073                           ;Can_XmitService.c: 205: BRGCON2bits.SAM = 1;
  2074  000B28  8C71               	bsf	3953,6,c	;volatile
  2075                           
  2076                           ;Can_XmitService.c: 206: BRGCON2bits.SEG2PHTS = 1;
  2077  000B2A  8E71               	bsf	3953,7,c	;volatile
  2078                           
  2079                           ;Can_XmitService.c: 207: BRGCON2bits.PRSEG1 = 1;
  2080  000B2C  8271               	bsf	3953,1,c	;volatile
  2081                           
  2082                           ;Can_XmitService.c: 208: BRGCON2bits.SEG1PH0 = 1;
  2083  000B2E  8671               	bsf	3953,3,c	;volatile
  2084                           
  2085                           ;Can_XmitService.c: 209: BRGCON2bits.SEG1PH1 = 1;
  2086  000B30  8871               	bsf	3953,4,c	;volatile
  2087                           
  2088                           ;Can_XmitService.c: 210: BRGCON2bits.SEG1PH2 = 1;
  2089  000B32  8A71               	bsf	3953,5,c	;volatile
  2090                           
  2091                           ;Can_XmitService.c: 211: BRGCON3bits.SEG2PH0 = 1;
  2092  000B34  8072               	bsf	3954,0,c	;volatile
  2093                           
  2094                           ;Can_XmitService.c: 212: BRGCON3bits.SEG2PH1 = 1;
  2095  000B36  8272               	bsf	3954,1,c	;volatile
  2096                           
  2097                           ;Can_XmitService.c: 213: BRGCON1bits.BRP0 = 1;
  2098  000B38  8070               	bsf	3952,0,c	;volatile
  2099                           
  2100                           ;Can_XmitService.c: 214: BRGCON1bits.BRP1 = 1;
  2101  000B3A  8270               	bsf	3952,1,c	;volatile
  2102                           
  2103                           ;Can_XmitService.c: 219: RXB0CONbits.RXM0 = 1;
  2104  000B3C  8A60               	bsf	3936,5,c	;volatile
  2105                           
  2106                           ;Can_XmitService.c: 220: RXB0CONbits.RXM1 = 1;
  2107  000B3E  8C60               	bsf	3936,6,c	;volatile
  2108                           
  2109                           ;Can_XmitService.c: 221: RXB0CONbits.RXB0DBEN = 0;
  2110  000B40  9460               	bcf	3936,2,c	;volatile
  2111                           
  2112                           ;Can_XmitService.c: 222: RXB0CONbits.FILHIT0 = 0;
  2113  000B42  9060               	bcf	3936,0,c	;volatile
  2114                           
  2115                           ;Can_XmitService.c: 224: RXF0SIDH = 0x00;
  2116  000B44  0E00               	movlw	0
  2117  000B46  010F               	movlb	15	; () banked
  2118  000B48  6F00               	movwf	0,b	;volatile
  2119                           
  2120                           ;Can_XmitService.c: 225: RXF0SIDL = 0b00100000;
  2121  000B4A  0E20               	movlw	32
  2122  000B4C  010F               	movlb	15	; () banked
  2123  000B4E  6F01               	movwf	1,b	;volatile
  2124                           
  2125                           ;Can_XmitService.c: 226: RXM0SIDH = 0x00;
  2126  000B50  0E00               	movlw	0
  2127  000B52  010F               	movlb	15	; () banked
  2128  000B54  6F18               	movwf	24,b	;volatile
  2129                           
  2130                           ;Can_XmitService.c: 227: RXM0SIDL = 0x00;
  2131  000B56  0E00               	movlw	0
  2132  000B58  010F               	movlb	15	; () banked
  2133  000B5A  6F19               	movwf	25,b	;volatile
  2134                           
  2135                           ;Can_XmitService.c: 231: ECANCON = 0x00;
  2136  000B5C  0E00               	movlw	0
  2137  000B5E  6E77               	movwf	3959,c	;volatile
  2138                           
  2139                           ;Can_XmitService.c: 232: CANCON = 0x00;
  2140  000B60  0E00               	movlw	0
  2141  000B62  6E6F               	movwf	3951,c	;volatile
  2142  000B64                     l420:
  2143  000B64  BE6E               	btfsc	3950,7,c	;volatile
  2144  000B66  D7FE               	goto	l420
  2145                           
  2146                           ;Can_XmitService.c: 237: TXB0IE = 1;
  2147  000B68  84A3               	bsf	4003,2,c	;volatile
  2148                           
  2149                           ;Can_XmitService.c: 238: RXB0IE = 1;
  2150  000B6A  80A3               	bsf	4003,0,c	;volatile
  2151                           
  2152                           ;Can_XmitService.c: 239: IRXIE = 1;
  2153  000B6C  8EA3               	bsf	4003,7,c	;volatile
  2154                           
  2155                           ;Can_XmitService.c: 243: TXB0IF = 0;
  2156  000B6E  94A4               	bcf	4004,2,c	;volatile
  2157                           
  2158                           ;Can_XmitService.c: 244: RXB0IF = 0;
  2159  000B70  90A4               	bcf	4004,0,c	;volatile
  2160                           
  2161                           ;Can_XmitService.c: 245: IRXIF = 0;
  2162  000B72  9EA4               	bcf	4004,7,c	;volatile
  2163                           
  2164                           ;Can_XmitService.c: 246: TXB0CONbits.TXREQ = 0;
  2165  000B74  010F               	movlb	15	; () banked
  2166  000B76  9740               	bcf	64,3,b	;volatile
  2167                           
  2168                           ;Can_XmitService.c: 247: RXB0CONbits.RXFUL = 0;
  2169  000B78  9E60               	bcf	3936,7,c	;volatile
  2170                           
  2171                           ; BSR set to: 15
  2172  000B7A  0012               	return		;funcret
  2173  000B7C                     __end_of_InitCanHardware:
  2174                           	opt stack 0
  2175                           tosu	equ	0xFFF
  2176                           tosh	equ	0xFFE
  2177                           tosl	equ	0xFFD
  2178                           pclath	equ	0xFFA
  2179                           tblptru	equ	0xFF8
  2180                           tblptrh	equ	0xFF7
  2181                           tblptrl	equ	0xFF6
  2182                           tablat	equ	0xFF5
  2183                           prodh	equ	0xFF4
  2184                           prodl	equ	0xFF3
  2185                           postinc0	equ	0xFEE
  2186                           wreg	equ	0xFE8
  2187                           indf2	equ	0xFDF
  2188                           postinc2	equ	0xFDE
  2189                           postdec2	equ	0xFDD
  2190                           fsr2h	equ	0xFDA
  2191                           fsr2l	equ	0xFD9
  2192                           status	equ	0xFD8
  2193                           
  2194 ;; *************** function _ES_DeQueue *****************
  2195 ;; Defined at:
  2196 ;;		line 164 in file "ES_Queue.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;  pBlock          2   33[COMRAM] PTR struct ES_Event_t
  2199 ;;		 -> Queue0(12), 
  2200 ;;  pReturnEvent    2   35[COMRAM] PTR struct ES_Event_t
  2201 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  2202 ;; Auto vars:     Size  Location     Type
  2203 ;;  pThisQueue      2   41[COMRAM] PTR struct .
  2204 ;;		 -> Queue0(12), 
  2205 ;;  NumLeft         1   40[COMRAM] unsigned char 
  2206 ;;  SaveCrit        1   39[COMRAM] unsigned char 
  2207 ;; Return value:  Size  Location     Type
  2208 ;;                  1    wreg      unsigned char 
  2209 ;; Registers used:
  2210 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2211 ;; Tracked objects:
  2212 ;;		On entry : 0/0
  2213 ;;		On exit  : 0/0
  2214 ;;		Unchanged: 0/0
  2215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2216 ;;      Params:         4       0       0       0
  2217 ;;      Locals:         4       0       0       0
  2218 ;;      Temps:          2       0       0       0
  2219 ;;      Totals:        10       0       0       0
  2220 ;;Total ram usage:       10 bytes
  2221 ;; Hardware stack levels used:    1
  2222 ;; Hardware stack levels required when called:    4
  2223 ;; This function calls:
  2224 ;;		___lbmod
  2225 ;;		___wmul
  2226 ;; This function is called by:
  2227 ;;		_ES_Run
  2228 ;;		_ES_RecallEvents
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           	psect	text13
  2233  0003B6                     __ptext13:
  2234                           	opt stack 0
  2235  0003B6                     _ES_DeQueue:
  2236                           	opt stack 25
  2237                           
  2238                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  2239                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  2240                           ;ES_Queue.c: 168: uint8_t NumLeft;
  2241                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  2242                           
  2243                           ; BSR set to: 15
  2244                           ;incstack = 0
  2245  0003B6  C022  F02A         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  2246  0003BA  C023  F02B         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  2247                           
  2248                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  2249  0003BE  EE20 F002          	lfsr	2,2
  2250  0003C2  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2251  0003C4  26D9               	addwf	fsr2l,f,c
  2252  0003C6  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2253  0003C8  22DA               	addwfc	fsr2h,f,c
  2254  0003CA  50DF               	movf	indf2,w,c
  2255  0003CC  B4D8               	btfsc	status,2,c
  2256  0003CE  D05E               	goto	l2341
  2257                           
  2258                           ;ES_Queue.c: 172: {
  2259                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  2260  0003D0  CFF2 F028          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  2261  0003D4  9EF2               	bcf	intcon,7,c	;volatile
  2262                           
  2263                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  2264  0003D6  EE20 F001          	lfsr	2,1
  2265  0003DA  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2266  0003DC  26D9               	addwf	fsr2l,f,c
  2267  0003DE  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2268  0003E0  22DA               	addwfc	fsr2h,f,c
  2269  0003E2  50DF               	movf	indf2,w,c
  2270  0003E4  6E26               	movwf	??_ES_DeQueue& (0+255),c
  2271  0003E6  0E01               	movlw	1
  2272  0003E8  2426               	addwf	??_ES_DeQueue,w,c
  2273  0003EA  6E1C               	movwf	___wmul@multiplier,c
  2274  0003EC  6A1D               	clrf	___wmul@multiplier+1,c
  2275  0003EE  0E00               	movlw	0
  2276  0003F0  221D               	addwfc	___wmul@multiplier+1,f,c
  2277  0003F2  0E00               	movlw	0
  2278  0003F4  6E1F               	movwf	___wmul@multiplicand+1,c
  2279  0003F6  0E03               	movlw	3
  2280  0003F8  6E1E               	movwf	___wmul@multiplicand,c
  2281  0003FA  EC99  F006         	call	___wmul	;wreg free
  2282  0003FE  501C               	movf	?___wmul,w,c
  2283  000400  2422               	addwf	ES_DeQueue@pBlock,w,c
  2284  000402  6ED9               	movwf	fsr2l,c
  2285  000404  501D               	movf	?___wmul+1,w,c
  2286  000406  2023               	addwfc	ES_DeQueue@pBlock+1,w,c
  2287  000408  6EDA               	movwf	fsr2h,c
  2288  00040A  C024  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  2289  00040E  C025  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  2290  000412  CFDE FFE6          	movff	postinc2,postinc1
  2291  000416  CFDE FFE6          	movff	postinc2,postinc1
  2292  00041A  CFDE FFE6          	movff	postinc2,postinc1
  2293                           
  2294                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  2295  00041E  EE20 F001          	lfsr	2,1
  2296  000422  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2297  000424  26D9               	addwf	fsr2l,f,c
  2298  000426  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2299  000428  22DA               	addwfc	fsr2h,f,c
  2300  00042A  2ADF               	incf	indf2,f,c
  2301                           
  2302                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  2303  00042C  C02A  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  2304  000430  C02B  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  2305  000434  EE10 F001          	lfsr	1,1
  2306  000438  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2307  00043A  26E1               	addwf	fsr1l,f,c
  2308  00043C  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2309  00043E  22E2               	addwfc	fsr1h,f,c
  2310  000440  50DE               	movf	postinc2,w,c
  2311  000442  5CE6               	subwf	postinc1,w,c
  2312  000444  A0D8               	btfss	status,0,c
  2313  000446  D016               	goto	l2337
  2314                           
  2315                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  2316  000448  EE20 F001          	lfsr	2,1
  2317  00044C  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2318  00044E  26D9               	addwf	fsr2l,f,c
  2319  000450  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2320  000452  22DA               	addwfc	fsr2h,f,c
  2321  000454  C02A  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  2322  000458  C02B  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  2323  00045C  50E7               	movf	indf1,w,c
  2324  00045E  6E16               	movwf	___lbmod@divisor,c
  2325  000460  EE10 F001          	lfsr	1,1
  2326  000464  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2327  000466  26E1               	addwf	fsr1l,f,c
  2328  000468  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2329  00046A  22E2               	addwfc	fsr1h,f,c
  2330  00046C  50E7               	movf	indf1,w,c
  2331  00046E  EC71  F006         	call	___lbmod
  2332  000472  6EDF               	movwf	indf2,c
  2333  000474                     l2337:
  2334                           
  2335                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  2336  000474  EE20 F002          	lfsr	2,2
  2337  000478  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2338  00047A  26D9               	addwf	fsr2l,f,c
  2339  00047C  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2340  00047E  22DA               	addwfc	fsr2h,f,c
  2341  000480  06DF               	decf	indf2,f,c
  2342  000482  50DF               	movf	indf2,w,c
  2343  000484  6E29               	movwf	ES_DeQueue@NumLeft,c
  2344                           
  2345                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  2346  000486  C028  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  2347                           
  2348                           ;ES_Queue.c: 183: }else {
  2349  00048A  D012               	goto	l2347
  2350  00048C                     l2341:
  2351                           
  2352                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  2353  00048C  C024  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  2354  000490  C025  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  2355  000494  0E00               	movlw	0
  2356  000496  6EDF               	movwf	indf2,c
  2357                           
  2358                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  2359  000498  EE20 F001          	lfsr	2,1
  2360  00049C  5024               	movf	ES_DeQueue@pReturnEvent,w,c
  2361  00049E  26D9               	addwf	fsr2l,f,c
  2362  0004A0  5025               	movf	ES_DeQueue@pReturnEvent+1,w,c
  2363  0004A2  22DA               	addwfc	fsr2h,f,c
  2364  0004A4  0E00               	movlw	0
  2365  0004A6  6EDE               	movwf	postinc2,c
  2366  0004A8  0E00               	movlw	0
  2367  0004AA  6EDD               	movwf	postdec2,c
  2368                           
  2369                           ;ES_Queue.c: 186: NumLeft = 0;
  2370  0004AC  0E00               	movlw	0
  2371  0004AE  6E29               	movwf	ES_DeQueue@NumLeft,c
  2372  0004B0                     l2347:
  2373                           
  2374                           ;ES_Queue.c: 187: }
  2375                           ;ES_Queue.c: 188: return NumLeft;
  2376  0004B0  5029               	movf	ES_DeQueue@NumLeft,w,c
  2377  0004B2  0012               	return	
  2378  0004B4                     __end_of_ES_DeQueue:
  2379                           	opt stack 0
  2380                           tosu	equ	0xFFF
  2381                           tosh	equ	0xFFE
  2382                           tosl	equ	0xFFD
  2383                           pclath	equ	0xFFA
  2384                           tblptru	equ	0xFF8
  2385                           tblptrh	equ	0xFF7
  2386                           tblptrl	equ	0xFF6
  2387                           tablat	equ	0xFF5
  2388                           prodh	equ	0xFF4
  2389                           prodl	equ	0xFF3
  2390                           intcon	equ	0xFF2
  2391                           postinc0	equ	0xFEE
  2392                           wreg	equ	0xFE8
  2393                           indf1	equ	0xFE7
  2394                           postinc1	equ	0xFE6
  2395                           fsr1h	equ	0xFE2
  2396                           fsr1l	equ	0xFE1
  2397                           indf2	equ	0xFDF
  2398                           postinc2	equ	0xFDE
  2399                           postdec2	equ	0xFDD
  2400                           fsr2h	equ	0xFDA
  2401                           fsr2l	equ	0xFD9
  2402                           status	equ	0xFD8
  2403                           
  2404 ;; *************** function ___lbmod *****************
  2405 ;; Defined at:
  2406 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;  dividend        1    wreg     unsigned char 
  2409 ;;  divisor         1   21[COMRAM] unsigned char 
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;  dividend        1   22[COMRAM] unsigned char 
  2412 ;;  rem             1   24[COMRAM] unsigned char 
  2413 ;;  counter         1   23[COMRAM] unsigned char 
  2414 ;; Return value:  Size  Location     Type
  2415 ;;                  1    wreg      unsigned char 
  2416 ;; Registers used:
  2417 ;;		wreg, status,2, status,0
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2423 ;;      Params:         1       0       0       0
  2424 ;;      Locals:         3       0       0       0
  2425 ;;      Temps:          0       0       0       0
  2426 ;;      Totals:         4       0       0       0
  2427 ;;Total ram usage:        4 bytes
  2428 ;; Hardware stack levels used:    1
  2429 ;; Hardware stack levels required when called:    3
  2430 ;; This function calls:
  2431 ;;		Nothing
  2432 ;; This function is called by:
  2433 ;;		_ES_DeQueue
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           	psect	text14
  2438  000CE2                     __ptext14:
  2439                           	opt stack 0
  2440  000CE2                     ___lbmod:
  2441                           	opt stack 25
  2442                           
  2443                           ;incstack = 0
  2444                           ;___lbmod@dividend stored from wreg
  2445  000CE2  6E17               	movwf	___lbmod@dividend,c
  2446  000CE4  0E08               	movlw	8
  2447  000CE6  6E18               	movwf	___lbmod@counter,c
  2448  000CE8  0E00               	movlw	0
  2449  000CEA  6E19               	movwf	___lbmod@rem,c
  2450  000CEC                     l2293:
  2451  000CEC  90D8               	bcf	status,0,c
  2452  000CEE  3417               	rlcf	___lbmod@dividend,w,c
  2453  000CF0  3419               	rlcf	___lbmod@rem,w,c
  2454  000CF2  6E19               	movwf	___lbmod@rem,c
  2455  000CF4  90D8               	bcf	status,0,c
  2456  000CF6  3617               	rlcf	___lbmod@dividend,f,c
  2457  000CF8  5016               	movf	___lbmod@divisor,w,c
  2458  000CFA  5C19               	subwf	___lbmod@rem,w,c
  2459  000CFC  A0D8               	btfss	status,0,c
  2460  000CFE  D002               	goto	l2301
  2461  000D00  5016               	movf	___lbmod@divisor,w,c
  2462  000D02  5E19               	subwf	___lbmod@rem,f,c
  2463  000D04                     l2301:
  2464  000D04  2E18               	decfsz	___lbmod@counter,f,c
  2465  000D06  D7F2               	goto	l2293
  2466  000D08  5019               	movf	___lbmod@rem,w,c
  2467  000D0A  0012               	return	
  2468  000D0C                     __end_of___lbmod:
  2469                           	opt stack 0
  2470                           tosu	equ	0xFFF
  2471                           tosh	equ	0xFFE
  2472                           tosl	equ	0xFFD
  2473                           pclath	equ	0xFFA
  2474                           tblptru	equ	0xFF8
  2475                           tblptrh	equ	0xFF7
  2476                           tblptrl	equ	0xFF6
  2477                           tablat	equ	0xFF5
  2478                           prodh	equ	0xFF4
  2479                           prodl	equ	0xFF3
  2480                           intcon	equ	0xFF2
  2481                           postinc0	equ	0xFEE
  2482                           wreg	equ	0xFE8
  2483                           indf1	equ	0xFE7
  2484                           postinc1	equ	0xFE6
  2485                           fsr1h	equ	0xFE2
  2486                           fsr1l	equ	0xFE1
  2487                           indf2	equ	0xFDF
  2488                           postinc2	equ	0xFDE
  2489                           postdec2	equ	0xFDD
  2490                           fsr2h	equ	0xFDA
  2491                           fsr2l	equ	0xFD9
  2492                           status	equ	0xFD8
  2493                           
  2494 ;; *************** function _ES_CheckUserEvents *****************
  2495 ;; Defined at:
  2496 ;;		line 46 in file "ES_CheckEvents.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;		None
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;  i               1   21[COMRAM] unsigned char 
  2501 ;; Return value:  Size  Location     Type
  2502 ;;                  1    wreg      unsigned char 
  2503 ;; Registers used:
  2504 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2510 ;;      Params:         0       0       0       0
  2511 ;;      Locals:         1       0       0       0
  2512 ;;      Temps:          0       0       0       0
  2513 ;;      Totals:         1       0       0       0
  2514 ;;Total ram usage:        1 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    4
  2517 ;; This function calls:
  2518 ;;		_Check4Keystroke
  2519 ;; This function is called by:
  2520 ;;		_ES_Run
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           	psect	text15
  2525  000BBE                     __ptext15:
  2526                           	opt stack 0
  2527  000BBE                     _ES_CheckUserEvents:
  2528                           	opt stack 25
  2529                           
  2530                           ;ES_CheckEvents.c: 48: uint8_t i;
  2531                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  2532                           
  2533                           ;incstack = 0
  2534  000BBE  0E00               	movlw	0
  2535  000BC0  6E16               	movwf	ES_CheckUserEvents@i,c
  2536  000BC2  5016               	movf	ES_CheckUserEvents@i,w,c
  2537  000BC4  A4D8               	btfss	status,2,c
  2538  000BC6  0012               	return	
  2539                           
  2540                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  2541  000BC8  5016               	movf	ES_CheckUserEvents@i,w,c
  2542  000BCA  0D02               	mullw	2
  2543  000BCC  0E57               	movlw	low _ES_EventList
  2544  000BCE  24F3               	addwf	prodl,w,c
  2545  000BD0  6EF6               	movwf	tblptrl,c
  2546  000BD2  0E03               	movlw	high _ES_EventList
  2547  000BD4  20F4               	addwfc	prodh,w,c
  2548  000BD6  6EF7               	movwf	tblptrh,c
  2549  000BD8                     	if	0	;There are less than 3 active tblptr bytes
  2550  000BD8                     	endif
  2551  000BD8  D801               	call	u1628
  2552  000BDA  D00C               	goto	u1629
  2553  000BDC                     u1628:
  2554  000BDC  0005               	push	
  2555  000BDE  6EFA               	movwf	pclath,c
  2556  000BE0  0009               	tblrd		*+
  2557  000BE2  50F5               	movf	tablat,w,c
  2558  000BE4  6EFD               	movwf	tosl,c
  2559  000BE6  0009               	tblrd		*+
  2560  000BE8  50F5               	movf	tablat,w,c
  2561  000BEA  6EFE               	movwf	tosh,c
  2562  000BEC  50F8               	movf	tblptru,w,c
  2563  000BEE  6EFF               	movwf	tosu,c
  2564  000BF0  50FA               	movf	pclath,w,c
  2565  000BF2  0012               	return		;indir
  2566  000BF4                     u1629:
  2567  000BF4  06E8               	decf	wreg,f,c
  2568  000BF6  B4D8               	btfsc	status,2,c
  2569  000BF8  0012               	return	
  2570                           
  2571                           ;ES_CheckEvents.c: 52: break;
  2572  000BFA  2A16               	incf	ES_CheckUserEvents@i,f,c
  2573  000BFC  D7E2               	goto	L1
  2574  000BFE                     __end_of_ES_CheckUserEvents:
  2575                           	opt stack 0
  2576                           tosu	equ	0xFFF
  2577                           tosh	equ	0xFFE
  2578                           tosl	equ	0xFFD
  2579                           pclath	equ	0xFFA
  2580                           tblptru	equ	0xFF8
  2581                           tblptrh	equ	0xFF7
  2582                           tblptrl	equ	0xFF6
  2583                           tablat	equ	0xFF5
  2584                           prodh	equ	0xFF4
  2585                           prodl	equ	0xFF3
  2586                           intcon	equ	0xFF2
  2587                           postinc0	equ	0xFEE
  2588                           wreg	equ	0xFE8
  2589                           indf1	equ	0xFE7
  2590                           postinc1	equ	0xFE6
  2591                           fsr1h	equ	0xFE2
  2592                           fsr1l	equ	0xFE1
  2593                           indf2	equ	0xFDF
  2594                           postinc2	equ	0xFDE
  2595                           postdec2	equ	0xFDD
  2596                           fsr2h	equ	0xFDA
  2597                           fsr2l	equ	0xFD9
  2598                           status	equ	0xFD8
  2599                           
  2600 ;; *************** function _Check4Keystroke *****************
  2601 ;; Defined at:
  2602 ;;		line 62 in file "EventCheckers.c"
  2603 ;; Parameters:    Size  Location     Type
  2604 ;;		None
  2605 ;; Auto vars:     Size  Location     Type
  2606 ;;		None
  2607 ;; Return value:  Size  Location     Type
  2608 ;;                  1    wreg      unsigned char 
  2609 ;; Registers used:
  2610 ;;		wreg
  2611 ;; Tracked objects:
  2612 ;;		On entry : 0/0
  2613 ;;		On exit  : 0/0
  2614 ;;		Unchanged: 0/0
  2615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2616 ;;      Params:         0       0       0       0
  2617 ;;      Locals:         0       0       0       0
  2618 ;;      Temps:          0       0       0       0
  2619 ;;      Totals:         0       0       0       0
  2620 ;;Total ram usage:        0 bytes
  2621 ;; Hardware stack levels used:    1
  2622 ;; Hardware stack levels required when called:    3
  2623 ;; This function calls:
  2624 ;;		Nothing
  2625 ;; This function is called by:
  2626 ;;		_ES_CheckUserEvents
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630                           	psect	text16
  2631  000DE2                     __ptext16:
  2632                           	opt stack 0
  2633  000DE2                     _Check4Keystroke:
  2634                           	opt stack 25
  2635                           
  2636                           ;EventCheckers.c: 78: return 0;
  2637                           
  2638                           ;incstack = 0
  2639  000DE2  0E00               	movlw	0
  2640  000DE4  0012               	return	
  2641  000DE6                     __end_of_Check4Keystroke:
  2642                           	opt stack 0
  2643                           tosu	equ	0xFFF
  2644                           tosh	equ	0xFFE
  2645                           tosl	equ	0xFFD
  2646                           pclath	equ	0xFFA
  2647                           tblptru	equ	0xFF8
  2648                           tblptrh	equ	0xFF7
  2649                           tblptrl	equ	0xFF6
  2650                           tablat	equ	0xFF5
  2651                           prodh	equ	0xFF4
  2652                           prodl	equ	0xFF3
  2653                           intcon	equ	0xFF2
  2654                           postinc0	equ	0xFEE
  2655                           wreg	equ	0xFE8
  2656                           indf1	equ	0xFE7
  2657                           postinc1	equ	0xFE6
  2658                           fsr1h	equ	0xFE2
  2659                           fsr1l	equ	0xFE1
  2660                           indf2	equ	0xFDF
  2661                           postinc2	equ	0xFDE
  2662                           postdec2	equ	0xFDD
  2663                           fsr2h	equ	0xFDA
  2664                           fsr2l	equ	0xFD9
  2665                           status	equ	0xFD8
  2666                           
  2667 ;; *************** function _ES_Initialize *****************
  2668 ;; Defined at:
  2669 ;;		line 242 in file "ES_Framework.c"
  2670 ;; Parameters:    Size  Location     Type
  2671 ;;  NewRate         2    4[BANK0 ] enum E15419
  2672 ;; Auto vars:     Size  Location     Type
  2673 ;;  i               1    6[BANK0 ] unsigned char 
  2674 ;; Return value:  Size  Location     Type
  2675 ;;                  1    wreg      enum E15490
  2676 ;; Registers used:
  2677 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2678 ;; Tracked objects:
  2679 ;;		On entry : 0/0
  2680 ;;		On exit  : 0/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2683 ;;      Params:         0       2       0       0
  2684 ;;      Locals:         0       1       0       0
  2685 ;;      Temps:          0       0       0       0
  2686 ;;      Totals:         0       3       0       0
  2687 ;;Total ram usage:        3 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:    7
  2690 ;; This function calls:
  2691 ;;		_ES_InitQueue
  2692 ;;		_ES_Timer_Init
  2693 ;;		_InitCan_XmitService
  2694 ;; This function is called by:
  2695 ;;		_main
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           	psect	text17
  2700  0005AC                     __ptext17:
  2701                           	opt stack 0
  2702  0005AC                     _ES_Initialize:
  2703                           	opt stack 23
  2704                           
  2705                           ;ES_Framework.c: 243: uint8_t i;
  2706                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  2707                           
  2708                           ;incstack = 0
  2709  0005AC  C090  F018         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  2710  0005B0  C091  F019         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  2711  0005B4  ECE1  F006         	call	_ES_Timer_Init	;wreg free
  2712                           
  2713                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  2714  0005B8  0E00               	movlw	0
  2715  0005BA  0100               	movlb	0	; () banked
  2716  0005BC  6F92               	movwf	ES_Initialize@i& (0+255),b
  2717  0005BE                     l2411:
  2718                           
  2719                           ; BSR set to: 0
  2720  0005BE  0100               	movlb	0	; () banked
  2721  0005C0  5192               	movf	ES_Initialize@i& (0+255),w,b
  2722  0005C2  0100               	movlb	0	; () banked
  2723  0005C4  A4D8               	btfss	status,2,c
  2724  0005C6  D066               	goto	l2435
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  2728                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  2729                           
  2730                           ; BSR set to: 0
  2731                           
  2732                           ; BSR set to: 0
  2733  0005C8  0100               	movlb	0	; () banked
  2734  0005CA  5192               	movf	ES_Initialize@i& (0+255),w,b
  2735  0005CC  0D04               	mullw	4
  2736  0005CE  0E50               	movlw	low _ServDescList
  2737  0005D0  24F3               	addwf	prodl,w,c
  2738  0005D2  6EF6               	movwf	tblptrl,c
  2739  0005D4  0E03               	movlw	high _ServDescList
  2740  0005D6  20F4               	addwfc	prodh,w,c
  2741  0005D8  6EF7               	movwf	tblptrh,c
  2742  0005DA                     	if	0	;There are less than 3 active tblptr bytes
  2743  0005DA                     	endif
  2744  0005DA  0009               	tblrd		*+
  2745  0005DC  50F5               	movf	tablat,w,c
  2746  0005DE  0009               	tblrd		*+
  2747  0005E0  10F5               	iorwf	tablat,w,c
  2748  0005E2  B4D8               	btfsc	status,2,c
  2749  0005E4  D013               	goto	l2419
  2750                           
  2751                           ; BSR set to: 0
  2752  0005E6  0100               	movlb	0	; () banked
  2753  0005E8  5192               	movf	ES_Initialize@i& (0+255),w,b
  2754  0005EA  0D04               	mullw	4
  2755  0005EC  0E02               	movlw	2
  2756  0005EE  26F3               	addwf	prodl,f,c
  2757  0005F0  0E00               	movlw	0
  2758  0005F2  22F4               	addwfc	prodh,f,c
  2759  0005F4  0E50               	movlw	low _ServDescList
  2760  0005F6  24F3               	addwf	prodl,w,c
  2761  0005F8  6EF6               	movwf	tblptrl,c
  2762  0005FA  0E03               	movlw	high _ServDescList
  2763  0005FC  20F4               	addwfc	prodh,w,c
  2764  0005FE  6EF7               	movwf	tblptrh,c
  2765  000600                     	if	0	;There are less than 3 active tblptr bytes
  2766  000600                     	endif
  2767  000600  0009               	tblrd		*+
  2768  000602  50F5               	movf	tablat,w,c
  2769  000604  0009               	tblrd		*+
  2770  000606  10F5               	iorwf	tablat,w,c
  2771  000608  A4D8               	btfss	status,2,c
  2772  00060A  D002               	goto	l2423
  2773  00060C                     l2419:
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;ES_Framework.c: 249: return FailedPointer;
  2777  00060C  0E03               	movlw	3
  2778                           
  2779                           ; BSR set to: 0
  2780  00060E  0012               	return	
  2781  000610                     l2423:
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  2785  000610  0100               	movlb	0	; () banked
  2786  000612  5192               	movf	ES_Initialize@i& (0+255),w,b
  2787  000614  0D03               	mullw	3
  2788  000616  0E54               	movlw	low _EventQueues
  2789  000618  24F3               	addwf	prodl,w,c
  2790  00061A  6EF6               	movwf	tblptrl,c
  2791  00061C  0E03               	movlw	high _EventQueues
  2792  00061E  20F4               	addwfc	prodh,w,c
  2793  000620  6EF7               	movwf	tblptrh,c
  2794  000622                     	if	0	;There are less than 3 active tblptr bytes
  2795  000622                     	endif
  2796  000622  0009               	tblrd		*+
  2797  000624  CFF5 F016          	movff	tablat,ES_InitQueue@pBlock
  2798  000628  000A               	tblrd		*-
  2799  00062A  CFF5 F017          	movff	tablat,ES_InitQueue@pBlock+1
  2800  00062E  0100               	movlb	0	; () banked
  2801  000630  5192               	movf	ES_Initialize@i& (0+255),w,b
  2802  000632  0D03               	mullw	3
  2803  000634  0E02               	movlw	2
  2804  000636  26F3               	addwf	prodl,f,c
  2805  000638  0E00               	movlw	0
  2806  00063A  22F4               	addwfc	prodh,f,c
  2807  00063C  0E54               	movlw	low _EventQueues
  2808  00063E  24F3               	addwf	prodl,w,c
  2809  000640  6EF6               	movwf	tblptrl,c
  2810  000642  0E03               	movlw	high _EventQueues
  2811  000644  20F4               	addwfc	prodh,w,c
  2812  000646  6EF7               	movwf	tblptrh,c
  2813  000648                     	if	0	;There are less than 3 active tblptr bytes
  2814  000648                     	endif
  2815  000648  0008               	tblrd		*
  2816  00064A  CFF5 F018          	movff	tablat,ES_InitQueue@BlockSize
  2817  00064E  ECFF  F005         	call	_ES_InitQueue	;wreg free
  2818                           
  2819                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  2820  000652  0100               	movlb	0	; () banked
  2821  000654  5192               	movf	ES_Initialize@i& (0+255),w,b
  2822  000656  0D04               	mullw	4
  2823  000658  0E50               	movlw	low _ServDescList
  2824  00065A  24F3               	addwf	prodl,w,c
  2825  00065C  6EF6               	movwf	tblptrl,c
  2826  00065E  0E03               	movlw	high _ServDescList
  2827  000660  20F4               	addwfc	prodh,w,c
  2828  000662  6EF7               	movwf	tblptrh,c
  2829  000664                     	if	0	;There are less than 3 active tblptr bytes
  2830  000664                     	endif
  2831  000664  D801               	call	u1758
  2832  000666  D00E               	goto	u1759
  2833  000668                     u1758:
  2834  000668  0005               	push	
  2835  00066A  6EFA               	movwf	pclath,c
  2836  00066C  0009               	tblrd		*+
  2837  00066E  50F5               	movf	tablat,w,c
  2838  000670  6EFD               	movwf	tosl,c
  2839  000672  0009               	tblrd		*+
  2840  000674  50F5               	movf	tablat,w,c
  2841  000676  6EFE               	movwf	tosh,c
  2842  000678  50F8               	movf	tblptru,w,c
  2843  00067A  6EFF               	movwf	tosu,c
  2844  00067C  50FA               	movf	pclath,w,c
  2845  00067E  0100               	movlb	0	; () banked
  2846  000680  5192               	movf	ES_Initialize@i& (0+255),w,b
  2847  000682  0012               	return		;indir
  2848  000684                     u1759:
  2849  000684  06E8               	decf	wreg,f,c
  2850  000686  B4D8               	btfsc	status,2,c
  2851  000688  D002               	goto	l2431
  2852                           
  2853                           ;ES_Framework.c: 254: return FailedInit;
  2854  00068A  0E05               	movlw	5
  2855  00068C  0012               	return	
  2856  00068E                     l2431:
  2857  00068E  0100               	movlb	0	; () banked
  2858  000690  2B92               	incf	ES_Initialize@i& (0+255),f,b
  2859  000692  D795               	goto	l2411
  2860  000694                     l2435:
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;ES_Framework.c: 255: }
  2864                           ;ES_Framework.c: 256: return Success;
  2865  000694  0E00               	movlw	0
  2866  000696  0012               	return	
  2867  000698                     __end_of_ES_Initialize:
  2868                           	opt stack 0
  2869                           tosu	equ	0xFFF
  2870                           tosh	equ	0xFFE
  2871                           tosl	equ	0xFFD
  2872                           pclath	equ	0xFFA
  2873                           tblptru	equ	0xFF8
  2874                           tblptrh	equ	0xFF7
  2875                           tblptrl	equ	0xFF6
  2876                           tablat	equ	0xFF5
  2877                           prodh	equ	0xFF4
  2878                           prodl	equ	0xFF3
  2879                           intcon	equ	0xFF2
  2880                           postinc0	equ	0xFEE
  2881                           wreg	equ	0xFE8
  2882                           indf1	equ	0xFE7
  2883                           postinc1	equ	0xFE6
  2884                           fsr1h	equ	0xFE2
  2885                           fsr1l	equ	0xFE1
  2886                           indf2	equ	0xFDF
  2887                           postinc2	equ	0xFDE
  2888                           postdec2	equ	0xFDD
  2889                           fsr2h	equ	0xFDA
  2890                           fsr2l	equ	0xFD9
  2891                           status	equ	0xFD8
  2892                           
  2893 ;; *************** function _InitCan_XmitService *****************
  2894 ;; Defined at:
  2895 ;;		line 78 in file "Can_XmitService.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;  Priority        1    wreg     unsigned char 
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;  Priority        1    3[BANK0 ] unsigned char 
  2900 ;;  ThisEvent       3    0[BANK0 ] struct ES_Event_t
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      unsigned char 
  2903 ;; Registers used:
  2904 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2910 ;;      Params:         0       0       0       0
  2911 ;;      Locals:         0       4       0       0
  2912 ;;      Temps:          0       0       0       0
  2913 ;;      Totals:         0       4       0       0
  2914 ;;Total ram usage:        4 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    6
  2917 ;; This function calls:
  2918 ;;		_ES_PostToService
  2919 ;; This function is called by:
  2920 ;;		_ES_Initialize
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text18
  2925  000C34                     __ptext18:
  2926                           	opt stack 0
  2927  000C34                     _InitCan_XmitService:
  2928                           	opt stack 23
  2929                           
  2930                           ;incstack = 0
  2931                           ;InitCan_XmitService@Priority stored from wreg
  2932  000C34  0100               	movlb	0	; () banked
  2933  000C36  6F8F               	movwf	InitCan_XmitService@Priority& (0+255),b
  2934                           
  2935                           ;Can_XmitService.c: 80: ES_Event ThisEvent;
  2936                           ;Can_XmitService.c: 82: MyPriority = Priority;
  2937  000C38  C08F  F045         	movff	InitCan_XmitService@Priority,_MyPriority
  2938                           
  2939                           ;Can_XmitService.c: 85: ThisEvent.EventType = ES_INIT;
  2940  000C3C  0E02               	movlw	2
  2941  000C3E  0100               	movlb	0	; () banked
  2942  000C40  6F8C               	movwf	InitCan_XmitService@ThisEvent& (0+255),b
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;Can_XmitService.c: 86: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  2946  000C42  C08C  F02D         	movff	InitCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  2947  000C46  C08D  F02E         	movff	InitCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  2948  000C4A  C08E  F02F         	movff	InitCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  2949  000C4E  5045               	movf	_MyPriority,w,c
  2950  000C50  EC5C  F005         	call	_ES_PostToService
  2951  000C54  06E8               	decf	wreg,f,c
  2952  000C56  A4D8               	btfss	status,2,c
  2953  000C58  D002               	goto	l2387
  2954                           
  2955                           ;Can_XmitService.c: 87: {
  2956                           ;Can_XmitService.c: 88: return 1;
  2957  000C5A  0E01               	movlw	1
  2958                           
  2959                           ;Can_XmitService.c: 89: }else
  2960  000C5C  0012               	return	
  2961  000C5E                     l2387:
  2962                           
  2963                           ;Can_XmitService.c: 90: {
  2964                           ;Can_XmitService.c: 91: return 0;
  2965  000C5E  0E00               	movlw	0
  2966  000C60  0012               	return	
  2967  000C62                     __end_of_InitCan_XmitService:
  2968                           	opt stack 0
  2969                           tosu	equ	0xFFF
  2970                           tosh	equ	0xFFE
  2971                           tosl	equ	0xFFD
  2972                           pclath	equ	0xFFA
  2973                           tblptru	equ	0xFF8
  2974                           tblptrh	equ	0xFF7
  2975                           tblptrl	equ	0xFF6
  2976                           tablat	equ	0xFF5
  2977                           prodh	equ	0xFF4
  2978                           prodl	equ	0xFF3
  2979                           intcon	equ	0xFF2
  2980                           postinc0	equ	0xFEE
  2981                           wreg	equ	0xFE8
  2982                           indf1	equ	0xFE7
  2983                           postinc1	equ	0xFE6
  2984                           fsr1h	equ	0xFE2
  2985                           fsr1l	equ	0xFE1
  2986                           indf2	equ	0xFDF
  2987                           postinc2	equ	0xFDE
  2988                           postdec2	equ	0xFDD
  2989                           fsr2h	equ	0xFDA
  2990                           fsr2l	equ	0xFD9
  2991                           status	equ	0xFD8
  2992                           
  2993 ;; *************** function _ES_PostToService *****************
  2994 ;; Defined at:
  2995 ;;		line 351 in file "ES_Framework.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;  WhichService    1    wreg     unsigned char 
  2998 ;;  TheEvent        3   44[COMRAM] struct ES_Event_t
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;  WhichService    1   49[COMRAM] unsigned char 
  3001 ;; Return value:  Size  Location     Type
  3002 ;;                  1    wreg      unsigned char 
  3003 ;; Registers used:
  3004 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3005 ;; Tracked objects:
  3006 ;;		On entry : 0/0
  3007 ;;		On exit  : 0/0
  3008 ;;		Unchanged: 0/0
  3009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3010 ;;      Params:         3       0       0       0
  3011 ;;      Locals:         1       0       0       0
  3012 ;;      Temps:          2       0       0       0
  3013 ;;      Totals:         6       0       0       0
  3014 ;;Total ram usage:        6 bytes
  3015 ;; Hardware stack levels used:    1
  3016 ;; Hardware stack levels required when called:    5
  3017 ;; This function calls:
  3018 ;;		_ES_EnQueueFIFO
  3019 ;; This function is called by:
  3020 ;;		_InitCan_XmitService
  3021 ;;		_PostCan_XmitService
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text19
  3026  000AB8                     __ptext19:
  3027                           	opt stack 0
  3028  000AB8                     _ES_PostToService:
  3029                           	opt stack 21
  3030                           
  3031                           ;incstack = 0
  3032                           ;ES_PostToService@WhichService stored from wreg
  3033  000AB8  6E32               	movwf	ES_PostToService@WhichService,c
  3034                           
  3035                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  3036                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  3037                           ;ES_Framework.c: 354: 1 )){
  3038  000ABA  5032               	movf	ES_PostToService@WhichService,w,c
  3039  000ABC  A4D8               	btfss	status,2,c
  3040  000ABE  D02D               	goto	l2183
  3041  000AC0  5032               	movf	ES_PostToService@WhichService,w,c
  3042  000AC2  0D03               	mullw	3
  3043  000AC4  0E54               	movlw	low _EventQueues
  3044  000AC6  24F3               	addwf	prodl,w,c
  3045  000AC8  6EF6               	movwf	tblptrl,c
  3046  000ACA  0E03               	movlw	high _EventQueues
  3047  000ACC  20F4               	addwfc	prodh,w,c
  3048  000ACE  6EF7               	movwf	tblptrh,c
  3049  000AD0                     	if	0	;There are less than 3 active tblptr bytes
  3050  000AD0                     	endif
  3051  000AD0  0009               	tblrd		*+
  3052  000AD2  CFF5 F022          	movff	tablat,ES_EnQueueFIFO@pBlock
  3053  000AD6  000A               	tblrd		*-
  3054  000AD8  CFF5 F023          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  3055  000ADC  C02D  F024         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  3056  000AE0  C02E  F025         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  3057  000AE4  C02F  F026         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  3058  000AE8  EC1C  F004         	call	_ES_EnQueueFIFO	;wreg free
  3059  000AEC  06E8               	decf	wreg,f,c
  3060  000AEE  A4D8               	btfss	status,2,c
  3061  000AF0  D014               	goto	l2183
  3062                           
  3063                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  3064  000AF2  5032               	movf	ES_PostToService@WhichService,w,c
  3065  000AF4  0D02               	mullw	2
  3066  000AF6  0E01               	movlw	low _BitNum2SetMask
  3067  000AF8  24F3               	addwf	prodl,w,c
  3068  000AFA  6EF6               	movwf	tblptrl,c
  3069  000AFC  0E03               	movlw	high _BitNum2SetMask
  3070  000AFE  20F4               	addwfc	prodh,w,c
  3071  000B00  6EF7               	movwf	tblptrh,c
  3072  000B02                     	if	0	;There are less than 3 active tblptr bytes
  3073  000B02                     	endif
  3074  000B02  0009               	tblrd		*+
  3075  000B04  CFF5 F030          	movff	tablat,??_ES_PostToService
  3076  000B08  0009               	tblrd		*+
  3077  000B0A  CFF5 F031          	movff	tablat,??_ES_PostToService+1
  3078  000B0E  5030               	movf	??_ES_PostToService,w,c
  3079  000B10  123C               	iorwf	_Ready,f,c
  3080  000B12  5031               	movf	??_ES_PostToService+1,w,c
  3081  000B14  123D               	iorwf	_Ready+1,f,c
  3082                           
  3083                           ;ES_Framework.c: 356: return 1;
  3084  000B16  0E01               	movlw	1
  3085                           
  3086                           ;ES_Framework.c: 357: } else
  3087  000B18  0012               	return	
  3088  000B1A                     l2183:
  3089                           
  3090                           ;ES_Framework.c: 358: return 0;
  3091  000B1A  0E00               	movlw	0
  3092  000B1C  0012               	return	
  3093  000B1E                     __end_of_ES_PostToService:
  3094                           	opt stack 0
  3095                           tosu	equ	0xFFF
  3096                           tosh	equ	0xFFE
  3097                           tosl	equ	0xFFD
  3098                           pclath	equ	0xFFA
  3099                           tblptru	equ	0xFF8
  3100                           tblptrh	equ	0xFF7
  3101                           tblptrl	equ	0xFF6
  3102                           tablat	equ	0xFF5
  3103                           prodh	equ	0xFF4
  3104                           prodl	equ	0xFF3
  3105                           intcon	equ	0xFF2
  3106                           postinc0	equ	0xFEE
  3107                           wreg	equ	0xFE8
  3108                           indf1	equ	0xFE7
  3109                           postinc1	equ	0xFE6
  3110                           fsr1h	equ	0xFE2
  3111                           fsr1l	equ	0xFE1
  3112                           indf2	equ	0xFDF
  3113                           postinc2	equ	0xFDE
  3114                           postdec2	equ	0xFDD
  3115                           fsr2h	equ	0xFDA
  3116                           fsr2l	equ	0xFD9
  3117                           status	equ	0xFD8
  3118                           
  3119 ;; *************** function _ES_EnQueueFIFO *****************
  3120 ;; Defined at:
  3121 ;;		line 85 in file "ES_Queue.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  pBlock          2   33[COMRAM] PTR struct ES_Event_t
  3124 ;;		 -> Queue0(12), 
  3125 ;;  Event2Add       3   35[COMRAM] struct ES_Event_t
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;  pThisQueue      2   42[COMRAM] PTR struct .
  3128 ;;		 -> Queue0(12), 
  3129 ;;  SaveCrit        1   41[COMRAM] unsigned char 
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  1    wreg      unsigned char 
  3132 ;; Registers used:
  3133 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3139 ;;      Params:         5       0       0       0
  3140 ;;      Locals:         3       0       0       0
  3141 ;;      Temps:          3       0       0       0
  3142 ;;      Totals:        11       0       0       0
  3143 ;;Total ram usage:       11 bytes
  3144 ;; Hardware stack levels used:    1
  3145 ;; Hardware stack levels required when called:    4
  3146 ;; This function calls:
  3147 ;;		___awmod
  3148 ;;		___wmul
  3149 ;; This function is called by:
  3150 ;;		_ES_PostToService
  3151 ;;		_ES_PostAll
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           	psect	text20
  3156  000838                     __ptext20:
  3157                           	opt stack 0
  3158  000838                     _ES_EnQueueFIFO:
  3159                           	opt stack 21
  3160                           
  3161                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  3162                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  3163                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  3164                           
  3165                           ;incstack = 0
  3166  000838  C022  F02B         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  3167  00083C  C023  F02C         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  3168                           
  3169                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  3170  000840  C02B  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3171  000844  C02C  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3172  000848  EE10 F002          	lfsr	1,2
  3173  00084C  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3174  00084E  26E1               	addwf	fsr1l,f,c
  3175  000850  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3176  000852  22E2               	addwfc	fsr1h,f,c
  3177  000854  50DE               	movf	postinc2,w,c
  3178  000856  5CE6               	subwf	postinc1,w,c
  3179  000858  B0D8               	btfsc	status,0,c
  3180  00085A  D046               	goto	l2167
  3181                           
  3182                           ;ES_Queue.c: 92: {
  3183                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  3184  00085C  CFF2 F02A          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  3185  000860  9EF2               	bcf	intcon,7,c	;volatile
  3186                           
  3187                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  3188                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  3189  000862  C02B  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3190  000866  C02C  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3191  00086A  50DF               	movf	indf2,w,c
  3192  00086C  6E27               	movwf	??_ES_EnQueueFIFO& (0+255),c
  3193  00086E  5027               	movf	??_ES_EnQueueFIFO,w,c
  3194  000870  6E18               	movwf	___awmod@divisor,c
  3195  000872  6A19               	clrf	___awmod@divisor+1,c
  3196  000874  EE20 F002          	lfsr	2,2
  3197  000878  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3198  00087A  26D9               	addwf	fsr2l,f,c
  3199  00087C  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3200  00087E  22DA               	addwfc	fsr2h,f,c
  3201  000880  50DF               	movf	indf2,w,c
  3202  000882  6E28               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),c
  3203  000884  EE20 F001          	lfsr	2,1
  3204  000888  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3205  00088A  26D9               	addwf	fsr2l,f,c
  3206  00088C  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3207  00088E  22DA               	addwfc	fsr2h,f,c
  3208  000890  50DF               	movf	indf2,w,c
  3209  000892  6E29               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),c
  3210  000894  5029               	movf	??_ES_EnQueueFIFO+2,w,c
  3211  000896  2428               	addwf	??_ES_EnQueueFIFO+1,w,c
  3212  000898  6E16               	movwf	___awmod@dividend,c
  3213  00089A  6A17               	clrf	___awmod@dividend+1,c
  3214  00089C  3617               	rlcf	___awmod@dividend+1,f,c
  3215  00089E  ECEF  F004         	call	___awmod	;wreg free
  3216  0008A2  0E01               	movlw	1
  3217  0008A4  2416               	addwf	?___awmod,w,c
  3218  0008A6  6E1C               	movwf	___wmul@multiplier,c
  3219  0008A8  0E00               	movlw	0
  3220  0008AA  2017               	addwfc	?___awmod+1,w,c
  3221  0008AC  6E1D               	movwf	___wmul@multiplier+1,c
  3222  0008AE  0E00               	movlw	0
  3223  0008B0  6E1F               	movwf	___wmul@multiplicand+1,c
  3224  0008B2  0E03               	movlw	3
  3225  0008B4  6E1E               	movwf	___wmul@multiplicand,c
  3226  0008B6  EC99  F006         	call	___wmul	;wreg free
  3227  0008BA  501C               	movf	?___wmul,w,c
  3228  0008BC  2422               	addwf	ES_EnQueueFIFO@pBlock,w,c
  3229  0008BE  6ED9               	movwf	fsr2l,c
  3230  0008C0  501D               	movf	?___wmul+1,w,c
  3231  0008C2  2023               	addwfc	ES_EnQueueFIFO@pBlock+1,w,c
  3232  0008C4  6EDA               	movwf	fsr2h,c
  3233  0008C6  C024  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  3234  0008CA  C025  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  3235  0008CE  C026  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  3236                           
  3237                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  3238  0008D2  EE20 F002          	lfsr	2,2
  3239  0008D6  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3240  0008D8  26D9               	addwf	fsr2l,f,c
  3241  0008DA  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3242  0008DC  22DA               	addwfc	fsr2h,f,c
  3243  0008DE  2ADF               	incf	indf2,f,c
  3244                           
  3245                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  3246  0008E0  C02A  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  3247                           
  3248                           ;ES_Queue.c: 101: return(1);
  3249  0008E4  0E01               	movlw	1
  3250                           
  3251                           ;ES_Queue.c: 102: }else
  3252  0008E6  0012               	return	
  3253  0008E8                     l2167:
  3254                           
  3255                           ;ES_Queue.c: 103: return(0);
  3256  0008E8  0E00               	movlw	0
  3257  0008EA  0012               	return	
  3258  0008EC                     __end_of_ES_EnQueueFIFO:
  3259                           	opt stack 0
  3260                           tosu	equ	0xFFF
  3261                           tosh	equ	0xFFE
  3262                           tosl	equ	0xFFD
  3263                           pclath	equ	0xFFA
  3264                           tblptru	equ	0xFF8
  3265                           tblptrh	equ	0xFF7
  3266                           tblptrl	equ	0xFF6
  3267                           tablat	equ	0xFF5
  3268                           prodh	equ	0xFF4
  3269                           prodl	equ	0xFF3
  3270                           intcon	equ	0xFF2
  3271                           postinc0	equ	0xFEE
  3272                           wreg	equ	0xFE8
  3273                           indf1	equ	0xFE7
  3274                           postinc1	equ	0xFE6
  3275                           fsr1h	equ	0xFE2
  3276                           fsr1l	equ	0xFE1
  3277                           indf2	equ	0xFDF
  3278                           postinc2	equ	0xFDE
  3279                           postdec2	equ	0xFDD
  3280                           fsr2h	equ	0xFDA
  3281                           fsr2l	equ	0xFD9
  3282                           status	equ	0xFD8
  3283                           
  3284 ;; *************** function ___wmul *****************
  3285 ;; Defined at:
  3286 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;  multiplier      2   27[COMRAM] unsigned int 
  3289 ;;  multiplicand    2   29[COMRAM] unsigned int 
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;  product         2   31[COMRAM] unsigned int 
  3292 ;; Return value:  Size  Location     Type
  3293 ;;                  2   27[COMRAM] unsigned int 
  3294 ;; Registers used:
  3295 ;;		wreg, status,2, status,0, prodl, prodh
  3296 ;; Tracked objects:
  3297 ;;		On entry : 0/0
  3298 ;;		On exit  : 0/0
  3299 ;;		Unchanged: 0/0
  3300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3301 ;;      Params:         4       0       0       0
  3302 ;;      Locals:         2       0       0       0
  3303 ;;      Temps:          0       0       0       0
  3304 ;;      Totals:         6       0       0       0
  3305 ;;Total ram usage:        6 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; Hardware stack levels required when called:    3
  3308 ;; This function calls:
  3309 ;;		Nothing
  3310 ;; This function is called by:
  3311 ;;		_ES_EnQueueFIFO
  3312 ;;		_ES_DeQueue
  3313 ;;		_ES_EnQueueLIFO
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           	psect	text21
  3318  000D32                     __ptext21:
  3319                           	opt stack 0
  3320  000D32                     ___wmul:
  3321                           	opt stack 21
  3322                           
  3323                           ;incstack = 0
  3324  000D32  501C               	movf	___wmul@multiplier,w,c
  3325  000D34  021E               	mulwf	___wmul@multiplicand,c
  3326  000D36  CFF3 F020          	movff	prodl,___wmul@product
  3327  000D3A  CFF4 F021          	movff	prodh,___wmul@product+1
  3328  000D3E  501C               	movf	___wmul@multiplier,w,c
  3329  000D40  021F               	mulwf	___wmul@multiplicand+1,c
  3330  000D42  50F3               	movf	prodl,w,c
  3331  000D44  2621               	addwf	___wmul@product+1,f,c
  3332  000D46  501D               	movf	___wmul@multiplier+1,w,c
  3333  000D48  021E               	mulwf	___wmul@multiplicand,c
  3334  000D4A  50F3               	movf	prodl,w,c
  3335  000D4C  2621               	addwf	___wmul@product+1,f,c
  3336  000D4E  C020  F01C         	movff	___wmul@product,?___wmul
  3337  000D52  C021  F01D         	movff	___wmul@product+1,?___wmul+1
  3338  000D56  0012               	return	
  3339  000D58                     __end_of___wmul:
  3340                           	opt stack 0
  3341                           tosu	equ	0xFFF
  3342                           tosh	equ	0xFFE
  3343                           tosl	equ	0xFFD
  3344                           pclath	equ	0xFFA
  3345                           tblptru	equ	0xFF8
  3346                           tblptrh	equ	0xFF7
  3347                           tblptrl	equ	0xFF6
  3348                           tablat	equ	0xFF5
  3349                           prodh	equ	0xFF4
  3350                           prodl	equ	0xFF3
  3351                           intcon	equ	0xFF2
  3352                           postinc0	equ	0xFEE
  3353                           wreg	equ	0xFE8
  3354                           indf1	equ	0xFE7
  3355                           postinc1	equ	0xFE6
  3356                           fsr1h	equ	0xFE2
  3357                           fsr1l	equ	0xFE1
  3358                           indf2	equ	0xFDF
  3359                           postinc2	equ	0xFDE
  3360                           postdec2	equ	0xFDD
  3361                           fsr2h	equ	0xFDA
  3362                           fsr2l	equ	0xFD9
  3363                           status	equ	0xFD8
  3364                           
  3365 ;; *************** function ___awmod *****************
  3366 ;; Defined at:
  3367 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;  dividend        2   21[COMRAM] int 
  3370 ;;  divisor         2   23[COMRAM] int 
  3371 ;; Auto vars:     Size  Location     Type
  3372 ;;  sign            1   26[COMRAM] unsigned char 
  3373 ;;  counter         1   25[COMRAM] unsigned char 
  3374 ;; Return value:  Size  Location     Type
  3375 ;;                  2   21[COMRAM] int 
  3376 ;; Registers used:
  3377 ;;		wreg, status,2, status,0
  3378 ;; Tracked objects:
  3379 ;;		On entry : 0/0
  3380 ;;		On exit  : 0/0
  3381 ;;		Unchanged: 0/0
  3382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3383 ;;      Params:         4       0       0       0
  3384 ;;      Locals:         2       0       0       0
  3385 ;;      Temps:          0       0       0       0
  3386 ;;      Totals:         6       0       0       0
  3387 ;;Total ram usage:        6 bytes
  3388 ;; Hardware stack levels used:    1
  3389 ;; Hardware stack levels required when called:    3
  3390 ;; This function calls:
  3391 ;;		Nothing
  3392 ;; This function is called by:
  3393 ;;		_ES_EnQueueFIFO
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397                           	psect	text22
  3398  0009DE                     __ptext22:
  3399                           	opt stack 0
  3400  0009DE                     ___awmod:
  3401                           	opt stack 21
  3402                           
  3403                           ;incstack = 0
  3404  0009DE  0E00               	movlw	0
  3405  0009E0  6E1B               	movwf	___awmod@sign,c
  3406  0009E2  AE17               	btfss	___awmod@dividend+1,7,c
  3407  0009E4  D006               	goto	l2123
  3408  0009E6  6C16               	negf	___awmod@dividend,c
  3409  0009E8  1E17               	comf	___awmod@dividend+1,f,c
  3410  0009EA  B0D8               	btfsc	status,0,c
  3411  0009EC  2A17               	incf	___awmod@dividend+1,f,c
  3412  0009EE  0E01               	movlw	1
  3413  0009F0  6E1B               	movwf	___awmod@sign,c
  3414  0009F2                     l2123:
  3415  0009F2  AE19               	btfss	___awmod@divisor+1,7,c
  3416  0009F4  D004               	goto	l2127
  3417  0009F6  6C18               	negf	___awmod@divisor,c
  3418  0009F8  1E19               	comf	___awmod@divisor+1,f,c
  3419  0009FA  B0D8               	btfsc	status,0,c
  3420  0009FC  2A19               	incf	___awmod@divisor+1,f,c
  3421  0009FE                     l2127:
  3422  0009FE  5018               	movf	___awmod@divisor,w,c
  3423  000A00  1019               	iorwf	___awmod@divisor+1,w,c
  3424  000A02  B4D8               	btfsc	status,2,c
  3425  000A04  D018               	goto	l2143
  3426  000A06  0E01               	movlw	1
  3427  000A08  6E1A               	movwf	___awmod@counter,c
  3428  000A0A  D004               	goto	l2133
  3429  000A0C                     l2131:
  3430  000A0C  90D8               	bcf	status,0,c
  3431  000A0E  3618               	rlcf	___awmod@divisor,f,c
  3432  000A10  3619               	rlcf	___awmod@divisor+1,f,c
  3433  000A12  2A1A               	incf	___awmod@counter,f,c
  3434  000A14                     l2133:
  3435  000A14  AE19               	btfss	___awmod@divisor+1,7,c
  3436  000A16  D7FA               	goto	l2131
  3437  000A18                     l2135:
  3438  000A18  5018               	movf	___awmod@divisor,w,c
  3439  000A1A  5C16               	subwf	___awmod@dividend,w,c
  3440  000A1C  5019               	movf	___awmod@divisor+1,w,c
  3441  000A1E  5817               	subwfb	___awmod@dividend+1,w,c
  3442  000A20  A0D8               	btfss	status,0,c
  3443  000A22  D004               	goto	l2139
  3444  000A24  5018               	movf	___awmod@divisor,w,c
  3445  000A26  5E16               	subwf	___awmod@dividend,f,c
  3446  000A28  5019               	movf	___awmod@divisor+1,w,c
  3447  000A2A  5A17               	subwfb	___awmod@dividend+1,f,c
  3448  000A2C                     l2139:
  3449  000A2C  90D8               	bcf	status,0,c
  3450  000A2E  3219               	rrcf	___awmod@divisor+1,f,c
  3451  000A30  3218               	rrcf	___awmod@divisor,f,c
  3452  000A32  2E1A               	decfsz	___awmod@counter,f,c
  3453  000A34  D7F1               	goto	l2135
  3454  000A36                     l2143:
  3455  000A36  501B               	movf	___awmod@sign,w,c
  3456  000A38  B4D8               	btfsc	status,2,c
  3457  000A3A  D004               	goto	l2147
  3458  000A3C  6C16               	negf	___awmod@dividend,c
  3459  000A3E  1E17               	comf	___awmod@dividend+1,f,c
  3460  000A40  B0D8               	btfsc	status,0,c
  3461  000A42  2A17               	incf	___awmod@dividend+1,f,c
  3462  000A44                     l2147:
  3463  000A44  C016  F016         	movff	___awmod@dividend,?___awmod
  3464  000A48  C017  F017         	movff	___awmod@dividend+1,?___awmod+1
  3465  000A4C  0012               	return	
  3466  000A4E                     __end_of___awmod:
  3467                           	opt stack 0
  3468                           tosu	equ	0xFFF
  3469                           tosh	equ	0xFFE
  3470                           tosl	equ	0xFFD
  3471                           pclath	equ	0xFFA
  3472                           tblptru	equ	0xFF8
  3473                           tblptrh	equ	0xFF7
  3474                           tblptrl	equ	0xFF6
  3475                           tablat	equ	0xFF5
  3476                           prodh	equ	0xFF4
  3477                           prodl	equ	0xFF3
  3478                           intcon	equ	0xFF2
  3479                           postinc0	equ	0xFEE
  3480                           wreg	equ	0xFE8
  3481                           indf1	equ	0xFE7
  3482                           postinc1	equ	0xFE6
  3483                           fsr1h	equ	0xFE2
  3484                           fsr1l	equ	0xFE1
  3485                           indf2	equ	0xFDF
  3486                           postinc2	equ	0xFDE
  3487                           postdec2	equ	0xFDD
  3488                           fsr2h	equ	0xFDA
  3489                           fsr2l	equ	0xFD9
  3490                           status	equ	0xFD8
  3491                           
  3492 ;; *************** function _ES_Timer_Init *****************
  3493 ;; Defined at:
  3494 ;;		line 130 in file "ES_Timers.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;  Rate            2   23[COMRAM] enum E15419
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;		None
  3499 ;; Return value:  Size  Location     Type
  3500 ;;                  1    wreg      void 
  3501 ;; Registers used:
  3502 ;;		wreg, status,2, cstack
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3508 ;;      Params:         2       0       0       0
  3509 ;;      Locals:         0       0       0       0
  3510 ;;      Temps:          0       0       0       0
  3511 ;;      Totals:         2       0       0       0
  3512 ;;Total ram usage:        2 bytes
  3513 ;; Hardware stack levels used:    1
  3514 ;; Hardware stack levels required when called:    4
  3515 ;; This function calls:
  3516 ;;		__HW_Timer_Init
  3517 ;; This function is called by:
  3518 ;;		_ES_Initialize
  3519 ;; This function uses a non-reentrant model
  3520 ;;
  3521                           
  3522                           	psect	text23
  3523  000DC2                     __ptext23:
  3524                           	opt stack 0
  3525  000DC2                     _ES_Timer_Init:
  3526                           	opt stack 25
  3527                           
  3528                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  3529                           
  3530                           ;incstack = 0
  3531  000DC2  C018  F016         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  3532  000DC6  C019  F017         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  3533  000DCA  ECAC  F006         	call	__HW_Timer_Init	;wreg free
  3534  000DCE  0012               	return		;funcret
  3535  000DD0                     __end_of_ES_Timer_Init:
  3536                           	opt stack 0
  3537                           tosu	equ	0xFFF
  3538                           tosh	equ	0xFFE
  3539                           tosl	equ	0xFFD
  3540                           pclath	equ	0xFFA
  3541                           tblptru	equ	0xFF8
  3542                           tblptrh	equ	0xFF7
  3543                           tblptrl	equ	0xFF6
  3544                           tablat	equ	0xFF5
  3545                           prodh	equ	0xFF4
  3546                           prodl	equ	0xFF3
  3547                           intcon	equ	0xFF2
  3548                           postinc0	equ	0xFEE
  3549                           wreg	equ	0xFE8
  3550                           indf1	equ	0xFE7
  3551                           postinc1	equ	0xFE6
  3552                           fsr1h	equ	0xFE2
  3553                           fsr1l	equ	0xFE1
  3554                           indf2	equ	0xFDF
  3555                           postinc2	equ	0xFDE
  3556                           postdec2	equ	0xFDD
  3557                           fsr2h	equ	0xFDA
  3558                           fsr2l	equ	0xFD9
  3559                           status	equ	0xFD8
  3560                           
  3561 ;; *************** function __HW_Timer_Init *****************
  3562 ;; Defined at:
  3563 ;;		line 72 in file "ES_Port.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;  Rate            2   21[COMRAM] enum E15412
  3566 ;; Auto vars:     Size  Location     Type
  3567 ;;		None
  3568 ;; Return value:  Size  Location     Type
  3569 ;;                  1    wreg      void 
  3570 ;; Registers used:
  3571 ;;		wreg, status,2
  3572 ;; Tracked objects:
  3573 ;;		On entry : 0/0
  3574 ;;		On exit  : 0/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3577 ;;      Params:         2       0       0       0
  3578 ;;      Locals:         0       0       0       0
  3579 ;;      Temps:          0       0       0       0
  3580 ;;      Totals:         2       0       0       0
  3581 ;;Total ram usage:        2 bytes
  3582 ;; Hardware stack levels used:    1
  3583 ;; Hardware stack levels required when called:    3
  3584 ;; This function calls:
  3585 ;;		Nothing
  3586 ;; This function is called by:
  3587 ;;		_ES_Timer_Init
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           	psect	text24
  3592  000D58                     __ptext24:
  3593                           	opt stack 0
  3594  000D58                     __HW_Timer_Init:
  3595                           	opt stack 25
  3596                           
  3597                           ;ES_Port.c: 80: PIE1 = 0b00000100;
  3598                           
  3599                           ;incstack = 0
  3600  000D58  0E04               	movlw	4
  3601  000D5A  6E9D               	movwf	3997,c	;volatile
  3602                           
  3603                           ;ES_Port.c: 85: INTCON = 0b01000000;
  3604  000D5C  0E40               	movlw	64
  3605  000D5E  6EF2               	movwf	intcon,c	;volatile
  3606                           
  3607                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
  3608  000D60  0E0A               	movlw	10
  3609  000D62  6EBD               	movwf	4029,c	;volatile
  3610                           
  3611                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
  3612  000D64  0E01               	movlw	1
  3613  000D66  6EBE               	movwf	4030,c	;volatile
  3614                           
  3615                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
  3616  000D68  0E00               	movlw	0
  3617  000D6A  6EBF               	movwf	4031,c	;volatile
  3618                           
  3619                           ;ES_Port.c: 107: T1CON = 0b00100001;
  3620  000D6C  0E21               	movlw	33
  3621  000D6E  6ECD               	movwf	4045,c	;volatile
  3622                           
  3623                           ;ES_Port.c: 108: PEIE = 1;
  3624  000D70  8CF2               	bsf	intcon,6,c	;volatile
  3625                           
  3626                           ;ES_Port.c: 109: {GIE = 1;};
  3627  000D72  8EF2               	bsf	intcon,7,c	;volatile
  3628  000D74  0012               	return		;funcret
  3629  000D76                     __end_of__HW_Timer_Init:
  3630                           	opt stack 0
  3631                           tosu	equ	0xFFF
  3632                           tosh	equ	0xFFE
  3633                           tosl	equ	0xFFD
  3634                           pclath	equ	0xFFA
  3635                           tblptru	equ	0xFF8
  3636                           tblptrh	equ	0xFF7
  3637                           tblptrl	equ	0xFF6
  3638                           tablat	equ	0xFF5
  3639                           prodh	equ	0xFF4
  3640                           prodl	equ	0xFF3
  3641                           intcon	equ	0xFF2
  3642                           postinc0	equ	0xFEE
  3643                           wreg	equ	0xFE8
  3644                           indf1	equ	0xFE7
  3645                           postinc1	equ	0xFE6
  3646                           fsr1h	equ	0xFE2
  3647                           fsr1l	equ	0xFE1
  3648                           indf2	equ	0xFDF
  3649                           postinc2	equ	0xFDE
  3650                           postdec2	equ	0xFDD
  3651                           fsr2h	equ	0xFDA
  3652                           fsr2l	equ	0xFD9
  3653                           status	equ	0xFD8
  3654                           
  3655 ;; *************** function _ES_InitQueue *****************
  3656 ;; Defined at:
  3657 ;;		line 58 in file "ES_Queue.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;  pBlock          2   21[COMRAM] PTR struct ES_Event_t
  3660 ;;		 -> Queue0(12), 
  3661 ;;  BlockSize       1   23[COMRAM] unsigned char 
  3662 ;; Auto vars:     Size  Location     Type
  3663 ;;  pThisQueue      2   24[COMRAM] PTR struct .
  3664 ;;		 -> Queue0(12), 
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  1    wreg      unsigned char 
  3667 ;; Registers used:
  3668 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/0
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3674 ;;      Params:         3       0       0       0
  3675 ;;      Locals:         2       0       0       0
  3676 ;;      Temps:          0       0       0       0
  3677 ;;      Totals:         5       0       0       0
  3678 ;;Total ram usage:        5 bytes
  3679 ;; Hardware stack levels used:    1
  3680 ;; Hardware stack levels required when called:    3
  3681 ;; This function calls:
  3682 ;;		Nothing
  3683 ;; This function is called by:
  3684 ;;		_ES_Initialize
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           	psect	text25
  3689  000BFE                     __ptext25:
  3690                           	opt stack 0
  3691  000BFE                     _ES_InitQueue:
  3692                           	opt stack 26
  3693                           
  3694                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  3695                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  3696                           
  3697                           ;incstack = 0
  3698  000BFE  C016  F019         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  3699  000C02  C017  F01A         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  3700                           
  3701                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  3702  000C06  0418               	decf	ES_InitQueue@BlockSize,w,c
  3703  000C08  C019  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  3704  000C0C  C01A  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  3705  000C10  6EDF               	movwf	indf2,c
  3706                           
  3707                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  3708  000C12  EE20 F001          	lfsr	2,1
  3709  000C16  5019               	movf	ES_InitQueue@pThisQueue,w,c
  3710  000C18  26D9               	addwf	fsr2l,f,c
  3711  000C1A  501A               	movf	ES_InitQueue@pThisQueue+1,w,c
  3712  000C1C  22DA               	addwfc	fsr2h,f,c
  3713  000C1E  0E00               	movlw	0
  3714  000C20  6EDF               	movwf	indf2,c
  3715                           
  3716                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  3717  000C22  EE20 F002          	lfsr	2,2
  3718  000C26  5019               	movf	ES_InitQueue@pThisQueue,w,c
  3719  000C28  26D9               	addwf	fsr2l,f,c
  3720  000C2A  501A               	movf	ES_InitQueue@pThisQueue+1,w,c
  3721  000C2C  22DA               	addwfc	fsr2h,f,c
  3722  000C2E  0E00               	movlw	0
  3723  000C30  6EDF               	movwf	indf2,c
  3724  000C32  0012               	return	
  3725  000C34                     __end_of_ES_InitQueue:
  3726                           	opt stack 0
  3727                           tosu	equ	0xFFF
  3728                           tosh	equ	0xFFE
  3729                           tosl	equ	0xFFD
  3730                           pclath	equ	0xFFA
  3731                           tblptru	equ	0xFF8
  3732                           tblptrh	equ	0xFF7
  3733                           tblptrl	equ	0xFF6
  3734                           tablat	equ	0xFF5
  3735                           prodh	equ	0xFF4
  3736                           prodl	equ	0xFF3
  3737                           intcon	equ	0xFF2
  3738                           postinc0	equ	0xFEE
  3739                           wreg	equ	0xFE8
  3740                           indf1	equ	0xFE7
  3741                           postinc1	equ	0xFE6
  3742                           fsr1h	equ	0xFE2
  3743                           fsr1l	equ	0xFE1
  3744                           indf2	equ	0xFDF
  3745                           postinc2	equ	0xFDE
  3746                           postdec2	equ	0xFDD
  3747                           fsr2h	equ	0xFDA
  3748                           fsr2l	equ	0xFD9
  3749                           status	equ	0xFD8
  3750                           
  3751 ;; *************** function _ISR *****************
  3752 ;; Defined at:
  3753 ;;		line 112 in file "ES_Port.c"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;		None
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;		None
  3758 ;; Return value:  Size  Location     Type
  3759 ;;                  1    wreg      void 
  3760 ;; Registers used:
  3761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3762 ;; Tracked objects:
  3763 ;;		On entry : 0/0
  3764 ;;		On exit  : 0/0
  3765 ;;		Unchanged: 0/0
  3766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3767 ;;      Params:         0       0       0       0
  3768 ;;      Locals:         0       0       0       0
  3769 ;;      Temps:         16       0       0       0
  3770 ;;      Totals:        16       0       0       0
  3771 ;;Total ram usage:       16 bytes
  3772 ;; Hardware stack levels used:    1
  3773 ;; Hardware stack levels required when called:    2
  3774 ;; This function calls:
  3775 ;;		_CanErrorResponse
  3776 ;;		_CanRCVResponse
  3777 ;;		_CanXmitResponse
  3778 ;; This function is called by:
  3779 ;;		Interrupt level 2
  3780 ;; This function uses a non-reentrant model
  3781 ;;
  3782                           
  3783                           	psect	intcode
  3784  000008                     __pintcode:
  3785                           	opt stack 0
  3786  000008                     _ISR:
  3787                           	opt stack 21
  3788                           
  3789                           ;incstack = 0
  3790  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3791  00000A  CFFA F008          	movff	pclath,??_ISR+2
  3792  00000E  CFFB F009          	movff	pclatu,??_ISR+3
  3793  000012  EDC0  F003         	call	int_func,f	;refresh shadow registers
  3794                           tosu	equ	0xFFF
  3795                           tosh	equ	0xFFE
  3796                           tosl	equ	0xFFD
  3797                           pclatu	equ	0xFFB
  3798                           pclath	equ	0xFFA
  3799                           tblptru	equ	0xFF8
  3800                           tblptrh	equ	0xFF7
  3801                           tblptrl	equ	0xFF6
  3802                           tablat	equ	0xFF5
  3803                           prodh	equ	0xFF4
  3804                           prodl	equ	0xFF3
  3805                           intcon	equ	0xFF2
  3806                           postinc0	equ	0xFEE
  3807                           wreg	equ	0xFE8
  3808                           indf1	equ	0xFE7
  3809                           postinc1	equ	0xFE6
  3810                           fsr1h	equ	0xFE2
  3811                           fsr1l	equ	0xFE1
  3812                           indf2	equ	0xFDF
  3813                           postinc2	equ	0xFDE
  3814                           postdec2	equ	0xFDD
  3815                           fsr2h	equ	0xFDA
  3816                           fsr2l	equ	0xFD9
  3817                           status	equ	0xFD8
  3818                           
  3819                           	psect	intcode_body
  3820  000780                     __pintcode_body:
  3821                           	opt stack 21
  3822  000780                     int_func:
  3823                           	opt stack 21
  3824  000780  0006               	pop		; remove dummy address from shadow register refresh
  3825  000782  CFE9 F00A          	movff	fsr0l,??_ISR+4
  3826  000786  CFEA F00B          	movff	fsr0h,??_ISR+5
  3827  00078A  CFE1 F00C          	movff	fsr1l,??_ISR+6
  3828  00078E  CFE2 F00D          	movff	fsr1h,??_ISR+7
  3829  000792  CFD9 F00E          	movff	fsr2l,??_ISR+8
  3830  000796  CFDA F00F          	movff	fsr2h,??_ISR+9
  3831  00079A  CFF3 F010          	movff	prodl,??_ISR+10
  3832  00079E  CFF4 F011          	movff	prodh,??_ISR+11
  3833  0007A2  CFF6 F012          	movff	tblptrl,??_ISR+12
  3834  0007A6  CFF7 F013          	movff	tblptrh,??_ISR+13
  3835  0007AA  CFF8 F014          	movff	tblptru,??_ISR+14
  3836  0007AE  CFF5 F015          	movff	tablat,??_ISR+15
  3837                           
  3838                           ;ES_Port.c: 115: static unsigned int LastTime;
  3839                           ;ES_Port.c: 116: static unsigned int NextTime;
  3840                           ;ES_Port.c: 118: if (CCP1IF == 1)
  3841  0007B2  A49E               	btfss	3998,2,c	;volatile
  3842  0007B4  D014               	goto	i2l2027
  3843                           
  3844                           ;ES_Port.c: 119: {
  3845                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  3846  0007B6  50BF               	movf	4031,w,c	;volatile
  3847  0007B8  6E06               	movwf	??_ISR& (0+255),c
  3848  0007BA  50BE               	movf	4030,w,c	;volatile
  3849  0007BC  6E38               	movwf	ISR@LastTime,c
  3850  0007BE  C006  F039         	movff	??_ISR,ISR@LastTime+1
  3851                           
  3852                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
  3853  0007C2  0E20               	movlw	32
  3854  0007C4  2438               	addwf	ISR@LastTime,w,c
  3855  0007C6  6E3A               	movwf	ISR@NextTime,c
  3856  0007C8  0E4E               	movlw	78
  3857  0007CA  2039               	addwfc	ISR@LastTime+1,w,c
  3858  0007CC  6E3B               	movwf	ISR@NextTime+1,c
  3859                           
  3860                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
  3861  0007CE  503B               	movf	ISR@NextTime+1,w,c
  3862  0007D0  6EBF               	movwf	4031,c	;volatile
  3863                           
  3864                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
  3865  0007D2  C03A  FFBE         	movff	ISR@NextTime,4030	;volatile
  3866                           
  3867                           ;ES_Port.c: 124: CCP1IF = 0;
  3868  0007D6  949E               	bcf	3998,2,c	;volatile
  3869                           
  3870                           ;ES_Port.c: 125: TickCount++;
  3871  0007D8  2A46               	incf	_TickCount,f,c	;volatile
  3872                           
  3873                           ;ES_Port.c: 126: SysTickCounter++;
  3874  0007DA  4A3E               	infsnz	_SysTickCounter,f,c	;volatile
  3875  0007DC  2A3F               	incf	_SysTickCounter+1,f,c	;volatile
  3876  0007DE                     i2l2027:
  3877                           
  3878                           ;ES_Port.c: 127: }
  3879                           ;ES_Port.c: 133: if (TXB0IF == 1)
  3880  0007DE  A4A4               	btfss	4004,2,c	;volatile
  3881  0007E0  D003               	goto	i2l2033
  3882                           
  3883                           ;ES_Port.c: 134: {
  3884                           ;ES_Port.c: 135: TXB0IF = 0;
  3885  0007E2  94A4               	bcf	4004,2,c	;volatile
  3886                           
  3887                           ;ES_Port.c: 136: CanXmitResponse();
  3888  0007E4  ECEE  F006         	call	_CanXmitResponse	;wreg free
  3889  0007E8                     i2l2033:
  3890                           
  3891                           ;ES_Port.c: 137: }
  3892                           ;ES_Port.c: 138: if (RXB0IF == 1) {
  3893  0007E8  A0A4               	btfss	4004,0,c	;volatile
  3894  0007EA  D003               	goto	i2l2039
  3895                           
  3896                           ;ES_Port.c: 139: RXB0IF = 0;
  3897  0007EC  90A4               	bcf	4004,0,c	;volatile
  3898                           
  3899                           ;ES_Port.c: 140: CanRCVResponse();
  3900  0007EE  ECBB  F006         	call	_CanRCVResponse	;wreg free
  3901  0007F2                     i2l2039:
  3902                           
  3903                           ;ES_Port.c: 141: }
  3904                           ;ES_Port.c: 142: if (IRXIF == 1) {
  3905  0007F2  AEA4               	btfss	4004,7,c	;volatile
  3906  0007F4  D003               	goto	i2l155
  3907                           
  3908                           ;ES_Port.c: 143: IRXIF = 0;
  3909  0007F6  9EA4               	bcf	4004,7,c	;volatile
  3910                           
  3911                           ;ES_Port.c: 144: CanErrorResponse();
  3912  0007F8  ECE8  F006         	call	_CanErrorResponse	;wreg free
  3913  0007FC                     i2l155:
  3914  0007FC  C015  FFF5         	movff	??_ISR+15,tablat
  3915  000800  C014  FFF8         	movff	??_ISR+14,tblptru
  3916  000804  C013  FFF7         	movff	??_ISR+13,tblptrh
  3917  000808  C012  FFF6         	movff	??_ISR+12,tblptrl
  3918  00080C  C011  FFF4         	movff	??_ISR+11,prodh
  3919  000810  C010  FFF3         	movff	??_ISR+10,prodl
  3920  000814  C00F  FFDA         	movff	??_ISR+9,fsr2h
  3921  000818  C00E  FFD9         	movff	??_ISR+8,fsr2l
  3922  00081C  C00D  FFE2         	movff	??_ISR+7,fsr1h
  3923  000820  C00C  FFE1         	movff	??_ISR+6,fsr1l
  3924  000824  C00B  FFEA         	movff	??_ISR+5,fsr0h
  3925  000828  C00A  FFE9         	movff	??_ISR+4,fsr0l
  3926  00082C  C009  FFFB         	movff	??_ISR+3,pclatu
  3927  000830  C008  FFFA         	movff	??_ISR+2,pclath
  3928  000834  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3929  000836  0011               	retfie		f
  3930  000838                     __end_of_ISR:
  3931                           	opt stack 0
  3932                           tosu	equ	0xFFF
  3933                           tosh	equ	0xFFE
  3934                           tosl	equ	0xFFD
  3935                           pclatu	equ	0xFFB
  3936                           pclath	equ	0xFFA
  3937                           tblptru	equ	0xFF8
  3938                           tblptrh	equ	0xFF7
  3939                           tblptrl	equ	0xFF6
  3940                           tablat	equ	0xFF5
  3941                           prodh	equ	0xFF4
  3942                           prodl	equ	0xFF3
  3943                           intcon	equ	0xFF2
  3944                           postinc0	equ	0xFEE
  3945                           fsr0h	equ	0xFEA
  3946                           fsr0l	equ	0xFE9
  3947                           wreg	equ	0xFE8
  3948                           indf1	equ	0xFE7
  3949                           postinc1	equ	0xFE6
  3950                           fsr1h	equ	0xFE2
  3951                           fsr1l	equ	0xFE1
  3952                           indf2	equ	0xFDF
  3953                           postinc2	equ	0xFDE
  3954                           postdec2	equ	0xFDD
  3955                           fsr2h	equ	0xFDA
  3956                           fsr2l	equ	0xFD9
  3957                           status	equ	0xFD8
  3958                           
  3959 ;; *************** function _CanXmitResponse *****************
  3960 ;; Defined at:
  3961 ;;		line 170 in file "Can_XmitService.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;		None
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;		None
  3966 ;; Return value:  Size  Location     Type
  3967 ;;                  1    wreg      void 
  3968 ;; Registers used:
  3969 ;;		None
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3975 ;;      Params:         0       0       0       0
  3976 ;;      Locals:         0       0       0       0
  3977 ;;      Temps:          0       0       0       0
  3978 ;;      Totals:         0       0       0       0
  3979 ;;Total ram usage:        0 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; This function calls:
  3982 ;;		Nothing
  3983 ;; This function is called by:
  3984 ;;		_ISR
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           	psect	text27
  3989  000DDC                     __ptext27:
  3990                           	opt stack 0
  3991  000DDC                     _CanXmitResponse:
  3992                           	opt stack 22
  3993                           
  3994                           ;Can_XmitService.c: 172: TXB0CONbits.TXREQ = 0;
  3995                           
  3996                           ;incstack = 0
  3997  000DDC  010F               	movlb	15	; () banked
  3998  000DDE  9740               	bcf	64,3,b	;volatile
  3999                           
  4000                           ; BSR set to: 15
  4001  000DE0  0012               	return		;funcret
  4002  000DE2                     __end_of_CanXmitResponse:
  4003                           	opt stack 0
  4004                           tosu	equ	0xFFF
  4005                           tosh	equ	0xFFE
  4006                           tosl	equ	0xFFD
  4007                           pclatu	equ	0xFFB
  4008                           pclath	equ	0xFFA
  4009                           tblptru	equ	0xFF8
  4010                           tblptrh	equ	0xFF7
  4011                           tblptrl	equ	0xFF6
  4012                           tablat	equ	0xFF5
  4013                           prodh	equ	0xFF4
  4014                           prodl	equ	0xFF3
  4015                           intcon	equ	0xFF2
  4016                           postinc0	equ	0xFEE
  4017                           fsr0h	equ	0xFEA
  4018                           fsr0l	equ	0xFE9
  4019                           wreg	equ	0xFE8
  4020                           indf1	equ	0xFE7
  4021                           postinc1	equ	0xFE6
  4022                           fsr1h	equ	0xFE2
  4023                           fsr1l	equ	0xFE1
  4024                           indf2	equ	0xFDF
  4025                           postinc2	equ	0xFDE
  4026                           postdec2	equ	0xFDD
  4027                           fsr2h	equ	0xFDA
  4028                           fsr2l	equ	0xFD9
  4029                           status	equ	0xFD8
  4030                           
  4031 ;; *************** function _CanRCVResponse *****************
  4032 ;; Defined at:
  4033 ;;		line 176 in file "Can_XmitService.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;		None
  4036 ;; Auto vars:     Size  Location     Type
  4037 ;;		None
  4038 ;; Return value:  Size  Location     Type
  4039 ;;                  1    wreg      void 
  4040 ;; Registers used:
  4041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4042 ;; Tracked objects:
  4043 ;;		On entry : 0/0
  4044 ;;		On exit  : 0/0
  4045 ;;		Unchanged: 0/0
  4046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4047 ;;      Params:         0       0       0       0
  4048 ;;      Locals:         0       0       0       0
  4049 ;;      Temps:          0       0       0       0
  4050 ;;      Totals:         0       0       0       0
  4051 ;;Total ram usage:        0 bytes
  4052 ;; Hardware stack levels used:    1
  4053 ;; Hardware stack levels required when called:    1
  4054 ;; This function calls:
  4055 ;;		_ES_Timer_InitTimer
  4056 ;; This function is called by:
  4057 ;;		_ISR
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           	psect	text28
  4062  000D76                     __ptext28:
  4063                           	opt stack 0
  4064  000D76                     _CanRCVResponse:
  4065                           	opt stack 21
  4066                           
  4067                           ;Can_XmitService.c: 178: if (RXB0CONbits.RXFUL == 1) {
  4068                           
  4069                           ; BSR set to: 15
  4070                           ;incstack = 0
  4071  000D76  AE60               	btfss	3936,7,c	;volatile
  4072  000D78  0012               	return	
  4073                           
  4074                           ;Can_XmitService.c: 179: RXB0CONbits.RXFUL = 0;
  4075  000D7A  9E60               	bcf	3936,7,c	;volatile
  4076                           
  4077                           ;Can_XmitService.c: 180: ES_Timer_InitTimer(0, 50);
  4078  000D7C  0E00               	movlw	0
  4079  000D7E  6E02               	movwf	ES_Timer_InitTimer@NewTime+1,c
  4080  000D80  0E32               	movlw	50
  4081  000D82  6E01               	movwf	ES_Timer_InitTimer@NewTime,c
  4082  000D84  0E00               	movlw	0
  4083  000D86  EC27  F005         	call	_ES_Timer_InitTimer
  4084  000D8A  0012               	return	
  4085  000D8C                     __end_of_CanRCVResponse:
  4086                           	opt stack 0
  4087                           tosu	equ	0xFFF
  4088                           tosh	equ	0xFFE
  4089                           tosl	equ	0xFFD
  4090                           pclatu	equ	0xFFB
  4091                           pclath	equ	0xFFA
  4092                           tblptru	equ	0xFF8
  4093                           tblptrh	equ	0xFF7
  4094                           tblptrl	equ	0xFF6
  4095                           tablat	equ	0xFF5
  4096                           prodh	equ	0xFF4
  4097                           prodl	equ	0xFF3
  4098                           intcon	equ	0xFF2
  4099                           postinc0	equ	0xFEE
  4100                           fsr0h	equ	0xFEA
  4101                           fsr0l	equ	0xFE9
  4102                           wreg	equ	0xFE8
  4103                           indf1	equ	0xFE7
  4104                           postinc1	equ	0xFE6
  4105                           fsr1h	equ	0xFE2
  4106                           fsr1l	equ	0xFE1
  4107                           indf2	equ	0xFDF
  4108                           postinc2	equ	0xFDE
  4109                           postdec2	equ	0xFDD
  4110                           fsr2h	equ	0xFDA
  4111                           fsr2l	equ	0xFD9
  4112                           status	equ	0xFD8
  4113                           
  4114 ;; *************** function _ES_Timer_InitTimer *****************
  4115 ;; Defined at:
  4116 ;;		line 229 in file "ES_Timers.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;  Num             1    wreg     unsigned char 
  4119 ;;  NewTime         2    0[COMRAM] unsigned int 
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;  Num             1    4[COMRAM] unsigned char 
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  1    wreg      enum E15468
  4124 ;; Registers used:
  4125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4131 ;;      Params:         2       0       0       0
  4132 ;;      Locals:         1       0       0       0
  4133 ;;      Temps:          2       0       0       0
  4134 ;;      Totals:         5       0       0       0
  4135 ;;Total ram usage:        5 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; This function calls:
  4138 ;;		Nothing
  4139 ;; This function is called by:
  4140 ;;		_CanRCVResponse
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text29
  4145  000A4E                     __ptext29:
  4146                           	opt stack 0
  4147  000A4E                     _ES_Timer_InitTimer:
  4148                           	opt stack 21
  4149                           
  4150                           ;incstack = 0
  4151                           ;ES_Timer_InitTimer@Num stored from wreg
  4152  000A4E  6E05               	movwf	ES_Timer_InitTimer@Num,c
  4153                           
  4154                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  4155                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  4156                           ;ES_Timers.c: 236: (NewTime == 0) )
  4157  000A50  0E10               	movlw	16
  4158  000A52  6005               	cpfslt	ES_Timer_InitTimer@Num,c
  4159  000A54  0012               	return	
  4160  000A56  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4161  000A58  0D02               	mullw	2
  4162  000A5A  0E21               	movlw	low _Timer2PostFunc
  4163  000A5C  24F3               	addwf	prodl,w,c
  4164  000A5E  6EF6               	movwf	tblptrl,c
  4165  000A60  0E03               	movlw	high _Timer2PostFunc
  4166  000A62  20F4               	addwfc	prodh,w,c
  4167  000A64  6EF7               	movwf	tblptrh,c
  4168  000A66                     	if	0	;There are less than 3 active tblptr bytes
  4169  000A66                     	endif
  4170  000A66  0009               	tblrd		*+
  4171  000A68  50F5               	movf	tablat,w,c
  4172  000A6A  0009               	tblrd		*+
  4173  000A6C  10F5               	iorwf	tablat,w,c
  4174  000A6E  B4D8               	btfsc	status,2,c
  4175  000A70  0012               	return	
  4176  000A72  5001               	movf	ES_Timer_InitTimer@NewTime,w,c
  4177  000A74  1002               	iorwf	ES_Timer_InitTimer@NewTime+1,w,c
  4178  000A76  B4D8               	btfsc	status,2,c
  4179  000A78  0012               	return	
  4180                           
  4181                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  4182                           
  4183                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  4184                           ;	Return value of _ES_Timer_InitTimer is never used
  4185  000A7A  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4186  000A7C  0D02               	mullw	2
  4187  000A7E  0E60               	movlw	low _TMR_TimerArray
  4188  000A80  24F3               	addwf	prodl,w,c
  4189  000A82  6ED9               	movwf	fsr2l,c
  4190  000A84  0E00               	movlw	high _TMR_TimerArray
  4191  000A86  20F4               	addwfc	prodh,w,c
  4192  000A88  6EDA               	movwf	fsr2h,c
  4193  000A8A  C001  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  4194  000A8E  C002  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  4195                           
  4196                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  4197  000A92  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4198  000A94  0D02               	mullw	2
  4199  000A96  0E01               	movlw	low _BitNum2SetMask
  4200  000A98  24F3               	addwf	prodl,w,c
  4201  000A9A  6EF6               	movwf	tblptrl,c
  4202  000A9C  0E03               	movlw	high _BitNum2SetMask
  4203  000A9E  20F4               	addwfc	prodh,w,c
  4204  000AA0  6EF7               	movwf	tblptrh,c
  4205  000AA2                     	if	0	;There are less than 3 active tblptr bytes
  4206  000AA2                     	endif
  4207  000AA2  0009               	tblrd		*+
  4208  000AA4  CFF5 F003          	movff	tablat,??_ES_Timer_InitTimer
  4209  000AA8  0009               	tblrd		*+
  4210  000AAA  CFF5 F004          	movff	tablat,??_ES_Timer_InitTimer+1
  4211  000AAE  5003               	movf	??_ES_Timer_InitTimer,w,c
  4212  000AB0  1240               	iorwf	_TMR_ActiveFlags,f,c
  4213  000AB2  5004               	movf	??_ES_Timer_InitTimer+1,w,c
  4214  000AB4  1241               	iorwf	_TMR_ActiveFlags+1,f,c
  4215  000AB6  0012               	return	
  4216  000AB8                     __end_of_ES_Timer_InitTimer:
  4217                           	opt stack 0
  4218                           tosu	equ	0xFFF
  4219                           tosh	equ	0xFFE
  4220                           tosl	equ	0xFFD
  4221                           pclatu	equ	0xFFB
  4222                           pclath	equ	0xFFA
  4223                           tblptru	equ	0xFF8
  4224                           tblptrh	equ	0xFF7
  4225                           tblptrl	equ	0xFF6
  4226                           tablat	equ	0xFF5
  4227                           prodh	equ	0xFF4
  4228                           prodl	equ	0xFF3
  4229                           intcon	equ	0xFF2
  4230                           postinc0	equ	0xFEE
  4231                           fsr0h	equ	0xFEA
  4232                           fsr0l	equ	0xFE9
  4233                           wreg	equ	0xFE8
  4234                           indf1	equ	0xFE7
  4235                           postinc1	equ	0xFE6
  4236                           fsr1h	equ	0xFE2
  4237                           fsr1l	equ	0xFE1
  4238                           indf2	equ	0xFDF
  4239                           postinc2	equ	0xFDE
  4240                           postdec2	equ	0xFDD
  4241                           fsr2h	equ	0xFDA
  4242                           fsr2l	equ	0xFD9
  4243                           status	equ	0xFD8
  4244                           
  4245 ;; *************** function _CanErrorResponse *****************
  4246 ;; Defined at:
  4247 ;;		line 184 in file "Can_XmitService.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;		None
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;		None
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  1    wreg      void 
  4254 ;; Registers used:
  4255 ;;		None
  4256 ;; Tracked objects:
  4257 ;;		On entry : 0/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4261 ;;      Params:         0       0       0       0
  4262 ;;      Locals:         0       0       0       0
  4263 ;;      Temps:          0       0       0       0
  4264 ;;      Totals:         0       0       0       0
  4265 ;;Total ram usage:        0 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; This function calls:
  4268 ;;		Nothing
  4269 ;; This function is called by:
  4270 ;;		_ISR
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           	psect	text30
  4275  000DD0                     __ptext30:
  4276                           	opt stack 0
  4277  000DD0                     _CanErrorResponse:
  4278                           	opt stack 22
  4279                           
  4280                           ;Can_XmitService.c: 186: LATA0 = 1;
  4281                           
  4282                           ;incstack = 0
  4283  000DD0  8089               	bsf	3977,0,c	;volatile
  4284                           
  4285                           ;Can_XmitService.c: 187: if (TXB0CONbits.TXERR == 1) {
  4286  000DD2  010F               	movlb	15	; () banked
  4287  000DD4  A940               	btfss	64,4,b	;volatile
  4288  000DD6  0012               	return	
  4289                           
  4290                           ; BSR set to: 15
  4291                           ;Can_XmitService.c: 188: LATA2 = 1;
  4292  000DD8  8489               	bsf	3977,2,c	;volatile
  4293  000DDA  0012               	return	
  4294  000DDC                     __end_of_CanErrorResponse:
  4295                           	opt stack 0
  4296                           tosu	equ	0xFFF
  4297                           tosh	equ	0xFFE
  4298                           tosl	equ	0xFFD
  4299                           pclatu	equ	0xFFB
  4300                           pclath	equ	0xFFA
  4301                           tblptru	equ	0xFF8
  4302                           tblptrh	equ	0xFF7
  4303                           tblptrl	equ	0xFF6
  4304                           tablat	equ	0xFF5
  4305                           prodh	equ	0xFF4
  4306                           prodl	equ	0xFF3
  4307                           intcon	equ	0xFF2
  4308                           postinc0	equ	0xFEE
  4309                           fsr0h	equ	0xFEA
  4310                           fsr0l	equ	0xFE9
  4311                           wreg	equ	0xFE8
  4312                           indf1	equ	0xFE7
  4313                           postinc1	equ	0xFE6
  4314                           fsr1h	equ	0xFE2
  4315                           fsr1l	equ	0xFE1
  4316                           indf2	equ	0xFDF
  4317                           postinc2	equ	0xFDE
  4318                           postdec2	equ	0xFDD
  4319                           fsr2h	equ	0xFDA
  4320                           fsr2l	equ	0xFD9
  4321                           status	equ	0xFD8
  4322                           tosu	equ	0xFFF
  4323                           tosh	equ	0xFFE
  4324                           tosl	equ	0xFFD
  4325                           pclatu	equ	0xFFB
  4326                           pclath	equ	0xFFA
  4327                           tblptru	equ	0xFF8
  4328                           tblptrh	equ	0xFF7
  4329                           tblptrl	equ	0xFF6
  4330                           tablat	equ	0xFF5
  4331                           prodh	equ	0xFF4
  4332                           prodl	equ	0xFF3
  4333                           intcon	equ	0xFF2
  4334                           postinc0	equ	0xFEE
  4335                           fsr0h	equ	0xFEA
  4336                           fsr0l	equ	0xFE9
  4337                           wreg	equ	0xFE8
  4338                           indf1	equ	0xFE7
  4339                           postinc1	equ	0xFE6
  4340                           fsr1h	equ	0xFE2
  4341                           fsr1l	equ	0xFE1
  4342                           indf2	equ	0xFDF
  4343                           postinc2	equ	0xFDE
  4344                           postdec2	equ	0xFDD
  4345                           fsr2h	equ	0xFDA
  4346                           fsr2l	equ	0xFD9
  4347                           status	equ	0xFD8
  4348                           
  4349                           	psect	text31
  4350  000000                     __ptext31:
  4351                           	opt stack 0
  4352                           tosu	equ	0xFFF
  4353                           tosh	equ	0xFFE
  4354                           tosl	equ	0xFFD
  4355                           pclatu	equ	0xFFB
  4356                           pclath	equ	0xFFA
  4357                           tblptru	equ	0xFF8
  4358                           tblptrh	equ	0xFF7
  4359                           tblptrl	equ	0xFF6
  4360                           tablat	equ	0xFF5
  4361                           prodh	equ	0xFF4
  4362                           prodl	equ	0xFF3
  4363                           intcon	equ	0xFF2
  4364                           postinc0	equ	0xFEE
  4365                           fsr0h	equ	0xFEA
  4366                           fsr0l	equ	0xFE9
  4367                           wreg	equ	0xFE8
  4368                           indf1	equ	0xFE7
  4369                           postinc1	equ	0xFE6
  4370                           fsr1h	equ	0xFE2
  4371                           fsr1l	equ	0xFE1
  4372                           indf2	equ	0xFDF
  4373                           postinc2	equ	0xFDE
  4374                           postdec2	equ	0xFDD
  4375                           fsr2h	equ	0xFDA
  4376                           fsr2l	equ	0xFD9
  4377                           status	equ	0xFD8
  4378                           
  4379                           	psect	rparam
  4380  0000                     tosu	equ	0xFFF
  4381                           tosh	equ	0xFFE
  4382                           tosl	equ	0xFFD
  4383                           pclatu	equ	0xFFB
  4384                           pclath	equ	0xFFA
  4385                           tblptru	equ	0xFF8
  4386                           tblptrh	equ	0xFF7
  4387                           tblptrl	equ	0xFF6
  4388                           tablat	equ	0xFF5
  4389                           prodh	equ	0xFF4
  4390                           prodl	equ	0xFF3
  4391                           intcon	equ	0xFF2
  4392                           postinc0	equ	0xFEE
  4393                           fsr0h	equ	0xFEA
  4394                           fsr0l	equ	0xFE9
  4395                           wreg	equ	0xFE8
  4396                           indf1	equ	0xFE7
  4397                           postinc1	equ	0xFE6
  4398                           fsr1h	equ	0xFE2
  4399                           fsr1l	equ	0xFE1
  4400                           indf2	equ	0xFDF
  4401                           postinc2	equ	0xFDE
  4402                           postdec2	equ	0xFDD
  4403                           fsr2h	equ	0xFDA
  4404                           fsr2l	equ	0xFD9
  4405                           status	equ	0xFD8
  4406                           
  4407                           	psect	temp
  4408  00004A                     btemp:
  4409                           	opt stack 0
  4410  00004A                     	ds	1
  4411  0000                     int$flags	set	btemp
  4412                           tosu	equ	0xFFF
  4413                           tosh	equ	0xFFE
  4414                           tosl	equ	0xFFD
  4415                           pclatu	equ	0xFFB
  4416                           pclath	equ	0xFFA
  4417                           tblptru	equ	0xFF8
  4418                           tblptrh	equ	0xFF7
  4419                           tblptrl	equ	0xFF6
  4420                           tablat	equ	0xFF5
  4421                           prodh	equ	0xFF4
  4422                           prodl	equ	0xFF3
  4423                           intcon	equ	0xFF2
  4424                           postinc0	equ	0xFEE
  4425                           fsr0h	equ	0xFEA
  4426                           fsr0l	equ	0xFE9
  4427                           wreg	equ	0xFE8
  4428                           indf1	equ	0xFE7
  4429                           postinc1	equ	0xFE6
  4430                           fsr1h	equ	0xFE2
  4431                           fsr1l	equ	0xFE1
  4432                           indf2	equ	0xFDF
  4433                           postinc2	equ	0xFDE
  4434                           postdec2	equ	0xFDD
  4435                           fsr2h	equ	0xFDA
  4436                           fsr2l	equ	0xFD9
  4437                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    90
    Data        0
    BSS         67
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     50      73
    BANK0           160     13      57
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostCan_XmitService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(COMRAM[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [1] size(2) Largest target is 1
		 -> PostCan_XmitService(), 

    S91$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    S70$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCan_XmitService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCan_XmitService(), 

    S70$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCan_XmitService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCan_XmitService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    _PostCan_XmitService->_ES_PostToService
    _RunCan_XmitService->_XmitData
    _ES_DeQueue->___wmul
    _InitCan_XmitService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in COMRAM

    _CanRCVResponse->_ES_Timer_InitTimer

Critical Paths under _main in BANK0

    _main->_ES_Run
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostCan_XmitService
    _ES_Initialize->_InitCan_XmitService

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   11896
                                             12 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     428
                                             21 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0    7285
                                              7 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                 _RunCan_XmitService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    3693
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    3693
                                              3 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
                _PostCan_XmitService *
 ---------------------------------------------------------------------------------
 (4) _PostCan_XmitService                                  3     0      3    3250
                                              0 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     443
                                             21 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                             21 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunCan_XmitService                                   6     3      3     217
                                             22 COMRAM     6     3      3
                    _InitCanHardware
                           _InitPins
                     _ToggleDebugLED
                           _XmitData
 ---------------------------------------------------------------------------------
 (3) _XmitData                                             1     1      0      22
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ToggleDebugLED                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2746
                                             33 COMRAM    10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     292
                                             21 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                             21 COMRAM     1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    4115
                                              4 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                _InitCan_XmitService *
 ---------------------------------------------------------------------------------
 (2) _InitCan_XmitService                                  4     4      0    3184
                                              0 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    3119
                                             44 COMRAM     6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2815
                                             33 COMRAM    11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1586
                                             27 COMRAM     6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     553
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     211
                                             23 COMRAM     2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      90
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     345
                                             21 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 16    16      0     208
                                              5 COMRAM    16    16      0
                   _CanErrorResponse
                     _CanRCVResponse
                    _CanXmitResponse
 ---------------------------------------------------------------------------------
 (9) _CanXmitResponse                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CanRCVResponse                                       0     0      0     208
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (10) _ES_Timer_InitTimer                                  5     3      2     208
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (9) _CanErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitCan_XmitService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunCan_XmitService *
       _InitCanHardware
       _InitPins
       _ToggleDebugLED
       _XmitData
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostCan_XmitService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _CanErrorResponse
   _CanRCVResponse
     _ES_Timer_InitTimer
   _CanXmitResponse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      D      39       4       35.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     32      49       1       77.7%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      82       9        0.0%
DATA                 0      0      82      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Nov 14 21:32:42 2016

                   ??__HW_Timer_Init 0018                  ES_CheckUserEvents@i 0016  
                __HW_Timer_Init@Rate 0016                  ___wmul@multiplicand 001E  
                                l302 096A                                  l420 0B64  
                                l417 0B22                                  l429 0DBA  
                                l398 0BAC                __end_of_ES_Initialize 0698  
                                _GIE 007F97                                  _ISR 0008  
                       ___awmod@sign 001B              __end_of_Check4Keystroke 0DE6  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 002A  
            ES_EnQueueFIFO@Event2Add 0024                    ?_ES_PostToService 002D  
                               ?_ISR 0001                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 0033                                 l2131 0A0C  
                               l2123 09F2                                 l2203 09DA  
                               l2133 0A14                                 l2301 0D04  
                               l2221 04C4                                 l2135 0A18  
                               l2143 0A36                                 l2127 09FE  
                               l2231 0532                                 l2233 056A  
                               l2147 0A44                                 l2139 0A2C  
                               l2411 05BE                                 l2341 048C  
                               l2167 08E8                                 l2183 0B1A  
                               l2431 068E                                 l2423 0610  
                               l2337 0474                                 l2419 060C  
                               l2435 0694                                 l2347 04B0  
                               l2451 0768                                 l2293 0CEC  
                               l2189 0974                                 l2365 0DA2  
                               l2445 0714                                 l2199 09D6  
                               l2455 077A                                 l2439 069A  
                               l2463 0C98                                 l2369 0DA8  
                               l2465 0C9E                                 l2387 0C5E  
                               l2395 0B92                                 l2571 0928  
                               l2573 0936                                 l2575 0944  
                               l2569 091A                                 l2579 0952  
                               STR_1 035B                                 STR_2 0376  
                               STR_3 038E                                 STR_4 03A5  
                               _LATA 000F89                                 _LATB 000F8A  
                               u1628 0BDC                                 u1548 051A  
                               u1629 0BF4                                 u1494 0992  
                               u1495 098C                                 _PIE1 000F9D  
                               u1758 0668                                 u1759 0684  
                               _PEIE 007F96                                 u1798 073E  
                               u1799 0756                                 _SCS1 007E99  
                   ?_CanXmitResponse 0001                   ??_ES_PostToService 0030  
                               _main 08EC                          ?_ES_DeQueue 0022  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               indf1 000FE7                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 004A                        main@ErrorType 0098  
                               pclat 000FFA                                 prodh 000FF4  
                               prodl 000FF3                                 start 0016  
                      __CFG_MCLRE$ON 000000         InitCan_XmitService@ThisEvent 008C  
                       ___param_bank 000010              __end_of_InitCanHardware 0B7C  
                              ??_ISR 0006                   ES_Run@HighestPrior 0097  
                              ?_main 0001                __end_of_ES_Timer_Init 0DD0  
                    __end_of___awmod 0A4E                      __end_of___lbmod 0D0C  
                              _T1CON 000FCD                           _DistList00 0359  
                              _LATA0 007C48                                _LATA1 007C49  
                              _LATA2 007C4A                                _LATA3 007C4B  
                              _LATB2 007C52                                _IRCF0 007E9C  
                              _IRCF1 007E9D                                _IRCF2 007E9E  
                              i2l155 07FC                                _IRXIE 007D1F  
                              _IRXIF 007D27                                _PORTA 000F80  
                              _PORTB 000F81                        __CFG_PWRT$OFF 000000  
                              _Ready 003C                                _putch 0DE6  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                                status 000FD8  
                    __initialization 0D0C               ES_GetMSBitSet@LoopCntr 001F  
         __end_of_ES_CheckUserEvents 0BFE                         __end_of_main 096C  
                  ES_Timer_Init@Rate 0018                     __end_of_InitPins 0C8E  
                __end_of_EventQueues 0357                               ??_main 0033  
                      __activetblptr 000002                  __size_of_ES_DeQueue 00FE  
                    _Nybble2MSBitNum 0341     __end_of__HW_Process_Pending_Ints 0DB2  
                   ?_Check4Keystroke 0001                    ?_CanErrorResponse 0001  
                             _ADCON1 000FC1                     __end_of_XmitData 0CE2  
                             _CCP1IF 007CF2                               _CANCON 000F6F  
                             _CCPR1H 000FBF                               _CCPR1L 000FBE  
                 ??_CanErrorResponse 0001                           _MyPriority 0045  
                             ?_putch 0001                     ??_ES_GetMSBitSet 0018  
                             i2l2033 07E8                               i2l2027 07DE  
                             i2l2039 07F2                               _INTCON 000FF2  
                             _RXB0IE 007D18                               _RXB0IF 007D20  
                             _ES_Run 0698                               _TXB0D0 000F46  
                             _TXB0IE 007D1A                               _TXB0IF 007D22  
                   ??_CanRCVResponse 0006                     ??_ES_EnQueueFIFO 0027  
                     _Timer2PostFunc 0321                               _Queue0 0080  
                     _SysTickCounter 003E                               ___wmul 0D32  
                          ??___awmod 001A                            ??___lbmod 0017  
                   ?_InitCanHardware 0001                  _PostCan_XmitService 0D8C  
        __size_of_ES_Timer_InitTimer 006A                               clear_0 0D12  
                             clear_1 0D1E                      ___awmod@divisor 0018  
          ES_Timer_InitTimer@NewTime 0001                      ___awmod@counter 001A  
                             _printf 0C8E                          ISR@LastTime 0038  
             ES_InitQueue@pThisQueue 0019                         __mediumconst 0000  
                        ISR@NextTime 003A                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                             putch@c 0001          __size_of_ES_Timer_Tick_Resp 00F8  
               ES_DeQueue@pThisQueue 002A              ES_GetMSBitSet@Val2Check 0016  
               ?_PostCan_XmitService 008C          InitCan_XmitService@Priority 008F  
                    ___lbmod@divisor 0016                           __accesstop 0060  
            __end_of__initialization 0D24               __end_of_Timer2PostFunc 0341  
                    ___lbmod@counter 0018                      __CFG_PBADEN$OFF 000000  
                      ___rparam_used 000001                          _EventQueues 0354  
                     __pcstackCOMRAM 0001                        ?_ES_InitQueue 0016  
            __end_of_Nybble2MSBitNum 0350                        __end_of_putch 0DE8  
                    _TMR_ActiveFlags 0040              ES_GetMSBitSet@ReturnVal 001D  
        __end_of_InitCan_XmitService 0C62                       _TMR_TimerArray 0060  
              ??_PostCan_XmitService 0033             ES_EnQueueFIFO@pThisQueue 002B  
                            ??_putch 0016             __HW_Process_Pending_Ints 0DA0  
                         __pbssBANK0 0060                            ?_InitPins 0001  
                            ?_ES_Run 0001                         ??_ES_DeQueue 0026  
        __size_of_RunCan_XmitService 0042            __size_of_ES_PostToService 0066  
                     ??_ES_InitQueue 0019                              ?___wmul 001C  
                            _CCP1CON 000FBD                            ?_XmitData 0001  
                            _ECANCON 000F77                              ?_printf 0016  
            __size_of_ToggleDebugLED 0010                   __end_of_ES_DeQueue 04B4  
                            _TXB0DLC 000F45                           ??_InitPins 0016  
                    __size_of_ES_Run 00E8               __size_of_ES_Initialize 00EC  
                            __Hparam 0000                              __Lparam 0000  
           __size_of_CanXmitResponse 0006                              ___awmod 09DE  
                            ___lbmod 0CE2                      __size_of___wmul 0026  
                       __psmallconst 0300                           ??_XmitData 0016  
              ES_Timer_InitTimer@Num 0005                              __pcinit 0D0C  
                            __ramtop 0300                              __ptext0 08EC  
                            __ptext1 0C8E                              __ptext2 0DE6  
                            __ptext3 0698                              __ptext4 0DA0  
                            __ptext5 04B4                              __ptext6 0D8C  
                            __ptext7 096C                              __ptext8 0B7C  
                            __ptext9 0CB8                      __size_of_printf 002A  
                       __size_of_ISR 0830              __size_of__HW_Timer_Init 001E  
                   ___awmod@dividend 0016                   _ES_CheckUserEvents 0BBE  
                    ES_Run@ThisEvent 0047                       __pintcode_body 0780  
               end_of_initialization 0D24                  ?_ES_CheckUserEvents 0001  
                      __Lmediumconst 0000                              int_func 0780  
       ES_PostToService@WhichService 0032               __size_of_ES_Timer_Init 000E  
          __size_of_CanErrorResponse 000C                              printf@c 001A  
                            printf@f 0016                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                 ??_ES_CheckUserEvents 0016  
                      _ES_Initialize 05AC                     ___lbmod@dividend 0017  
                          _TRISAbits 000F92                            _TRISBbits 000F93  
               __end_of_ES_EventList 0359                 __end_of_ES_InitQueue 0C34  
                     ES_Initialize@i 0092                          ___lbmod@rem 0019  
           __size_of_Check4Keystroke 0004                       __end_of_ES_Run 0780  
        RunCan_XmitService@ThisEvent 0017                   __end_of_DistList00 035B  
                   _ES_PostToService 0AB8           __end_of_ES_Timer_InitTimer 0AB8  
               __end_of_ServDescList 0354                       __end_of___wmul 0D58  
                  ??_CanXmitResponse 0001                       _ToggleDebugLED 0DB2  
                     ?_ES_Initialize 0090           ??__HW_Process_Pending_Ints 0033  
                      _ES_Timer_Init 0DC2                       __end_of_printf 0CB8  
           __size_of_InitCanHardware 005E           __end_of_ES_Timer_Tick_Resp 05AC  
                start_initialization 0D0C                          __end_of_ISR 0838  
                        _CANSTATbits 000F6E                             ??_ES_Run 0093  
                   __CFG_OSC$IRCIO67 000000                            _TickCount 0046  
                  __size_of_InitPins 002C              __size_of_ES_GetMSBitSet 0072  
                           ??___wmul 0020               __end_of_ToggleDebugLED 0DC2  
            __size_of_CanRCVResponse 0016              __size_of_ES_EnQueueFIFO 00B4  
                           ??_printf 0018                       ?_ES_Timer_Init 0018  
                  __size_of_XmitData 002A                       __HW_Timer_Init 0D58  
        __end_of_PostCan_XmitService 0DA0                          __pbssCOMRAM 0033  
                      __pcstackBANK0 008C                          _BRGCON1bits 000F70  
                        _BRGCON2bits 000F71                   ES_InitQueue@pBlock 0016  
                        _BRGCON3bits 000F72         __size_of_InitCan_XmitService 002E  
         __end_of_RunCan_XmitService 0BBE                        __PRIMASK_temp 0042  
                   _CanErrorResponse 0DD0                    ??_Check4Keystroke 0016  
                          __pintcode 0008                             ?___awmod 0016  
                           ?___lbmod 0016                      ?_ToggleDebugLED 0001  
                    ??_ES_Initialize 0033             ES_PostToService@TheEvent 002D  
             __end_of__HW_Timer_Init 0D76                          __smallconst 0300  
              __size_of_ES_InitQueue 0036         PostCan_XmitService@ThisEvent 008C  
                     __size_of_putch 0002                 ES_Initialize@NewRate 0090  
                  ??_InitCanHardware 0016            ES_GetMSBitSet@Nybble2Test 001E  
                     ___wmul@product 0020                             _RXF0SIDH 000F00  
                       _ES_EventList 0357                             _RXF0SIDL 000F01  
                           _TXB0SIDH 000F41                             _TXB0SIDL 000F42  
                       _ES_InitQueue 0BFE                             _RXM0SIDH 000F18  
                           _RXM0SIDL 000F19                      ??_ES_Timer_Init 001A  
                    ?__HW_Timer_Init 0016                    ___wmul@multiplier 001C  
                 ES_DeQueue@SaveCrit 0028                 ES_EnQueueFIFO@pBlock 0022  
           __end_of_ES_PostToService 0B1E                       _BitNum2SetMask 0301  
                       _ServDescList 0350                             _InitPins 0C62  
                    _CanXmitResponse 0DDC                             __Hrparam 0000  
                     _ES_GetMSBitSet 096C                             __Lrparam 0000  
                   __size_of___awmod 0070                     __size_of___lbmod 002A  
                           _XmitData 0CB8          __size_of_ES_CheckUserEvents 0040  
                     _CanRCVResponse 0D76                       _ES_EnQueueFIFO 0838  
                   XmitData@DataByte 0016                   _ES_Timer_InitTimer 0A4E  
             __end_of_BitNum2SetMask 0321                             __ptext10 0DB2  
                           __ptext11 0C62                             __ptext20 0838  
                           __ptext12 0B1E                             __ptext21 0D32  
                           __ptext13 03B6                             __ptext30 0DD0  
                           __ptext22 09DE                             __ptext14 0CE2  
                           __ptext31 0000                             __ptext23 0DC2  
                           __ptext15 0BBE                             __ptext24 0D58  
                           __ptext16 0DE2                             __ptext25 0BFE  
                           __ptext17 05AC                             __ptext18 0C34  
                           __ptext27 0DDC                             __ptext19 0AB8  
                           __ptext28 0D76                             __ptext29 0A4E  
  ES_Timer_Tick_Resp@NeedsProcessing 0036                  ?_ES_Timer_InitTimer 0001  
                      __size_of_main 0080                   _ES_Timer_Tick_Resp 04B4  
             __end_of_ES_GetMSBitSet 09DE                  ?_ES_Timer_Tick_Resp 0001  
             __end_of_CanRCVResponse 0D8C               __end_of_ES_EnQueueFIFO 08EC  
                           int$flags 004A                  _InitCan_XmitService 0C34  
               ??_ES_Timer_InitTimer 0003                    ES_DeQueue@NumLeft 0029  
                        _RXB0CONbits 000F60             __end_of_CanErrorResponse 0DDC  
               ??_ES_Timer_Tick_Resp 008F        RunCan_XmitService@ReturnEvent 001A  
               ?_InitCan_XmitService 0001              __end_of_CanXmitResponse 0DE2  
                    _Check4Keystroke 0DE2                             intlevel2 0000  
                         _ES_DeQueue 03B6    __size_of__HW_Process_Pending_Ints 0012  
          ?__HW_Process_Pending_Ints 0001                          _TXB0CONbits 000F40  
                    ?_ES_GetMSBitSet 0016                     ??_ToggleDebugLED 0016  
ES_Timer_Tick_Resp@NextTimer2Process 0044                   _RunCan_XmitService 0B7C  
                           printf@ap 0018                      ?_CanRCVResponse 0001  
                    ?_ES_EnQueueFIFO 0022                     ES_DeQueue@pBlock 0022  
                ?_RunCan_XmitService 0017                      _InitCanHardware 0B1E  
             ES_DeQueue@pReturnEvent 0024                ES_InitQueue@BlockSize 0018  
              ??_InitCan_XmitService 0033         __size_of_PostCan_XmitService 0014  
               ??_RunCan_XmitService 001A  
