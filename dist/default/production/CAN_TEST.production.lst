

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Nov 14 23:40:53 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           	psect	smallconst
    49  000300                     __psmallconst:
    50                           	opt stack 0
    51  000300  00                 	db	0
    52  000301                     _BitNum2SetMask:
    53                           	opt stack 0
    54  000301  0001               	dw	1
    55  000303  0002               	dw	2
    56  000305  0004               	dw	4
    57  000307  0008               	dw	8
    58  000309  0010               	dw	16
    59  00030B  0020               	dw	32
    60  00030D  0040               	dw	64
    61  00030F  0080               	dw	128
    62  000311  0100               	dw	256
    63  000313  0200               	dw	512
    64  000315  0400               	dw	1024
    65  000317  0800               	dw	2048
    66  000319  1000               	dw	4096
    67  00031B  2000               	dw	8192
    68  00031D  4000               	dw	16384
    69  00031F  8000               	dw	32768
    70  000321                     __end_of_BitNum2SetMask:
    71                           	opt stack 0
    72  000321                     _Timer2PostFunc:
    73                           	opt stack 0
    74  000321  7E                 	db	low _PostCan_XmitService
    75  000322  0D                 	db	high _PostCan_XmitService
    76  000323  00                 	db	0
    77  000324  00                 	db	0
    78  000325  00                 	db	0
    79  000326  00                 	db	0
    80  000327  00                 	db	0
    81  000328  00                 	db	0
    82  000329  00                 	db	0
    83  00032A  00                 	db	0
    84  00032B  00                 	db	0
    85  00032C  00                 	db	0
    86  00032D  00                 	db	0
    87  00032E  00                 	db	0
    88  00032F  00                 	db	0
    89  000330  00                 	db	0
    90  000331  00                 	db	0
    91  000332  00                 	db	0
    92  000333  00                 	db	0
    93  000334  00                 	db	0
    94  000335  00                 	db	0
    95  000336  00                 	db	0
    96  000337  00                 	db	0
    97  000338  00                 	db	0
    98  000339  00                 	db	0
    99  00033A  00                 	db	0
   100  00033B  00                 	db	0
   101  00033C  00                 	db	0
   102  00033D  00                 	db	0
   103  00033E  00                 	db	0
   104  00033F  00                 	db	0
   105  000340  00                 	db	0
   106  000341                     __end_of_Timer2PostFunc:
   107                           	opt stack 0
   108  000341                     _Nybble2MSBitNum:
   109                           	opt stack 0
   110  000341  00                 	db	0
   111  000342  01                 	db	1
   112  000343  01                 	db	1
   113  000344  02                 	db	2
   114  000345  02                 	db	2
   115  000346  02                 	db	2
   116  000347  02                 	db	2
   117  000348  03                 	db	3
   118  000349  03                 	db	3
   119  00034A  03                 	db	3
   120  00034B  03                 	db	3
   121  00034C  03                 	db	3
   122  00034D  03                 	db	3
   123  00034E  03                 	db	3
   124  00034F  03                 	db	3
   125  000350                     __end_of_Nybble2MSBitNum:
   126                           	opt stack 0
   127  000350                     _ServDescList:
   128                           	opt stack 0
   129  000350  3C                 	db	low _InitCan_XmitService
   130  000351  0C                 	db	high _InitCan_XmitService
   131  000352  84                 	db	low _RunCan_XmitService
   132  000353  0B                 	db	high _RunCan_XmitService
   133  000354                     __end_of_ServDescList:
   134                           	opt stack 0
   135  000354                     _EventQueues:
   136                           	opt stack 0
   137  000354  80                 	db	low _Queue0
   138  000355  00                 	db	high _Queue0
   139  000356  04                 	db	4
   140  000357                     __end_of_EventQueues:
   141                           	opt stack 0
   142  000357                     _ES_EventList:
   143                           	opt stack 0
   144  000357  EA                 	db	low _Check4Keystroke
   145  000358  0D                 	db	high _Check4Keystroke
   146  000359                     __end_of_ES_EventList:
   147                           	opt stack 0
   148  000359                     _DistList00:
   149                           	opt stack 0
   150  000359  7E                 	db	low _PostCan_XmitService
   151  00035A  0D                 	db	high _PostCan_XmitService
   152  00035B                     __end_of_DistList00:
   153                           	opt stack 0
   154  0000                     _RXF0SIDH	set	3840
   155  0000                     _RXF0SIDL	set	3841
   156  0000                     _RXM0SIDH	set	3864
   157  0000                     _RXM0SIDL	set	3865
   158  0000                     _TXB0CONbits	set	3904
   159  0000                     _TXB0D0	set	3910
   160  0000                     _TXB0DLC	set	3909
   161  0000                     _TXB0SIDH	set	3905
   162  0000                     _TXB0SIDL	set	3906
   163  0000                     _ADCON1	set	4033
   164  0000                     _BRGCON1bits	set	3952
   165  0000                     _BRGCON2bits	set	3953
   166  0000                     _BRGCON3bits	set	3954
   167  0000                     _CANCON	set	3951
   168  0000                     _CANSTATbits	set	3950
   169  0000                     _CCP1CON	set	4029
   170  0000                     _CCPR1H	set	4031
   171  0000                     _CCPR1L	set	4030
   172  0000                     _ECANCON	set	3959
   173  0000                     _INTCON	set	4082
   174  0000                     _LATA	set	3977
   175  0000                     _LATB	set	3978
   176  0000                     _PIE1	set	3997
   177  0000                     _PORTA	set	3968
   178  0000                     _PORTB	set	3969
   179  0000                     _RXB0CONbits	set	3936
   180  0000                     _T1CON	set	4045
   181  0000                     _TRISAbits	set	3986
   182  0000                     _TRISBbits	set	3987
   183  0000                     _CCP1IF	set	31986
   184  0000                     _GIE	set	32663
   185  0000                     _IRCF0	set	32412
   186  0000                     _IRCF1	set	32413
   187  0000                     _IRCF2	set	32414
   188  0000                     _IRXIE	set	32031
   189  0000                     _IRXIF	set	32039
   190  0000                     _LATA0	set	31816
   191  0000                     _LATA1	set	31817
   192  0000                     _LATA2	set	31818
   193  0000                     _LATA3	set	31819
   194  0000                     _LATB2	set	31826
   195  0000                     _PEIE	set	32662
   196  0000                     _RXB0IE	set	32024
   197  0000                     _RXB0IF	set	32032
   198  0000                     _SCS1	set	32409
   199  0000                     _TXB0IE	set	32026
   200  0000                     _TXB0IF	set	32034
   201  00035B                     STR_1:
   202                           
   203                           ; BSR set to: 15
   204  00035B  46                 	db	70	;'F'
   205  00035C  61                 	db	97	;'a'
   206  00035D  69                 	db	105	;'i'
   207  00035E  6C                 	db	108	;'l'
   208  00035F  65                 	db	101	;'e'
   209  000360  64                 	db	100	;'d'
   210  000361  20                 	db	32
   211  000362  6F                 	db	111	;'o'
   212  000363  6E                 	db	110	;'n'
   213  000364  20                 	db	32
   214  000365  61                 	db	97	;'a'
   215  000366  74                 	db	116	;'t'
   216  000367  74                 	db	116	;'t'
   217  000368  65                 	db	101	;'e'
   218  000369  6D                 	db	109	;'m'
   219  00036A  70                 	db	112	;'p'
   220  00036B  74                 	db	116	;'t'
   221  00036C  20                 	db	32
   222  00036D  74                 	db	116	;'t'
   223  00036E  6F                 	db	111	;'o'
   224  00036F  20                 	db	32
   225  000370  50                 	db	80	;'P'
   226  000371  6F                 	db	111	;'o'
   227  000372  73                 	db	115	;'s'
   228  000373  74                 	db	116	;'t'
   229  000374  0A                 	db	10
   230  000375  00                 	db	0
   231  000376                     STR_2:
   232                           
   233                           ; BSR set to: 15
   234  000376  46                 	db	70	;'F'
   235  000377  61                 	db	97	;'a'
   236  000378  69                 	db	105	;'i'
   237  000379  6C                 	db	108	;'l'
   238  00037A  65                 	db	101	;'e'
   239  00037B  64                 	db	100	;'d'
   240  00037C  20                 	db	32
   241  00037D  6F                 	db	111	;'o'
   242  00037E  6E                 	db	110	;'n'
   243  00037F  20                 	db	32
   244  000380  4E                 	db	78	;'N'
   245  000381  55                 	db	85	;'U'
   246  000382  4C                 	db	76	;'L'
   247  000383  4C                 	db	76	;'L'
   248  000384  20                 	db	32
   249  000385  70                 	db	112	;'p'
   250  000386  6F                 	db	111	;'o'
   251  000387  69                 	db	105	;'i'
   252  000388  6E                 	db	110	;'n'
   253  000389  74                 	db	116	;'t'
   254  00038A  65                 	db	101	;'e'
   255  00038B  72                 	db	114	;'r'
   256  00038C  0A                 	db	10
   257  00038D  00                 	db	0
   258  00038E                     STR_3:
   259                           
   260                           ; BSR set to: 15
   261  00038E  46                 	db	70	;'F'
   262  00038F  61                 	db	97	;'a'
   263  000390  69                 	db	105	;'i'
   264  000391  6C                 	db	108	;'l'
   265  000392  65                 	db	101	;'e'
   266  000393  64                 	db	100	;'d'
   267  000394  20                 	db	32
   268  000395  49                 	db	73	;'I'
   269  000396  6E                 	db	110	;'n'
   270  000397  69                 	db	105	;'i'
   271  000398  74                 	db	116	;'t'
   272  000399  69                 	db	105	;'i'
   273  00039A  61                 	db	97	;'a'
   274  00039B  6C                 	db	108	;'l'
   275  00039C  69                 	db	105	;'i'
   276  00039D  7A                 	db	122	;'z'
   277  00039E  61                 	db	97	;'a'
   278  00039F  74                 	db	116	;'t'
   279  0003A0  69                 	db	105	;'i'
   280  0003A1  6F                 	db	111	;'o'
   281  0003A2  6E                 	db	110	;'n'
   282  0003A3  0A                 	db	10
   283  0003A4  00                 	db	0
   284  0003A5                     STR_4:
   285                           
   286                           ; BSR set to: 15
   287  0003A5  4F                 	db	79	;'O'
   288  0003A6  74                 	db	116	;'t'
   289  0003A7  68                 	db	104	;'h'
   290  0003A8  65                 	db	101	;'e'
   291  0003A9  72                 	db	114	;'r'
   292  0003AA  20                 	db	32
   293  0003AB  46                 	db	70	;'F'
   294  0003AC  61                 	db	97	;'a'
   295  0003AD  69                 	db	105	;'i'
   296  0003AE  6C                 	db	108	;'l'
   297  0003AF  75                 	db	117	;'u'
   298  0003B0  72                 	db	114	;'r'
   299  0003B1  65                 	db	101	;'e'
   300  0003B2  0A                 	db	10
   301  0003B3  00                 	db	0
   302                           
   303                           ; #config settings
   304  0003B4  00                 	db	0	; dummy byte at the end
   305  0000                     
   306                           	psect	cinit
   307  000D14                     __pcinit:
   308                           	opt stack 0
   309  000D14                     start_initialization:
   310                           	opt stack 0
   311  000D14                     __initialization:
   312                           	opt stack 0
   313                           
   314                           ; Clear objects allocated to BANK0 (44 bytes)
   315  000D14  EE00  F060         	lfsr	0,__pbssBANK0
   316  000D18  0E2C               	movlw	44
   317  000D1A                     clear_0:
   318  000D1A  6AEE               	clrf	postinc0,c
   319  000D1C  06E8               	decf	wreg,f,c
   320  000D1E  E1FD               	bnz	clear_0
   321                           
   322                           ; Clear objects allocated to COMRAM (23 bytes)
   323  000D20  EE00  F033         	lfsr	0,__pbssCOMRAM
   324  000D24  0E17               	movlw	23
   325  000D26                     clear_1:
   326  000D26  6AEE               	clrf	postinc0,c
   327  000D28  06E8               	decf	wreg,f,c
   328  000D2A  E1FD               	bnz	clear_1
   329  000D2C                     end_of_initialization:
   330                           	opt stack 0
   331  000D2C                     __end_of__initialization:
   332                           	opt stack 0
   333  000D2C  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   334  000D2E  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   335  000D30  0E00               	movlw	low (__Lmediumconst shr (0+16))
   336  000D32  6EF8               	movwf	tblptru,c
   337  000D34  0100               	movlb	0
   338  000D36  EF76  F004         	goto	_main	;jump to C main() function
   339                           tblptru	equ	0xFF8
   340                           postinc0	equ	0xFEE
   341                           wreg	equ	0xFE8
   342                           
   343                           	psect	bssCOMRAM
   344  000033                     __pbssCOMRAM:
   345                           	opt stack 0
   346  000033                     ES_Timer_Tick_Resp@NewEvent:
   347                           	opt stack 0
   348  000033                     	ds	3
   349  000036                     ES_Timer_Tick_Resp@NeedsProcessing:
   350                           	opt stack 0
   351  000036                     	ds	2
   352  000038                     ISR@LastTime:
   353                           	opt stack 0
   354  000038                     	ds	2
   355  00003A                     ISR@NextTime:
   356                           	opt stack 0
   357  00003A                     	ds	2
   358  00003C                     _Ready:
   359                           	opt stack 0
   360  00003C                     	ds	2
   361  00003E                     _SysTickCounter:
   362                           	opt stack 0
   363  00003E                     	ds	2
   364  000040                     _TMR_ActiveFlags:
   365                           	opt stack 0
   366  000040                     	ds	2
   367  000042                     __PRIMASK_temp:
   368                           	opt stack 0
   369  000042                     	ds	2
   370  000044                     ES_Timer_Tick_Resp@NextTimer2Process:
   371                           	opt stack 0
   372  000044                     	ds	1
   373  000045                     _MyPriority:
   374                           	opt stack 0
   375  000045                     	ds	1
   376  000046                     _TickCount:
   377                           	opt stack 0
   378  000046                     	ds	1
   379  000047                     ES_Run@ThisEvent:
   380                           	opt stack 0
   381  000047                     	ds	3
   382                           tblptru	equ	0xFF8
   383                           postinc0	equ	0xFEE
   384                           wreg	equ	0xFE8
   385                           
   386                           	psect	bssBANK0
   387  000060                     __pbssBANK0:
   388                           	opt stack 0
   389  000060                     _TMR_TimerArray:
   390                           	opt stack 0
   391  000060                     	ds	32
   392  000080                     _Queue0:
   393                           	opt stack 0
   394  000080                     	ds	12
   395                           tblptru	equ	0xFF8
   396                           postinc0	equ	0xFEE
   397                           wreg	equ	0xFE8
   398                           
   399                           	psect	cstackBANK0
   400  00008C                     __pcstackBANK0:
   401                           	opt stack 0
   402  00008C                     InitCan_XmitService@ThisEvent:
   403                           	opt stack 0
   404  00008C                     PostCan_XmitService@ThisEvent:
   405                           	opt stack 0
   406                           
   407                           ; 3 bytes @ 0x0
   408  00008C                     	ds	3
   409  00008F                     ??_ES_Timer_Tick_Resp:
   410  00008F                     InitCan_XmitService@Priority:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x3
   414  00008F                     	ds	1
   415  000090                     ES_Initialize@NewRate:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x4
   419  000090                     	ds	2
   420  000092                     ES_Initialize@i:
   421                           	opt stack 0
   422                           
   423                           ; 1 bytes @ 0x6
   424  000092                     	ds	1
   425  000093                     ??_ES_Run:
   426                           
   427                           ; 1 bytes @ 0x7
   428  000093                     	ds	4
   429  000097                     ES_Run@HighestPrior:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0xB
   433  000097                     	ds	1
   434  000098                     main@ErrorType:
   435                           	opt stack 0
   436                           
   437                           ; 1 bytes @ 0xC
   438  000098                     	ds	1
   439                           tblptru	equ	0xFF8
   440                           postinc0	equ	0xFEE
   441                           wreg	equ	0xFE8
   442                           
   443                           	psect	cstackCOMRAM
   444  000001                     __pcstackCOMRAM:
   445                           	opt stack 0
   446  000001                     ES_Timer_InitTimer@NewTime:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0x0
   450  000001                     	ds	2
   451  000003                     ??_ES_Timer_InitTimer:
   452                           
   453                           ; 1 bytes @ 0x2
   454  000003                     	ds	2
   455  000005                     ES_Timer_InitTimer@Num:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x4
   459  000005                     	ds	1
   460  000006                     ??_ISR:
   461                           
   462                           ; 1 bytes @ 0x5
   463  000006                     	ds	16
   464  000016                     ?_printf:
   465                           	opt stack 0
   466  000016                     ?___awmod:
   467                           	opt stack 0
   468  000016                     ES_CheckUserEvents@i:
   469                           	opt stack 0
   470  000016                     XmitData@DataByte:
   471                           	opt stack 0
   472  000016                     ___lbmod@divisor:
   473                           	opt stack 0
   474  000016                     ES_GetMSBitSet@Val2Check:
   475                           	opt stack 0
   476  000016                     __HW_Timer_Init@Rate:
   477                           	opt stack 0
   478  000016                     ES_InitQueue@pBlock:
   479                           	opt stack 0
   480  000016                     printf@f:
   481                           	opt stack 0
   482  000016                     ___awmod@dividend:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x15
   486  000016                     	ds	1
   487  000017                     ?_RunCan_XmitService:
   488                           	opt stack 0
   489  000017                     ___lbmod@dividend:
   490                           	opt stack 0
   491  000017                     RunCan_XmitService@ThisEvent:
   492                           	opt stack 0
   493                           
   494                           ; 3 bytes @ 0x16
   495  000017                     	ds	1
   496  000018                     ??_ES_GetMSBitSet:
   497  000018                     ES_InitQueue@BlockSize:
   498                           	opt stack 0
   499  000018                     ___lbmod@counter:
   500                           	opt stack 0
   501  000018                     ES_Timer_Init@Rate:
   502                           	opt stack 0
   503  000018                     printf@ap:
   504                           	opt stack 0
   505  000018                     ___awmod@divisor:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x17
   509  000018                     	ds	1
   510  000019                     ___lbmod@rem:
   511                           	opt stack 0
   512  000019                     ES_InitQueue@pThisQueue:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x18
   516  000019                     	ds	1
   517  00001A                     printf@c:
   518                           	opt stack 0
   519  00001A                     ___awmod@counter:
   520                           	opt stack 0
   521  00001A                     RunCan_XmitService@ReturnEvent:
   522                           	opt stack 0
   523                           
   524                           ; 3 bytes @ 0x19
   525  00001A                     	ds	1
   526  00001B                     ___awmod@sign:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x1A
   530  00001B                     	ds	1
   531  00001C                     ?___wmul:
   532                           	opt stack 0
   533  00001C                     ___wmul@multiplier:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x1B
   537  00001C                     	ds	1
   538  00001D                     ES_GetMSBitSet@ReturnVal:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x1C
   542  00001D                     	ds	1
   543  00001E                     ES_GetMSBitSet@Nybble2Test:
   544                           	opt stack 0
   545  00001E                     ___wmul@multiplicand:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x1D
   549  00001E                     	ds	1
   550  00001F                     ES_GetMSBitSet@LoopCntr:
   551                           	opt stack 0
   552                           
   553                           ; 1 bytes @ 0x1E
   554  00001F                     	ds	1
   555  000020                     ___wmul@product:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x1F
   559  000020                     	ds	2
   560  000022                     ES_EnQueueFIFO@pBlock:
   561                           	opt stack 0
   562  000022                     ES_DeQueue@pBlock:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x21
   566  000022                     	ds	2
   567  000024                     ES_DeQueue@pReturnEvent:
   568                           	opt stack 0
   569  000024                     ES_EnQueueFIFO@Event2Add:
   570                           	opt stack 0
   571                           
   572                           ; 3 bytes @ 0x23
   573  000024                     	ds	2
   574  000026                     ??_ES_DeQueue:
   575                           
   576                           ; 1 bytes @ 0x25
   577  000026                     	ds	1
   578  000027                     ??_ES_EnQueueFIFO:
   579                           
   580                           ; 1 bytes @ 0x26
   581  000027                     	ds	1
   582  000028                     ES_DeQueue@SaveCrit:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x27
   586  000028                     	ds	1
   587  000029                     ES_DeQueue@NumLeft:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x28
   591  000029                     	ds	1
   592  00002A                     ES_EnQueueFIFO@SaveCrit:
   593                           	opt stack 0
   594  00002A                     ES_DeQueue@pThisQueue:
   595                           	opt stack 0
   596                           
   597                           ; 2 bytes @ 0x29
   598  00002A                     	ds	1
   599  00002B                     ES_EnQueueFIFO@pThisQueue:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x2A
   603  00002B                     	ds	2
   604  00002D                     ES_PostToService@TheEvent:
   605                           	opt stack 0
   606                           
   607                           ; 3 bytes @ 0x2C
   608  00002D                     	ds	3
   609  000030                     ??_ES_PostToService:
   610                           
   611                           ; 1 bytes @ 0x2F
   612  000030                     	ds	2
   613  000032                     ES_PostToService@WhichService:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x31
   617  000032                     	ds	1
   618  000033                     tblptru	equ	0xFF8
   619                           postinc0	equ	0xFEE
   620                           wreg	equ	0xFE8
   621                           
   622                           ; 1 bytes @ 0x32
   623 ;;
   624 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   625 ;;
   626 ;; *************** function _main *****************
   627 ;; Defined at:
   628 ;;		line 25 in file "main.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;		None
   631 ;; Auto vars:     Size  Location     Type
   632 ;;  ErrorType       1   12[BANK0 ] enum E15642
   633 ;; Return value:  Size  Location     Type
   634 ;;                  2  294[None  ] int 
   635 ;; Registers used:
   636 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   637 ;; Tracked objects:
   638 ;;		On entry : 0/0
   639 ;;		On exit  : 0/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   642 ;;      Params:         0       0       0       0
   643 ;;      Locals:         0       1       0       0
   644 ;;      Temps:          0       0       0       0
   645 ;;      Totals:         0       1       0       0
   646 ;;Total ram usage:        1 bytes
   647 ;; Hardware stack levels required when called:   10
   648 ;; This function calls:
   649 ;;		_ES_Initialize
   650 ;;		_ES_Run
   651 ;;		_printf
   652 ;; This function is called by:
   653 ;;		Startup code after reset
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text0
   658  0008EC                     __ptext0:
   659                           	opt stack 0
   660  0008EC                     _main:
   661                           	opt stack 21
   662                           
   663                           ;main.c: 28: IRCF0 = 1;
   664                           
   665                           ; BSR set to: 15
   666                           ;incstack = 0
   667  0008EC  88D3               	bsf	4051,4,c	;volatile
   668                           
   669                           ;main.c: 29: IRCF1 = 1;
   670  0008EE  8AD3               	bsf	4051,5,c	;volatile
   671                           
   672                           ;main.c: 30: IRCF2 = 1;
   673  0008F0  8CD3               	bsf	4051,6,c	;volatile
   674                           
   675                           ;main.c: 31: SCS1 = 1;
   676  0008F2  82D3               	bsf	4051,1,c	;volatile
   677                           
   678                           ;main.c: 39: ES_Return_t ErrorType;
   679                           ;main.c: 55: ErrorType = ES_Initialize(ES_Timer_RATE_1mS);
   680  0008F4  0E9C               	movlw	156
   681  0008F6  0100               	movlb	0	; () banked
   682  0008F8  6F91               	movwf	(ES_Initialize@NewRate+1)& (0+255),b
   683  0008FA  0E3F               	movlw	63
   684  0008FC  6F90               	movwf	ES_Initialize@NewRate& (0+255),b
   685  0008FE  ECD6  F002         	call	_ES_Initialize	;wreg free
   686  000902  0100               	movlb	0	; () banked
   687  000904  6F98               	movwf	main@ErrorType& (0+255),b
   688                           
   689                           ; BSR set to: 0
   690                           ;main.c: 56: if ( ErrorType == Success ) {
   691  000906  0100               	movlb	0	; () banked
   692  000908  5198               	movf	main@ErrorType& (0+255),w,b
   693  00090A  0100               	movlb	0	; () banked
   694  00090C  A4D8               	btfss	status,2,c
   695  00090E  D021               	goto	l2577
   696                           
   697                           ; BSR set to: 0
   698                           ;main.c: 58: ErrorType = ES_Run();
   699  000910  EC4C  F003         	call	_ES_Run	;wreg free
   700  000914  0100               	movlb	0	; () banked
   701  000916  6F98               	movwf	main@ErrorType& (0+255),b
   702                           
   703                           ; BSR set to: 0
   704                           ;main.c: 60: }
   705                           ;main.c: 62: switch (ErrorType){
   706  000918  D01C               	goto	l2577
   707  00091A                     l2567:
   708                           
   709                           ; BSR set to: 0
   710                           ;main.c: 64: printf("Failed on attempt to Post\n");
   711  00091A  0E5B               	movlw	low STR_1
   712  00091C  6E16               	movwf	printf@f,c
   713  00091E  0E03               	movlw	high STR_1
   714  000920  6E17               	movwf	printf@f+1,c
   715  000922  EC4B  F006         	call	_printf	;wreg free
   716                           
   717                           ;main.c: 65: break;
   718  000926  D021               	goto	l302
   719  000928                     l2569:
   720                           
   721                           ;main.c: 67: printf("Failed on NULL pointer\n");
   722  000928  0E76               	movlw	low STR_2
   723  00092A  6E16               	movwf	printf@f,c
   724  00092C  0E03               	movlw	high STR_2
   725  00092E  6E17               	movwf	printf@f+1,c
   726  000930  EC4B  F006         	call	_printf	;wreg free
   727                           
   728                           ;main.c: 68: break;
   729  000934  D01A               	goto	l302
   730  000936                     l2571:
   731                           
   732                           ;main.c: 70: printf("Failed Initialization\n");
   733  000936  0E8E               	movlw	low STR_3
   734  000938  6E16               	movwf	printf@f,c
   735  00093A  0E03               	movlw	high STR_3
   736  00093C  6E17               	movwf	printf@f+1,c
   737  00093E  EC4B  F006         	call	_printf	;wreg free
   738                           
   739                           ;main.c: 71: break;
   740  000942  D013               	goto	l302
   741  000944                     l2573:
   742                           
   743                           ;main.c: 73: printf("Other Failure\n");
   744  000944  0EA5               	movlw	low STR_4
   745  000946  6E16               	movwf	printf@f,c
   746  000948  0E03               	movlw	high STR_4
   747  00094A  6E17               	movwf	printf@f+1,c
   748  00094C  EC4B  F006         	call	_printf	;wreg free
   749                           
   750                           ;main.c: 75: }
   751                           
   752                           ;main.c: 74: break;
   753  000950  D00C               	goto	l302
   754  000952                     l2577:
   755  000952  0100               	movlb	0	; () banked
   756  000954  5198               	movf	main@ErrorType& (0+255),w,b
   757                           
   758                           ; Switch size 1, requested type "space"
   759                           ; Number of cases is 3, Range of values is 1 to 5
   760                           ; switch strategies available:
   761                           ; Name         Instructions Cycles
   762                           ; simple_byte           10     6 (average)
   763                           ;	Chosen strategy is simple_byte
   764  000956  0A01               	xorlw	1	; case 1
   765  000958  B4D8               	btfsc	status,2,c
   766  00095A  D7DF               	goto	l2567
   767  00095C  0A02               	xorlw	2	; case 3
   768  00095E  B4D8               	btfsc	status,2,c
   769  000960  D7E3               	goto	l2569
   770  000962  0A06               	xorlw	6	; case 5
   771  000964  B4D8               	btfsc	status,2,c
   772  000966  D7E7               	goto	l2571
   773  000968  D7ED               	goto	l2573
   774  00096A                     l302:
   775                           
   776                           ;main.c: 77: ;
   777  00096A  D7FF               	goto	l302
   778  00096C                     __end_of_main:
   779                           	opt stack 0
   780                           tblptru	equ	0xFF8
   781                           postinc0	equ	0xFEE
   782                           wreg	equ	0xFE8
   783                           status	equ	0xFD8
   784                           
   785 ;; *************** function _printf *****************
   786 ;; Defined at:
   787 ;;		line 464 in file "/Applications/microchip/xc8/v1.38/sources/common/doprnt.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  f               2   21[COMRAM] PTR const unsigned char 
   790 ;;		 -> STR_4(15), STR_3(23), STR_2(24), STR_1(27), 
   791 ;; Auto vars:     Size  Location     Type
   792 ;;  tmpval          4    0        struct .
   793 ;;  cp              3    0        PTR const unsigned char 
   794 ;;  ap              2   23[COMRAM] PTR void [1]
   795 ;;		 -> ?_printf(2), 
   796 ;;  len             2    0        unsigned int 
   797 ;;  val             2    0        unsigned int 
   798 ;;  c               1   25[COMRAM] char 
   799 ;;  flag            1    0        unsigned char 
   800 ;;  prec            1    0        char 
   801 ;; Return value:  Size  Location     Type
   802 ;;                  2   21[COMRAM] int 
   803 ;; Registers used:
   804 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   805 ;; Tracked objects:
   806 ;;		On entry : 0/0
   807 ;;		On exit  : 0/0
   808 ;;		Unchanged: 0/0
   809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   810 ;;      Params:         2       0       0       0
   811 ;;      Locals:         3       0       0       0
   812 ;;      Temps:          0       0       0       0
   813 ;;      Totals:         5       0       0       0
   814 ;;Total ram usage:        5 bytes
   815 ;; Hardware stack levels used:    1
   816 ;; Hardware stack levels required when called:    4
   817 ;; This function calls:
   818 ;;		_putch
   819 ;; This function is called by:
   820 ;;		_main
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           	psect	text1
   825  000C96                     __ptext1:
   826                           	opt stack 0
   827  000C96                     _printf:
   828                           	opt stack 26
   829                           
   830                           ;doprnt.c: 466: va_list ap;
   831                           ;doprnt.c: 499: signed char c;
   832                           ;doprnt.c: 506: signed char prec;
   833                           ;doprnt.c: 508: unsigned char flag;
   834                           ;doprnt.c: 523: union {
   835                           ;doprnt.c: 524: unsigned long vd;
   836                           ;doprnt.c: 525: double integ;
   837                           ;doprnt.c: 526: } tmpval;
   838                           ;doprnt.c: 528: unsigned int val;
   839                           ;doprnt.c: 529: unsigned len;
   840                           ;doprnt.c: 530: const char * cp;
   841                           ;doprnt.c: 533: *ap = __va_start();
   842                           
   843                           ;incstack = 0
   844  000C96  0E18               	movlw	low (?_printf+2)
   845  000C98  6E18               	movwf	printf@ap,c
   846  000C9A  0E00               	movlw	high (?_printf+2)
   847  000C9C  6E19               	movwf	printf@ap+1,c
   848                           
   849                           ;doprnt.c: 536: while(c = *f++) {
   850  000C9E  D003               	goto	l2463
   851  000CA0                     l2461:
   852                           
   853                           ;doprnt.c: 540: {
   854                           ;doprnt.c: 541: (putch(c) );
   855  000CA0  501A               	movf	printf@c,w,c
   856  000CA2  ECF7  F006         	call	_putch
   857  000CA6                     l2463:
   858  000CA6  C016  FFF6         	movff	printf@f,tblptrl
   859  000CAA  C017  FFF7         	movff	printf@f+1,tblptrh
   860  000CAE  4A16               	infsnz	printf@f,f,c
   861  000CB0  2A17               	incf	printf@f+1,f,c
   862  000CB2                     	if	0	;tblptru may be non-zero
   863  000CB2                     	endif
   864  000CB2                     	if	0	;tblptru may be non-zero
   865  000CB2                     	endif
   866  000CB2  0008               	tblrd		*
   867  000CB4  CFF5 F01A          	movff	tablat,printf@c
   868  000CB8  501A               	movf	printf@c,w,c
   869  000CBA  B4D8               	btfsc	status,2,c
   870  000CBC  0012               	return	
   871  000CBE  D7F0               	goto	l2461
   872  000CC0                     __end_of_printf:
   873                           	opt stack 0
   874                           tblptru	equ	0xFF8
   875                           tblptrh	equ	0xFF7
   876                           tblptrl	equ	0xFF6
   877                           tablat	equ	0xFF5
   878                           postinc0	equ	0xFEE
   879                           wreg	equ	0xFE8
   880                           status	equ	0xFD8
   881                           
   882 ;; *************** function _putch *****************
   883 ;; Defined at:
   884 ;;		line 7 in file "/Applications/microchip/xc8/v1.38/sources/common/putch.c"
   885 ;; Parameters:    Size  Location     Type
   886 ;;  c               1    wreg     unsigned char 
   887 ;; Auto vars:     Size  Location     Type
   888 ;;  c               1    0[COMRAM] unsigned char 
   889 ;; Return value:  Size  Location     Type
   890 ;;                  1    wreg      void 
   891 ;; Registers used:
   892 ;;		wreg
   893 ;; Tracked objects:
   894 ;;		On entry : 0/0
   895 ;;		On exit  : 0/0
   896 ;;		Unchanged: 0/0
   897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   898 ;;      Params:         0       0       0       0
   899 ;;      Locals:         0       0       0       0
   900 ;;      Temps:          0       0       0       0
   901 ;;      Totals:         0       0       0       0
   902 ;;Total ram usage:        0 bytes
   903 ;; Hardware stack levels used:    1
   904 ;; Hardware stack levels required when called:    3
   905 ;; This function calls:
   906 ;;		Nothing
   907 ;; This function is called by:
   908 ;;		_printf
   909 ;; This function uses a non-reentrant model
   910 ;;
   911                           
   912                           	psect	text2
   913  000DEE                     __ptext2:
   914                           	opt stack 0
   915  000DEE                     _putch:
   916                           	opt stack 26
   917                           
   918                           ;incstack = 0
   919  000DEE  0012               	return		;funcret
   920  000DF0                     __end_of_putch:
   921                           	opt stack 0
   922                           tblptru	equ	0xFF8
   923                           tblptrh	equ	0xFF7
   924                           tblptrl	equ	0xFF6
   925                           tablat	equ	0xFF5
   926                           postinc0	equ	0xFEE
   927                           wreg	equ	0xFE8
   928                           status	equ	0xFD8
   929                           
   930 ;; *************** function _ES_Run *****************
   931 ;; Defined at:
   932 ;;		line 277 in file "ES_Framework.c"
   933 ;; Parameters:    Size  Location     Type
   934 ;;		None
   935 ;; Auto vars:     Size  Location     Type
   936 ;;  HighestPrior    1   11[BANK0 ] unsigned char 
   937 ;; Return value:  Size  Location     Type
   938 ;;                  1    wreg      enum E15490
   939 ;; Registers used:
   940 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   941 ;; Tracked objects:
   942 ;;		On entry : 0/0
   943 ;;		On exit  : 0/0
   944 ;;		Unchanged: 0/0
   945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   946 ;;      Params:         0       0       0       0
   947 ;;      Locals:         0       1       0       0
   948 ;;      Temps:          0       4       0       0
   949 ;;      Totals:         0       5       0       0
   950 ;;Total ram usage:        5 bytes
   951 ;; Hardware stack levels used:    1
   952 ;; Hardware stack levels required when called:    9
   953 ;; This function calls:
   954 ;;		_ES_CheckUserEvents
   955 ;;		_ES_DeQueue
   956 ;;		_ES_GetMSBitSet
   957 ;;		_RunCan_XmitService
   958 ;;		__HW_Process_Pending_Ints
   959 ;; This function is called by:
   960 ;;		_main
   961 ;; This function uses a non-reentrant model
   962 ;;
   963                           
   964                           	psect	text3
   965  000698                     __ptext3:
   966                           	opt stack 0
   967  000698                     _ES_Run:
   968                           	opt stack 21
   969                           
   970                           ;ES_Framework.c: 287: while( (_HW_Process_Pending_Ints()) && (Ready != 0)){
   971                           
   972                           ;incstack = 0
   973                           ;ES_Framework.c: 279: uint8_t HighestPrior;
   974                           ;ES_Framework.c: 280: static ES_Event ThisEvent;
   975                           ;ES_Framework.c: 282: while(1){
   976  000698  D067               	goto	l2449
   977  00069A                     l2437:
   978                           
   979                           ;ES_Framework.c: 288: HighestPrior = ES_GetMSBitSet(Ready);
   980  00069A  C03C  F016         	movff	_Ready,ES_GetMSBitSet@Val2Check
   981  00069E  C03D  F017         	movff	_Ready+1,ES_GetMSBitSet@Val2Check+1
   982  0006A2  ECB6  F004         	call	_ES_GetMSBitSet	;wreg free
   983  0006A6  0100               	movlb	0	; () banked
   984  0006A8  6F97               	movwf	ES_Run@HighestPrior& (0+255),b
   985                           
   986                           ; BSR set to: 0
   987                           ;ES_Framework.c: 289: if ( ES_DeQueue( EventQueues[HighestPrior].pMem, &ThisEvent ) == 0
      +                           ){
   988  0006AA  0100               	movlb	0	; () banked
   989  0006AC  5197               	movf	ES_Run@HighestPrior& (0+255),w,b
   990  0006AE  0D03               	mullw	3
   991  0006B0  0E54               	movlw	low _EventQueues
   992  0006B2  24F3               	addwf	prodl,w,c
   993  0006B4  6EF6               	movwf	tblptrl,c
   994  0006B6  0E03               	movlw	high _EventQueues
   995  0006B8  20F4               	addwfc	prodh,w,c
   996  0006BA  6EF7               	movwf	tblptrh,c
   997  0006BC                     	if	0	;There are less than 3 active tblptr bytes
   998  0006BC                     	endif
   999  0006BC  0009               	tblrd		*+
  1000  0006BE  CFF5 F022          	movff	tablat,ES_DeQueue@pBlock
  1001  0006C2  000A               	tblrd		*-
  1002  0006C4  CFF5 F023          	movff	tablat,ES_DeQueue@pBlock+1
  1003  0006C8  0E47               	movlw	low ES_Run@ThisEvent
  1004  0006CA  6E24               	movwf	ES_DeQueue@pReturnEvent,c
  1005  0006CC  0E00               	movlw	high ES_Run@ThisEvent
  1006  0006CE  6E25               	movwf	ES_DeQueue@pReturnEvent+1,c
  1007  0006D0  ECDB  F001         	call	_ES_DeQueue	;wreg free
  1008  0006D4  0900               	iorlw	0
  1009  0006D6  A4D8               	btfss	status,2,c
  1010  0006D8  D01D               	goto	l2443
  1011                           
  1012                           ;ES_Framework.c: 290: Ready &= ~BitNum2SetMask[HighestPrior];
  1013  0006DA  0100               	movlb	0	; () banked
  1014  0006DC  5197               	movf	ES_Run@HighestPrior& (0+255),w,b
  1015  0006DE  0D02               	mullw	2
  1016  0006E0  0E01               	movlw	low _BitNum2SetMask
  1017  0006E2  24F3               	addwf	prodl,w,c
  1018  0006E4  6EF6               	movwf	tblptrl,c
  1019  0006E6  0E03               	movlw	high _BitNum2SetMask
  1020  0006E8  20F4               	addwfc	prodh,w,c
  1021  0006EA  6EF7               	movwf	tblptrh,c
  1022  0006EC                     	if	0	;There are less than 3 active tblptr bytes
  1023  0006EC                     	endif
  1024  0006EC  0009               	tblrd		*+
  1025  0006EE  CFF5 F093          	movff	tablat,??_ES_Run
  1026  0006F2  0009               	tblrd		*+
  1027  0006F4  CFF5 F094          	movff	tablat,??_ES_Run+1
  1028  0006F8  0100               	movlb	0	; () banked
  1029  0006FA  1D93               	comf	??_ES_Run& (0+255),w,b
  1030  0006FC  0100               	movlb	0	; () banked
  1031  0006FE  6F95               	movwf	(??_ES_Run+2)& (0+255),b
  1032  000700  0100               	movlb	0	; () banked
  1033  000702  1D94               	comf	(??_ES_Run+1)& (0+255),w,b
  1034  000704  0100               	movlb	0	; () banked
  1035  000706  6F96               	movwf	(??_ES_Run+3)& (0+255),b
  1036  000708  0100               	movlb	0	; () banked
  1037  00070A  5195               	movf	(??_ES_Run+2)& (0+255),w,b
  1038  00070C  163C               	andwf	_Ready,f,c
  1039  00070E  0100               	movlb	0	; () banked
  1040  000710  5196               	movf	(??_ES_Run+3)& (0+255),w,b
  1041  000712  163D               	andwf	_Ready+1,f,c
  1042  000714                     l2443:
  1043                           
  1044                           ;ES_Framework.c: 291: }
  1045                           ;ES_Framework.c: 292: if( ServDescList[HighestPrior].RunFunc(ThisEvent).EventType != ES_
      +                          NO_EVENT) {
  1046  000714  C047  F017         	movff	ES_Run@ThisEvent,RunCan_XmitService@ThisEvent
  1047  000718  C048  F018         	movff	ES_Run@ThisEvent+1,RunCan_XmitService@ThisEvent+1
  1048  00071C  C049  F019         	movff	ES_Run@ThisEvent+2,RunCan_XmitService@ThisEvent+2
  1049  000720  0100               	movlb	0	; () banked
  1050  000722  5197               	movf	ES_Run@HighestPrior& (0+255),w,b
  1051  000724  0D04               	mullw	4
  1052  000726  0E02               	movlw	2
  1053  000728  26F3               	addwf	prodl,f,c
  1054  00072A  0E00               	movlw	0
  1055  00072C  22F4               	addwfc	prodh,f,c
  1056  00072E  0E50               	movlw	low _ServDescList
  1057  000730  24F3               	addwf	prodl,w,c
  1058  000732  6EF6               	movwf	tblptrl,c
  1059  000734  0E03               	movlw	high _ServDescList
  1060  000736  20F4               	addwfc	prodh,w,c
  1061  000738  6EF7               	movwf	tblptrh,c
  1062  00073A                     	if	0	;There are less than 3 active tblptr bytes
  1063  00073A                     	endif
  1064  00073A  D801               	call	u1788
  1065  00073C  D00C               	goto	u1789
  1066  00073E                     u1788:
  1067  00073E  0005               	push	
  1068  000740  6EFA               	movwf	pclath,c
  1069  000742  0009               	tblrd		*+
  1070  000744  50F5               	movf	tablat,w,c
  1071  000746  6EFD               	movwf	tosl,c
  1072  000748  0009               	tblrd		*+
  1073  00074A  50F5               	movf	tablat,w,c
  1074  00074C  6EFE               	movwf	tosh,c
  1075  00074E  50F8               	movf	tblptru,w,c
  1076  000750  6EFF               	movwf	tosu,c
  1077  000752  50FA               	movf	pclath,w,c
  1078  000754  0012               	return		;indir
  1079  000756                     u1789:
  1080  000756  0E17               	movlw	low ?_RunCan_XmitService
  1081  000758  6ED9               	movwf	fsr2l,c
  1082  00075A  0E00               	movlw	high ?_RunCan_XmitService
  1083  00075C  6EDA               	movwf	fsr2h,c
  1084  00075E  50DF               	movf	indf2,w,c
  1085  000760  B4D8               	btfsc	status,2,c
  1086  000762  D002               	goto	l2449
  1087                           
  1088                           ;ES_Framework.c: 293: return FailedRun;
  1089  000764  0E02               	movlw	2
  1090  000766  0012               	return	
  1091  000768                     l2449:
  1092  000768  ECD3  F006         	call	__HW_Process_Pending_Ints	;wreg free
  1093  00076C  0900               	iorlw	0
  1094  00076E  B4D8               	btfsc	status,2,c
  1095  000770  D004               	goto	l2453
  1096  000772  503C               	movf	_Ready,w,c
  1097  000774  103D               	iorwf	_Ready+1,w,c
  1098  000776  A4D8               	btfss	status,2,c
  1099  000778  D790               	goto	l2437
  1100  00077A                     l2453:
  1101                           
  1102                           ;ES_Framework.c: 294: }
  1103                           ;ES_Framework.c: 295: }
  1104                           ;ES_Framework.c: 298: ES_CheckUserEvents();
  1105  00077A  ECE3  F005         	call	_ES_CheckUserEvents	;wreg free
  1106  00077E  D7F4               	goto	l2449
  1107  000780                     __end_of_ES_Run:
  1108                           	opt stack 0
  1109                           tosu	equ	0xFFF
  1110                           tosh	equ	0xFFE
  1111                           tosl	equ	0xFFD
  1112                           pclath	equ	0xFFA
  1113                           tblptru	equ	0xFF8
  1114                           tblptrh	equ	0xFF7
  1115                           tblptrl	equ	0xFF6
  1116                           tablat	equ	0xFF5
  1117                           prodh	equ	0xFF4
  1118                           prodl	equ	0xFF3
  1119                           postinc0	equ	0xFEE
  1120                           wreg	equ	0xFE8
  1121                           indf2	equ	0xFDF
  1122                           fsr2h	equ	0xFDA
  1123                           fsr2l	equ	0xFD9
  1124                           status	equ	0xFD8
  1125                           
  1126 ;; *************** function __HW_Process_Pending_Ints *****************
  1127 ;; Defined at:
  1128 ;;		line 221 in file "ES_Port.c"
  1129 ;; Parameters:    Size  Location     Type
  1130 ;;		None
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;		None
  1133 ;; Return value:  Size  Location     Type
  1134 ;;                  1    wreg      unsigned char 
  1135 ;; Registers used:
  1136 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1137 ;; Tracked objects:
  1138 ;;		On entry : 0/0
  1139 ;;		On exit  : 0/0
  1140 ;;		Unchanged: 0/0
  1141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1142 ;;      Params:         0       0       0       0
  1143 ;;      Locals:         0       0       0       0
  1144 ;;      Temps:          0       0       0       0
  1145 ;;      Totals:         0       0       0       0
  1146 ;;Total ram usage:        0 bytes
  1147 ;; Hardware stack levels used:    1
  1148 ;; Hardware stack levels required when called:    8
  1149 ;; This function calls:
  1150 ;;		_ES_Timer_Tick_Resp
  1151 ;; This function is called by:
  1152 ;;		_ES_Run
  1153 ;; This function uses a non-reentrant model
  1154 ;;
  1155                           
  1156                           	psect	text4
  1157  000DA6                     __ptext4:
  1158                           	opt stack 0
  1159  000DA6                     __HW_Process_Pending_Ints:
  1160                           	opt stack 21
  1161                           
  1162                           ;ES_Port.c: 223: while (TickCount > 0)
  1163                           
  1164                           ;incstack = 0
  1165  000DA6  D003               	goto	l2367
  1166  000DA8                     l2363:
  1167                           
  1168                           ;ES_Port.c: 224: {
  1169                           ;ES_Port.c: 226: ES_Timer_Tick_Resp();
  1170  000DA8  EC5A  F002         	call	_ES_Timer_Tick_Resp	;wreg free
  1171                           
  1172                           ;ES_Port.c: 227: TickCount--;
  1173  000DAC  0646               	decf	_TickCount,f,c	;volatile
  1174  000DAE                     l2367:
  1175  000DAE  5046               	movf	_TickCount,w,c	;volatile
  1176  000DB0  A4D8               	btfss	status,2,c
  1177  000DB2  D7FA               	goto	l2363
  1178                           
  1179                           ;ES_Port.c: 228: }
  1180                           ;ES_Port.c: 230: return 1;
  1181  000DB4  0E01               	movlw	1
  1182  000DB6  0012               	return	
  1183  000DB8                     __end_of__HW_Process_Pending_Ints:
  1184                           	opt stack 0
  1185                           tosu	equ	0xFFF
  1186                           tosh	equ	0xFFE
  1187                           tosl	equ	0xFFD
  1188                           pclath	equ	0xFFA
  1189                           tblptru	equ	0xFF8
  1190                           tblptrh	equ	0xFF7
  1191                           tblptrl	equ	0xFF6
  1192                           tablat	equ	0xFF5
  1193                           prodh	equ	0xFF4
  1194                           prodl	equ	0xFF3
  1195                           postinc0	equ	0xFEE
  1196                           wreg	equ	0xFE8
  1197                           indf2	equ	0xFDF
  1198                           fsr2h	equ	0xFDA
  1199                           fsr2l	equ	0xFD9
  1200                           status	equ	0xFD8
  1201                           
  1202 ;; *************** function _ES_Timer_Tick_Resp *****************
  1203 ;; Defined at:
  1204 ;;		line 284 in file "ES_Timers.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;		None
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;		None
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  1    wreg      void 
  1211 ;; Registers used:
  1212 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1218 ;;      Params:         0       0       0       0
  1219 ;;      Locals:         0       0       0       0
  1220 ;;      Temps:          0       4       0       0
  1221 ;;      Totals:         0       4       0       0
  1222 ;;Total ram usage:        4 bytes
  1223 ;; Hardware stack levels used:    1
  1224 ;; Hardware stack levels required when called:    7
  1225 ;; This function calls:
  1226 ;;		Absolute function
  1227 ;;		_ES_GetMSBitSet
  1228 ;;		_PostCan_XmitService
  1229 ;; This function is called by:
  1230 ;;		__HW_Process_Pending_Ints
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           	psect	text5
  1235  0004B4                     __ptext5:
  1236                           	opt stack 0
  1237  0004B4                     _ES_Timer_Tick_Resp:
  1238                           	opt stack 21
  1239                           
  1240                           ;ES_Timers.c: 286: static Tflag_t NeedsProcessing;
  1241                           ;ES_Timers.c: 287: static uint8_t NextTimer2Process;
  1242                           ;ES_Timers.c: 288: static ES_Event NewEvent;
  1243                           ;ES_Timers.c: 290: if (TMR_ActiveFlags != 0)
  1244                           
  1245                           ;incstack = 0
  1246  0004B4  5040               	movf	_TMR_ActiveFlags,w,c
  1247  0004B6  1041               	iorwf	_TMR_ActiveFlags+1,w,c
  1248  0004B8  B4D8               	btfsc	status,2,c
  1249  0004BA  0012               	return	
  1250                           
  1251                           ;ES_Timers.c: 291: {
  1252                           ;ES_Timers.c: 293: NeedsProcessing = TMR_ActiveFlags;
  1253  0004BC  C040  F036         	movff	_TMR_ActiveFlags,ES_Timer_Tick_Resp@NeedsProcessing
  1254  0004C0  C041  F037         	movff	_TMR_ActiveFlags+1,ES_Timer_Tick_Resp@NeedsProcessing+1
  1255  0004C4                     l2219:
  1256                           
  1257                           ;ES_Timers.c: 296: NextTimer2Process = ES_GetMSBitSet(NeedsProcessing);
  1258  0004C4  C036  F016         	movff	ES_Timer_Tick_Resp@NeedsProcessing,ES_GetMSBitSet@Val2Check
  1259  0004C8  C037  F017         	movff	ES_Timer_Tick_Resp@NeedsProcessing+1,ES_GetMSBitSet@Val2Check+1
  1260  0004CC  ECB6  F004         	call	_ES_GetMSBitSet	;wreg free
  1261  0004D0  6E44               	movwf	ES_Timer_Tick_Resp@NextTimer2Process,c
  1262                           
  1263                           ;ES_Timers.c: 298: if(--TMR_TimerArray[NextTimer2Process] == 0)
  1264  0004D2  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1265  0004D4  0D02               	mullw	2
  1266  0004D6  0E60               	movlw	low _TMR_TimerArray
  1267  0004D8  24F3               	addwf	prodl,w,c
  1268  0004DA  6ED9               	movwf	fsr2l,c
  1269  0004DC  0E00               	movlw	high _TMR_TimerArray
  1270  0004DE  20F4               	addwfc	prodh,w,c
  1271  0004E0  6EDA               	movwf	fsr2h,c
  1272  0004E2  06DE               	decf	postinc2,f,c
  1273  0004E4  0E00               	movlw	0
  1274  0004E6  5ADD               	subwfb	postdec2,f,c
  1275  0004E8  50DE               	movf	postinc2,w,c
  1276  0004EA  10DE               	iorwf	postinc2,w,c
  1277  0004EC  A4D8               	btfss	status,2,c
  1278  0004EE  D03D               	goto	l2231
  1279                           
  1280                           ;ES_Timers.c: 299: {
  1281                           ;ES_Timers.c: 300: NewEvent.EventType = ES_TIMEOUT;
  1282  0004F0  0E03               	movlw	3
  1283  0004F2  6E33               	movwf	ES_Timer_Tick_Resp@NewEvent,c
  1284                           
  1285                           ;ES_Timers.c: 301: NewEvent.EventParam = NextTimer2Process;
  1286  0004F4  C044  F034         	movff	ES_Timer_Tick_Resp@NextTimer2Process,ES_Timer_Tick_Resp@NewEvent+1
  1287  0004F8  6A35               	clrf	ES_Timer_Tick_Resp@NewEvent+2,c
  1288                           
  1289                           ;ES_Timers.c: 303: Timer2PostFunc[NextTimer2Process](NewEvent);
  1290  0004FA  C033  F08C         	movff	ES_Timer_Tick_Resp@NewEvent,PostCan_XmitService@ThisEvent
  1291  0004FE  C034  F08D         	movff	ES_Timer_Tick_Resp@NewEvent+1,PostCan_XmitService@ThisEvent+1
  1292  000502  C035  F08E         	movff	ES_Timer_Tick_Resp@NewEvent+2,PostCan_XmitService@ThisEvent+2
  1293  000506  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1294  000508  0D02               	mullw	2
  1295  00050A  0E21               	movlw	low _Timer2PostFunc
  1296  00050C  24F3               	addwf	prodl,w,c
  1297  00050E  6EF6               	movwf	tblptrl,c
  1298  000510  0E03               	movlw	high _Timer2PostFunc
  1299  000512  20F4               	addwfc	prodh,w,c
  1300  000514  6EF7               	movwf	tblptrh,c
  1301  000516                     	if	0	;There are less than 3 active tblptr bytes
  1302  000516                     	endif
  1303  000516  D801               	call	u1538
  1304  000518  D00C               	goto	l2229
  1305  00051A                     u1538:
  1306  00051A  0005               	push	
  1307  00051C  6EFA               	movwf	pclath,c
  1308  00051E  0009               	tblrd		*+
  1309  000520  50F5               	movf	tablat,w,c
  1310  000522  6EFD               	movwf	tosl,c
  1311  000524  0009               	tblrd		*+
  1312  000526  50F5               	movf	tablat,w,c
  1313  000528  6EFE               	movwf	tosh,c
  1314  00052A  50F8               	movf	tblptru,w,c
  1315  00052C  6EFF               	movwf	tosu,c
  1316  00052E  50FA               	movf	pclath,w,c
  1317  000530  0012               	return		;indir
  1318  000532                     l2229:
  1319                           
  1320                           ;ES_Timers.c: 305: TMR_ActiveFlags &= ~BitNum2SetMask[NextTimer2Process];
  1321  000532  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1322  000534  0D02               	mullw	2
  1323  000536  0E01               	movlw	low _BitNum2SetMask
  1324  000538  24F3               	addwf	prodl,w,c
  1325  00053A  6EF6               	movwf	tblptrl,c
  1326  00053C  0E03               	movlw	high _BitNum2SetMask
  1327  00053E  20F4               	addwfc	prodh,w,c
  1328  000540  6EF7               	movwf	tblptrh,c
  1329  000542                     	if	0	;There are less than 3 active tblptr bytes
  1330  000542                     	endif
  1331  000542  0009               	tblrd		*+
  1332  000544  CFF5 F08F          	movff	tablat,??_ES_Timer_Tick_Resp
  1333  000548  0009               	tblrd		*+
  1334  00054A  CFF5 F090          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1335  00054E  0100               	movlb	0	; () banked
  1336  000550  1D8F               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1337  000552  0100               	movlb	0	; () banked
  1338  000554  6F91               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1339  000556  0100               	movlb	0	; () banked
  1340  000558  1D90               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1341  00055A  0100               	movlb	0	; () banked
  1342  00055C  6F92               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1343  00055E  0100               	movlb	0	; () banked
  1344  000560  5191               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1345  000562  1640               	andwf	_TMR_ActiveFlags,f,c
  1346  000564  0100               	movlb	0	; () banked
  1347  000566  5192               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1348  000568  1641               	andwf	_TMR_ActiveFlags+1,f,c
  1349  00056A                     l2231:
  1350                           
  1351                           ;ES_Timers.c: 306: }
  1352                           ;ES_Timers.c: 308: NeedsProcessing &= ~BitNum2SetMask[NextTimer2Process];
  1353  00056A  5044               	movf	ES_Timer_Tick_Resp@NextTimer2Process,w,c
  1354  00056C  0D02               	mullw	2
  1355  00056E  0E01               	movlw	low _BitNum2SetMask
  1356  000570  24F3               	addwf	prodl,w,c
  1357  000572  6EF6               	movwf	tblptrl,c
  1358  000574  0E03               	movlw	high _BitNum2SetMask
  1359  000576  20F4               	addwfc	prodh,w,c
  1360  000578  6EF7               	movwf	tblptrh,c
  1361  00057A                     	if	0	;There are less than 3 active tblptr bytes
  1362  00057A                     	endif
  1363  00057A  0009               	tblrd		*+
  1364  00057C  CFF5 F08F          	movff	tablat,??_ES_Timer_Tick_Resp
  1365  000580  0009               	tblrd		*+
  1366  000582  CFF5 F090          	movff	tablat,??_ES_Timer_Tick_Resp+1
  1367  000586  0100               	movlb	0	; () banked
  1368  000588  1D8F               	comf	??_ES_Timer_Tick_Resp& (0+255),w,b
  1369  00058A  0100               	movlb	0	; () banked
  1370  00058C  6F91               	movwf	(??_ES_Timer_Tick_Resp+2)& (0+255),b
  1371  00058E  0100               	movlb	0	; () banked
  1372  000590  1D90               	comf	(??_ES_Timer_Tick_Resp+1)& (0+255),w,b
  1373  000592  0100               	movlb	0	; () banked
  1374  000594  6F92               	movwf	(??_ES_Timer_Tick_Resp+3)& (0+255),b
  1375  000596  0100               	movlb	0	; () banked
  1376  000598  5191               	movf	(??_ES_Timer_Tick_Resp+2)& (0+255),w,b
  1377  00059A  1636               	andwf	ES_Timer_Tick_Resp@NeedsProcessing,f,c
  1378  00059C  0100               	movlb	0	; () banked
  1379  00059E  5192               	movf	(??_ES_Timer_Tick_Resp+3)& (0+255),w,b
  1380  0005A0  1637               	andwf	ES_Timer_Tick_Resp@NeedsProcessing+1,f,c
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;ES_Timers.c: 309: }while(NeedsProcessing != 0);
  1384  0005A2  5036               	movf	ES_Timer_Tick_Resp@NeedsProcessing,w,c
  1385  0005A4  1037               	iorwf	ES_Timer_Tick_Resp@NeedsProcessing+1,w,c
  1386  0005A6  B4D8               	btfsc	status,2,c
  1387  0005A8  0012               	return	
  1388  0005AA  D78C               	goto	l2219
  1389  0005AC                     __end_of_ES_Timer_Tick_Resp:
  1390                           	opt stack 0
  1391                           tosu	equ	0xFFF
  1392                           tosh	equ	0xFFE
  1393                           tosl	equ	0xFFD
  1394                           pclath	equ	0xFFA
  1395                           tblptru	equ	0xFF8
  1396                           tblptrh	equ	0xFF7
  1397                           tblptrl	equ	0xFF6
  1398                           tablat	equ	0xFF5
  1399                           prodh	equ	0xFF4
  1400                           prodl	equ	0xFF3
  1401                           postinc0	equ	0xFEE
  1402                           wreg	equ	0xFE8
  1403                           indf2	equ	0xFDF
  1404                           postinc2	equ	0xFDE
  1405                           postdec2	equ	0xFDD
  1406                           fsr2h	equ	0xFDA
  1407                           fsr2l	equ	0xFD9
  1408                           status	equ	0xFD8
  1409                           
  1410 ;; *************** function _PostCan_XmitService *****************
  1411 ;; Defined at:
  1412 ;;		line 112 in file "Can_XmitService.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;  ThisEvent       3    0[BANK0 ] struct ES_Event_t
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;		None
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  1    wreg      unsigned char 
  1419 ;; Registers used:
  1420 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1421 ;; Tracked objects:
  1422 ;;		On entry : 0/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1426 ;;      Params:         0       3       0       0
  1427 ;;      Locals:         0       0       0       0
  1428 ;;      Temps:          0       0       0       0
  1429 ;;      Totals:         0       3       0       0
  1430 ;;Total ram usage:        3 bytes
  1431 ;; Hardware stack levels used:    1
  1432 ;; Hardware stack levels required when called:    6
  1433 ;; This function calls:
  1434 ;;		_ES_PostToService
  1435 ;; This function is called by:
  1436 ;;		_ES_Timer_Tick_Resp
  1437 ;;		_PostToList
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           	psect	text6
  1442  000D7E                     __ptext6:
  1443                           	opt stack 0
  1444  000D7E                     _PostCan_XmitService:
  1445                           	opt stack 21
  1446                           
  1447                           ;Can_XmitService.c: 114: return ES_PostToService( MyPriority, ThisEvent);
  1448                           
  1449                           ;incstack = 0
  1450  000D7E  C08C  F02D         	movff	PostCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  1451  000D82  C08D  F02E         	movff	PostCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  1452  000D86  C08E  F02F         	movff	PostCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  1453  000D8A  5045               	movf	_MyPriority,w,c
  1454  000D8C  EC8F  F005         	call	_ES_PostToService
  1455  000D90  0012               	return	
  1456  000D92                     __end_of_PostCan_XmitService:
  1457                           	opt stack 0
  1458                           tosu	equ	0xFFF
  1459                           tosh	equ	0xFFE
  1460                           tosl	equ	0xFFD
  1461                           pclath	equ	0xFFA
  1462                           tblptru	equ	0xFF8
  1463                           tblptrh	equ	0xFF7
  1464                           tblptrl	equ	0xFF6
  1465                           tablat	equ	0xFF5
  1466                           prodh	equ	0xFF4
  1467                           prodl	equ	0xFF3
  1468                           postinc0	equ	0xFEE
  1469                           wreg	equ	0xFE8
  1470                           indf2	equ	0xFDF
  1471                           postinc2	equ	0xFDE
  1472                           postdec2	equ	0xFDD
  1473                           fsr2h	equ	0xFDA
  1474                           fsr2l	equ	0xFD9
  1475                           status	equ	0xFD8
  1476                           
  1477 ;; *************** function _ES_GetMSBitSet *****************
  1478 ;; Defined at:
  1479 ;;		line 79 in file "ES_LookupTables.c"
  1480 ;; Parameters:    Size  Location     Type
  1481 ;;  Val2Check       2   21[COMRAM] unsigned int 
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;  LoopCntr        1   30[COMRAM] char 
  1484 ;;  Nybble2Test     1   29[COMRAM] unsigned char 
  1485 ;;  ReturnVal       1   28[COMRAM] unsigned char 
  1486 ;; Return value:  Size  Location     Type
  1487 ;;                  1    wreg      unsigned char 
  1488 ;; Registers used:
  1489 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1490 ;; Tracked objects:
  1491 ;;		On entry : 0/0
  1492 ;;		On exit  : 0/0
  1493 ;;		Unchanged: 0/0
  1494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1495 ;;      Params:         2       0       0       0
  1496 ;;      Locals:         3       0       0       0
  1497 ;;      Temps:          5       0       0       0
  1498 ;;      Totals:        10       0       0       0
  1499 ;;Total ram usage:       10 bytes
  1500 ;; Hardware stack levels used:    1
  1501 ;; Hardware stack levels required when called:    3
  1502 ;; This function calls:
  1503 ;;		Nothing
  1504 ;; This function is called by:
  1505 ;;		_ES_Run
  1506 ;;		_ES_Timer_Tick_Resp
  1507 ;; This function uses a non-reentrant model
  1508 ;;
  1509                           
  1510                           	psect	text7
  1511  00096C                     __ptext7:
  1512                           	opt stack 0
  1513  00096C                     _ES_GetMSBitSet:
  1514                           	opt stack 24
  1515                           
  1516                           ;ES_LookupTables.c: 81: int8_t LoopCntr;
  1517                           ;ES_LookupTables.c: 82: uint8_t Nybble2Test;
  1518                           ;ES_LookupTables.c: 83: uint8_t ReturnVal = 128;
  1519                           
  1520                           ;incstack = 0
  1521  00096C  0E80               	movlw	128
  1522  00096E  6E1D               	movwf	ES_GetMSBitSet@ReturnVal,c
  1523                           
  1524                           ;ES_LookupTables.c: 86: for( LoopCntr = sizeof(Val2Check) * (8/4)-1;
  1525  000970  0E03               	movlw	3
  1526  000972  6E1F               	movwf	ES_GetMSBitSet@LoopCntr,c
  1527  000974                     l2187:
  1528                           
  1529                           ;ES_LookupTables.c: 87: LoopCntr >= 0; LoopCntr--) {
  1530  000974  BE1F               	btfsc	ES_GetMSBitSet@LoopCntr,7,c
  1531  000976  D031               	goto	l2201
  1532                           
  1533                           ;ES_LookupTables.c: 89: Nybble2Test = (uint8_t)
  1534                           ;ES_LookupTables.c: 90: ((Val2Check >> (uint8_t)(LoopCntr * 4)) &
  1535                           ;ES_LookupTables.c: 91: 0x0F);
  1536  000978  501F               	movf	ES_GetMSBitSet@LoopCntr,w,c
  1537  00097A  0D04               	mullw	4
  1538  00097C  CFF3 F018          	movff	prodl,??_ES_GetMSBitSet
  1539  000980  C016  F019         	movff	ES_GetMSBitSet@Val2Check,??_ES_GetMSBitSet+1
  1540  000984  C017  F01A         	movff	ES_GetMSBitSet@Val2Check+1,??_ES_GetMSBitSet+2
  1541  000988  2A18               	incf	??_ES_GetMSBitSet,f,c
  1542  00098A  D003               	goto	u1484
  1543  00098C                     u1485:
  1544  00098C  90D8               	bcf	status,0,c
  1545  00098E  321A               	rrcf	??_ES_GetMSBitSet+2,f,c
  1546  000990  3219               	rrcf	??_ES_GetMSBitSet+1,f,c
  1547  000992                     u1484:
  1548  000992  2E18               	decfsz	??_ES_GetMSBitSet,f,c
  1549  000994  D7FB               	goto	u1485
  1550  000996  5019               	movf	??_ES_GetMSBitSet+1,w,c
  1551  000998  0B0F               	andlw	15
  1552  00099A  6E1E               	movwf	ES_GetMSBitSet@Nybble2Test,c
  1553                           
  1554                           ;ES_LookupTables.c: 92: if ( Nybble2Test != 0){
  1555  00099C  501E               	movf	ES_GetMSBitSet@Nybble2Test,w,c
  1556  00099E  B4D8               	btfsc	status,2,c
  1557  0009A0  D01A               	goto	l2197
  1558                           
  1559                           ;ES_LookupTables.c: 94: ReturnVal = Nybble2MSBitNum[Nybble2Test-1] +
  1560                           ;ES_LookupTables.c: 95: (LoopCntr * 4);
  1561  0009A2  0EFF               	movlw	255
  1562  0009A4  6E18               	movwf	??_ES_GetMSBitSet& (0+255),c
  1563  0009A6  0EFF               	movlw	255
  1564  0009A8  6E19               	movwf	(??_ES_GetMSBitSet+1)& (0+255),c
  1565  0009AA  501E               	movf	ES_GetMSBitSet@Nybble2Test,w,c
  1566  0009AC  6E1A               	movwf	(??_ES_GetMSBitSet+2)& (0+255),c
  1567  0009AE  6A1B               	clrf	(??_ES_GetMSBitSet+3)& (0+255),c
  1568  0009B0  5018               	movf	??_ES_GetMSBitSet,w,c
  1569  0009B2  261A               	addwf	??_ES_GetMSBitSet+2,f,c
  1570  0009B4  5019               	movf	??_ES_GetMSBitSet+1,w,c
  1571  0009B6  221B               	addwfc	??_ES_GetMSBitSet+3,f,c
  1572  0009B8  0E41               	movlw	low _Nybble2MSBitNum
  1573  0009BA  241A               	addwf	??_ES_GetMSBitSet+2,w,c
  1574  0009BC  6EF6               	movwf	tblptrl,c
  1575  0009BE  0E03               	movlw	high _Nybble2MSBitNum
  1576  0009C0  201B               	addwfc	??_ES_GetMSBitSet+3,w,c
  1577  0009C2  6EF7               	movwf	tblptrh,c
  1578  0009C4                     	if	0	;There are less than 3 active tblptr bytes
  1579  0009C4                     	endif
  1580  0009C4  0008               	tblrd		*
  1581  0009C6  CFF5 F01C          	movff	tablat,??_ES_GetMSBitSet+4
  1582  0009CA  501F               	movf	ES_GetMSBitSet@LoopCntr,w,c
  1583  0009CC  0D04               	mullw	4
  1584  0009CE  50F3               	movf	prodl,w,c
  1585  0009D0  241C               	addwf	??_ES_GetMSBitSet+4,w,c
  1586  0009D2  6E1D               	movwf	ES_GetMSBitSet@ReturnVal,c
  1587                           
  1588                           ;ES_LookupTables.c: 96: break;
  1589  0009D4  D002               	goto	l2201
  1590  0009D6                     l2197:
  1591  0009D6  061F               	decf	ES_GetMSBitSet@LoopCntr,f,c
  1592  0009D8  D7CD               	goto	l2187
  1593  0009DA                     l2201:
  1594                           
  1595                           ;ES_LookupTables.c: 97: }
  1596                           ;ES_LookupTables.c: 98: }
  1597                           ;ES_LookupTables.c: 99: return ReturnVal;
  1598  0009DA  501D               	movf	ES_GetMSBitSet@ReturnVal,w,c
  1599  0009DC  0012               	return	
  1600  0009DE                     __end_of_ES_GetMSBitSet:
  1601                           	opt stack 0
  1602                           tosu	equ	0xFFF
  1603                           tosh	equ	0xFFE
  1604                           tosl	equ	0xFFD
  1605                           pclath	equ	0xFFA
  1606                           tblptru	equ	0xFF8
  1607                           tblptrh	equ	0xFF7
  1608                           tblptrl	equ	0xFF6
  1609                           tablat	equ	0xFF5
  1610                           prodh	equ	0xFF4
  1611                           prodl	equ	0xFF3
  1612                           postinc0	equ	0xFEE
  1613                           wreg	equ	0xFE8
  1614                           indf2	equ	0xFDF
  1615                           postinc2	equ	0xFDE
  1616                           postdec2	equ	0xFDD
  1617                           fsr2h	equ	0xFDA
  1618                           fsr2l	equ	0xFD9
  1619                           status	equ	0xFD8
  1620                           
  1621 ;; *************** function _RunCan_XmitService *****************
  1622 ;; Defined at:
  1623 ;;		line 135 in file "Can_XmitService.c"
  1624 ;; Parameters:    Size  Location     Type
  1625 ;;  ThisEvent       3   22[COMRAM] struct ES_Event_t
  1626 ;; Auto vars:     Size  Location     Type
  1627 ;;  ReturnEvent     3   25[COMRAM] struct ES_Event_t
  1628 ;; Return value:  Size  Location     Type
  1629 ;;                  3   22[COMRAM] struct ES_Event_t
  1630 ;; Registers used:
  1631 ;;		wreg, status,2, status,0, cstack
  1632 ;; Tracked objects:
  1633 ;;		On entry : 0/0
  1634 ;;		On exit  : 0/0
  1635 ;;		Unchanged: 0/0
  1636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1637 ;;      Params:         3       0       0       0
  1638 ;;      Locals:         3       0       0       0
  1639 ;;      Temps:          0       0       0       0
  1640 ;;      Totals:         6       0       0       0
  1641 ;;Total ram usage:        6 bytes
  1642 ;; Hardware stack levels used:    1
  1643 ;; Hardware stack levels required when called:    4
  1644 ;; This function calls:
  1645 ;;		_InitCanHardware
  1646 ;;		_InitPins
  1647 ;;		_ToggleDebugLED
  1648 ;;		_XmitData
  1649 ;; This function is called by:
  1650 ;;		_ES_Run
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654                           	psect	text8
  1655  000B84                     __ptext8:
  1656                           	opt stack 0
  1657  000B84                     _RunCan_XmitService:
  1658                           	opt stack 25
  1659                           
  1660                           ;Can_XmitService.c: 137: ES_Event ReturnEvent;
  1661                           ;Can_XmitService.c: 139: if (ThisEvent.EventType == ES_INIT) {
  1662                           
  1663                           ;incstack = 0
  1664  000B84  0E02               	movlw	2
  1665  000B86  1817               	xorwf	RunCan_XmitService@ThisEvent,w,c
  1666  000B88  A4D8               	btfss	status,2,c
  1667  000B8A  D007               	goto	l2393
  1668                           
  1669                           ;Can_XmitService.c: 140: InitPins();
  1670  000B8C  EC35  F006         	call	_InitPins	;wreg free
  1671                           
  1672                           ;Can_XmitService.c: 141: InitCanHardware();
  1673  000B90  EC5C  F005         	call	_InitCanHardware	;wreg free
  1674                           
  1675                           ;Can_XmitService.c: 142: XmitData(0xb7);
  1676  000B94  0EB7               	movlw	183
  1677  000B96  EC60  F006         	call	_XmitData
  1678  000B9A                     l2393:
  1679                           
  1680                           ;Can_XmitService.c: 143: }
  1681                           ;Can_XmitService.c: 144: if (ThisEvent.EventType == ES_TIMEOUT) {
  1682  000B9A  0E03               	movlw	3
  1683  000B9C  1817               	xorwf	RunCan_XmitService@ThisEvent,w,c
  1684  000B9E  A4D8               	btfss	status,2,c
  1685  000BA0  D009               	goto	l398
  1686                           
  1687                           ;Can_XmitService.c: 145: if (ThisEvent.EventParam == 0) {
  1688  000BA2  5018               	movf	RunCan_XmitService@ThisEvent+1,w,c
  1689  000BA4  1019               	iorwf	RunCan_XmitService@ThisEvent+2,w,c
  1690  000BA6  A4D8               	btfss	status,2,c
  1691  000BA8  D005               	goto	l398
  1692                           
  1693                           ;Can_XmitService.c: 146: ToggleDebugLED();
  1694  000BAA  ECDC  F006         	call	_ToggleDebugLED	;wreg free
  1695                           
  1696                           ;Can_XmitService.c: 147: XmitData(0xb7);
  1697  000BAE  0EB7               	movlw	183
  1698  000BB0  EC60  F006         	call	_XmitData
  1699  000BB4                     l398:
  1700                           
  1701                           ;Can_XmitService.c: 148: }
  1702                           ;Can_XmitService.c: 149: }
  1703                           ;Can_XmitService.c: 150: ReturnEvent.EventType = ES_NO_EVENT;
  1704  000BB4  0E00               	movlw	0
  1705  000BB6  6E1A               	movwf	RunCan_XmitService@ReturnEvent,c
  1706                           
  1707                           ;Can_XmitService.c: 151: return ReturnEvent;
  1708  000BB8  C01A  F017         	movff	RunCan_XmitService@ReturnEvent,?_RunCan_XmitService
  1709  000BBC  C01B  F018         	movff	RunCan_XmitService@ReturnEvent+1,?_RunCan_XmitService+1
  1710  000BC0  C01C  F019         	movff	RunCan_XmitService@ReturnEvent+2,?_RunCan_XmitService+2
  1711  000BC4  0012               	return	
  1712  000BC6                     __end_of_RunCan_XmitService:
  1713                           	opt stack 0
  1714                           tosu	equ	0xFFF
  1715                           tosh	equ	0xFFE
  1716                           tosl	equ	0xFFD
  1717                           pclath	equ	0xFFA
  1718                           tblptru	equ	0xFF8
  1719                           tblptrh	equ	0xFF7
  1720                           tblptrl	equ	0xFF6
  1721                           tablat	equ	0xFF5
  1722                           prodh	equ	0xFF4
  1723                           prodl	equ	0xFF3
  1724                           postinc0	equ	0xFEE
  1725                           wreg	equ	0xFE8
  1726                           indf2	equ	0xFDF
  1727                           postinc2	equ	0xFDE
  1728                           postdec2	equ	0xFDD
  1729                           fsr2h	equ	0xFDA
  1730                           fsr2l	equ	0xFD9
  1731                           status	equ	0xFD8
  1732                           
  1733 ;; *************** function _XmitData *****************
  1734 ;; Defined at:
  1735 ;;		line 154 in file "Can_XmitService.c"
  1736 ;; Parameters:    Size  Location     Type
  1737 ;;  DataByte        1    wreg     unsigned char 
  1738 ;; Auto vars:     Size  Location     Type
  1739 ;;  DataByte        1   21[COMRAM] unsigned char 
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  1    wreg      void 
  1742 ;; Registers used:
  1743 ;;		wreg, status,2
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1749 ;;      Params:         0       0       0       0
  1750 ;;      Locals:         1       0       0       0
  1751 ;;      Temps:          0       0       0       0
  1752 ;;      Totals:         1       0       0       0
  1753 ;;Total ram usage:        1 bytes
  1754 ;; Hardware stack levels used:    1
  1755 ;; Hardware stack levels required when called:    3
  1756 ;; This function calls:
  1757 ;;		Nothing
  1758 ;; This function is called by:
  1759 ;;		_RunCan_XmitService
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           	psect	text9
  1764  000CC0                     __ptext9:
  1765                           	opt stack 0
  1766  000CC0                     _XmitData:
  1767                           	opt stack 25
  1768                           
  1769                           ;incstack = 0
  1770                           ;XmitData@DataByte stored from wreg
  1771  000CC0  6E16               	movwf	XmitData@DataByte,c
  1772                           
  1773                           ;Can_XmitService.c: 155: TXB0CONbits.TXREQ = 0;
  1774  000CC2  010F               	movlb	15	; () banked
  1775  000CC4  9740               	bcf	64,3,b	;volatile
  1776                           
  1777                           ; BSR set to: 15
  1778                           ;Can_XmitService.c: 157: TXB0D0 = DataByte;
  1779  000CC6  C016  FF46         	movff	XmitData@DataByte,3910	;volatile
  1780                           
  1781                           ; BSR set to: 15
  1782                           ;Can_XmitService.c: 159: TXB0SIDL = 0x00;
  1783  000CCA  0E00               	movlw	0
  1784  000CCC  010F               	movlb	15	; () banked
  1785  000CCE  6F42               	movwf	66,b	;volatile
  1786                           
  1787                           ; BSR set to: 15
  1788                           ;Can_XmitService.c: 160: TXB0SIDH = 0b00100000;
  1789  000CD0  0E20               	movlw	32
  1790  000CD2  010F               	movlb	15	; () banked
  1791  000CD4  6F41               	movwf	65,b	;volatile
  1792                           
  1793                           ; BSR set to: 15
  1794                           ;Can_XmitService.c: 162: TXB0DLC = 0b00000001;
  1795  000CD6  0E01               	movlw	1
  1796  000CD8  010F               	movlb	15	; () banked
  1797  000CDA  6F45               	movwf	69,b	;volatile
  1798                           
  1799                           ; BSR set to: 15
  1800                           ;Can_XmitService.c: 163: TXB0CONbits.TXPRI0 = 1;
  1801  000CDC  010F               	movlb	15	; () banked
  1802  000CDE  8140               	bsf	64,0,b	;volatile
  1803                           
  1804                           ; BSR set to: 15
  1805                           ;Can_XmitService.c: 164: TXB0CONbits.TXPRI1 = 1;
  1806  000CE0  010F               	movlb	15	; () banked
  1807  000CE2  8340               	bsf	64,1,b	;volatile
  1808                           
  1809                           ; BSR set to: 15
  1810                           ;Can_XmitService.c: 166: TXB0CONbits.TXREQ = 1;
  1811  000CE4  010F               	movlb	15	; () banked
  1812  000CE6  8740               	bsf	64,3,b	;volatile
  1813                           
  1814                           ; BSR set to: 15
  1815  000CE8  0012               	return		;funcret
  1816  000CEA                     __end_of_XmitData:
  1817                           	opt stack 0
  1818                           tosu	equ	0xFFF
  1819                           tosh	equ	0xFFE
  1820                           tosl	equ	0xFFD
  1821                           pclath	equ	0xFFA
  1822                           tblptru	equ	0xFF8
  1823                           tblptrh	equ	0xFF7
  1824                           tblptrl	equ	0xFF6
  1825                           tablat	equ	0xFF5
  1826                           prodh	equ	0xFF4
  1827                           prodl	equ	0xFF3
  1828                           postinc0	equ	0xFEE
  1829                           wreg	equ	0xFE8
  1830                           indf2	equ	0xFDF
  1831                           postinc2	equ	0xFDE
  1832                           postdec2	equ	0xFDD
  1833                           fsr2h	equ	0xFDA
  1834                           fsr2l	equ	0xFD9
  1835                           status	equ	0xFD8
  1836                           
  1837 ;; *************** function _ToggleDebugLED *****************
  1838 ;; Defined at:
  1839 ;;		line 294 in file "Can_XmitService.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;		None
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;		None
  1844 ;; Return value:  Size  Location     Type
  1845 ;;                  1    wreg      void 
  1846 ;; Registers used:
  1847 ;;		None
  1848 ;; Tracked objects:
  1849 ;;		On entry : 0/0
  1850 ;;		On exit  : 0/0
  1851 ;;		Unchanged: 0/0
  1852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1853 ;;      Params:         0       0       0       0
  1854 ;;      Locals:         0       0       0       0
  1855 ;;      Temps:          0       0       0       0
  1856 ;;      Totals:         0       0       0       0
  1857 ;;Total ram usage:        0 bytes
  1858 ;; Hardware stack levels used:    1
  1859 ;; Hardware stack levels required when called:    3
  1860 ;; This function calls:
  1861 ;;		Nothing
  1862 ;; This function is called by:
  1863 ;;		_RunCan_XmitService
  1864 ;; This function uses a non-reentrant model
  1865 ;;
  1866                           
  1867                           	psect	text10
  1868  000DB8                     __ptext10:
  1869                           	opt stack 0
  1870  000DB8                     _ToggleDebugLED:
  1871                           	opt stack 25
  1872                           
  1873                           ;Can_XmitService.c: 296: if (LATA1 == 1) {
  1874                           
  1875                           ; BSR set to: 15
  1876                           ;incstack = 0
  1877  000DB8  A289               	btfss	3977,1,c	;volatile
  1878  000DBA  D002               	goto	l429
  1879                           
  1880                           ;Can_XmitService.c: 297: LATA1 = 0;
  1881  000DBC  9289               	bcf	3977,1,c	;volatile
  1882                           
  1883                           ;Can_XmitService.c: 298: } else if (LATA1 == 0) {
  1884  000DBE  0012               	return	
  1885  000DC0                     l429:
  1886  000DC0  B289               	btfsc	3977,1,c	;volatile
  1887  000DC2  0012               	return	
  1888                           
  1889                           ;Can_XmitService.c: 299: LATA1 = 1;
  1890  000DC4  8289               	bsf	3977,1,c	;volatile
  1891  000DC6  0012               	return	
  1892  000DC8                     __end_of_ToggleDebugLED:
  1893                           	opt stack 0
  1894                           tosu	equ	0xFFF
  1895                           tosh	equ	0xFFE
  1896                           tosl	equ	0xFFD
  1897                           pclath	equ	0xFFA
  1898                           tblptru	equ	0xFF8
  1899                           tblptrh	equ	0xFF7
  1900                           tblptrl	equ	0xFF6
  1901                           tablat	equ	0xFF5
  1902                           prodh	equ	0xFF4
  1903                           prodl	equ	0xFF3
  1904                           postinc0	equ	0xFEE
  1905                           wreg	equ	0xFE8
  1906                           indf2	equ	0xFDF
  1907                           postinc2	equ	0xFDE
  1908                           postdec2	equ	0xFDD
  1909                           fsr2h	equ	0xFDA
  1910                           fsr2l	equ	0xFD9
  1911                           status	equ	0xFD8
  1912                           
  1913 ;; *************** function _InitPins *****************
  1914 ;; Defined at:
  1915 ;;		line 273 in file "Can_XmitService.c"
  1916 ;; Parameters:    Size  Location     Type
  1917 ;;		None
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;		None
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, status,2
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1929 ;;      Params:         0       0       0       0
  1930 ;;      Locals:         0       0       0       0
  1931 ;;      Temps:          0       0       0       0
  1932 ;;      Totals:         0       0       0       0
  1933 ;;Total ram usage:        0 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    3
  1936 ;; This function calls:
  1937 ;;		Nothing
  1938 ;; This function is called by:
  1939 ;;		_RunCan_XmitService
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text11
  1944  000C6A                     __ptext11:
  1945                           	opt stack 0
  1946  000C6A                     _InitPins:
  1947                           	opt stack 25
  1948                           
  1949                           ;Can_XmitService.c: 276: PORTB = 0x00;
  1950                           
  1951                           ;incstack = 0
  1952  000C6A  0E00               	movlw	0
  1953  000C6C  6E81               	movwf	3969,c	;volatile
  1954                           
  1955                           ;Can_XmitService.c: 277: LATB = 0x00;
  1956  000C6E  0E00               	movlw	0
  1957  000C70  6E8A               	movwf	3978,c	;volatile
  1958                           
  1959                           ;Can_XmitService.c: 278: PORTA = 0x00;
  1960  000C72  0E00               	movlw	0
  1961  000C74  6E80               	movwf	3968,c	;volatile
  1962                           
  1963                           ;Can_XmitService.c: 279: LATA = 0x00;
  1964  000C76  0E00               	movlw	0
  1965  000C78  6E89               	movwf	3977,c	;volatile
  1966                           
  1967                           ;Can_XmitService.c: 280: ADCON1 = 0x0F;
  1968  000C7A  0E0F               	movlw	15
  1969  000C7C  6EC1               	movwf	4033,c	;volatile
  1970                           
  1971                           ;Can_XmitService.c: 281: TRISAbits.TRISA0 = 0;
  1972  000C7E  9092               	bcf	3986,0,c	;volatile
  1973                           
  1974                           ;Can_XmitService.c: 282: TRISAbits.TRISA1 = 0;
  1975  000C80  9292               	bcf	3986,1,c	;volatile
  1976                           
  1977                           ;Can_XmitService.c: 283: TRISAbits.TRISA2 = 0;
  1978  000C82  9492               	bcf	3986,2,c	;volatile
  1979                           
  1980                           ;Can_XmitService.c: 284: TRISAbits.TRISA3 = 0;
  1981  000C84  9692               	bcf	3986,3,c	;volatile
  1982                           
  1983                           ;Can_XmitService.c: 285: TRISBbits.TRISB2 = 0;
  1984  000C86  9493               	bcf	3987,2,c	;volatile
  1985                           
  1986                           ;Can_XmitService.c: 286: TRISBbits.TRISB3 = 1;
  1987  000C88  8693               	bsf	3987,3,c	;volatile
  1988                           
  1989                           ;Can_XmitService.c: 287: LATA1 = 0;
  1990  000C8A  9289               	bcf	3977,1,c	;volatile
  1991                           
  1992                           ;Can_XmitService.c: 288: LATA0 = 0;
  1993  000C8C  9089               	bcf	3977,0,c	;volatile
  1994                           
  1995                           ;Can_XmitService.c: 289: LATA2 = 0;
  1996  000C8E  9489               	bcf	3977,2,c	;volatile
  1997                           
  1998                           ;Can_XmitService.c: 290: LATA3 = 1;
  1999  000C90  8689               	bsf	3977,3,c	;volatile
  2000                           
  2001                           ;Can_XmitService.c: 291: LATB2 = 0;
  2002  000C92  948A               	bcf	3978,2,c	;volatile
  2003  000C94  0012               	return		;funcret
  2004  000C96                     __end_of_InitPins:
  2005                           	opt stack 0
  2006                           tosu	equ	0xFFF
  2007                           tosh	equ	0xFFE
  2008                           tosl	equ	0xFFD
  2009                           pclath	equ	0xFFA
  2010                           tblptru	equ	0xFF8
  2011                           tblptrh	equ	0xFF7
  2012                           tblptrl	equ	0xFF6
  2013                           tablat	equ	0xFF5
  2014                           prodh	equ	0xFF4
  2015                           prodl	equ	0xFF3
  2016                           postinc0	equ	0xFEE
  2017                           wreg	equ	0xFE8
  2018                           indf2	equ	0xFDF
  2019                           postinc2	equ	0xFDE
  2020                           postdec2	equ	0xFDD
  2021                           fsr2h	equ	0xFDA
  2022                           fsr2l	equ	0xFD9
  2023                           status	equ	0xFD8
  2024                           
  2025 ;; *************** function _InitCanHardware *****************
  2026 ;; Defined at:
  2027 ;;		line 194 in file "Can_XmitService.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;		None
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;		None
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  1    wreg      void 
  2034 ;; Registers used:
  2035 ;;		wreg, status,2
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2041 ;;      Params:         0       0       0       0
  2042 ;;      Locals:         0       0       0       0
  2043 ;;      Temps:          0       0       0       0
  2044 ;;      Totals:         0       0       0       0
  2045 ;;Total ram usage:        0 bytes
  2046 ;; Hardware stack levels used:    1
  2047 ;; Hardware stack levels required when called:    3
  2048 ;; This function calls:
  2049 ;;		Nothing
  2050 ;; This function is called by:
  2051 ;;		_RunCan_XmitService
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text12
  2056  000AB8                     __ptext12:
  2057                           	opt stack 0
  2058  000AB8                     _InitCanHardware:
  2059                           	opt stack 25
  2060                           
  2061                           ;Can_XmitService.c: 198: CANCON = 0x80;
  2062                           
  2063                           ;incstack = 0
  2064  000AB8  0E80               	movlw	128
  2065  000ABA  6E6F               	movwf	3951,c	;volatile
  2066  000ABC                     l417:
  2067  000ABC  AE6E               	btfss	3950,7,c	;volatile
  2068  000ABE  D7FE               	goto	l417
  2069                           
  2070                           ;Can_XmitService.c: 218: BRGCON2bits.SEG2PHTS = 1;
  2071  000AC0  8E71               	bsf	3953,7,c	;volatile
  2072                           
  2073                           ;Can_XmitService.c: 220: BRGCON1bits.BRP0 = 0;
  2074  000AC2  9070               	bcf	3952,0,c	;volatile
  2075                           
  2076                           ;Can_XmitService.c: 221: BRGCON1bits.BRP1 = 1;
  2077  000AC4  8270               	bsf	3952,1,c	;volatile
  2078                           
  2079                           ;Can_XmitService.c: 222: BRGCON1bits.BRP2 = 1;
  2080  000AC6  8470               	bsf	3952,2,c	;volatile
  2081                           
  2082                           ;Can_XmitService.c: 223: BRGCON1bits.BRP3 = 0;
  2083  000AC8  9670               	bcf	3952,3,c	;volatile
  2084                           
  2085                           ;Can_XmitService.c: 225: BRGCON2bits.PRSEG0 = 0;
  2086  000ACA  9071               	bcf	3953,0,c	;volatile
  2087                           
  2088                           ;Can_XmitService.c: 226: BRGCON2bits.PRSEG1 = 0;
  2089  000ACC  9271               	bcf	3953,1,c	;volatile
  2090                           
  2091                           ;Can_XmitService.c: 227: BRGCON2bits.PRSEG2 = 0;
  2092  000ACE  9471               	bcf	3953,2,c	;volatile
  2093                           
  2094                           ;Can_XmitService.c: 229: BRGCON2bits.SEG1PH0 = 0;
  2095  000AD0  9671               	bcf	3953,3,c	;volatile
  2096                           
  2097                           ;Can_XmitService.c: 230: BRGCON2bits.SEG1PH1 = 0;
  2098  000AD2  9871               	bcf	3953,4,c	;volatile
  2099                           
  2100                           ;Can_XmitService.c: 231: BRGCON2bits.SEG1PH2 = 0;
  2101  000AD4  9A71               	bcf	3953,5,c	;volatile
  2102                           
  2103                           ;Can_XmitService.c: 233: BRGCON3bits.SEG2PH0 = 1;
  2104  000AD6  8072               	bsf	3954,0,c	;volatile
  2105                           
  2106                           ;Can_XmitService.c: 234: BRGCON3bits.SEG2PH1 = 0;
  2107  000AD8  9272               	bcf	3954,1,c	;volatile
  2108                           
  2109                           ;Can_XmitService.c: 235: BRGCON3bits.SEG2PH2 = 0;
  2110  000ADA  9472               	bcf	3954,2,c	;volatile
  2111                           
  2112                           ;Can_XmitService.c: 237: BRGCON1bits.SJW0 = 0;
  2113  000ADC  9C70               	bcf	3952,6,c	;volatile
  2114                           
  2115                           ;Can_XmitService.c: 242: RXB0CONbits.RXM0 = 1;
  2116  000ADE  8A60               	bsf	3936,5,c	;volatile
  2117                           
  2118                           ;Can_XmitService.c: 243: RXB0CONbits.RXM1 = 1;
  2119  000AE0  8C60               	bsf	3936,6,c	;volatile
  2120                           
  2121                           ;Can_XmitService.c: 244: RXB0CONbits.RXB0DBEN = 0;
  2122  000AE2  9460               	bcf	3936,2,c	;volatile
  2123                           
  2124                           ;Can_XmitService.c: 245: RXB0CONbits.FILHIT0 = 0;
  2125  000AE4  9060               	bcf	3936,0,c	;volatile
  2126                           
  2127                           ;Can_XmitService.c: 247: RXF0SIDH = 0x00;
  2128  000AE6  0E00               	movlw	0
  2129  000AE8  010F               	movlb	15	; () banked
  2130  000AEA  6F00               	movwf	0,b	;volatile
  2131                           
  2132                           ;Can_XmitService.c: 248: RXF0SIDL = 0b00100000;
  2133  000AEC  0E20               	movlw	32
  2134  000AEE  010F               	movlb	15	; () banked
  2135  000AF0  6F01               	movwf	1,b	;volatile
  2136                           
  2137                           ;Can_XmitService.c: 249: RXM0SIDH = 0x00;
  2138  000AF2  0E00               	movlw	0
  2139  000AF4  010F               	movlb	15	; () banked
  2140  000AF6  6F18               	movwf	24,b	;volatile
  2141                           
  2142                           ;Can_XmitService.c: 250: RXM0SIDL = 0x00;
  2143  000AF8  0E00               	movlw	0
  2144  000AFA  010F               	movlb	15	; () banked
  2145  000AFC  6F19               	movwf	25,b	;volatile
  2146                           
  2147                           ;Can_XmitService.c: 254: ECANCON = 0x00;
  2148  000AFE  0E00               	movlw	0
  2149  000B00  6E77               	movwf	3959,c	;volatile
  2150                           
  2151                           ;Can_XmitService.c: 255: CANCON = 0x00;
  2152  000B02  0E00               	movlw	0
  2153  000B04  6E6F               	movwf	3951,c	;volatile
  2154  000B06                     l420:
  2155  000B06  BE6E               	btfsc	3950,7,c	;volatile
  2156  000B08  D7FE               	goto	l420
  2157                           
  2158                           ;Can_XmitService.c: 260: TXB0IE = 1;
  2159  000B0A  84A3               	bsf	4003,2,c	;volatile
  2160                           
  2161                           ;Can_XmitService.c: 261: RXB0IE = 1;
  2162  000B0C  80A3               	bsf	4003,0,c	;volatile
  2163                           
  2164                           ;Can_XmitService.c: 262: IRXIE = 1;
  2165  000B0E  8EA3               	bsf	4003,7,c	;volatile
  2166                           
  2167                           ;Can_XmitService.c: 266: TXB0IF = 0;
  2168  000B10  94A4               	bcf	4004,2,c	;volatile
  2169                           
  2170                           ;Can_XmitService.c: 267: RXB0IF = 0;
  2171  000B12  90A4               	bcf	4004,0,c	;volatile
  2172                           
  2173                           ;Can_XmitService.c: 268: IRXIF = 0;
  2174  000B14  9EA4               	bcf	4004,7,c	;volatile
  2175                           
  2176                           ;Can_XmitService.c: 269: TXB0CONbits.TXREQ = 0;
  2177  000B16  010F               	movlb	15	; () banked
  2178  000B18  9740               	bcf	64,3,b	;volatile
  2179                           
  2180                           ;Can_XmitService.c: 270: RXB0CONbits.RXFUL = 0;
  2181  000B1A  9E60               	bcf	3936,7,c	;volatile
  2182                           
  2183                           ; BSR set to: 15
  2184  000B1C  0012               	return		;funcret
  2185  000B1E                     __end_of_InitCanHardware:
  2186                           	opt stack 0
  2187                           tosu	equ	0xFFF
  2188                           tosh	equ	0xFFE
  2189                           tosl	equ	0xFFD
  2190                           pclath	equ	0xFFA
  2191                           tblptru	equ	0xFF8
  2192                           tblptrh	equ	0xFF7
  2193                           tblptrl	equ	0xFF6
  2194                           tablat	equ	0xFF5
  2195                           prodh	equ	0xFF4
  2196                           prodl	equ	0xFF3
  2197                           postinc0	equ	0xFEE
  2198                           wreg	equ	0xFE8
  2199                           indf2	equ	0xFDF
  2200                           postinc2	equ	0xFDE
  2201                           postdec2	equ	0xFDD
  2202                           fsr2h	equ	0xFDA
  2203                           fsr2l	equ	0xFD9
  2204                           status	equ	0xFD8
  2205                           
  2206 ;; *************** function _ES_DeQueue *****************
  2207 ;; Defined at:
  2208 ;;		line 164 in file "ES_Queue.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;  pBlock          2   33[COMRAM] PTR struct ES_Event_t
  2211 ;;		 -> Queue0(12), 
  2212 ;;  pReturnEvent    2   35[COMRAM] PTR struct ES_Event_t
  2213 ;;		 -> ES_Run@ThisEvent(3), ES_RecallEvents@RecalledEvent(3), 
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;  pThisQueue      2   41[COMRAM] PTR struct .
  2216 ;;		 -> Queue0(12), 
  2217 ;;  NumLeft         1   40[COMRAM] unsigned char 
  2218 ;;  SaveCrit        1   39[COMRAM] unsigned char 
  2219 ;; Return value:  Size  Location     Type
  2220 ;;                  1    wreg      unsigned char 
  2221 ;; Registers used:
  2222 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2223 ;; Tracked objects:
  2224 ;;		On entry : 0/0
  2225 ;;		On exit  : 0/0
  2226 ;;		Unchanged: 0/0
  2227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2228 ;;      Params:         4       0       0       0
  2229 ;;      Locals:         4       0       0       0
  2230 ;;      Temps:          2       0       0       0
  2231 ;;      Totals:        10       0       0       0
  2232 ;;Total ram usage:       10 bytes
  2233 ;; Hardware stack levels used:    1
  2234 ;; Hardware stack levels required when called:    4
  2235 ;; This function calls:
  2236 ;;		___lbmod
  2237 ;;		___wmul
  2238 ;; This function is called by:
  2239 ;;		_ES_Run
  2240 ;;		_ES_RecallEvents
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           	psect	text13
  2245  0003B6                     __ptext13:
  2246                           	opt stack 0
  2247  0003B6                     _ES_DeQueue:
  2248                           	opt stack 25
  2249                           
  2250                           ;ES_Queue.c: 166: unsigned char SaveCrit;
  2251                           ;ES_Queue.c: 167: pQueue_t pThisQueue;
  2252                           ;ES_Queue.c: 168: uint8_t NumLeft;
  2253                           ;ES_Queue.c: 170: pThisQueue = (pQueue_t)pBlock;
  2254                           
  2255                           ; BSR set to: 15
  2256                           ;incstack = 0
  2257  0003B6  C022  F02A         	movff	ES_DeQueue@pBlock,ES_DeQueue@pThisQueue
  2258  0003BA  C023  F02B         	movff	ES_DeQueue@pBlock+1,ES_DeQueue@pThisQueue+1
  2259                           
  2260                           ;ES_Queue.c: 171: if ( pThisQueue->NumEntries > 0)
  2261  0003BE  EE20 F002          	lfsr	2,2
  2262  0003C2  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2263  0003C4  26D9               	addwf	fsr2l,f,c
  2264  0003C6  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2265  0003C8  22DA               	addwfc	fsr2h,f,c
  2266  0003CA  50DF               	movf	indf2,w,c
  2267  0003CC  B4D8               	btfsc	status,2,c
  2268  0003CE  D05E               	goto	l2339
  2269                           
  2270                           ;ES_Queue.c: 172: {
  2271                           ;ES_Queue.c: 173: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  2272  0003D0  CFF2 F028          	movff	intcon,ES_DeQueue@SaveCrit	;volatile
  2273  0003D4  9EF2               	bcf	intcon,7,c	;volatile
  2274                           
  2275                           ;ES_Queue.c: 174: *pReturnEvent = pBlock[ 1 + pThisQueue->CurrentIndex ];
  2276  0003D6  EE20 F001          	lfsr	2,1
  2277  0003DA  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2278  0003DC  26D9               	addwf	fsr2l,f,c
  2279  0003DE  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2280  0003E0  22DA               	addwfc	fsr2h,f,c
  2281  0003E2  50DF               	movf	indf2,w,c
  2282  0003E4  6E26               	movwf	??_ES_DeQueue& (0+255),c
  2283  0003E6  0E01               	movlw	1
  2284  0003E8  2426               	addwf	??_ES_DeQueue,w,c
  2285  0003EA  6E1C               	movwf	___wmul@multiplier,c
  2286  0003EC  6A1D               	clrf	___wmul@multiplier+1,c
  2287  0003EE  0E00               	movlw	0
  2288  0003F0  221D               	addwfc	___wmul@multiplier+1,f,c
  2289  0003F2  0E00               	movlw	0
  2290  0003F4  6E1F               	movwf	___wmul@multiplicand+1,c
  2291  0003F6  0E03               	movlw	3
  2292  0003F8  6E1E               	movwf	___wmul@multiplicand,c
  2293  0003FA  EC9D  F006         	call	___wmul	;wreg free
  2294  0003FE  501C               	movf	?___wmul,w,c
  2295  000400  2422               	addwf	ES_DeQueue@pBlock,w,c
  2296  000402  6ED9               	movwf	fsr2l,c
  2297  000404  501D               	movf	?___wmul+1,w,c
  2298  000406  2023               	addwfc	ES_DeQueue@pBlock+1,w,c
  2299  000408  6EDA               	movwf	fsr2h,c
  2300  00040A  C024  FFE1         	movff	ES_DeQueue@pReturnEvent,fsr1l
  2301  00040E  C025  FFE2         	movff	ES_DeQueue@pReturnEvent+1,fsr1h
  2302  000412  CFDE FFE6          	movff	postinc2,postinc1
  2303  000416  CFDE FFE6          	movff	postinc2,postinc1
  2304  00041A  CFDE FFE6          	movff	postinc2,postinc1
  2305                           
  2306                           ;ES_Queue.c: 176: pThisQueue->CurrentIndex++;
  2307  00041E  EE20 F001          	lfsr	2,1
  2308  000422  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2309  000424  26D9               	addwf	fsr2l,f,c
  2310  000426  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2311  000428  22DA               	addwfc	fsr2h,f,c
  2312  00042A  2ADF               	incf	indf2,f,c
  2313                           
  2314                           ;ES_Queue.c: 178: if (pThisQueue->CurrentIndex >= pThisQueue->QueueSize)
  2315  00042C  C02A  FFD9         	movff	ES_DeQueue@pThisQueue,fsr2l
  2316  000430  C02B  FFDA         	movff	ES_DeQueue@pThisQueue+1,fsr2h
  2317  000434  EE10 F001          	lfsr	1,1
  2318  000438  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2319  00043A  26E1               	addwf	fsr1l,f,c
  2320  00043C  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2321  00043E  22E2               	addwfc	fsr1h,f,c
  2322  000440  50DE               	movf	postinc2,w,c
  2323  000442  5CE6               	subwf	postinc1,w,c
  2324  000444  A0D8               	btfss	status,0,c
  2325  000446  D016               	goto	l2335
  2326                           
  2327                           ;ES_Queue.c: 179: pThisQueue->CurrentIndex = (uint8_t)(pThisQueue->CurrentIndex % pThisQ
      +                          ueue->QueueSize);
  2328  000448  EE20 F001          	lfsr	2,1
  2329  00044C  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2330  00044E  26D9               	addwf	fsr2l,f,c
  2331  000450  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2332  000452  22DA               	addwfc	fsr2h,f,c
  2333  000454  C02A  FFE1         	movff	ES_DeQueue@pThisQueue,fsr1l
  2334  000458  C02B  FFE2         	movff	ES_DeQueue@pThisQueue+1,fsr1h
  2335  00045C  50E7               	movf	indf1,w,c
  2336  00045E  6E16               	movwf	___lbmod@divisor,c
  2337  000460  EE10 F001          	lfsr	1,1
  2338  000464  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2339  000466  26E1               	addwf	fsr1l,f,c
  2340  000468  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2341  00046A  22E2               	addwfc	fsr1h,f,c
  2342  00046C  50E7               	movf	indf1,w,c
  2343  00046E  EC75  F006         	call	___lbmod
  2344  000472  6EDF               	movwf	indf2,c
  2345  000474                     l2335:
  2346                           
  2347                           ;ES_Queue.c: 181: NumLeft = --pThisQueue->NumEntries;
  2348  000474  EE20 F002          	lfsr	2,2
  2349  000478  502A               	movf	ES_DeQueue@pThisQueue,w,c
  2350  00047A  26D9               	addwf	fsr2l,f,c
  2351  00047C  502B               	movf	ES_DeQueue@pThisQueue+1,w,c
  2352  00047E  22DA               	addwfc	fsr2h,f,c
  2353  000480  06DF               	decf	indf2,f,c
  2354  000482  50DF               	movf	indf2,w,c
  2355  000484  6E29               	movwf	ES_DeQueue@NumLeft,c
  2356                           
  2357                           ;ES_Queue.c: 182: {INTCON = SaveCrit;};
  2358  000486  C028  FFF2         	movff	ES_DeQueue@SaveCrit,intcon	;volatile
  2359                           
  2360                           ;ES_Queue.c: 183: }else {
  2361  00048A  D012               	goto	l2345
  2362  00048C                     l2339:
  2363                           
  2364                           ;ES_Queue.c: 184: (*pReturnEvent).EventType = ES_NO_EVENT;
  2365  00048C  C024  FFD9         	movff	ES_DeQueue@pReturnEvent,fsr2l
  2366  000490  C025  FFDA         	movff	ES_DeQueue@pReturnEvent+1,fsr2h
  2367  000494  0E00               	movlw	0
  2368  000496  6EDF               	movwf	indf2,c
  2369                           
  2370                           ;ES_Queue.c: 185: (*pReturnEvent).EventParam = 0;
  2371  000498  EE20 F001          	lfsr	2,1
  2372  00049C  5024               	movf	ES_DeQueue@pReturnEvent,w,c
  2373  00049E  26D9               	addwf	fsr2l,f,c
  2374  0004A0  5025               	movf	ES_DeQueue@pReturnEvent+1,w,c
  2375  0004A2  22DA               	addwfc	fsr2h,f,c
  2376  0004A4  0E00               	movlw	0
  2377  0004A6  6EDE               	movwf	postinc2,c
  2378  0004A8  0E00               	movlw	0
  2379  0004AA  6EDD               	movwf	postdec2,c
  2380                           
  2381                           ;ES_Queue.c: 186: NumLeft = 0;
  2382  0004AC  0E00               	movlw	0
  2383  0004AE  6E29               	movwf	ES_DeQueue@NumLeft,c
  2384  0004B0                     l2345:
  2385                           
  2386                           ;ES_Queue.c: 187: }
  2387                           ;ES_Queue.c: 188: return NumLeft;
  2388  0004B0  5029               	movf	ES_DeQueue@NumLeft,w,c
  2389  0004B2  0012               	return	
  2390  0004B4                     __end_of_ES_DeQueue:
  2391                           	opt stack 0
  2392                           tosu	equ	0xFFF
  2393                           tosh	equ	0xFFE
  2394                           tosl	equ	0xFFD
  2395                           pclath	equ	0xFFA
  2396                           tblptru	equ	0xFF8
  2397                           tblptrh	equ	0xFF7
  2398                           tblptrl	equ	0xFF6
  2399                           tablat	equ	0xFF5
  2400                           prodh	equ	0xFF4
  2401                           prodl	equ	0xFF3
  2402                           intcon	equ	0xFF2
  2403                           postinc0	equ	0xFEE
  2404                           wreg	equ	0xFE8
  2405                           indf1	equ	0xFE7
  2406                           postinc1	equ	0xFE6
  2407                           fsr1h	equ	0xFE2
  2408                           fsr1l	equ	0xFE1
  2409                           indf2	equ	0xFDF
  2410                           postinc2	equ	0xFDE
  2411                           postdec2	equ	0xFDD
  2412                           fsr2h	equ	0xFDA
  2413                           fsr2l	equ	0xFD9
  2414                           status	equ	0xFD8
  2415                           
  2416 ;; *************** function ___lbmod *****************
  2417 ;; Defined at:
  2418 ;;		line 4 in file "/Applications/microchip/xc8/v1.38/sources/common/lbmod.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;  dividend        1    wreg     unsigned char 
  2421 ;;  divisor         1   21[COMRAM] unsigned char 
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;  dividend        1   22[COMRAM] unsigned char 
  2424 ;;  rem             1   24[COMRAM] unsigned char 
  2425 ;;  counter         1   23[COMRAM] unsigned char 
  2426 ;; Return value:  Size  Location     Type
  2427 ;;                  1    wreg      unsigned char 
  2428 ;; Registers used:
  2429 ;;		wreg, status,2, status,0
  2430 ;; Tracked objects:
  2431 ;;		On entry : 0/0
  2432 ;;		On exit  : 0/0
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2435 ;;      Params:         1       0       0       0
  2436 ;;      Locals:         3       0       0       0
  2437 ;;      Temps:          0       0       0       0
  2438 ;;      Totals:         4       0       0       0
  2439 ;;Total ram usage:        4 bytes
  2440 ;; Hardware stack levels used:    1
  2441 ;; Hardware stack levels required when called:    3
  2442 ;; This function calls:
  2443 ;;		Nothing
  2444 ;; This function is called by:
  2445 ;;		_ES_DeQueue
  2446 ;; This function uses a non-reentrant model
  2447 ;;
  2448                           
  2449                           	psect	text14
  2450  000CEA                     __ptext14:
  2451                           	opt stack 0
  2452  000CEA                     ___lbmod:
  2453                           	opt stack 25
  2454                           
  2455                           ;incstack = 0
  2456                           ;___lbmod@dividend stored from wreg
  2457  000CEA  6E17               	movwf	___lbmod@dividend,c
  2458  000CEC  0E08               	movlw	8
  2459  000CEE  6E18               	movwf	___lbmod@counter,c
  2460  000CF0  0E00               	movlw	0
  2461  000CF2  6E19               	movwf	___lbmod@rem,c
  2462  000CF4                     l2291:
  2463  000CF4  90D8               	bcf	status,0,c
  2464  000CF6  3417               	rlcf	___lbmod@dividend,w,c
  2465  000CF8  3419               	rlcf	___lbmod@rem,w,c
  2466  000CFA  6E19               	movwf	___lbmod@rem,c
  2467  000CFC  90D8               	bcf	status,0,c
  2468  000CFE  3617               	rlcf	___lbmod@dividend,f,c
  2469  000D00  5016               	movf	___lbmod@divisor,w,c
  2470  000D02  5C19               	subwf	___lbmod@rem,w,c
  2471  000D04  A0D8               	btfss	status,0,c
  2472  000D06  D002               	goto	l2299
  2473  000D08  5016               	movf	___lbmod@divisor,w,c
  2474  000D0A  5E19               	subwf	___lbmod@rem,f,c
  2475  000D0C                     l2299:
  2476  000D0C  2E18               	decfsz	___lbmod@counter,f,c
  2477  000D0E  D7F2               	goto	l2291
  2478  000D10  5019               	movf	___lbmod@rem,w,c
  2479  000D12  0012               	return	
  2480  000D14                     __end_of___lbmod:
  2481                           	opt stack 0
  2482                           tosu	equ	0xFFF
  2483                           tosh	equ	0xFFE
  2484                           tosl	equ	0xFFD
  2485                           pclath	equ	0xFFA
  2486                           tblptru	equ	0xFF8
  2487                           tblptrh	equ	0xFF7
  2488                           tblptrl	equ	0xFF6
  2489                           tablat	equ	0xFF5
  2490                           prodh	equ	0xFF4
  2491                           prodl	equ	0xFF3
  2492                           intcon	equ	0xFF2
  2493                           postinc0	equ	0xFEE
  2494                           wreg	equ	0xFE8
  2495                           indf1	equ	0xFE7
  2496                           postinc1	equ	0xFE6
  2497                           fsr1h	equ	0xFE2
  2498                           fsr1l	equ	0xFE1
  2499                           indf2	equ	0xFDF
  2500                           postinc2	equ	0xFDE
  2501                           postdec2	equ	0xFDD
  2502                           fsr2h	equ	0xFDA
  2503                           fsr2l	equ	0xFD9
  2504                           status	equ	0xFD8
  2505                           
  2506 ;; *************** function _ES_CheckUserEvents *****************
  2507 ;; Defined at:
  2508 ;;		line 46 in file "ES_CheckEvents.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;		None
  2511 ;; Auto vars:     Size  Location     Type
  2512 ;;  i               1   21[COMRAM] unsigned char 
  2513 ;; Return value:  Size  Location     Type
  2514 ;;                  1    wreg      unsigned char 
  2515 ;; Registers used:
  2516 ;;		wreg, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2517 ;; Tracked objects:
  2518 ;;		On entry : 0/0
  2519 ;;		On exit  : 0/0
  2520 ;;		Unchanged: 0/0
  2521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2522 ;;      Params:         0       0       0       0
  2523 ;;      Locals:         1       0       0       0
  2524 ;;      Temps:          0       0       0       0
  2525 ;;      Totals:         1       0       0       0
  2526 ;;Total ram usage:        1 bytes
  2527 ;; Hardware stack levels used:    1
  2528 ;; Hardware stack levels required when called:    4
  2529 ;; This function calls:
  2530 ;;		_Check4Keystroke
  2531 ;; This function is called by:
  2532 ;;		_ES_Run
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           	psect	text15
  2537  000BC6                     __ptext15:
  2538                           	opt stack 0
  2539  000BC6                     _ES_CheckUserEvents:
  2540                           	opt stack 25
  2541                           
  2542                           ;ES_CheckEvents.c: 48: uint8_t i;
  2543                           ;ES_CheckEvents.c: 50: for ( i=0; i< (sizeof(ES_EventList)/sizeof(ES_EventList[0])); i++
      +                          ) {
  2544                           
  2545                           ;incstack = 0
  2546  000BC6  0E00               	movlw	0
  2547  000BC8  6E16               	movwf	ES_CheckUserEvents@i,c
  2548  000BCA  5016               	movf	ES_CheckUserEvents@i,w,c
  2549  000BCC  A4D8               	btfss	status,2,c
  2550  000BCE  0012               	return	
  2551                           
  2552                           ;ES_CheckEvents.c: 51: if ( ES_EventList[i]() == 1 )
  2553  000BD0  5016               	movf	ES_CheckUserEvents@i,w,c
  2554  000BD2  0D02               	mullw	2
  2555  000BD4  0E57               	movlw	low _ES_EventList
  2556  000BD6  24F3               	addwf	prodl,w,c
  2557  000BD8  6EF6               	movwf	tblptrl,c
  2558  000BDA  0E03               	movlw	high _ES_EventList
  2559  000BDC  20F4               	addwfc	prodh,w,c
  2560  000BDE  6EF7               	movwf	tblptrh,c
  2561  000BE0                     	if	0	;There are less than 3 active tblptr bytes
  2562  000BE0                     	endif
  2563  000BE0  D801               	call	u1618
  2564  000BE2  D00C               	goto	u1619
  2565  000BE4                     u1618:
  2566  000BE4  0005               	push	
  2567  000BE6  6EFA               	movwf	pclath,c
  2568  000BE8  0009               	tblrd		*+
  2569  000BEA  50F5               	movf	tablat,w,c
  2570  000BEC  6EFD               	movwf	tosl,c
  2571  000BEE  0009               	tblrd		*+
  2572  000BF0  50F5               	movf	tablat,w,c
  2573  000BF2  6EFE               	movwf	tosh,c
  2574  000BF4  50F8               	movf	tblptru,w,c
  2575  000BF6  6EFF               	movwf	tosu,c
  2576  000BF8  50FA               	movf	pclath,w,c
  2577  000BFA  0012               	return		;indir
  2578  000BFC                     u1619:
  2579  000BFC  06E8               	decf	wreg,f,c
  2580  000BFE  B4D8               	btfsc	status,2,c
  2581  000C00  0012               	return	
  2582                           
  2583                           ;ES_CheckEvents.c: 52: break;
  2584  000C02  2A16               	incf	ES_CheckUserEvents@i,f,c
  2585  000C04  D7E2               	goto	L1
  2586  000C06                     __end_of_ES_CheckUserEvents:
  2587                           	opt stack 0
  2588                           tosu	equ	0xFFF
  2589                           tosh	equ	0xFFE
  2590                           tosl	equ	0xFFD
  2591                           pclath	equ	0xFFA
  2592                           tblptru	equ	0xFF8
  2593                           tblptrh	equ	0xFF7
  2594                           tblptrl	equ	0xFF6
  2595                           tablat	equ	0xFF5
  2596                           prodh	equ	0xFF4
  2597                           prodl	equ	0xFF3
  2598                           intcon	equ	0xFF2
  2599                           postinc0	equ	0xFEE
  2600                           wreg	equ	0xFE8
  2601                           indf1	equ	0xFE7
  2602                           postinc1	equ	0xFE6
  2603                           fsr1h	equ	0xFE2
  2604                           fsr1l	equ	0xFE1
  2605                           indf2	equ	0xFDF
  2606                           postinc2	equ	0xFDE
  2607                           postdec2	equ	0xFDD
  2608                           fsr2h	equ	0xFDA
  2609                           fsr2l	equ	0xFD9
  2610                           status	equ	0xFD8
  2611                           
  2612 ;; *************** function _Check4Keystroke *****************
  2613 ;; Defined at:
  2614 ;;		line 62 in file "EventCheckers.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;		None
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;		None
  2619 ;; Return value:  Size  Location     Type
  2620 ;;                  1    wreg      unsigned char 
  2621 ;; Registers used:
  2622 ;;		wreg
  2623 ;; Tracked objects:
  2624 ;;		On entry : 0/0
  2625 ;;		On exit  : 0/0
  2626 ;;		Unchanged: 0/0
  2627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2628 ;;      Params:         0       0       0       0
  2629 ;;      Locals:         0       0       0       0
  2630 ;;      Temps:          0       0       0       0
  2631 ;;      Totals:         0       0       0       0
  2632 ;;Total ram usage:        0 bytes
  2633 ;; Hardware stack levels used:    1
  2634 ;; Hardware stack levels required when called:    3
  2635 ;; This function calls:
  2636 ;;		Nothing
  2637 ;; This function is called by:
  2638 ;;		_ES_CheckUserEvents
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           	psect	text16
  2643  000DEA                     __ptext16:
  2644                           	opt stack 0
  2645  000DEA                     _Check4Keystroke:
  2646                           	opt stack 25
  2647                           
  2648                           ;EventCheckers.c: 78: return 0;
  2649                           
  2650                           ;incstack = 0
  2651  000DEA  0E00               	movlw	0
  2652  000DEC  0012               	return	
  2653  000DEE                     __end_of_Check4Keystroke:
  2654                           	opt stack 0
  2655                           tosu	equ	0xFFF
  2656                           tosh	equ	0xFFE
  2657                           tosl	equ	0xFFD
  2658                           pclath	equ	0xFFA
  2659                           tblptru	equ	0xFF8
  2660                           tblptrh	equ	0xFF7
  2661                           tblptrl	equ	0xFF6
  2662                           tablat	equ	0xFF5
  2663                           prodh	equ	0xFF4
  2664                           prodl	equ	0xFF3
  2665                           intcon	equ	0xFF2
  2666                           postinc0	equ	0xFEE
  2667                           wreg	equ	0xFE8
  2668                           indf1	equ	0xFE7
  2669                           postinc1	equ	0xFE6
  2670                           fsr1h	equ	0xFE2
  2671                           fsr1l	equ	0xFE1
  2672                           indf2	equ	0xFDF
  2673                           postinc2	equ	0xFDE
  2674                           postdec2	equ	0xFDD
  2675                           fsr2h	equ	0xFDA
  2676                           fsr2l	equ	0xFD9
  2677                           status	equ	0xFD8
  2678                           
  2679 ;; *************** function _ES_Initialize *****************
  2680 ;; Defined at:
  2681 ;;		line 242 in file "ES_Framework.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;  NewRate         2    4[BANK0 ] enum E15419
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;  i               1    6[BANK0 ] unsigned char 
  2686 ;; Return value:  Size  Location     Type
  2687 ;;                  1    wreg      enum E15490
  2688 ;; Registers used:
  2689 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2690 ;; Tracked objects:
  2691 ;;		On entry : 0/0
  2692 ;;		On exit  : 0/0
  2693 ;;		Unchanged: 0/0
  2694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2695 ;;      Params:         0       2       0       0
  2696 ;;      Locals:         0       1       0       0
  2697 ;;      Temps:          0       0       0       0
  2698 ;;      Totals:         0       3       0       0
  2699 ;;Total ram usage:        3 bytes
  2700 ;; Hardware stack levels used:    1
  2701 ;; Hardware stack levels required when called:    7
  2702 ;; This function calls:
  2703 ;;		_ES_InitQueue
  2704 ;;		_ES_Timer_Init
  2705 ;;		_InitCan_XmitService
  2706 ;; This function is called by:
  2707 ;;		_main
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711                           	psect	text17
  2712  0005AC                     __ptext17:
  2713                           	opt stack 0
  2714  0005AC                     _ES_Initialize:
  2715                           	opt stack 23
  2716                           
  2717                           ;ES_Framework.c: 243: uint8_t i;
  2718                           ;ES_Framework.c: 244: ES_Timer_Init( NewRate);
  2719                           
  2720                           ;incstack = 0
  2721  0005AC  C090  F018         	movff	ES_Initialize@NewRate,ES_Timer_Init@Rate
  2722  0005B0  C091  F019         	movff	ES_Initialize@NewRate+1,ES_Timer_Init@Rate+1
  2723  0005B4  ECE4  F006         	call	_ES_Timer_Init	;wreg free
  2724                           
  2725                           ;ES_Framework.c: 246: for ( i=0; i< (sizeof(ServDescList)/sizeof(ServDescList[0])); i++)
      +                           {
  2726  0005B8  0E00               	movlw	0
  2727  0005BA  0100               	movlb	0	; () banked
  2728  0005BC  6F92               	movwf	ES_Initialize@i& (0+255),b
  2729  0005BE                     l2409:
  2730                           
  2731                           ; BSR set to: 0
  2732  0005BE  0100               	movlb	0	; () banked
  2733  0005C0  5192               	movf	ES_Initialize@i& (0+255),w,b
  2734  0005C2  0100               	movlb	0	; () banked
  2735  0005C4  A4D8               	btfss	status,2,c
  2736  0005C6  D066               	goto	l2433
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;ES_Framework.c: 247: if ( (ServDescList[i].InitFunc == (pInitFunc)0) ||
  2740                           ;ES_Framework.c: 248: (ServDescList[i].RunFunc == (pRunFunc)0) )
  2741                           
  2742                           ; BSR set to: 0
  2743                           
  2744                           ; BSR set to: 0
  2745  0005C8  0100               	movlb	0	; () banked
  2746  0005CA  5192               	movf	ES_Initialize@i& (0+255),w,b
  2747  0005CC  0D04               	mullw	4
  2748  0005CE  0E50               	movlw	low _ServDescList
  2749  0005D0  24F3               	addwf	prodl,w,c
  2750  0005D2  6EF6               	movwf	tblptrl,c
  2751  0005D4  0E03               	movlw	high _ServDescList
  2752  0005D6  20F4               	addwfc	prodh,w,c
  2753  0005D8  6EF7               	movwf	tblptrh,c
  2754  0005DA                     	if	0	;There are less than 3 active tblptr bytes
  2755  0005DA                     	endif
  2756  0005DA  0009               	tblrd		*+
  2757  0005DC  50F5               	movf	tablat,w,c
  2758  0005DE  0009               	tblrd		*+
  2759  0005E0  10F5               	iorwf	tablat,w,c
  2760  0005E2  B4D8               	btfsc	status,2,c
  2761  0005E4  D013               	goto	l2417
  2762                           
  2763                           ; BSR set to: 0
  2764  0005E6  0100               	movlb	0	; () banked
  2765  0005E8  5192               	movf	ES_Initialize@i& (0+255),w,b
  2766  0005EA  0D04               	mullw	4
  2767  0005EC  0E02               	movlw	2
  2768  0005EE  26F3               	addwf	prodl,f,c
  2769  0005F0  0E00               	movlw	0
  2770  0005F2  22F4               	addwfc	prodh,f,c
  2771  0005F4  0E50               	movlw	low _ServDescList
  2772  0005F6  24F3               	addwf	prodl,w,c
  2773  0005F8  6EF6               	movwf	tblptrl,c
  2774  0005FA  0E03               	movlw	high _ServDescList
  2775  0005FC  20F4               	addwfc	prodh,w,c
  2776  0005FE  6EF7               	movwf	tblptrh,c
  2777  000600                     	if	0	;There are less than 3 active tblptr bytes
  2778  000600                     	endif
  2779  000600  0009               	tblrd		*+
  2780  000602  50F5               	movf	tablat,w,c
  2781  000604  0009               	tblrd		*+
  2782  000606  10F5               	iorwf	tablat,w,c
  2783  000608  A4D8               	btfss	status,2,c
  2784  00060A  D002               	goto	l2421
  2785  00060C                     l2417:
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;ES_Framework.c: 249: return FailedPointer;
  2789  00060C  0E03               	movlw	3
  2790                           
  2791                           ; BSR set to: 0
  2792  00060E  0012               	return	
  2793  000610                     l2421:
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;ES_Framework.c: 251: ES_InitQueue( EventQueues[i].pMem, EventQueues[i].Size );
  2797  000610  0100               	movlb	0	; () banked
  2798  000612  5192               	movf	ES_Initialize@i& (0+255),w,b
  2799  000614  0D03               	mullw	3
  2800  000616  0E54               	movlw	low _EventQueues
  2801  000618  24F3               	addwf	prodl,w,c
  2802  00061A  6EF6               	movwf	tblptrl,c
  2803  00061C  0E03               	movlw	high _EventQueues
  2804  00061E  20F4               	addwfc	prodh,w,c
  2805  000620  6EF7               	movwf	tblptrh,c
  2806  000622                     	if	0	;There are less than 3 active tblptr bytes
  2807  000622                     	endif
  2808  000622  0009               	tblrd		*+
  2809  000624  CFF5 F016          	movff	tablat,ES_InitQueue@pBlock
  2810  000628  000A               	tblrd		*-
  2811  00062A  CFF5 F017          	movff	tablat,ES_InitQueue@pBlock+1
  2812  00062E  0100               	movlb	0	; () banked
  2813  000630  5192               	movf	ES_Initialize@i& (0+255),w,b
  2814  000632  0D03               	mullw	3
  2815  000634  0E02               	movlw	2
  2816  000636  26F3               	addwf	prodl,f,c
  2817  000638  0E00               	movlw	0
  2818  00063A  22F4               	addwfc	prodh,f,c
  2819  00063C  0E54               	movlw	low _EventQueues
  2820  00063E  24F3               	addwf	prodl,w,c
  2821  000640  6EF6               	movwf	tblptrl,c
  2822  000642  0E03               	movlw	high _EventQueues
  2823  000644  20F4               	addwfc	prodh,w,c
  2824  000646  6EF7               	movwf	tblptrh,c
  2825  000648                     	if	0	;There are less than 3 active tblptr bytes
  2826  000648                     	endif
  2827  000648  0008               	tblrd		*
  2828  00064A  CFF5 F018          	movff	tablat,ES_InitQueue@BlockSize
  2829  00064E  EC03  F006         	call	_ES_InitQueue	;wreg free
  2830                           
  2831                           ;ES_Framework.c: 253: if ( ServDescList[i].InitFunc(i) != 1 )
  2832  000652  0100               	movlb	0	; () banked
  2833  000654  5192               	movf	ES_Initialize@i& (0+255),w,b
  2834  000656  0D04               	mullw	4
  2835  000658  0E50               	movlw	low _ServDescList
  2836  00065A  24F3               	addwf	prodl,w,c
  2837  00065C  6EF6               	movwf	tblptrl,c
  2838  00065E  0E03               	movlw	high _ServDescList
  2839  000660  20F4               	addwfc	prodh,w,c
  2840  000662  6EF7               	movwf	tblptrh,c
  2841  000664                     	if	0	;There are less than 3 active tblptr bytes
  2842  000664                     	endif
  2843  000664  D801               	call	u1748
  2844  000666  D00E               	goto	u1749
  2845  000668                     u1748:
  2846  000668  0005               	push	
  2847  00066A  6EFA               	movwf	pclath,c
  2848  00066C  0009               	tblrd		*+
  2849  00066E  50F5               	movf	tablat,w,c
  2850  000670  6EFD               	movwf	tosl,c
  2851  000672  0009               	tblrd		*+
  2852  000674  50F5               	movf	tablat,w,c
  2853  000676  6EFE               	movwf	tosh,c
  2854  000678  50F8               	movf	tblptru,w,c
  2855  00067A  6EFF               	movwf	tosu,c
  2856  00067C  50FA               	movf	pclath,w,c
  2857  00067E  0100               	movlb	0	; () banked
  2858  000680  5192               	movf	ES_Initialize@i& (0+255),w,b
  2859  000682  0012               	return		;indir
  2860  000684                     u1749:
  2861  000684  06E8               	decf	wreg,f,c
  2862  000686  B4D8               	btfsc	status,2,c
  2863  000688  D002               	goto	l2429
  2864                           
  2865                           ;ES_Framework.c: 254: return FailedInit;
  2866  00068A  0E05               	movlw	5
  2867  00068C  0012               	return	
  2868  00068E                     l2429:
  2869  00068E  0100               	movlb	0	; () banked
  2870  000690  2B92               	incf	ES_Initialize@i& (0+255),f,b
  2871  000692  D795               	goto	l2409
  2872  000694                     l2433:
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;ES_Framework.c: 255: }
  2876                           ;ES_Framework.c: 256: return Success;
  2877  000694  0E00               	movlw	0
  2878  000696  0012               	return	
  2879  000698                     __end_of_ES_Initialize:
  2880                           	opt stack 0
  2881                           tosu	equ	0xFFF
  2882                           tosh	equ	0xFFE
  2883                           tosl	equ	0xFFD
  2884                           pclath	equ	0xFFA
  2885                           tblptru	equ	0xFF8
  2886                           tblptrh	equ	0xFF7
  2887                           tblptrl	equ	0xFF6
  2888                           tablat	equ	0xFF5
  2889                           prodh	equ	0xFF4
  2890                           prodl	equ	0xFF3
  2891                           intcon	equ	0xFF2
  2892                           postinc0	equ	0xFEE
  2893                           wreg	equ	0xFE8
  2894                           indf1	equ	0xFE7
  2895                           postinc1	equ	0xFE6
  2896                           fsr1h	equ	0xFE2
  2897                           fsr1l	equ	0xFE1
  2898                           indf2	equ	0xFDF
  2899                           postinc2	equ	0xFDE
  2900                           postdec2	equ	0xFDD
  2901                           fsr2h	equ	0xFDA
  2902                           fsr2l	equ	0xFD9
  2903                           status	equ	0xFD8
  2904                           
  2905 ;; *************** function _InitCan_XmitService *****************
  2906 ;; Defined at:
  2907 ;;		line 78 in file "Can_XmitService.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;  Priority        1    wreg     unsigned char 
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;  Priority        1    3[BANK0 ] unsigned char 
  2912 ;;  ThisEvent       3    0[BANK0 ] struct ES_Event_t
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      unsigned char 
  2915 ;; Registers used:
  2916 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2922 ;;      Params:         0       0       0       0
  2923 ;;      Locals:         0       4       0       0
  2924 ;;      Temps:          0       0       0       0
  2925 ;;      Totals:         0       4       0       0
  2926 ;;Total ram usage:        4 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; Hardware stack levels required when called:    6
  2929 ;; This function calls:
  2930 ;;		_ES_PostToService
  2931 ;; This function is called by:
  2932 ;;		_ES_Initialize
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           	psect	text18
  2937  000C3C                     __ptext18:
  2938                           	opt stack 0
  2939  000C3C                     _InitCan_XmitService:
  2940                           	opt stack 23
  2941                           
  2942                           ;incstack = 0
  2943                           ;InitCan_XmitService@Priority stored from wreg
  2944  000C3C  0100               	movlb	0	; () banked
  2945  000C3E  6F8F               	movwf	InitCan_XmitService@Priority& (0+255),b
  2946                           
  2947                           ;Can_XmitService.c: 80: ES_Event ThisEvent;
  2948                           ;Can_XmitService.c: 82: MyPriority = Priority;
  2949  000C40  C08F  F045         	movff	InitCan_XmitService@Priority,_MyPriority
  2950                           
  2951                           ;Can_XmitService.c: 85: ThisEvent.EventType = ES_INIT;
  2952  000C44  0E02               	movlw	2
  2953  000C46  0100               	movlb	0	; () banked
  2954  000C48  6F8C               	movwf	InitCan_XmitService@ThisEvent& (0+255),b
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;Can_XmitService.c: 86: if (ES_PostToService( MyPriority, ThisEvent) == 1)
  2958  000C4A  C08C  F02D         	movff	InitCan_XmitService@ThisEvent,ES_PostToService@TheEvent
  2959  000C4E  C08D  F02E         	movff	InitCan_XmitService@ThisEvent+1,ES_PostToService@TheEvent+1
  2960  000C52  C08E  F02F         	movff	InitCan_XmitService@ThisEvent+2,ES_PostToService@TheEvent+2
  2961  000C56  5045               	movf	_MyPriority,w,c
  2962  000C58  EC8F  F005         	call	_ES_PostToService
  2963  000C5C  06E8               	decf	wreg,f,c
  2964  000C5E  A4D8               	btfss	status,2,c
  2965  000C60  D002               	goto	l2385
  2966                           
  2967                           ;Can_XmitService.c: 87: {
  2968                           ;Can_XmitService.c: 88: return 1;
  2969  000C62  0E01               	movlw	1
  2970                           
  2971                           ;Can_XmitService.c: 89: }else
  2972  000C64  0012               	return	
  2973  000C66                     l2385:
  2974                           
  2975                           ;Can_XmitService.c: 90: {
  2976                           ;Can_XmitService.c: 91: return 0;
  2977  000C66  0E00               	movlw	0
  2978  000C68  0012               	return	
  2979  000C6A                     __end_of_InitCan_XmitService:
  2980                           	opt stack 0
  2981                           tosu	equ	0xFFF
  2982                           tosh	equ	0xFFE
  2983                           tosl	equ	0xFFD
  2984                           pclath	equ	0xFFA
  2985                           tblptru	equ	0xFF8
  2986                           tblptrh	equ	0xFF7
  2987                           tblptrl	equ	0xFF6
  2988                           tablat	equ	0xFF5
  2989                           prodh	equ	0xFF4
  2990                           prodl	equ	0xFF3
  2991                           intcon	equ	0xFF2
  2992                           postinc0	equ	0xFEE
  2993                           wreg	equ	0xFE8
  2994                           indf1	equ	0xFE7
  2995                           postinc1	equ	0xFE6
  2996                           fsr1h	equ	0xFE2
  2997                           fsr1l	equ	0xFE1
  2998                           indf2	equ	0xFDF
  2999                           postinc2	equ	0xFDE
  3000                           postdec2	equ	0xFDD
  3001                           fsr2h	equ	0xFDA
  3002                           fsr2l	equ	0xFD9
  3003                           status	equ	0xFD8
  3004                           
  3005 ;; *************** function _ES_PostToService *****************
  3006 ;; Defined at:
  3007 ;;		line 351 in file "ES_Framework.c"
  3008 ;; Parameters:    Size  Location     Type
  3009 ;;  WhichService    1    wreg     unsigned char 
  3010 ;;  TheEvent        3   44[COMRAM] struct ES_Event_t
  3011 ;; Auto vars:     Size  Location     Type
  3012 ;;  WhichService    1   49[COMRAM] unsigned char 
  3013 ;; Return value:  Size  Location     Type
  3014 ;;                  1    wreg      unsigned char 
  3015 ;; Registers used:
  3016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3017 ;; Tracked objects:
  3018 ;;		On entry : 0/0
  3019 ;;		On exit  : 0/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3022 ;;      Params:         3       0       0       0
  3023 ;;      Locals:         1       0       0       0
  3024 ;;      Temps:          2       0       0       0
  3025 ;;      Totals:         6       0       0       0
  3026 ;;Total ram usage:        6 bytes
  3027 ;; Hardware stack levels used:    1
  3028 ;; Hardware stack levels required when called:    5
  3029 ;; This function calls:
  3030 ;;		_ES_EnQueueFIFO
  3031 ;; This function is called by:
  3032 ;;		_InitCan_XmitService
  3033 ;;		_PostCan_XmitService
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           	psect	text19
  3038  000B1E                     __ptext19:
  3039                           	opt stack 0
  3040  000B1E                     _ES_PostToService:
  3041                           	opt stack 21
  3042                           
  3043                           ;incstack = 0
  3044                           ;ES_PostToService@WhichService stored from wreg
  3045  000B1E  6E32               	movwf	ES_PostToService@WhichService,c
  3046                           
  3047                           ;ES_Framework.c: 352: if ((WhichService < (sizeof(EventQueues)/sizeof(EventQueues[0]))) 
      +                          &&
  3048                           ;ES_Framework.c: 353: (ES_EnQueueFIFO( EventQueues[WhichService].pMem, TheEvent) ==
  3049                           ;ES_Framework.c: 354: 1 )){
  3050  000B20  5032               	movf	ES_PostToService@WhichService,w,c
  3051  000B22  A4D8               	btfss	status,2,c
  3052  000B24  D02D               	goto	l2181
  3053  000B26  5032               	movf	ES_PostToService@WhichService,w,c
  3054  000B28  0D03               	mullw	3
  3055  000B2A  0E54               	movlw	low _EventQueues
  3056  000B2C  24F3               	addwf	prodl,w,c
  3057  000B2E  6EF6               	movwf	tblptrl,c
  3058  000B30  0E03               	movlw	high _EventQueues
  3059  000B32  20F4               	addwfc	prodh,w,c
  3060  000B34  6EF7               	movwf	tblptrh,c
  3061  000B36                     	if	0	;There are less than 3 active tblptr bytes
  3062  000B36                     	endif
  3063  000B36  0009               	tblrd		*+
  3064  000B38  CFF5 F022          	movff	tablat,ES_EnQueueFIFO@pBlock
  3065  000B3C  000A               	tblrd		*-
  3066  000B3E  CFF5 F023          	movff	tablat,ES_EnQueueFIFO@pBlock+1
  3067  000B42  C02D  F024         	movff	ES_PostToService@TheEvent,ES_EnQueueFIFO@Event2Add
  3068  000B46  C02E  F025         	movff	ES_PostToService@TheEvent+1,ES_EnQueueFIFO@Event2Add+1
  3069  000B4A  C02F  F026         	movff	ES_PostToService@TheEvent+2,ES_EnQueueFIFO@Event2Add+2
  3070  000B4E  EC1C  F004         	call	_ES_EnQueueFIFO	;wreg free
  3071  000B52  06E8               	decf	wreg,f,c
  3072  000B54  A4D8               	btfss	status,2,c
  3073  000B56  D014               	goto	l2181
  3074                           
  3075                           ;ES_Framework.c: 355: Ready |= BitNum2SetMask[WhichService];
  3076  000B58  5032               	movf	ES_PostToService@WhichService,w,c
  3077  000B5A  0D02               	mullw	2
  3078  000B5C  0E01               	movlw	low _BitNum2SetMask
  3079  000B5E  24F3               	addwf	prodl,w,c
  3080  000B60  6EF6               	movwf	tblptrl,c
  3081  000B62  0E03               	movlw	high _BitNum2SetMask
  3082  000B64  20F4               	addwfc	prodh,w,c
  3083  000B66  6EF7               	movwf	tblptrh,c
  3084  000B68                     	if	0	;There are less than 3 active tblptr bytes
  3085  000B68                     	endif
  3086  000B68  0009               	tblrd		*+
  3087  000B6A  CFF5 F030          	movff	tablat,??_ES_PostToService
  3088  000B6E  0009               	tblrd		*+
  3089  000B70  CFF5 F031          	movff	tablat,??_ES_PostToService+1
  3090  000B74  5030               	movf	??_ES_PostToService,w,c
  3091  000B76  123C               	iorwf	_Ready,f,c
  3092  000B78  5031               	movf	??_ES_PostToService+1,w,c
  3093  000B7A  123D               	iorwf	_Ready+1,f,c
  3094                           
  3095                           ;ES_Framework.c: 356: return 1;
  3096  000B7C  0E01               	movlw	1
  3097                           
  3098                           ;ES_Framework.c: 357: } else
  3099  000B7E  0012               	return	
  3100  000B80                     l2181:
  3101                           
  3102                           ;ES_Framework.c: 358: return 0;
  3103  000B80  0E00               	movlw	0
  3104  000B82  0012               	return	
  3105  000B84                     __end_of_ES_PostToService:
  3106                           	opt stack 0
  3107                           tosu	equ	0xFFF
  3108                           tosh	equ	0xFFE
  3109                           tosl	equ	0xFFD
  3110                           pclath	equ	0xFFA
  3111                           tblptru	equ	0xFF8
  3112                           tblptrh	equ	0xFF7
  3113                           tblptrl	equ	0xFF6
  3114                           tablat	equ	0xFF5
  3115                           prodh	equ	0xFF4
  3116                           prodl	equ	0xFF3
  3117                           intcon	equ	0xFF2
  3118                           postinc0	equ	0xFEE
  3119                           wreg	equ	0xFE8
  3120                           indf1	equ	0xFE7
  3121                           postinc1	equ	0xFE6
  3122                           fsr1h	equ	0xFE2
  3123                           fsr1l	equ	0xFE1
  3124                           indf2	equ	0xFDF
  3125                           postinc2	equ	0xFDE
  3126                           postdec2	equ	0xFDD
  3127                           fsr2h	equ	0xFDA
  3128                           fsr2l	equ	0xFD9
  3129                           status	equ	0xFD8
  3130                           
  3131 ;; *************** function _ES_EnQueueFIFO *****************
  3132 ;; Defined at:
  3133 ;;		line 85 in file "ES_Queue.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;  pBlock          2   33[COMRAM] PTR struct ES_Event_t
  3136 ;;		 -> Queue0(12), 
  3137 ;;  Event2Add       3   35[COMRAM] struct ES_Event_t
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;  pThisQueue      2   42[COMRAM] PTR struct .
  3140 ;;		 -> Queue0(12), 
  3141 ;;  SaveCrit        1   41[COMRAM] unsigned char 
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  1    wreg      unsigned char 
  3144 ;; Registers used:
  3145 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3151 ;;      Params:         5       0       0       0
  3152 ;;      Locals:         3       0       0       0
  3153 ;;      Temps:          3       0       0       0
  3154 ;;      Totals:        11       0       0       0
  3155 ;;Total ram usage:       11 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    4
  3158 ;; This function calls:
  3159 ;;		___awmod
  3160 ;;		___wmul
  3161 ;; This function is called by:
  3162 ;;		_ES_PostToService
  3163 ;;		_ES_PostAll
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           	psect	text20
  3168  000838                     __ptext20:
  3169                           	opt stack 0
  3170  000838                     _ES_EnQueueFIFO:
  3171                           	opt stack 21
  3172                           
  3173                           ;ES_Queue.c: 87: unsigned char SaveCrit;
  3174                           ;ES_Queue.c: 88: pQueue_t pThisQueue;
  3175                           ;ES_Queue.c: 89: pThisQueue = (pQueue_t)pBlock;
  3176                           
  3177                           ;incstack = 0
  3178  000838  C022  F02B         	movff	ES_EnQueueFIFO@pBlock,ES_EnQueueFIFO@pThisQueue
  3179  00083C  C023  F02C         	movff	ES_EnQueueFIFO@pBlock+1,ES_EnQueueFIFO@pThisQueue+1
  3180                           
  3181                           ;ES_Queue.c: 91: if ( pThisQueue->NumEntries < pThisQueue->QueueSize)
  3182  000840  C02B  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3183  000844  C02C  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3184  000848  EE10 F002          	lfsr	1,2
  3185  00084C  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3186  00084E  26E1               	addwf	fsr1l,f,c
  3187  000850  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3188  000852  22E2               	addwfc	fsr1h,f,c
  3189  000854  50DE               	movf	postinc2,w,c
  3190  000856  5CE6               	subwf	postinc1,w,c
  3191  000858  B0D8               	btfsc	status,0,c
  3192  00085A  D046               	goto	l2165
  3193                           
  3194                           ;ES_Queue.c: 92: {
  3195                           ;ES_Queue.c: 95: do{ SaveCrit = INTCON; GIE = 0;}while(0);
  3196  00085C  CFF2 F02A          	movff	intcon,ES_EnQueueFIFO@SaveCrit	;volatile
  3197  000860  9EF2               	bcf	intcon,7,c	;volatile
  3198                           
  3199                           ;ES_Queue.c: 96: pBlock[ 1 + ((pThisQueue->CurrentIndex + pThisQueue->NumEntries)
  3200                           ;ES_Queue.c: 97: % pThisQueue->QueueSize)] = Event2Add;
  3201  000862  C02B  FFD9         	movff	ES_EnQueueFIFO@pThisQueue,fsr2l
  3202  000866  C02C  FFDA         	movff	ES_EnQueueFIFO@pThisQueue+1,fsr2h
  3203  00086A  50DF               	movf	indf2,w,c
  3204  00086C  6E27               	movwf	??_ES_EnQueueFIFO& (0+255),c
  3205  00086E  5027               	movf	??_ES_EnQueueFIFO,w,c
  3206  000870  6E18               	movwf	___awmod@divisor,c
  3207  000872  6A19               	clrf	___awmod@divisor+1,c
  3208  000874  EE20 F002          	lfsr	2,2
  3209  000878  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3210  00087A  26D9               	addwf	fsr2l,f,c
  3211  00087C  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3212  00087E  22DA               	addwfc	fsr2h,f,c
  3213  000880  50DF               	movf	indf2,w,c
  3214  000882  6E28               	movwf	(??_ES_EnQueueFIFO+1)& (0+255),c
  3215  000884  EE20 F001          	lfsr	2,1
  3216  000888  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3217  00088A  26D9               	addwf	fsr2l,f,c
  3218  00088C  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3219  00088E  22DA               	addwfc	fsr2h,f,c
  3220  000890  50DF               	movf	indf2,w,c
  3221  000892  6E29               	movwf	(??_ES_EnQueueFIFO+2)& (0+255),c
  3222  000894  5029               	movf	??_ES_EnQueueFIFO+2,w,c
  3223  000896  2428               	addwf	??_ES_EnQueueFIFO+1,w,c
  3224  000898  6E16               	movwf	___awmod@dividend,c
  3225  00089A  6A17               	clrf	___awmod@dividend+1,c
  3226  00089C  3617               	rlcf	___awmod@dividend+1,f,c
  3227  00089E  ECEF  F004         	call	___awmod	;wreg free
  3228  0008A2  0E01               	movlw	1
  3229  0008A4  2416               	addwf	?___awmod,w,c
  3230  0008A6  6E1C               	movwf	___wmul@multiplier,c
  3231  0008A8  0E00               	movlw	0
  3232  0008AA  2017               	addwfc	?___awmod+1,w,c
  3233  0008AC  6E1D               	movwf	___wmul@multiplier+1,c
  3234  0008AE  0E00               	movlw	0
  3235  0008B0  6E1F               	movwf	___wmul@multiplicand+1,c
  3236  0008B2  0E03               	movlw	3
  3237  0008B4  6E1E               	movwf	___wmul@multiplicand,c
  3238  0008B6  EC9D  F006         	call	___wmul	;wreg free
  3239  0008BA  501C               	movf	?___wmul,w,c
  3240  0008BC  2422               	addwf	ES_EnQueueFIFO@pBlock,w,c
  3241  0008BE  6ED9               	movwf	fsr2l,c
  3242  0008C0  501D               	movf	?___wmul+1,w,c
  3243  0008C2  2023               	addwfc	ES_EnQueueFIFO@pBlock+1,w,c
  3244  0008C4  6EDA               	movwf	fsr2h,c
  3245  0008C6  C024  FFDE         	movff	ES_EnQueueFIFO@Event2Add,postinc2
  3246  0008CA  C025  FFDE         	movff	ES_EnQueueFIFO@Event2Add+1,postinc2
  3247  0008CE  C026  FFDE         	movff	ES_EnQueueFIFO@Event2Add+2,postinc2
  3248                           
  3249                           ;ES_Queue.c: 98: pThisQueue->NumEntries++;
  3250  0008D2  EE20 F002          	lfsr	2,2
  3251  0008D6  502B               	movf	ES_EnQueueFIFO@pThisQueue,w,c
  3252  0008D8  26D9               	addwf	fsr2l,f,c
  3253  0008DA  502C               	movf	ES_EnQueueFIFO@pThisQueue+1,w,c
  3254  0008DC  22DA               	addwfc	fsr2h,f,c
  3255  0008DE  2ADF               	incf	indf2,f,c
  3256                           
  3257                           ;ES_Queue.c: 99: {INTCON = SaveCrit;};
  3258  0008E0  C02A  FFF2         	movff	ES_EnQueueFIFO@SaveCrit,intcon	;volatile
  3259                           
  3260                           ;ES_Queue.c: 101: return(1);
  3261  0008E4  0E01               	movlw	1
  3262                           
  3263                           ;ES_Queue.c: 102: }else
  3264  0008E6  0012               	return	
  3265  0008E8                     l2165:
  3266                           
  3267                           ;ES_Queue.c: 103: return(0);
  3268  0008E8  0E00               	movlw	0
  3269  0008EA  0012               	return	
  3270  0008EC                     __end_of_ES_EnQueueFIFO:
  3271                           	opt stack 0
  3272                           tosu	equ	0xFFF
  3273                           tosh	equ	0xFFE
  3274                           tosl	equ	0xFFD
  3275                           pclath	equ	0xFFA
  3276                           tblptru	equ	0xFF8
  3277                           tblptrh	equ	0xFF7
  3278                           tblptrl	equ	0xFF6
  3279                           tablat	equ	0xFF5
  3280                           prodh	equ	0xFF4
  3281                           prodl	equ	0xFF3
  3282                           intcon	equ	0xFF2
  3283                           postinc0	equ	0xFEE
  3284                           wreg	equ	0xFE8
  3285                           indf1	equ	0xFE7
  3286                           postinc1	equ	0xFE6
  3287                           fsr1h	equ	0xFE2
  3288                           fsr1l	equ	0xFE1
  3289                           indf2	equ	0xFDF
  3290                           postinc2	equ	0xFDE
  3291                           postdec2	equ	0xFDD
  3292                           fsr2h	equ	0xFDA
  3293                           fsr2l	equ	0xFD9
  3294                           status	equ	0xFD8
  3295                           
  3296 ;; *************** function ___wmul *****************
  3297 ;; Defined at:
  3298 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;  multiplier      2   27[COMRAM] unsigned int 
  3301 ;;  multiplicand    2   29[COMRAM] unsigned int 
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;  product         2   31[COMRAM] unsigned int 
  3304 ;; Return value:  Size  Location     Type
  3305 ;;                  2   27[COMRAM] unsigned int 
  3306 ;; Registers used:
  3307 ;;		wreg, status,2, status,0, prodl, prodh
  3308 ;; Tracked objects:
  3309 ;;		On entry : 0/0
  3310 ;;		On exit  : 0/0
  3311 ;;		Unchanged: 0/0
  3312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3313 ;;      Params:         4       0       0       0
  3314 ;;      Locals:         2       0       0       0
  3315 ;;      Temps:          0       0       0       0
  3316 ;;      Totals:         6       0       0       0
  3317 ;;Total ram usage:        6 bytes
  3318 ;; Hardware stack levels used:    1
  3319 ;; Hardware stack levels required when called:    3
  3320 ;; This function calls:
  3321 ;;		Nothing
  3322 ;; This function is called by:
  3323 ;;		_ES_EnQueueFIFO
  3324 ;;		_ES_DeQueue
  3325 ;;		_ES_EnQueueLIFO
  3326 ;; This function uses a non-reentrant model
  3327 ;;
  3328                           
  3329                           	psect	text21
  3330  000D3A                     __ptext21:
  3331                           	opt stack 0
  3332  000D3A                     ___wmul:
  3333                           	opt stack 21
  3334                           
  3335                           ;incstack = 0
  3336  000D3A  501C               	movf	___wmul@multiplier,w,c
  3337  000D3C  021E               	mulwf	___wmul@multiplicand,c
  3338  000D3E  CFF3 F020          	movff	prodl,___wmul@product
  3339  000D42  CFF4 F021          	movff	prodh,___wmul@product+1
  3340  000D46  501C               	movf	___wmul@multiplier,w,c
  3341  000D48  021F               	mulwf	___wmul@multiplicand+1,c
  3342  000D4A  50F3               	movf	prodl,w,c
  3343  000D4C  2621               	addwf	___wmul@product+1,f,c
  3344  000D4E  501D               	movf	___wmul@multiplier+1,w,c
  3345  000D50  021E               	mulwf	___wmul@multiplicand,c
  3346  000D52  50F3               	movf	prodl,w,c
  3347  000D54  2621               	addwf	___wmul@product+1,f,c
  3348  000D56  C020  F01C         	movff	___wmul@product,?___wmul
  3349  000D5A  C021  F01D         	movff	___wmul@product+1,?___wmul+1
  3350  000D5E  0012               	return	
  3351  000D60                     __end_of___wmul:
  3352                           	opt stack 0
  3353                           tosu	equ	0xFFF
  3354                           tosh	equ	0xFFE
  3355                           tosl	equ	0xFFD
  3356                           pclath	equ	0xFFA
  3357                           tblptru	equ	0xFF8
  3358                           tblptrh	equ	0xFF7
  3359                           tblptrl	equ	0xFF6
  3360                           tablat	equ	0xFF5
  3361                           prodh	equ	0xFF4
  3362                           prodl	equ	0xFF3
  3363                           intcon	equ	0xFF2
  3364                           postinc0	equ	0xFEE
  3365                           wreg	equ	0xFE8
  3366                           indf1	equ	0xFE7
  3367                           postinc1	equ	0xFE6
  3368                           fsr1h	equ	0xFE2
  3369                           fsr1l	equ	0xFE1
  3370                           indf2	equ	0xFDF
  3371                           postinc2	equ	0xFDE
  3372                           postdec2	equ	0xFDD
  3373                           fsr2h	equ	0xFDA
  3374                           fsr2l	equ	0xFD9
  3375                           status	equ	0xFD8
  3376                           
  3377 ;; *************** function ___awmod *****************
  3378 ;; Defined at:
  3379 ;;		line 8 in file "/Applications/microchip/xc8/v1.38/sources/common/awmod.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;  dividend        2   21[COMRAM] int 
  3382 ;;  divisor         2   23[COMRAM] int 
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;  sign            1   26[COMRAM] unsigned char 
  3385 ;;  counter         1   25[COMRAM] unsigned char 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  2   21[COMRAM] int 
  3388 ;; Registers used:
  3389 ;;		wreg, status,2, status,0
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3395 ;;      Params:         4       0       0       0
  3396 ;;      Locals:         2       0       0       0
  3397 ;;      Temps:          0       0       0       0
  3398 ;;      Totals:         6       0       0       0
  3399 ;;Total ram usage:        6 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    3
  3402 ;; This function calls:
  3403 ;;		Nothing
  3404 ;; This function is called by:
  3405 ;;		_ES_EnQueueFIFO
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           	psect	text22
  3410  0009DE                     __ptext22:
  3411                           	opt stack 0
  3412  0009DE                     ___awmod:
  3413                           	opt stack 21
  3414                           
  3415                           ;incstack = 0
  3416  0009DE  0E00               	movlw	0
  3417  0009E0  6E1B               	movwf	___awmod@sign,c
  3418  0009E2  AE17               	btfss	___awmod@dividend+1,7,c
  3419  0009E4  D006               	goto	l2121
  3420  0009E6  6C16               	negf	___awmod@dividend,c
  3421  0009E8  1E17               	comf	___awmod@dividend+1,f,c
  3422  0009EA  B0D8               	btfsc	status,0,c
  3423  0009EC  2A17               	incf	___awmod@dividend+1,f,c
  3424  0009EE  0E01               	movlw	1
  3425  0009F0  6E1B               	movwf	___awmod@sign,c
  3426  0009F2                     l2121:
  3427  0009F2  AE19               	btfss	___awmod@divisor+1,7,c
  3428  0009F4  D004               	goto	l2125
  3429  0009F6  6C18               	negf	___awmod@divisor,c
  3430  0009F8  1E19               	comf	___awmod@divisor+1,f,c
  3431  0009FA  B0D8               	btfsc	status,0,c
  3432  0009FC  2A19               	incf	___awmod@divisor+1,f,c
  3433  0009FE                     l2125:
  3434  0009FE  5018               	movf	___awmod@divisor,w,c
  3435  000A00  1019               	iorwf	___awmod@divisor+1,w,c
  3436  000A02  B4D8               	btfsc	status,2,c
  3437  000A04  D018               	goto	l2141
  3438  000A06  0E01               	movlw	1
  3439  000A08  6E1A               	movwf	___awmod@counter,c
  3440  000A0A  D004               	goto	l2131
  3441  000A0C                     l2129:
  3442  000A0C  90D8               	bcf	status,0,c
  3443  000A0E  3618               	rlcf	___awmod@divisor,f,c
  3444  000A10  3619               	rlcf	___awmod@divisor+1,f,c
  3445  000A12  2A1A               	incf	___awmod@counter,f,c
  3446  000A14                     l2131:
  3447  000A14  AE19               	btfss	___awmod@divisor+1,7,c
  3448  000A16  D7FA               	goto	l2129
  3449  000A18                     l2133:
  3450  000A18  5018               	movf	___awmod@divisor,w,c
  3451  000A1A  5C16               	subwf	___awmod@dividend,w,c
  3452  000A1C  5019               	movf	___awmod@divisor+1,w,c
  3453  000A1E  5817               	subwfb	___awmod@dividend+1,w,c
  3454  000A20  A0D8               	btfss	status,0,c
  3455  000A22  D004               	goto	l2137
  3456  000A24  5018               	movf	___awmod@divisor,w,c
  3457  000A26  5E16               	subwf	___awmod@dividend,f,c
  3458  000A28  5019               	movf	___awmod@divisor+1,w,c
  3459  000A2A  5A17               	subwfb	___awmod@dividend+1,f,c
  3460  000A2C                     l2137:
  3461  000A2C  90D8               	bcf	status,0,c
  3462  000A2E  3219               	rrcf	___awmod@divisor+1,f,c
  3463  000A30  3218               	rrcf	___awmod@divisor,f,c
  3464  000A32  2E1A               	decfsz	___awmod@counter,f,c
  3465  000A34  D7F1               	goto	l2133
  3466  000A36                     l2141:
  3467  000A36  501B               	movf	___awmod@sign,w,c
  3468  000A38  B4D8               	btfsc	status,2,c
  3469  000A3A  D004               	goto	l2145
  3470  000A3C  6C16               	negf	___awmod@dividend,c
  3471  000A3E  1E17               	comf	___awmod@dividend+1,f,c
  3472  000A40  B0D8               	btfsc	status,0,c
  3473  000A42  2A17               	incf	___awmod@dividend+1,f,c
  3474  000A44                     l2145:
  3475  000A44  C016  F016         	movff	___awmod@dividend,?___awmod
  3476  000A48  C017  F017         	movff	___awmod@dividend+1,?___awmod+1
  3477  000A4C  0012               	return	
  3478  000A4E                     __end_of___awmod:
  3479                           	opt stack 0
  3480                           tosu	equ	0xFFF
  3481                           tosh	equ	0xFFE
  3482                           tosl	equ	0xFFD
  3483                           pclath	equ	0xFFA
  3484                           tblptru	equ	0xFF8
  3485                           tblptrh	equ	0xFF7
  3486                           tblptrl	equ	0xFF6
  3487                           tablat	equ	0xFF5
  3488                           prodh	equ	0xFF4
  3489                           prodl	equ	0xFF3
  3490                           intcon	equ	0xFF2
  3491                           postinc0	equ	0xFEE
  3492                           wreg	equ	0xFE8
  3493                           indf1	equ	0xFE7
  3494                           postinc1	equ	0xFE6
  3495                           fsr1h	equ	0xFE2
  3496                           fsr1l	equ	0xFE1
  3497                           indf2	equ	0xFDF
  3498                           postinc2	equ	0xFDE
  3499                           postdec2	equ	0xFDD
  3500                           fsr2h	equ	0xFDA
  3501                           fsr2l	equ	0xFD9
  3502                           status	equ	0xFD8
  3503                           
  3504 ;; *************** function _ES_Timer_Init *****************
  3505 ;; Defined at:
  3506 ;;		line 130 in file "ES_Timers.c"
  3507 ;; Parameters:    Size  Location     Type
  3508 ;;  Rate            2   23[COMRAM] enum E15419
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;		None
  3511 ;; Return value:  Size  Location     Type
  3512 ;;                  1    wreg      void 
  3513 ;; Registers used:
  3514 ;;		wreg, status,2, cstack
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3520 ;;      Params:         2       0       0       0
  3521 ;;      Locals:         0       0       0       0
  3522 ;;      Temps:          0       0       0       0
  3523 ;;      Totals:         2       0       0       0
  3524 ;;Total ram usage:        2 bytes
  3525 ;; Hardware stack levels used:    1
  3526 ;; Hardware stack levels required when called:    4
  3527 ;; This function calls:
  3528 ;;		__HW_Timer_Init
  3529 ;; This function is called by:
  3530 ;;		_ES_Initialize
  3531 ;; This function uses a non-reentrant model
  3532 ;;
  3533                           
  3534                           	psect	text23
  3535  000DC8                     __ptext23:
  3536                           	opt stack 0
  3537  000DC8                     _ES_Timer_Init:
  3538                           	opt stack 25
  3539                           
  3540                           ;ES_Timers.c: 133: _HW_Timer_Init(Rate);
  3541                           
  3542                           ;incstack = 0
  3543  000DC8  C018  F016         	movff	ES_Timer_Init@Rate,__HW_Timer_Init@Rate
  3544  000DCC  C019  F017         	movff	ES_Timer_Init@Rate+1,__HW_Timer_Init@Rate+1
  3545  000DD0  ECB0  F006         	call	__HW_Timer_Init	;wreg free
  3546  000DD4  0012               	return		;funcret
  3547  000DD6                     __end_of_ES_Timer_Init:
  3548                           	opt stack 0
  3549                           tosu	equ	0xFFF
  3550                           tosh	equ	0xFFE
  3551                           tosl	equ	0xFFD
  3552                           pclath	equ	0xFFA
  3553                           tblptru	equ	0xFF8
  3554                           tblptrh	equ	0xFF7
  3555                           tblptrl	equ	0xFF6
  3556                           tablat	equ	0xFF5
  3557                           prodh	equ	0xFF4
  3558                           prodl	equ	0xFF3
  3559                           intcon	equ	0xFF2
  3560                           postinc0	equ	0xFEE
  3561                           wreg	equ	0xFE8
  3562                           indf1	equ	0xFE7
  3563                           postinc1	equ	0xFE6
  3564                           fsr1h	equ	0xFE2
  3565                           fsr1l	equ	0xFE1
  3566                           indf2	equ	0xFDF
  3567                           postinc2	equ	0xFDE
  3568                           postdec2	equ	0xFDD
  3569                           fsr2h	equ	0xFDA
  3570                           fsr2l	equ	0xFD9
  3571                           status	equ	0xFD8
  3572                           
  3573 ;; *************** function __HW_Timer_Init *****************
  3574 ;; Defined at:
  3575 ;;		line 72 in file "ES_Port.c"
  3576 ;; Parameters:    Size  Location     Type
  3577 ;;  Rate            2   21[COMRAM] enum E15412
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;		None
  3580 ;; Return value:  Size  Location     Type
  3581 ;;                  1    wreg      void 
  3582 ;; Registers used:
  3583 ;;		wreg, status,2
  3584 ;; Tracked objects:
  3585 ;;		On entry : 0/0
  3586 ;;		On exit  : 0/0
  3587 ;;		Unchanged: 0/0
  3588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3589 ;;      Params:         2       0       0       0
  3590 ;;      Locals:         0       0       0       0
  3591 ;;      Temps:          0       0       0       0
  3592 ;;      Totals:         2       0       0       0
  3593 ;;Total ram usage:        2 bytes
  3594 ;; Hardware stack levels used:    1
  3595 ;; Hardware stack levels required when called:    3
  3596 ;; This function calls:
  3597 ;;		Nothing
  3598 ;; This function is called by:
  3599 ;;		_ES_Timer_Init
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603                           	psect	text24
  3604  000D60                     __ptext24:
  3605                           	opt stack 0
  3606  000D60                     __HW_Timer_Init:
  3607                           	opt stack 25
  3608                           
  3609                           ;ES_Port.c: 80: PIE1 = 0b00000100;
  3610                           
  3611                           ;incstack = 0
  3612  000D60  0E04               	movlw	4
  3613  000D62  6E9D               	movwf	3997,c	;volatile
  3614                           
  3615                           ;ES_Port.c: 85: INTCON = 0b01000000;
  3616  000D64  0E40               	movlw	64
  3617  000D66  6EF2               	movwf	intcon,c	;volatile
  3618                           
  3619                           ;ES_Port.c: 91: CCP1CON = 0b00001010;
  3620  000D68  0E0A               	movlw	10
  3621  000D6A  6EBD               	movwf	4029,c	;volatile
  3622                           
  3623                           ;ES_Port.c: 95: CCPR1L = 0b00000001;
  3624  000D6C  0E01               	movlw	1
  3625  000D6E  6EBE               	movwf	4030,c	;volatile
  3626                           
  3627                           ;ES_Port.c: 99: CCPR1H = 0b00000000;
  3628  000D70  0E00               	movlw	0
  3629  000D72  6EBF               	movwf	4031,c	;volatile
  3630                           
  3631                           ;ES_Port.c: 107: T1CON = 0b00100001;
  3632  000D74  0E21               	movlw	33
  3633  000D76  6ECD               	movwf	4045,c	;volatile
  3634                           
  3635                           ;ES_Port.c: 108: PEIE = 1;
  3636  000D78  8CF2               	bsf	intcon,6,c	;volatile
  3637                           
  3638                           ;ES_Port.c: 109: {GIE = 1;};
  3639  000D7A  8EF2               	bsf	intcon,7,c	;volatile
  3640  000D7C  0012               	return		;funcret
  3641  000D7E                     __end_of__HW_Timer_Init:
  3642                           	opt stack 0
  3643                           tosu	equ	0xFFF
  3644                           tosh	equ	0xFFE
  3645                           tosl	equ	0xFFD
  3646                           pclath	equ	0xFFA
  3647                           tblptru	equ	0xFF8
  3648                           tblptrh	equ	0xFF7
  3649                           tblptrl	equ	0xFF6
  3650                           tablat	equ	0xFF5
  3651                           prodh	equ	0xFF4
  3652                           prodl	equ	0xFF3
  3653                           intcon	equ	0xFF2
  3654                           postinc0	equ	0xFEE
  3655                           wreg	equ	0xFE8
  3656                           indf1	equ	0xFE7
  3657                           postinc1	equ	0xFE6
  3658                           fsr1h	equ	0xFE2
  3659                           fsr1l	equ	0xFE1
  3660                           indf2	equ	0xFDF
  3661                           postinc2	equ	0xFDE
  3662                           postdec2	equ	0xFDD
  3663                           fsr2h	equ	0xFDA
  3664                           fsr2l	equ	0xFD9
  3665                           status	equ	0xFD8
  3666                           
  3667 ;; *************** function _ES_InitQueue *****************
  3668 ;; Defined at:
  3669 ;;		line 58 in file "ES_Queue.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;  pBlock          2   21[COMRAM] PTR struct ES_Event_t
  3672 ;;		 -> Queue0(12), 
  3673 ;;  BlockSize       1   23[COMRAM] unsigned char 
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;  pThisQueue      2   24[COMRAM] PTR struct .
  3676 ;;		 -> Queue0(12), 
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  1    wreg      unsigned char 
  3679 ;; Registers used:
  3680 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3686 ;;      Params:         3       0       0       0
  3687 ;;      Locals:         2       0       0       0
  3688 ;;      Temps:          0       0       0       0
  3689 ;;      Totals:         5       0       0       0
  3690 ;;Total ram usage:        5 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; Hardware stack levels required when called:    3
  3693 ;; This function calls:
  3694 ;;		Nothing
  3695 ;; This function is called by:
  3696 ;;		_ES_Initialize
  3697 ;; This function uses a non-reentrant model
  3698 ;;
  3699                           
  3700                           	psect	text25
  3701  000C06                     __ptext25:
  3702                           	opt stack 0
  3703  000C06                     _ES_InitQueue:
  3704                           	opt stack 26
  3705                           
  3706                           ;ES_Queue.c: 60: pQueue_t pThisQueue;
  3707                           ;ES_Queue.c: 62: pThisQueue = (pQueue_t)pBlock;
  3708                           
  3709                           ;incstack = 0
  3710  000C06  C016  F019         	movff	ES_InitQueue@pBlock,ES_InitQueue@pThisQueue
  3711  000C0A  C017  F01A         	movff	ES_InitQueue@pBlock+1,ES_InitQueue@pThisQueue+1
  3712                           
  3713                           ;ES_Queue.c: 64: pThisQueue->QueueSize = BlockSize - 1;
  3714  000C0E  0418               	decf	ES_InitQueue@BlockSize,w,c
  3715  000C10  C019  FFD9         	movff	ES_InitQueue@pThisQueue,fsr2l
  3716  000C14  C01A  FFDA         	movff	ES_InitQueue@pThisQueue+1,fsr2h
  3717  000C18  6EDF               	movwf	indf2,c
  3718                           
  3719                           ;ES_Queue.c: 65: pThisQueue->CurrentIndex = 0;
  3720  000C1A  EE20 F001          	lfsr	2,1
  3721  000C1E  5019               	movf	ES_InitQueue@pThisQueue,w,c
  3722  000C20  26D9               	addwf	fsr2l,f,c
  3723  000C22  501A               	movf	ES_InitQueue@pThisQueue+1,w,c
  3724  000C24  22DA               	addwfc	fsr2h,f,c
  3725  000C26  0E00               	movlw	0
  3726  000C28  6EDF               	movwf	indf2,c
  3727                           
  3728                           ;ES_Queue.c: 66: pThisQueue->NumEntries = 0;
  3729  000C2A  EE20 F002          	lfsr	2,2
  3730  000C2E  5019               	movf	ES_InitQueue@pThisQueue,w,c
  3731  000C30  26D9               	addwf	fsr2l,f,c
  3732  000C32  501A               	movf	ES_InitQueue@pThisQueue+1,w,c
  3733  000C34  22DA               	addwfc	fsr2h,f,c
  3734  000C36  0E00               	movlw	0
  3735  000C38  6EDF               	movwf	indf2,c
  3736  000C3A  0012               	return	
  3737  000C3C                     __end_of_ES_InitQueue:
  3738                           	opt stack 0
  3739                           tosu	equ	0xFFF
  3740                           tosh	equ	0xFFE
  3741                           tosl	equ	0xFFD
  3742                           pclath	equ	0xFFA
  3743                           tblptru	equ	0xFF8
  3744                           tblptrh	equ	0xFF7
  3745                           tblptrl	equ	0xFF6
  3746                           tablat	equ	0xFF5
  3747                           prodh	equ	0xFF4
  3748                           prodl	equ	0xFF3
  3749                           intcon	equ	0xFF2
  3750                           postinc0	equ	0xFEE
  3751                           wreg	equ	0xFE8
  3752                           indf1	equ	0xFE7
  3753                           postinc1	equ	0xFE6
  3754                           fsr1h	equ	0xFE2
  3755                           fsr1l	equ	0xFE1
  3756                           indf2	equ	0xFDF
  3757                           postinc2	equ	0xFDE
  3758                           postdec2	equ	0xFDD
  3759                           fsr2h	equ	0xFDA
  3760                           fsr2l	equ	0xFD9
  3761                           status	equ	0xFD8
  3762                           
  3763 ;; *************** function _ISR *****************
  3764 ;; Defined at:
  3765 ;;		line 112 in file "ES_Port.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;		None
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;		None
  3770 ;; Return value:  Size  Location     Type
  3771 ;;                  1    wreg      void 
  3772 ;; Registers used:
  3773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3774 ;; Tracked objects:
  3775 ;;		On entry : 0/0
  3776 ;;		On exit  : 0/0
  3777 ;;		Unchanged: 0/0
  3778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3779 ;;      Params:         0       0       0       0
  3780 ;;      Locals:         0       0       0       0
  3781 ;;      Temps:         16       0       0       0
  3782 ;;      Totals:        16       0       0       0
  3783 ;;Total ram usage:       16 bytes
  3784 ;; Hardware stack levels used:    1
  3785 ;; Hardware stack levels required when called:    2
  3786 ;; This function calls:
  3787 ;;		_CanErrorResponse
  3788 ;;		_CanRCVResponse
  3789 ;;		_CanXmitResponse
  3790 ;; This function is called by:
  3791 ;;		Interrupt level 2
  3792 ;; This function uses a non-reentrant model
  3793 ;;
  3794                           
  3795                           	psect	intcode
  3796  000008                     __pintcode:
  3797                           	opt stack 0
  3798  000008                     _ISR:
  3799                           	opt stack 21
  3800                           
  3801                           ;incstack = 0
  3802  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3803  00000A  CFFA F008          	movff	pclath,??_ISR+2
  3804  00000E  CFFB F009          	movff	pclatu,??_ISR+3
  3805  000012  EDC0  F003         	call	int_func,f	;refresh shadow registers
  3806                           tosu	equ	0xFFF
  3807                           tosh	equ	0xFFE
  3808                           tosl	equ	0xFFD
  3809                           pclatu	equ	0xFFB
  3810                           pclath	equ	0xFFA
  3811                           tblptru	equ	0xFF8
  3812                           tblptrh	equ	0xFF7
  3813                           tblptrl	equ	0xFF6
  3814                           tablat	equ	0xFF5
  3815                           prodh	equ	0xFF4
  3816                           prodl	equ	0xFF3
  3817                           intcon	equ	0xFF2
  3818                           postinc0	equ	0xFEE
  3819                           wreg	equ	0xFE8
  3820                           indf1	equ	0xFE7
  3821                           postinc1	equ	0xFE6
  3822                           fsr1h	equ	0xFE2
  3823                           fsr1l	equ	0xFE1
  3824                           indf2	equ	0xFDF
  3825                           postinc2	equ	0xFDE
  3826                           postdec2	equ	0xFDD
  3827                           fsr2h	equ	0xFDA
  3828                           fsr2l	equ	0xFD9
  3829                           status	equ	0xFD8
  3830                           
  3831                           	psect	intcode_body
  3832  000780                     __pintcode_body:
  3833                           	opt stack 21
  3834  000780                     int_func:
  3835                           	opt stack 21
  3836  000780  0006               	pop		; remove dummy address from shadow register refresh
  3837  000782  CFE9 F00A          	movff	fsr0l,??_ISR+4
  3838  000786  CFEA F00B          	movff	fsr0h,??_ISR+5
  3839  00078A  CFE1 F00C          	movff	fsr1l,??_ISR+6
  3840  00078E  CFE2 F00D          	movff	fsr1h,??_ISR+7
  3841  000792  CFD9 F00E          	movff	fsr2l,??_ISR+8
  3842  000796  CFDA F00F          	movff	fsr2h,??_ISR+9
  3843  00079A  CFF3 F010          	movff	prodl,??_ISR+10
  3844  00079E  CFF4 F011          	movff	prodh,??_ISR+11
  3845  0007A2  CFF6 F012          	movff	tblptrl,??_ISR+12
  3846  0007A6  CFF7 F013          	movff	tblptrh,??_ISR+13
  3847  0007AA  CFF8 F014          	movff	tblptru,??_ISR+14
  3848  0007AE  CFF5 F015          	movff	tablat,??_ISR+15
  3849                           
  3850                           ;ES_Port.c: 115: static unsigned int LastTime;
  3851                           ;ES_Port.c: 116: static unsigned int NextTime;
  3852                           ;ES_Port.c: 118: if (CCP1IF == 1)
  3853  0007B2  A49E               	btfss	3998,2,c	;volatile
  3854  0007B4  D014               	goto	i2l2025
  3855                           
  3856                           ;ES_Port.c: 119: {
  3857                           ;ES_Port.c: 120: LastTime = ((unsigned int)CCPR1H << 8)+ CCPR1L;
  3858  0007B6  50BF               	movf	4031,w,c	;volatile
  3859  0007B8  6E06               	movwf	??_ISR& (0+255),c
  3860  0007BA  50BE               	movf	4030,w,c	;volatile
  3861  0007BC  6E38               	movwf	ISR@LastTime,c
  3862  0007BE  C006  F039         	movff	??_ISR,ISR@LastTime+1
  3863                           
  3864                           ;ES_Port.c: 121: NextTime = LastTime + ((32000000L/4/4)/100);
  3865  0007C2  0E20               	movlw	32
  3866  0007C4  2438               	addwf	ISR@LastTime,w,c
  3867  0007C6  6E3A               	movwf	ISR@NextTime,c
  3868  0007C8  0E4E               	movlw	78
  3869  0007CA  2039               	addwfc	ISR@LastTime+1,w,c
  3870  0007CC  6E3B               	movwf	ISR@NextTime+1,c
  3871                           
  3872                           ;ES_Port.c: 122: CCPR1H = (unsigned char)(NextTime >> 8);
  3873  0007CE  503B               	movf	ISR@NextTime+1,w,c
  3874  0007D0  6EBF               	movwf	4031,c	;volatile
  3875                           
  3876                           ;ES_Port.c: 123: CCPR1L = (unsigned char)(NextTime & 0xFF);
  3877  0007D2  C03A  FFBE         	movff	ISR@NextTime,4030	;volatile
  3878                           
  3879                           ;ES_Port.c: 124: CCP1IF = 0;
  3880  0007D6  949E               	bcf	3998,2,c	;volatile
  3881                           
  3882                           ;ES_Port.c: 125: TickCount++;
  3883  0007D8  2A46               	incf	_TickCount,f,c	;volatile
  3884                           
  3885                           ;ES_Port.c: 126: SysTickCounter++;
  3886  0007DA  4A3E               	infsnz	_SysTickCounter,f,c	;volatile
  3887  0007DC  2A3F               	incf	_SysTickCounter+1,f,c	;volatile
  3888  0007DE                     i2l2025:
  3889                           
  3890                           ;ES_Port.c: 127: }
  3891                           ;ES_Port.c: 133: if (TXB0IF == 1)
  3892  0007DE  A4A4               	btfss	4004,2,c	;volatile
  3893  0007E0  D003               	goto	i2l2031
  3894                           
  3895                           ;ES_Port.c: 134: {
  3896                           ;ES_Port.c: 135: TXB0IF = 0;
  3897  0007E2  94A4               	bcf	4004,2,c	;volatile
  3898                           
  3899                           ;ES_Port.c: 136: CanXmitResponse();
  3900  0007E4  ECC9  F006         	call	_CanXmitResponse	;wreg free
  3901  0007E8                     i2l2031:
  3902                           
  3903                           ;ES_Port.c: 137: }
  3904                           ;ES_Port.c: 138: if (RXB0IF == 1) {
  3905  0007E8  A0A4               	btfss	4004,0,c	;volatile
  3906  0007EA  D003               	goto	i2l2037
  3907                           
  3908                           ;ES_Port.c: 139: RXB0IF = 0;
  3909  0007EC  90A4               	bcf	4004,0,c	;volatile
  3910                           
  3911                           ;ES_Port.c: 140: CanRCVResponse();
  3912  0007EE  ECF1  F006         	call	_CanRCVResponse	;wreg free
  3913  0007F2                     i2l2037:
  3914                           
  3915                           ;ES_Port.c: 141: }
  3916                           ;ES_Port.c: 142: if (IRXIF == 1) {
  3917  0007F2  AEA4               	btfss	4004,7,c	;volatile
  3918  0007F4  D003               	goto	i2l155
  3919                           
  3920                           ;ES_Port.c: 143: IRXIF = 0;
  3921  0007F6  9EA4               	bcf	4004,7,c	;volatile
  3922                           
  3923                           ;ES_Port.c: 144: CanErrorResponse();
  3924  0007F8  ECEB  F006         	call	_CanErrorResponse	;wreg free
  3925  0007FC                     i2l155:
  3926  0007FC  C015  FFF5         	movff	??_ISR+15,tablat
  3927  000800  C014  FFF8         	movff	??_ISR+14,tblptru
  3928  000804  C013  FFF7         	movff	??_ISR+13,tblptrh
  3929  000808  C012  FFF6         	movff	??_ISR+12,tblptrl
  3930  00080C  C011  FFF4         	movff	??_ISR+11,prodh
  3931  000810  C010  FFF3         	movff	??_ISR+10,prodl
  3932  000814  C00F  FFDA         	movff	??_ISR+9,fsr2h
  3933  000818  C00E  FFD9         	movff	??_ISR+8,fsr2l
  3934  00081C  C00D  FFE2         	movff	??_ISR+7,fsr1h
  3935  000820  C00C  FFE1         	movff	??_ISR+6,fsr1l
  3936  000824  C00B  FFEA         	movff	??_ISR+5,fsr0h
  3937  000828  C00A  FFE9         	movff	??_ISR+4,fsr0l
  3938  00082C  C009  FFFB         	movff	??_ISR+3,pclatu
  3939  000830  C008  FFFA         	movff	??_ISR+2,pclath
  3940  000834  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3941  000836  0011               	retfie		f
  3942  000838                     __end_of_ISR:
  3943                           	opt stack 0
  3944                           tosu	equ	0xFFF
  3945                           tosh	equ	0xFFE
  3946                           tosl	equ	0xFFD
  3947                           pclatu	equ	0xFFB
  3948                           pclath	equ	0xFFA
  3949                           tblptru	equ	0xFF8
  3950                           tblptrh	equ	0xFF7
  3951                           tblptrl	equ	0xFF6
  3952                           tablat	equ	0xFF5
  3953                           prodh	equ	0xFF4
  3954                           prodl	equ	0xFF3
  3955                           intcon	equ	0xFF2
  3956                           postinc0	equ	0xFEE
  3957                           fsr0h	equ	0xFEA
  3958                           fsr0l	equ	0xFE9
  3959                           wreg	equ	0xFE8
  3960                           indf1	equ	0xFE7
  3961                           postinc1	equ	0xFE6
  3962                           fsr1h	equ	0xFE2
  3963                           fsr1l	equ	0xFE1
  3964                           indf2	equ	0xFDF
  3965                           postinc2	equ	0xFDE
  3966                           postdec2	equ	0xFDD
  3967                           fsr2h	equ	0xFDA
  3968                           fsr2l	equ	0xFD9
  3969                           status	equ	0xFD8
  3970                           
  3971 ;; *************** function _CanXmitResponse *****************
  3972 ;; Defined at:
  3973 ;;		line 170 in file "Can_XmitService.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;		None
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;		None
  3978 ;; Return value:  Size  Location     Type
  3979 ;;                  1    wreg      void 
  3980 ;; Registers used:
  3981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3982 ;; Tracked objects:
  3983 ;;		On entry : 0/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3987 ;;      Params:         0       0       0       0
  3988 ;;      Locals:         0       0       0       0
  3989 ;;      Temps:          0       0       0       0
  3990 ;;      Totals:         0       0       0       0
  3991 ;;Total ram usage:        0 bytes
  3992 ;; Hardware stack levels used:    1
  3993 ;; Hardware stack levels required when called:    1
  3994 ;; This function calls:
  3995 ;;		_ES_Timer_InitTimer
  3996 ;; This function is called by:
  3997 ;;		_ISR
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           	psect	text27
  4002  000D92                     __ptext27:
  4003                           	opt stack 0
  4004  000D92                     _CanXmitResponse:
  4005                           	opt stack 21
  4006                           
  4007                           ;Can_XmitService.c: 172: TXB0CONbits.TXREQ = 0;
  4008                           
  4009                           ;incstack = 0
  4010  000D92  010F               	movlb	15	; () banked
  4011  000D94  9740               	bcf	64,3,b	;volatile
  4012                           
  4013                           ; BSR set to: 15
  4014                           ;Can_XmitService.c: 173: ES_Timer_InitTimer(0, 50);
  4015  000D96  0E00               	movlw	0
  4016  000D98  6E02               	movwf	ES_Timer_InitTimer@NewTime+1,c
  4017  000D9A  0E32               	movlw	50
  4018  000D9C  6E01               	movwf	ES_Timer_InitTimer@NewTime,c
  4019  000D9E  0E00               	movlw	0
  4020  000DA0  EC27  F005         	call	_ES_Timer_InitTimer
  4021  000DA4  0012               	return		;funcret
  4022  000DA6                     __end_of_CanXmitResponse:
  4023                           	opt stack 0
  4024                           tosu	equ	0xFFF
  4025                           tosh	equ	0xFFE
  4026                           tosl	equ	0xFFD
  4027                           pclatu	equ	0xFFB
  4028                           pclath	equ	0xFFA
  4029                           tblptru	equ	0xFF8
  4030                           tblptrh	equ	0xFF7
  4031                           tblptrl	equ	0xFF6
  4032                           tablat	equ	0xFF5
  4033                           prodh	equ	0xFF4
  4034                           prodl	equ	0xFF3
  4035                           intcon	equ	0xFF2
  4036                           postinc0	equ	0xFEE
  4037                           fsr0h	equ	0xFEA
  4038                           fsr0l	equ	0xFE9
  4039                           wreg	equ	0xFE8
  4040                           indf1	equ	0xFE7
  4041                           postinc1	equ	0xFE6
  4042                           fsr1h	equ	0xFE2
  4043                           fsr1l	equ	0xFE1
  4044                           indf2	equ	0xFDF
  4045                           postinc2	equ	0xFDE
  4046                           postdec2	equ	0xFDD
  4047                           fsr2h	equ	0xFDA
  4048                           fsr2l	equ	0xFD9
  4049                           status	equ	0xFD8
  4050                           
  4051 ;; *************** function _ES_Timer_InitTimer *****************
  4052 ;; Defined at:
  4053 ;;		line 229 in file "ES_Timers.c"
  4054 ;; Parameters:    Size  Location     Type
  4055 ;;  Num             1    wreg     unsigned char 
  4056 ;;  NewTime         2    0[COMRAM] unsigned int 
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;  Num             1    4[COMRAM] unsigned char 
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  1    wreg      enum E15468
  4061 ;; Registers used:
  4062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4068 ;;      Params:         2       0       0       0
  4069 ;;      Locals:         1       0       0       0
  4070 ;;      Temps:          2       0       0       0
  4071 ;;      Totals:         5       0       0       0
  4072 ;;Total ram usage:        5 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; This function calls:
  4075 ;;		Nothing
  4076 ;; This function is called by:
  4077 ;;		_CanXmitResponse
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           	psect	text28
  4082  000A4E                     __ptext28:
  4083                           	opt stack 0
  4084  000A4E                     _ES_Timer_InitTimer:
  4085                           	opt stack 21
  4086                           
  4087                           ;incstack = 0
  4088                           ;ES_Timer_InitTimer@Num stored from wreg
  4089  000A4E  6E05               	movwf	ES_Timer_InitTimer@Num,c
  4090                           
  4091                           ;ES_Timers.c: 232: if( (Num >= (sizeof(TMR_TimerArray)/sizeof(TMR_TimerArray[0]))) ||
  4092                           ;ES_Timers.c: 234: (Timer2PostFunc[Num] == ((pPostFunc)0)) ||
  4093                           ;ES_Timers.c: 236: (NewTime == 0) )
  4094  000A50  0E10               	movlw	16
  4095  000A52  6005               	cpfslt	ES_Timer_InitTimer@Num,c
  4096  000A54  0012               	return	
  4097  000A56  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4098  000A58  0D02               	mullw	2
  4099  000A5A  0E21               	movlw	low _Timer2PostFunc
  4100  000A5C  24F3               	addwf	prodl,w,c
  4101  000A5E  6EF6               	movwf	tblptrl,c
  4102  000A60  0E03               	movlw	high _Timer2PostFunc
  4103  000A62  20F4               	addwfc	prodh,w,c
  4104  000A64  6EF7               	movwf	tblptrh,c
  4105  000A66                     	if	0	;There are less than 3 active tblptr bytes
  4106  000A66                     	endif
  4107  000A66  0009               	tblrd		*+
  4108  000A68  50F5               	movf	tablat,w,c
  4109  000A6A  0009               	tblrd		*+
  4110  000A6C  10F5               	iorwf	tablat,w,c
  4111  000A6E  B4D8               	btfsc	status,2,c
  4112  000A70  0012               	return	
  4113  000A72  5001               	movf	ES_Timer_InitTimer@NewTime,w,c
  4114  000A74  1002               	iorwf	ES_Timer_InitTimer@NewTime+1,w,c
  4115  000A76  B4D8               	btfsc	status,2,c
  4116  000A78  0012               	return	
  4117                           
  4118                           ;ES_Timers.c: 238: TMR_TimerArray[Num] = NewTime;
  4119                           
  4120                           ;ES_Timers.c: 237: return ES_Timer_ERR;
  4121                           ;	Return value of _ES_Timer_InitTimer is never used
  4122  000A7A  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4123  000A7C  0D02               	mullw	2
  4124  000A7E  0E60               	movlw	low _TMR_TimerArray
  4125  000A80  24F3               	addwf	prodl,w,c
  4126  000A82  6ED9               	movwf	fsr2l,c
  4127  000A84  0E00               	movlw	high _TMR_TimerArray
  4128  000A86  20F4               	addwfc	prodh,w,c
  4129  000A88  6EDA               	movwf	fsr2h,c
  4130  000A8A  C001  FFDE         	movff	ES_Timer_InitTimer@NewTime,postinc2
  4131  000A8E  C002  FFDD         	movff	ES_Timer_InitTimer@NewTime+1,postdec2
  4132                           
  4133                           ;ES_Timers.c: 239: TMR_ActiveFlags |= BitNum2SetMask[Num];
  4134  000A92  5005               	movf	ES_Timer_InitTimer@Num,w,c
  4135  000A94  0D02               	mullw	2
  4136  000A96  0E01               	movlw	low _BitNum2SetMask
  4137  000A98  24F3               	addwf	prodl,w,c
  4138  000A9A  6EF6               	movwf	tblptrl,c
  4139  000A9C  0E03               	movlw	high _BitNum2SetMask
  4140  000A9E  20F4               	addwfc	prodh,w,c
  4141  000AA0  6EF7               	movwf	tblptrh,c
  4142  000AA2                     	if	0	;There are less than 3 active tblptr bytes
  4143  000AA2                     	endif
  4144  000AA2  0009               	tblrd		*+
  4145  000AA4  CFF5 F003          	movff	tablat,??_ES_Timer_InitTimer
  4146  000AA8  0009               	tblrd		*+
  4147  000AAA  CFF5 F004          	movff	tablat,??_ES_Timer_InitTimer+1
  4148  000AAE  5003               	movf	??_ES_Timer_InitTimer,w,c
  4149  000AB0  1240               	iorwf	_TMR_ActiveFlags,f,c
  4150  000AB2  5004               	movf	??_ES_Timer_InitTimer+1,w,c
  4151  000AB4  1241               	iorwf	_TMR_ActiveFlags+1,f,c
  4152  000AB6  0012               	return	
  4153  000AB8                     __end_of_ES_Timer_InitTimer:
  4154                           	opt stack 0
  4155                           tosu	equ	0xFFF
  4156                           tosh	equ	0xFFE
  4157                           tosl	equ	0xFFD
  4158                           pclatu	equ	0xFFB
  4159                           pclath	equ	0xFFA
  4160                           tblptru	equ	0xFF8
  4161                           tblptrh	equ	0xFF7
  4162                           tblptrl	equ	0xFF6
  4163                           tablat	equ	0xFF5
  4164                           prodh	equ	0xFF4
  4165                           prodl	equ	0xFF3
  4166                           intcon	equ	0xFF2
  4167                           postinc0	equ	0xFEE
  4168                           fsr0h	equ	0xFEA
  4169                           fsr0l	equ	0xFE9
  4170                           wreg	equ	0xFE8
  4171                           indf1	equ	0xFE7
  4172                           postinc1	equ	0xFE6
  4173                           fsr1h	equ	0xFE2
  4174                           fsr1l	equ	0xFE1
  4175                           indf2	equ	0xFDF
  4176                           postinc2	equ	0xFDE
  4177                           postdec2	equ	0xFDD
  4178                           fsr2h	equ	0xFDA
  4179                           fsr2l	equ	0xFD9
  4180                           status	equ	0xFD8
  4181                           
  4182 ;; *************** function _CanRCVResponse *****************
  4183 ;; Defined at:
  4184 ;;		line 176 in file "Can_XmitService.c"
  4185 ;; Parameters:    Size  Location     Type
  4186 ;;		None
  4187 ;; Auto vars:     Size  Location     Type
  4188 ;;		None
  4189 ;; Return value:  Size  Location     Type
  4190 ;;                  1    wreg      void 
  4191 ;; Registers used:
  4192 ;;		None
  4193 ;; Tracked objects:
  4194 ;;		On entry : 0/0
  4195 ;;		On exit  : 0/0
  4196 ;;		Unchanged: 0/0
  4197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4198 ;;      Params:         0       0       0       0
  4199 ;;      Locals:         0       0       0       0
  4200 ;;      Temps:          0       0       0       0
  4201 ;;      Totals:         0       0       0       0
  4202 ;;Total ram usage:        0 bytes
  4203 ;; Hardware stack levels used:    1
  4204 ;; This function calls:
  4205 ;;		Nothing
  4206 ;; This function is called by:
  4207 ;;		_ISR
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text29
  4212  000DE2                     __ptext29:
  4213                           	opt stack 0
  4214  000DE2                     _CanRCVResponse:
  4215                           	opt stack 22
  4216                           
  4217                           ;Can_XmitService.c: 178: if (RXB0CONbits.RXFUL == 1) {
  4218                           
  4219                           ;incstack = 0
  4220  000DE2  AE60               	btfss	3936,7,c	;volatile
  4221  000DE4  0012               	return	
  4222                           
  4223                           ;Can_XmitService.c: 179: RXB0CONbits.RXFUL = 0;
  4224  000DE6  9E60               	bcf	3936,7,c	;volatile
  4225  000DE8  0012               	return	
  4226  000DEA                     __end_of_CanRCVResponse:
  4227                           	opt stack 0
  4228                           tosu	equ	0xFFF
  4229                           tosh	equ	0xFFE
  4230                           tosl	equ	0xFFD
  4231                           pclatu	equ	0xFFB
  4232                           pclath	equ	0xFFA
  4233                           tblptru	equ	0xFF8
  4234                           tblptrh	equ	0xFF7
  4235                           tblptrl	equ	0xFF6
  4236                           tablat	equ	0xFF5
  4237                           prodh	equ	0xFF4
  4238                           prodl	equ	0xFF3
  4239                           intcon	equ	0xFF2
  4240                           postinc0	equ	0xFEE
  4241                           fsr0h	equ	0xFEA
  4242                           fsr0l	equ	0xFE9
  4243                           wreg	equ	0xFE8
  4244                           indf1	equ	0xFE7
  4245                           postinc1	equ	0xFE6
  4246                           fsr1h	equ	0xFE2
  4247                           fsr1l	equ	0xFE1
  4248                           indf2	equ	0xFDF
  4249                           postinc2	equ	0xFDE
  4250                           postdec2	equ	0xFDD
  4251                           fsr2h	equ	0xFDA
  4252                           fsr2l	equ	0xFD9
  4253                           status	equ	0xFD8
  4254                           
  4255 ;; *************** function _CanErrorResponse *****************
  4256 ;; Defined at:
  4257 ;;		line 184 in file "Can_XmitService.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;		None
  4260 ;; Auto vars:     Size  Location     Type
  4261 ;;		None
  4262 ;; Return value:  Size  Location     Type
  4263 ;;                  1    wreg      void 
  4264 ;; Registers used:
  4265 ;;		None
  4266 ;; Tracked objects:
  4267 ;;		On entry : 0/0
  4268 ;;		On exit  : 0/0
  4269 ;;		Unchanged: 0/0
  4270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4271 ;;      Params:         0       0       0       0
  4272 ;;      Locals:         0       0       0       0
  4273 ;;      Temps:          0       0       0       0
  4274 ;;      Totals:         0       0       0       0
  4275 ;;Total ram usage:        0 bytes
  4276 ;; Hardware stack levels used:    1
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_ISR
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           	psect	text30
  4285  000DD6                     __ptext30:
  4286                           	opt stack 0
  4287  000DD6                     _CanErrorResponse:
  4288                           	opt stack 22
  4289                           
  4290                           ;Can_XmitService.c: 186: LATA0 = 1;
  4291                           
  4292                           ;incstack = 0
  4293  000DD6  8089               	bsf	3977,0,c	;volatile
  4294                           
  4295                           ;Can_XmitService.c: 187: if (TXB0CONbits.TXERR == 1) {
  4296  000DD8  010F               	movlb	15	; () banked
  4297  000DDA  A940               	btfss	64,4,b	;volatile
  4298  000DDC  0012               	return	
  4299                           
  4300                           ; BSR set to: 15
  4301                           ;Can_XmitService.c: 188: LATA2 = 1;
  4302  000DDE  8489               	bsf	3977,2,c	;volatile
  4303  000DE0  0012               	return	
  4304  000DE2                     __end_of_CanErrorResponse:
  4305                           	opt stack 0
  4306                           tosu	equ	0xFFF
  4307                           tosh	equ	0xFFE
  4308                           tosl	equ	0xFFD
  4309                           pclatu	equ	0xFFB
  4310                           pclath	equ	0xFFA
  4311                           tblptru	equ	0xFF8
  4312                           tblptrh	equ	0xFF7
  4313                           tblptrl	equ	0xFF6
  4314                           tablat	equ	0xFF5
  4315                           prodh	equ	0xFF4
  4316                           prodl	equ	0xFF3
  4317                           intcon	equ	0xFF2
  4318                           postinc0	equ	0xFEE
  4319                           fsr0h	equ	0xFEA
  4320                           fsr0l	equ	0xFE9
  4321                           wreg	equ	0xFE8
  4322                           indf1	equ	0xFE7
  4323                           postinc1	equ	0xFE6
  4324                           fsr1h	equ	0xFE2
  4325                           fsr1l	equ	0xFE1
  4326                           indf2	equ	0xFDF
  4327                           postinc2	equ	0xFDE
  4328                           postdec2	equ	0xFDD
  4329                           fsr2h	equ	0xFDA
  4330                           fsr2l	equ	0xFD9
  4331                           status	equ	0xFD8
  4332                           tosu	equ	0xFFF
  4333                           tosh	equ	0xFFE
  4334                           tosl	equ	0xFFD
  4335                           pclatu	equ	0xFFB
  4336                           pclath	equ	0xFFA
  4337                           tblptru	equ	0xFF8
  4338                           tblptrh	equ	0xFF7
  4339                           tblptrl	equ	0xFF6
  4340                           tablat	equ	0xFF5
  4341                           prodh	equ	0xFF4
  4342                           prodl	equ	0xFF3
  4343                           intcon	equ	0xFF2
  4344                           postinc0	equ	0xFEE
  4345                           fsr0h	equ	0xFEA
  4346                           fsr0l	equ	0xFE9
  4347                           wreg	equ	0xFE8
  4348                           indf1	equ	0xFE7
  4349                           postinc1	equ	0xFE6
  4350                           fsr1h	equ	0xFE2
  4351                           fsr1l	equ	0xFE1
  4352                           indf2	equ	0xFDF
  4353                           postinc2	equ	0xFDE
  4354                           postdec2	equ	0xFDD
  4355                           fsr2h	equ	0xFDA
  4356                           fsr2l	equ	0xFD9
  4357                           status	equ	0xFD8
  4358                           
  4359                           	psect	text31
  4360  000000                     __ptext31:
  4361                           	opt stack 0
  4362                           tosu	equ	0xFFF
  4363                           tosh	equ	0xFFE
  4364                           tosl	equ	0xFFD
  4365                           pclatu	equ	0xFFB
  4366                           pclath	equ	0xFFA
  4367                           tblptru	equ	0xFF8
  4368                           tblptrh	equ	0xFF7
  4369                           tblptrl	equ	0xFF6
  4370                           tablat	equ	0xFF5
  4371                           prodh	equ	0xFF4
  4372                           prodl	equ	0xFF3
  4373                           intcon	equ	0xFF2
  4374                           postinc0	equ	0xFEE
  4375                           fsr0h	equ	0xFEA
  4376                           fsr0l	equ	0xFE9
  4377                           wreg	equ	0xFE8
  4378                           indf1	equ	0xFE7
  4379                           postinc1	equ	0xFE6
  4380                           fsr1h	equ	0xFE2
  4381                           fsr1l	equ	0xFE1
  4382                           indf2	equ	0xFDF
  4383                           postinc2	equ	0xFDE
  4384                           postdec2	equ	0xFDD
  4385                           fsr2h	equ	0xFDA
  4386                           fsr2l	equ	0xFD9
  4387                           status	equ	0xFD8
  4388                           
  4389                           	psect	rparam
  4390  0000                     tosu	equ	0xFFF
  4391                           tosh	equ	0xFFE
  4392                           tosl	equ	0xFFD
  4393                           pclatu	equ	0xFFB
  4394                           pclath	equ	0xFFA
  4395                           tblptru	equ	0xFF8
  4396                           tblptrh	equ	0xFF7
  4397                           tblptrl	equ	0xFF6
  4398                           tablat	equ	0xFF5
  4399                           prodh	equ	0xFF4
  4400                           prodl	equ	0xFF3
  4401                           intcon	equ	0xFF2
  4402                           postinc0	equ	0xFEE
  4403                           fsr0h	equ	0xFEA
  4404                           fsr0l	equ	0xFE9
  4405                           wreg	equ	0xFE8
  4406                           indf1	equ	0xFE7
  4407                           postinc1	equ	0xFE6
  4408                           fsr1h	equ	0xFE2
  4409                           fsr1l	equ	0xFE1
  4410                           indf2	equ	0xFDF
  4411                           postinc2	equ	0xFDE
  4412                           postdec2	equ	0xFDD
  4413                           fsr2h	equ	0xFDA
  4414                           fsr2l	equ	0xFD9
  4415                           status	equ	0xFD8
  4416                           
  4417                           	psect	temp
  4418  00004A                     btemp:
  4419                           	opt stack 0
  4420  00004A                     	ds	1
  4421  0000                     int$flags	set	btemp
  4422                           tosu	equ	0xFFF
  4423                           tosh	equ	0xFFE
  4424                           tosl	equ	0xFFD
  4425                           pclatu	equ	0xFFB
  4426                           pclath	equ	0xFFA
  4427                           tblptru	equ	0xFF8
  4428                           tblptrh	equ	0xFF7
  4429                           tblptrl	equ	0xFF6
  4430                           tablat	equ	0xFF5
  4431                           prodh	equ	0xFF4
  4432                           prodl	equ	0xFF3
  4433                           intcon	equ	0xFF2
  4434                           postinc0	equ	0xFEE
  4435                           fsr0h	equ	0xFEA
  4436                           fsr0l	equ	0xFE9
  4437                           wreg	equ	0xFE8
  4438                           indf1	equ	0xFE7
  4439                           postinc1	equ	0xFE6
  4440                           fsr1h	equ	0xFE2
  4441                           fsr1l	equ	0xFE1
  4442                           indf2	equ	0xFDF
  4443                           postinc2	equ	0xFDE
  4444                           postdec2	equ	0xFDD
  4445                           fsr2h	equ	0xFDA
  4446                           fsr2l	equ	0xFD9
  4447                           status	equ	0xFD8


Data Sizes:
    Strings     89
    Constant    90
    Data        0
    BSS         67
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     50      73
    BANK0           160     13      57
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[15]), STR_3(CODE[23]), STR_2(CODE[24]), STR_1(CODE[27]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    Timer2PostFunc	const PTR FTN(struct ES_Event_t,)unsigned char [16] size(2) Largest target is 1
		 -> PostCan_XmitService(), Absolute function(), 

    ES_DeQueue@pReturnEvent	PTR struct ES_Event_t size(2) Largest target is 3
		 -> ES_Run@ThisEvent(COMRAM[3]), ES_RecallEvents@RecalledEvent(COMRAM[3]), 

    ES_DeQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_DeQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_EnQueueFIFO@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_InitQueue@pBlock	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    ES_InitQueue@pThisQueue	PTR struct . size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    DistList00	const PTR FTN(struct ES_Event_t,)unsigned char [1] size(2) Largest target is 1
		 -> PostCan_XmitService(), 

    S91$pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    EventQueues.pMem	PTR struct ES_Event_t size(2) Largest target is 12
		 -> Queue0(BANK0[12]), 

    S70$RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCan_XmitService(), 

    ServDescList.RunFunc	PTR FTN(struct ES_Event_t,)struct ES_Event_t size(2) Largest target is 3
		 -> RunCan_XmitService(), 

    S70$InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCan_XmitService(), 

    ServDescList.InitFunc	PTR FTN(unsigned char ,)unsigned char  size(2) Largest target is 1
		 -> InitCan_XmitService(), 

    ES_EventList	const PTR FTN()unsigned char [1] size(2) Largest target is 1
		 -> Check4Keystroke(), 


Critical Paths under _main in COMRAM

    _PostCan_XmitService->_ES_PostToService
    _RunCan_XmitService->_XmitData
    _ES_DeQueue->___wmul
    _InitCan_XmitService->_ES_PostToService
    _ES_PostToService->_ES_EnQueueFIFO
    _ES_EnQueueFIFO->___wmul
    ___wmul->___awmod
    _ES_Timer_Init->__HW_Timer_Init

Critical Paths under _ISR in COMRAM

    _CanXmitResponse->_ES_Timer_InitTimer

Critical Paths under _main in BANK0

    _main->_ES_Run
    __HW_Process_Pending_Ints->_ES_Timer_Tick_Resp
    _ES_Timer_Tick_Resp->_PostCan_XmitService
    _ES_Initialize->_InitCan_XmitService

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   11896
                                             12 BANK0      1     1      0
                      _ES_Initialize
                             _ES_Run
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     428
                                             21 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Run                                               5     5      0    7285
                                              7 BANK0      5     5      0
                 _ES_CheckUserEvents
                         _ES_DeQueue
                     _ES_GetMSBitSet
                 _RunCan_XmitService *
           __HW_Process_Pending_Ints
 ---------------------------------------------------------------------------------
 (2) __HW_Process_Pending_Ints                             0     0      0    3693
                 _ES_Timer_Tick_Resp
 ---------------------------------------------------------------------------------
 (3) _ES_Timer_Tick_Resp                                   4     4      0    3693
                                              3 BANK0      4     4      0
                   Absolute function *
                     _ES_GetMSBitSet
                _PostCan_XmitService *
 ---------------------------------------------------------------------------------
 (4) _PostCan_XmitService                                  3     0      3    3250
                                              0 BANK0      3     0      3
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (4) _ES_GetMSBitSet                                      10     8      2     443
                                             21 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               3     0      3       0
                                             21 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _RunCan_XmitService                                   6     3      3     217
                                             22 COMRAM     6     3      3
                    _InitCanHardware
                           _InitPins
                     _ToggleDebugLED
                           _XmitData
 ---------------------------------------------------------------------------------
 (3) _XmitData                                             1     1      0      22
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ToggleDebugLED                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitPins                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitCanHardware                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ES_DeQueue                                          10     6      4    2746
                                             33 COMRAM    10     6      4
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     292
                                             21 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ES_CheckUserEvents                                   1     1      0      90
                                             21 COMRAM     1     1      0
                    _Check4Keystroke *
 ---------------------------------------------------------------------------------
 (3) _Check4Keystroke                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES_Initialize                                        3     1      2    4115
                                              4 BANK0      3     1      2
                       _ES_InitQueue
                      _ES_Timer_Init
                _InitCan_XmitService *
 ---------------------------------------------------------------------------------
 (2) _InitCan_XmitService                                  4     4      0    3184
                                              0 BANK0      4     4      0
                   _ES_PostToService
 ---------------------------------------------------------------------------------
 (5) _ES_PostToService                                     6     3      3    3119
                                             44 COMRAM     6     3      3
                     _ES_EnQueueFIFO
 ---------------------------------------------------------------------------------
 (6) _ES_EnQueueFIFO                                      11     6      5    2815
                                             33 COMRAM    11     6      5
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1586
                                             27 COMRAM     6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     553
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _ES_Timer_Init                                        2     0      2     211
                                             23 COMRAM     2     0      2
                     __HW_Timer_Init
 ---------------------------------------------------------------------------------
 (3) __HW_Timer_Init                                       2     0      2      90
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ES_InitQueue                                         5     2      3     345
                                             21 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 16    16      0     208
                                              5 COMRAM    16    16      0
                   _CanErrorResponse
                     _CanRCVResponse
                    _CanXmitResponse
 ---------------------------------------------------------------------------------
 (9) _CanXmitResponse                                      0     0      0     208
                 _ES_Timer_InitTimer
 ---------------------------------------------------------------------------------
 (10) _ES_Timer_InitTimer                                  5     3      2     208
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (9) _CanRCVResponse                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CanErrorResponse                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ES_Initialize
     _ES_InitQueue
     _ES_Timer_Init
       __HW_Timer_Init
     _InitCan_XmitService *
       _ES_PostToService
         _ES_EnQueueFIFO
           ___awmod
           ___wmul
             ___awmod (ARG)
   _ES_Run
     _ES_CheckUserEvents
       _Check4Keystroke *
     _ES_DeQueue
       ___lbmod
       ___wmul
         ___awmod (ARG)
     _ES_GetMSBitSet
     _RunCan_XmitService *
       _InitCanHardware
       _InitPins
       _ToggleDebugLED
       _XmitData
     __HW_Process_Pending_Ints *
       _ES_Timer_Tick_Resp
         Absolute function(Fake) *
         _ES_GetMSBitSet *
         _PostCan_XmitService *
           _ES_PostToService
             _ES_EnQueueFIFO
               ___awmod
               ___wmul
                 ___awmod (ARG)
   _printf
     _putch

 _ISR (ROOT)
   _CanErrorResponse
   _CanRCVResponse
   _CanXmitResponse
     _ES_Timer_InitTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      D      39       4       35.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     32      49       1       77.7%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      82       9        0.0%
DATA                 0      0      82      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Nov 14 23:40:53 2016

                   ??__HW_Timer_Init 0018                  ES_CheckUserEvents@i 0016  
                __HW_Timer_Init@Rate 0016                  ___wmul@multiplicand 001E  
                                l302 096A                                  l420 0B06  
                                l417 0ABC                                  l429 0DC0  
                                l398 0BB4                __end_of_ES_Initialize 0698  
                                _GIE 007F97                                  _ISR 0008  
                       ___awmod@sign 001B              __end_of_Check4Keystroke 0DEE  
                                prod 000FF3                                  tosl 000FFD  
                                wreg 000FE8               ES_EnQueueFIFO@SaveCrit 002A  
            ES_EnQueueFIFO@Event2Add 0024                    ?_ES_PostToService 002D  
                               ?_ISR 0001                         __CFG_WDT$OFF 000000  
         ES_Timer_Tick_Resp@NewEvent 0033                                 l2121 09F2  
                               l2201 09DA                                 l2131 0A14  
                               l2133 0A18                                 l2141 0A36  
                               l2125 09FE                                 l2231 056A  
                               l2145 0A44                                 l2137 0A2C  
                               l2129 0A0C                                 l2219 04C4  
                               l2165 08E8                                 l2181 0B80  
                               l2421 0610                                 l2229 0532  
                               l2335 0474                                 l2417 060C  
                               l2433 0694                                 l2409 05BE  
                               l2345 04B0                                 l2291 0CF4  
                               l2339 048C                                 l2187 0974  
                               l2363 0DA8                                 l2443 0714  
                               l2429 068E                                 l2197 09D6  
                               l2453 077A                                 l2437 069A  
                               l2461 0CA0                                 l2367 0DAE  
                               l2463 0CA6                                 l2385 0C66  
                               l2393 0B9A                                 l2449 0768  
                               l2299 0D0C                                 l2571 0936  
                               l2573 0944                                 l2567 091A  
                               l2569 0928                                 l2577 0952  
                               STR_1 035B                                 STR_2 0376  
                               STR_3 038E                                 STR_4 03A5  
                               _LATA 000F89                                 _LATB 000F8A  
                               u1618 0BE4                                 u1538 051A  
                               u1619 0BFC                                 u1484 0992  
                               u1485 098C                                 _PIE1 000F9D  
                               u1748 0668                                 u1749 0684  
                               _PEIE 007F96                                 u1788 073E  
                               u1789 0756                                 _SCS1 007E99  
                   ?_CanXmitResponse 0001                   ??_ES_PostToService 0030  
                               _main 08EC                          ?_ES_DeQueue 0022  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               indf1 000FE7                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 004A                        main@ErrorType 0098  
                               pclat 000FFA                                 prodh 000FF4  
                               prodl 000FF3                                 start 0016  
                      __CFG_MCLRE$ON 000000         InitCan_XmitService@ThisEvent 008C  
                       ___param_bank 000010              __end_of_InitCanHardware 0B1E  
                              ??_ISR 0006                   ES_Run@HighestPrior 0097  
                              ?_main 0001                __end_of_ES_Timer_Init 0DD6  
                    __end_of___awmod 0A4E                      __end_of___lbmod 0D14  
                              _T1CON 000FCD                           _DistList00 0359  
                              _LATA0 007C48                                _LATA1 007C49  
                              _LATA2 007C4A                                _LATA3 007C4B  
                              _LATB2 007C52                                _IRCF0 007E9C  
                              _IRCF1 007E9D                                _IRCF2 007E9E  
                              i2l155 07FC                                _IRXIE 007D1F  
                              _IRXIF 007D27                                _PORTA 000F80  
                              _PORTB 000F81                        __CFG_PWRT$OFF 000000  
                              _Ready 003C                                _putch 0DEE  
                     __CFG_BOREN$OFF 000000                                pclath 000FFA  
                              tablat 000FF5                                status 000FD8  
                    __initialization 0D14               ES_GetMSBitSet@LoopCntr 001F  
         __end_of_ES_CheckUserEvents 0C06                         __end_of_main 096C  
                  ES_Timer_Init@Rate 0018                     __end_of_InitPins 0C96  
                __end_of_EventQueues 0357                               ??_main 0033  
                      __activetblptr 000002                  __size_of_ES_DeQueue 00FE  
                    _Nybble2MSBitNum 0341     __end_of__HW_Process_Pending_Ints 0DB8  
                   ?_Check4Keystroke 0001                    ?_CanErrorResponse 0001  
                             _ADCON1 000FC1                     __end_of_XmitData 0CEA  
                             _CCP1IF 007CF2                               _CANCON 000F6F  
                             _CCPR1H 000FBF                               _CCPR1L 000FBE  
                 ??_CanErrorResponse 0001                           _MyPriority 0045  
                             ?_putch 0001                     ??_ES_GetMSBitSet 0018  
                             i2l2031 07E8                               i2l2025 07DE  
                             i2l2037 07F2                               _INTCON 000FF2  
                             _RXB0IE 007D18                               _RXB0IF 007D20  
                             _ES_Run 0698                               _TXB0D0 000F46  
                             _TXB0IE 007D1A                               _TXB0IF 007D22  
                   ??_CanRCVResponse 0001                     ??_ES_EnQueueFIFO 0027  
                     _Timer2PostFunc 0321                               _Queue0 0080  
                     _SysTickCounter 003E                               ___wmul 0D3A  
                          ??___awmod 001A                            ??___lbmod 0017  
                   ?_InitCanHardware 0001                  _PostCan_XmitService 0D7E  
        __size_of_ES_Timer_InitTimer 006A                               clear_0 0D1A  
                             clear_1 0D26                      ___awmod@divisor 0018  
          ES_Timer_InitTimer@NewTime 0001                      ___awmod@counter 001A  
                             _printf 0C96                          ISR@LastTime 0038  
             ES_InitQueue@pThisQueue 0019                         __mediumconst 0000  
                        ISR@NextTime 003A                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                             putch@c 0001          __size_of_ES_Timer_Tick_Resp 00F8  
               ES_DeQueue@pThisQueue 002A              ES_GetMSBitSet@Val2Check 0016  
               ?_PostCan_XmitService 008C          InitCan_XmitService@Priority 008F  
                    ___lbmod@divisor 0016                           __accesstop 0060  
            __end_of__initialization 0D2C               __end_of_Timer2PostFunc 0341  
                    ___lbmod@counter 0018                      __CFG_PBADEN$OFF 000000  
                      ___rparam_used 000001                          _EventQueues 0354  
                     __pcstackCOMRAM 0001                        ?_ES_InitQueue 0016  
            __end_of_Nybble2MSBitNum 0350                        __end_of_putch 0DF0  
                    _TMR_ActiveFlags 0040              ES_GetMSBitSet@ReturnVal 001D  
        __end_of_InitCan_XmitService 0C6A                       _TMR_TimerArray 0060  
              ??_PostCan_XmitService 0033             ES_EnQueueFIFO@pThisQueue 002B  
                            ??_putch 0016             __HW_Process_Pending_Ints 0DA6  
                         __pbssBANK0 0060                            ?_InitPins 0001  
                            ?_ES_Run 0001                         ??_ES_DeQueue 0026  
        __size_of_RunCan_XmitService 0042            __size_of_ES_PostToService 0066  
                     ??_ES_InitQueue 0019                              ?___wmul 001C  
                            _CCP1CON 000FBD                            ?_XmitData 0001  
                            _ECANCON 000F77                              ?_printf 0016  
            __size_of_ToggleDebugLED 0010                   __end_of_ES_DeQueue 04B4  
                            _TXB0DLC 000F45                           ??_InitPins 0016  
                    __size_of_ES_Run 00E8               __size_of_ES_Initialize 00EC  
                            __Hparam 0000                              __Lparam 0000  
           __size_of_CanXmitResponse 0014                              ___awmod 09DE  
                            ___lbmod 0CEA                      __size_of___wmul 0026  
                       __psmallconst 0300                           ??_XmitData 0016  
              ES_Timer_InitTimer@Num 0005                              __pcinit 0D14  
                            __ramtop 0300                              __ptext0 08EC  
                            __ptext1 0C96                              __ptext2 0DEE  
                            __ptext3 0698                              __ptext4 0DA6  
                            __ptext5 04B4                              __ptext6 0D7E  
                            __ptext7 096C                              __ptext8 0B84  
                            __ptext9 0CC0                      __size_of_printf 002A  
                       __size_of_ISR 0830              __size_of__HW_Timer_Init 001E  
                   ___awmod@dividend 0016                   _ES_CheckUserEvents 0BC6  
                    ES_Run@ThisEvent 0047                       __pintcode_body 0780  
               end_of_initialization 0D2C                  ?_ES_CheckUserEvents 0001  
                      __Lmediumconst 0000                              int_func 0780  
       ES_PostToService@WhichService 0032               __size_of_ES_Timer_Init 000E  
          __size_of_CanErrorResponse 000C                              printf@c 001A  
                            printf@f 0016                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                 ??_ES_CheckUserEvents 0016  
                      _ES_Initialize 05AC                     ___lbmod@dividend 0017  
                          _TRISAbits 000F92                            _TRISBbits 000F93  
               __end_of_ES_EventList 0359                 __end_of_ES_InitQueue 0C3C  
                     ES_Initialize@i 0092                          ___lbmod@rem 0019  
           __size_of_Check4Keystroke 0004                       __end_of_ES_Run 0780  
        RunCan_XmitService@ThisEvent 0017                   __end_of_DistList00 035B  
                   _ES_PostToService 0B1E           __end_of_ES_Timer_InitTimer 0AB8  
               __end_of_ServDescList 0354                       __end_of___wmul 0D60  
                  ??_CanXmitResponse 0006                       _ToggleDebugLED 0DB8  
                     ?_ES_Initialize 0090           ??__HW_Process_Pending_Ints 0033  
                      _ES_Timer_Init 0DC8                       __end_of_printf 0CC0  
           __size_of_InitCanHardware 0066           __end_of_ES_Timer_Tick_Resp 05AC  
                start_initialization 0D14                          __end_of_ISR 0838  
                        _CANSTATbits 000F6E                             ??_ES_Run 0093  
                   __CFG_OSC$IRCIO67 000000                            _TickCount 0046  
                  __size_of_InitPins 002C              __size_of_ES_GetMSBitSet 0072  
                           ??___wmul 0020               __end_of_ToggleDebugLED 0DC8  
            __size_of_CanRCVResponse 0008              __size_of_ES_EnQueueFIFO 00B4  
                           ??_printf 0018                       ?_ES_Timer_Init 0018  
                  __size_of_XmitData 002A                       __HW_Timer_Init 0D60  
        __end_of_PostCan_XmitService 0D92                          __pbssCOMRAM 0033  
                      __pcstackBANK0 008C                          _BRGCON1bits 000F70  
                        _BRGCON2bits 000F71                   ES_InitQueue@pBlock 0016  
                        _BRGCON3bits 000F72         __size_of_InitCan_XmitService 002E  
         __end_of_RunCan_XmitService 0BC6                        __PRIMASK_temp 0042  
                   _CanErrorResponse 0DD6                    ??_Check4Keystroke 0016  
                          __pintcode 0008                             ?___awmod 0016  
                           ?___lbmod 0016                      ?_ToggleDebugLED 0001  
                    ??_ES_Initialize 0033             ES_PostToService@TheEvent 002D  
             __end_of__HW_Timer_Init 0D7E                          __smallconst 0300  
              __size_of_ES_InitQueue 0036         PostCan_XmitService@ThisEvent 008C  
                     __size_of_putch 0002                 ES_Initialize@NewRate 0090  
                  ??_InitCanHardware 0016            ES_GetMSBitSet@Nybble2Test 001E  
                     ___wmul@product 0020                             _RXF0SIDH 000F00  
                       _ES_EventList 0357                             _RXF0SIDL 000F01  
                           _TXB0SIDH 000F41                             _TXB0SIDL 000F42  
                       _ES_InitQueue 0C06                             _RXM0SIDH 000F18  
                           _RXM0SIDL 000F19                      ??_ES_Timer_Init 001A  
                    ?__HW_Timer_Init 0016                    ___wmul@multiplier 001C  
                 ES_DeQueue@SaveCrit 0028                 ES_EnQueueFIFO@pBlock 0022  
           __end_of_ES_PostToService 0B84                       _BitNum2SetMask 0301  
                       _ServDescList 0350                             _InitPins 0C6A  
                    _CanXmitResponse 0D92                             __Hrparam 0000  
                     _ES_GetMSBitSet 096C                             __Lrparam 0000  
                   __size_of___awmod 0070                     __size_of___lbmod 002A  
                           _XmitData 0CC0          __size_of_ES_CheckUserEvents 0040  
                     _CanRCVResponse 0DE2                       _ES_EnQueueFIFO 0838  
                   XmitData@DataByte 0016                   _ES_Timer_InitTimer 0A4E  
             __end_of_BitNum2SetMask 0321                             __ptext10 0DB8  
                           __ptext11 0C6A                             __ptext20 0838  
                           __ptext12 0AB8                             __ptext21 0D3A  
                           __ptext13 03B6                             __ptext30 0DD6  
                           __ptext22 09DE                             __ptext14 0CEA  
                           __ptext31 0000                             __ptext23 0DC8  
                           __ptext15 0BC6                             __ptext24 0D60  
                           __ptext16 0DEA                             __ptext25 0C06  
                           __ptext17 05AC                             __ptext18 0C3C  
                           __ptext27 0D92                             __ptext19 0B1E  
                           __ptext28 0A4E                             __ptext29 0DE2  
  ES_Timer_Tick_Resp@NeedsProcessing 0036                  ?_ES_Timer_InitTimer 0001  
                      __size_of_main 0080                   _ES_Timer_Tick_Resp 04B4  
             __end_of_ES_GetMSBitSet 09DE                  ?_ES_Timer_Tick_Resp 0001  
             __end_of_CanRCVResponse 0DEA               __end_of_ES_EnQueueFIFO 08EC  
                           int$flags 004A                  _InitCan_XmitService 0C3C  
               ??_ES_Timer_InitTimer 0003                    ES_DeQueue@NumLeft 0029  
                        _RXB0CONbits 000F60             __end_of_CanErrorResponse 0DE2  
               ??_ES_Timer_Tick_Resp 008F        RunCan_XmitService@ReturnEvent 001A  
               ?_InitCan_XmitService 0001              __end_of_CanXmitResponse 0DA6  
                    _Check4Keystroke 0DEA                             intlevel2 0000  
                         _ES_DeQueue 03B6    __size_of__HW_Process_Pending_Ints 0012  
          ?__HW_Process_Pending_Ints 0001                          _TXB0CONbits 000F40  
                    ?_ES_GetMSBitSet 0016                     ??_ToggleDebugLED 0016  
ES_Timer_Tick_Resp@NextTimer2Process 0044                   _RunCan_XmitService 0B84  
                           printf@ap 0018                      ?_CanRCVResponse 0001  
                    ?_ES_EnQueueFIFO 0022                     ES_DeQueue@pBlock 0022  
                ?_RunCan_XmitService 0017                      _InitCanHardware 0AB8  
             ES_DeQueue@pReturnEvent 0024                ES_InitQueue@BlockSize 0018  
              ??_InitCan_XmitService 0033         __size_of_PostCan_XmitService 0014  
               ??_RunCan_XmitService 001A  
